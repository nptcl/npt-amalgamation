/*
 *  npt -- ANSI Common Lisp Programming Language.
 *    https://github.com/nptcl/npt
 *    https://github.com/nptcl/npt-amalgamation
 *
 *  File: lisp_file.h
 */
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-function"
#endif
#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"
#endif

#define LISP_AMALGAMATION
#ifdef __cplusplus
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS
#endif
#ifndef __STDC_CONSTANT_MACROS
#define __STDC_CONSTANT_MACROS
#endif
#endif

#include <errno.h>
#include <float.h>
#include <inttypes.h>
#include <limits.h>
#include <math.h>
#include <setjmp.h>
#include <signal.h>
#include <stdarg.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>


/************************************************************
 *  define_compile.h
 ************************************************************/
#ifdef LISP_DEVELOP_NOPREFIX
#define _n(x) x
#else
#define _n(x) lispd_##x
#endif


/************************************************************
 *  version.h
 ************************************************************/
#define LISPNAME         "NPT"
#define LISPNAMEW       L"NPT"
#define LispName         "Npt"
#define LispNameW       L"Npt"
#define Lispname         "npt"
#define LispnameW       L"npt"
#define LISPNAMESIZE    3

#define LISP_REVISION   "2022/06/27-19:38:13"
#define LISP_VERSION_A  1
#define LISP_VERSION_B  1
#define LISP_VERSION_C  2


/************************************************************
 *  define.h
 ************************************************************/
#ifndef __LISP_DEFINE_HEADER__
#define __LISP_DEFINE_HEADER__

/*
 *  autoconf
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#undef PACKAGE
#undef PACKAGE_BUGREPORT
#undef PACKAGE_NAME
#undef PACKAGE_STRING
#undef PACKAGE_TARNAME
#undef PACKAGE_URL
#undef PACKAGE_VERSION
#undef VERSION
#endif


/*
 *  define.h
 */
#ifdef __cplusplus
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS
#endif
#ifndef __STDC_CONSTANT_MACROS
#define __STDC_CONSTANT_MACROS
#endif
#endif


/*
 *  Force disable THREAD
 */
#undef LISP_THREAD


/*
 *  Mode
 */
#if defined(LISP_MODE_CORE)
#undef LISP_MODE_STANDALONE
#undef LISP_MODE_DEGRADE
#define LISP_MODE_STRING "core"

#elif defined(LISP_MODE_STANDALONE)
#undef LISP_MODE_CORE
#undef LISP_MODE_DEGRADE
#define LISP_MODE_STRING "standalone"

#elif defined(LISP_MODE_DEGRADE)
#undef LISP_MODE_CORE
#undef LISP_MODE_STANDALONE
#define LISP_MODE_STRING "degrade"

#else
#undef LISP_MODE_CORE
#define LISP_MODE_STANDALONE
#undef LISP_MODE_DEGRADE
#define LISP_MODE_STRING "standalone"
#endif


/*
 *  Version
 */
#ifndef LISP_REVISION
#define LISP_REVISION "0"
#endif

#ifndef LISP_VERSION_A
#define LISP_VERSION_A 0
#endif
#ifndef LISP_VERSION_B
#define LISP_VERSION_B 0
#endif
#ifndef LISP_VERSION_C
#define LISP_VERSION_C 0
#endif


/*
 *  Pointer size
 *    LISP_ARCH_64BIT
 *    LISP_ARCH_32BIT
 */
#undef LISP_ARCH_64BIT
#undef LISP_ARCH_32BIT

#if (SIZEOF_VOID_P == 8)
#define LISP_ARCH_MODE "64bit"
#define LISP_ARCH_64BIT
#elif (SIZEOF_VOID_P == 4)
#define LISP_ARCH_MODE "32bit"
#define LISP_ARCH_32BIT
#elif (0xFFFFFFFFUL < SIZE_MAX)
#define LISP_ARCH_MODE "64bit"
#define LISP_ARCH_64BIT
#else
#define LISP_ARCH_MODE "32bit"
#define LISP_ARCH_32BIT
#endif


/*
 *  Select architecture
 */
#if defined(LISP_ANSIC)
/* ANSI C */
#define LISP_MODE "ANSI-C"
#undef LISP_FREEBSD
#undef LISP_LINUX
#undef LISP_UNIX
#undef LISP_WINDOWS
#ifdef LISP_THREAD
#error Arch error, LISP_ANSIC do not allow LISP_THREAD.
#endif
#define LISP_THREAD_REMOVE

#elif defined(LISP_FREEBSD)
/* FreeBSD */
#define LISP_MODE "FreeBSD"
#define LISP_UNIX
#undef LISP_ANSIC
#undef LISP_LINUX
#undef LISP_WINDOWS
#undef LISP_ANSIC_WINDOWS
#ifdef LISP_THREAD
#define LISP_THREAD_FREEBSD
#endif

#elif defined(LISP_LINUX)
/* Linux */
#define LISP_MODE "Linux"
#define LISP_UNIX
#undef LISP_ANSIC
#undef LISP_FREEBSD
#undef LISP_WINDOWS
#undef LISP_ANSIC_WINDOWS
#ifdef LISP_THREAD
#define LISP_THREAD_LINUX
#endif

#elif defined(LISP_WINDOWS)
/* Windows */
#define LISP_MODE "Windows"
#undef LISP_ANSIC
#undef LISP_FREEBSD
#undef LISP_LINUX
#undef LISP_UNIX
#undef LISP_ANSIC_WINDOWS
#ifdef LISP_THREAD
#define LISP_THREAD_WINDOWS
#endif

#else
/* ANSI C [default] */
#define LISP_MODE "ANSI-C"
#define LISP_ANSIC
#undef LISP_FREEBSD
#undef LISP_LINUX
#undef LISP_UNIX
#undef LISP_WINDOWS
#undef LISP_ANSIC_WINDOWS
#ifdef LISP_THREAD
#error Arch error
#endif
#define LISP_THREAD_REMOVE
#endif

#if defined(LISP_ANSIC) && defined(LISP_ANSIC_WINDOWS)
#define LISP_MODE "ANSI-C [Windows]"
#endif


/* Windows */
#if defined(LISP_WINDOWS) || defined(LISP_ANSIC_WINDOWS)
#define LISP_WINDOWS_OR_ANSI
#else
#undef LISP_WINDOWS_OR_ANSI
#endif

#ifdef LISP_WINDOWS_OR_ANSI
#if defined(LISP_CONSOLE)
#undef LISP_WINMAIN
#elif defined(LISP_WINMAIN)
#undef LISP_CONSOLE
#else
#define LISP_CONSOLE
#undef LISP_WINMAIN
#endif

#if defined(LISP_CYGWIN)
#undef LISP_NO_CYGWIN
#elif defined(LISP_NO_CYGWIN)
#undef LISP_CYGWIN
#elif defined(__CYGWIN__)
#define LISP_CYGWIN
#undef LISP_NO_CYGWIN
#else
#undef LISP_CYGWIN
#define LISP_NO_CYGWIN
#endif

#else
#undef LISP_CONSOLE
#undef LISP_WINMAIN
#undef LISP_CYGWIN
#undef LISP_NO_CYGWIN
#endif

#if defined(LISP_WINMAIN) && defined(LISP_CYGWIN)
#error Platform cygwin must use a main function (not WinMain).
#endif

#if defined(LISP_WINDOWS_OR_ANSI) || defined(LISP_NO_CYGWIN)
#define LISP_WINDOWS_WIDE
#else
#undef LISP_WINDOWS_WIDE
#endif


/*
 *  Lisp mode
 *    LISP_64BIT  [default]
 *    LISP_32BIT
 */
#if defined(LISP_64BIT)
#undef LISP_32BIT
#elif defined(LISP_32BIT)
#undef LISP_64BIT
#else
#if defined(LISP_ARCH_64BIT)
#define LISP_64BIT
#else
#define LISP_32BIT
#endif
#endif

#ifdef LISP_64BIT
#define LISP_FIXNUM_MODE "64bit"
#else
#define LISP_FIXNUM_MODE "32bit"
#endif

#if defined(LISP_64BIT) && defined(LISP_ARCH_32BIT)
#error arch error.
#endif


/*
 *  Thread mode
 *    LISP_THREAD_SINGLE      -> add LISP_THREAD_DISABLE  [default]
 *    LISP_THREAD_REMOVE      -> add LISP_THREAD_DISABLE
 *    LISP_THREAD_FREEBSD     -> add LISP_THREAD_UNIX
 *    LISP_THREAD_LINUX       -> add LISP_THREAD_UNIX
 *    LISP_THREAD_WINDOWS     -> use Vista module
 */
#undef LISP_THREAD_ENABLE
#undef LISP_THREAD_DISABLE

/* single thread */
#if defined(LISP_THREAD_SINGLE)
#define LISP_THREAD_MODE     "single"
#define LISP_THREAD_DISABLE
#undef LISP_THREAD_REMOVE
#undef LISP_THREAD_UNIX
#undef LISP_THREAD_FREEBSD
#undef LISP_THREAD_LINUX
#undef LISP_THREAD_WINDOWS

/* single thread [remove] */
#elif defined(LISP_THREAD_REMOVE)
#define LISP_THREAD_MODE     "remove"
#define LISP_THREAD_DISABLE
#undef LISP_THREAD_SINGLE
#undef LISP_THREAD_UNIX
#undef LISP_THREAD_FREEBSD
#undef LISP_THREAD_LINUX
#undef LISP_THREAD_WINDOWS

/* FreeBSD */
#elif defined(LISP_THREAD_FREEBSD)
#define LISP_THREAD_MODE     "FreeBSD"
#define LISP_THREAD_UNIX
#undef LISP_THREAD_SINGLE
#undef LISP_THREAD_REMOVE
#undef LISP_THREAD_LINUX
#undef LISP_THREAD_WINDOWS

/* FreeBSD */
#elif defined(LISP_THREAD_UNIX)
#define LISP_THREAD_MODE     "FreeBSD"
#define LISP_THREAD_FREEBSD
#undef LISP_THREAD_SINGLE
#undef LISP_THREAD_REMOVE
#undef LISP_THREAD_LINUX
#undef LISP_THREAD_WINDOWS

/* Linux */
#elif defined(LISP_THREAD_LINUX)
#define LISP_THREAD_MODE     "Linux"
#define LISP_THREAD_UNIX
#undef LISP_THREAD_SINGLE
#undef LISP_THREAD_REMOVE
#undef LISP_THREAD_FREEBSD
#undef LISP_THREAD_WINDOWS

/* Windows */
#elif defined(LISP_THREAD_WINDOWS)
#undef LISP_THREAD_SINGLE
#undef LISP_THREAD_REMOVE
#undef LISP_THREAD_UNIX
#undef LISP_THREAD_FREEBSD
#undef LISP_THREAD_LINUX
#define LISP_THREAD_MODE     "Windows"

/* single thread */
#else
#define LISP_THREAD_MODE     "remove"
#define LISP_THREAD_DISABLE
#define LISP_THREAD_REMOVE
#undef LISP_THREAD_SINGLE
#undef LISP_THREAD_UNIX
#undef LISP_THREAD_FREEBSD
#undef LISP_THREAD_LINUX
#undef LISP_THREAD_WINDOWS
#endif

/* thread enable */
#ifndef LISP_THREAD_DISABLE
#define LISP_THREAD_ENABLE
#endif

/* mode string */
#ifdef LISP_DEBUG
#define LISP_DEBUG_STRING "debug"
#else
#define LISP_DEBUG_STRING "release"
#endif

#ifdef LISP_DEGRADE
#define LISP_DEGRADE_STRING "degrade"
#else
#define LISP_DEGRADE_STRING "release"
#endif

/* memory size */
#ifndef LISP_MEMORY_HEAP
#ifdef LISP_DEBUG
#define LISP_MEMORY_HEAP	(64UL * 1024UL * 1024UL);
#else
#define LISP_MEMORY_HEAP	(1024UL * 1024UL * 1024UL);
#endif
#endif

#ifndef LISP_MEMORY_LOCAL
#ifdef LISP_DEBUG
#define LISP_MEMORY_LOCAL	(16UL * 1024UL * 1024UL);
#else
#define LISP_MEMORY_LOCAL	(256UL * 1024UL * 1024UL);
#endif
#endif

/* memory management */
#if defined(LISP_MEMORY_INIT)
#undef LISP_MEMORY_UNINIT
#elif defined(LISP_MEMORY_UNINIT)
#undef LISP_MEMORY_INIT
#elif defined(LISP_DEBUG)
#define LISP_MEMORY_INIT
#undef LISP_MEMORY_UNINIT
#else
#undef LISP_MEMORY_INIT
#define LISP_MEMORY_UNINIT
#endif

/* garbage collection */
#ifdef LISP_DEBUG
#ifndef LISP_DEBUG_MEMORY
#define LISP_DEBUG_MEMORY
#endif
#endif
/* #define LISP_DEBUG_FORCE_GC 1 */

/* stream */
#ifndef LISP_STREAM_EXTEND
#define LISP_STREAM_EXTEND	3
#endif

/* pointer_table */
#ifndef LISP_POINTER_EXTEND
#define LISP_POINTER_EXTEND	32
#endif

/* long float */
#if defined(LISP_FLOAT_LONG_64)
#define LISP_FLOAT_LONG			64
#undef LISP_FLOAT_LONG_80
#undef LISP_FLOAT_LONG_128
#elif defined(LISP_FLOAT_LONG_80)
#define LISP_FLOAT_LONG			80
#undef LISP_FLOAT_LONG_64
#undef LISP_FLOAT_LONG_128
#elif defined(LISP_FLOAT_LONG_128)
#define LISP_FLOAT_LONG			128
#undef LISP_FLOAT_LONG_64
#undef LISP_FLOAT_LONG_80
#else
#if (LDBL_MANT_DIG == DBL_MANT_DIG)
/* Visual Studio
 *   long double == double
 */
#define LISP_FLOAT_LONG			64
#define LISP_FLOAT_LONG_64
#undef LISP_FLOAT_LONG_80
#undef LISP_FLOAT_LONG_128
#elif (LDBL_MANT_DIG == 64)
/* Intel x86
 *   long double (Intel 80bit) fraction: 63+0 bit (64bit)
 */
#define LISP_FLOAT_LONG			80
#undef LISP_FLOAT_LONG_64
#define LISP_FLOAT_LONG_80
#undef LISP_FLOAT_LONG_128
#else
/* IEEE745
 * long double (IEEE-754 binary128) fraction: 112+1 bit
 */
#define LISP_FLOAT_LONG			128
#undef LISP_FLOAT_LONG_64
#undef LISP_FLOAT_LONG_80
#define LISP_FLOAT_LONG_128
#endif
#endif

/* float (32bit) fraction: 23+1 bit */
#define LISP_FLOAT_SINGLE_FRACTION		FLT_MANT_DIG
/* double (64bit) fraction: 52+1 bit */
#define LISP_FLOAT_DOUBLE_FRACTION		DBL_MANT_DIG
/* long double */
#define LISP_FLOAT_LONG_FRACTION		LDBL_MANT_DIG

/* readline editline */
#if defined(LISP_TERME)
#define LISP_PROMPT_TERME
#undef LISP_EDITLINE
#undef LISP_READLINE
#undef LISP_STDIN

#elif defined(LISP_EDITLINE)
#define LISP_PROMPT_EDITLINE
#undef LISP_TERME
#undef LISP_READLINE
#undef LISP_STDIN

#elif defined(LISP_READLINE)
#define LISP_PROMPT_READLINE
#undef LISP_TERME
#undef LISP_EDITLINE
#undef LISP_STDIN

#elif defined(LISP_STDIN)
#define LISP_PROMPT_DISABLE
#undef LISP_TERME
#undef LISP_EDITLINE
#undef LISP_READLINE

#elif defined(LISP_FREEBSD) || defined(LISP_LINUX)
#define LISP_TERME
#define LISP_PROMPT_TERME
#undef LISP_EDITLINE
#undef LISP_READLINE
#undef LISP_STDIN

#else
#define LISP_PROMPT_DISABLE
#define LISP_STDIN
#undef LISP_TERME
#undef LISP_EDITLINE
#undef LISP_READLINE
#endif

#if defined(LISP_PROMPT_TERME)
#define LISP_PROMPT_STRING "terme"
#undef LISP_PROMPT_DISABLE
#undef LISP_PROMPT_READLINE
#undef LISP_PROMPT_EDITLINE

#elif defined(LISP_PROMPT_DISABLE)
#define LISP_PROMPT_STRING "stdin"
#undef LISP_PROMPT_TERME
#undef LISP_PROMPT_READLINE
#undef LISP_PROMPT_EDITLINE

#elif defined(LISP_PROMPT_READLINE)
#define LISP_PROMPT_STRING "readline"
#undef LISP_PROMPT_DISABLE
#undef LISP_PROMPT_TERME
#undef LISP_PROMPT_EDITLINE

#elif defined(LISP_PROMPT_EDITLINE)
#define LISP_PROMPT_STRING "editline"
#undef LISP_PROMPT_DISABLE
#undef LISP_PROMPT_TERME
#undef LISP_PROMPT_READLINE

#else
#define LISP_PROMPT_DISABLE
#define LISP_PROMPT_STRING "stdin"
#undef LISP_PROMPT_TERME
#undef LISP_PROMPT_READLINE
#undef LISP_PROMPT_EDITLINE
#endif

/* terme */
#ifdef LISP_TERME

/* code */
#if defined(LISP_FREEBSD) || defined(LISP_LINUX)
#define LISP_TERME_UNIX
#else
#undef LISP_TERME_UNIX
#endif

#ifdef LISP_WINDOWS
#define LISP_TERME_WINDOWS
#else
#undef LISP_TERME_WINDOWS
#endif

/* bright / dark */
#if defined(LISP_TERME_BRIGHT)
#undef LISP_TERME_DARK
#define LISP_TERME_COLOR1	"bright"
#elif defined(LISP_TERME_DARK)
#undef LISP_TERME_BRIGHT
#define LISP_TERME_COLOR1	"dark"
#else
#define LISP_TERME_BRIGHT
#define LISP_TERME_COLOR1	"bright"
#endif

/* monochrome / color */
#if defined(LISP_TERME_COLOR)
#undef LISP_TERME_MONOCHROME
#define LISP_TERME_COLOR2	"on"
#elif defined(LISP_TERME_MONOCHROME)
#undef LISP_TERME_COLOR
#define LISP_TERME_COLOR2	"off"
#else
#define LISP_TERME_COLOR
#define LISP_TERME_COLOR2	"on"
#endif
#endif

/* show-window [Windows] */
#ifdef LISP_TERME_WINDOWS
#if defined(LISP_TERME_DEFAULT_WINDOW)
#undef LISP_TERME_HIDE_WINDOW
#elif defined(LISP_TERME_HIDE_WINDOW)
#undef LISP_TERME_DEFAULT_WINDOW
#else
#define LISP_TERME_DEFAULT_WINDOW
#endif
#endif

/* Complex math library */
#undef LISP_COMPLEX_INACCURACY
/* Visual C++ */
#if defined(LISP_COMPLEX_WINDOWS)
#undef LISP_COMPLEX_CPLUSPLUS
#undef LISP_COMPLEX_C99
#define LISP_COMPLEX_INACCURACY
/* C++ */
#elif defined(LISP_COMPLEX_CPLUSPLUS)
#undef LISP_COMPLEX_WINDOWS
#undef LISP_COMPLEX_C99
#ifdef __clang__
#define LISP_COMPLEX_INACCURACY
#endif
/* c99 */
#elif defined(LISP_COMPLEX_C99)
#undef LISP_COMPLEX_WINDOWS
#undef LISP_COMPLEX_CPLUSPLUS
/* C++ */
#elif defined(__cplusplus)
#undef LISP_COMPLEX_WINDOWS
#define LISP_COMPLEX_CPLUSPLUS
#undef LISP_COMPLEX_C99
#ifdef __clang__
#define LISP_COMPLEX_INACCURACY
#endif
/* Visual C++ */
#elif defined(_MSC_VER)
#define LISP_COMPLEX_WINDOWS
#undef LISP_COMPLEX_CPLUSPLUS
#undef LISP_COMPLEX_C99
#define LISP_COMPLEX_INACCURACY
/* c99 */
#else
#undef LISP_COMPLEX_WINDOWS
#undef LISP_COMPLEX_CPLUSPLUS
#define LISP_COMPLEX_C99
#endif

/* complex-long */
#if defined(LISP_COMPLEX_LONG)
#undef LISP_COMPLEX_DOUBLE
#elif defined(LISP_COMPLEX_DOUBLE)
#undef LISP_COMPLEX_LONG
#elif defined(LISP_FREEBSD)
#define LISP_COMPLEX_DOUBLE
#elif defined(__FreeBSD__)
#define LISP_COMPLEX_DOUBLE
#else
#define LISP_COMPLEX_LONG
#endif

/* windows */
#ifdef _MSC_VER
#pragma warning(disable:4996)
#endif

/* main */
#if defined(LISP_WINMAIN) || defined(LISP_WINDOWS_WIDE)
#define LISP_WINMAIN_WIDE
#else
#undef LISP_WINMAIN_WIDE
#endif

/* setjmp */
#ifdef __cplusplus
#ifdef LISP_ABORT_SETJMP
#undef LISP_ABORT_EXCEPTION
#else
#undef LISP_ABORT_SETJMP
#undef LISP_ABORT_EXCEPTION
#define LISP_ABORT_EXCEPTION
#endif
#else
#undef LISP_ABORT_SETJMP
#undef LISP_ABORT_EXCEPTION
#define LISP_ABORT_SETJMP
#endif

/* dynamic-link */
#ifdef LISP_WINDOWS
#ifndef LISP_DYNAMIC_LINK
#define LISP_DYNAMIC_LINK
#endif
#endif

/* end of header file */
#endif


/************************************************************
 *  typedef_basic.h
 ************************************************************/
#ifndef __LISP_TYPEDEF_BASIC_HEADER__
#define __LISP_TYPEDEF_BASIC_HEADER__


typedef unsigned char byte;
typedef uint16_t byte16;
typedef uint32_t byte32;
typedef uint64_t byte64;
typedef float short_float;
typedef float single_float;
typedef double double_float;
typedef long double long_float;
typedef uint32_t unicode;
typedef byte *pbyte;
typedef byte *addr;

#endif


/************************************************************
 *  typedef_integer.h
 ************************************************************/
#ifndef __LISP_TYPEDEF_INTEGER_HEADER__
#define __LISP_TYPEDEF_INTEGER_HEADER__


#ifdef LISP_64BIT
#define LISP_INFO           "64bit-code"
#define LISP_INTEGER_BIT	64
#define LISP_INTEGER_MASK	UINT64_MAX
#define FIXNUM_MAX			INT64_MAX
#define FIXNUM_MIN			INT64_MIN
typedef int64_t fixnum;
typedef uint64_t fixed;
#define PRIdF PRId64
#define PRIuF PRIu64
#define PRIxF PRIx64
#define PRIXF PRIX64
#else
#define LISP_INFO           "32bit-code"
#define LISP_INTEGER_BIT	32
#define LISP_INTEGER_MASK	UINT32_MAX
#define FIXNUM_MAX			INT32_MAX
#define FIXNUM_MIN			INT32_MIN
typedef int32_t fixnum;
typedef uint32_t fixed;
#define PRIdF PRId32
#define PRIuF PRIu32
#define PRIxF PRIx32
#define PRIXF PRIX32
#endif

#define FIXNUM_UMIN			((fixed)FIXNUM_MIN)

#endif


/************************************************************
 *  typedef_object.h
 ************************************************************/
#ifndef __TYPEDEF_OBJECT_HEADER__
#define __TYPEDEF_OBJECT_HEADER__

enum CHARACTER_TYPE {
	CHARACTER_TYPE_EMPTY,
	CHARACTER_TYPE_STANDARD,
	CHARACTER_TYPE_BASE,
	CHARACTER_TYPE_EXTENDED,
	CHARACTER_TYPE_INVALID,
	CHARACTER_TYPE_SIZE
};

enum ARRAY_TYPE {
	ARRAY_TYPE_EMPTY,
	ARRAY_TYPE_T,             /* addr */
	ARRAY_TYPE_BIT,           /* bit */
	ARRAY_TYPE_CHARACTER,     /* base-string */
	ARRAY_TYPE_SIGNED,        /* 8, 16, 32, (64)bit signed-integer */
	ARRAY_TYPE_UNSIGNED,      /* 8, 16, 32, (64)bit unsigned-integer */
	ARRAY_TYPE_SINGLE_FLOAT,  /* 32bit float */
	ARRAY_TYPE_DOUBLE_FLOAT,  /* 64bit float */
	ARRAY_TYPE_LONG_FLOAT,    /* 64, 80, 128bit float */
	ARRAY_TYPE_SIZE
};

#endif


/************************************************************
 *  typedef_typespec.h
 ************************************************************/
#ifndef __TYPEDEF_TYPESPEC_HEADER__
#define __TYPEDEF_TYPESPEC_HEADER__

enum LISPDECL {
	LISPDECL_EMPTY,
	LISPDECL_DELAY,
	LISPDECL_INVALID,
	LISPDECL_OPTIMIZED,
	LISPDECL_SUBTYPEP,
	LISPDECL_TYPE,
	LISPDECL_CLOS,
	LISPDECL_ASTERISK,

	/* Compound-type */
	LISPDECL_AND,
	LISPDECL_OR,
	LISPDECL_EQL,
	LISPDECL_MEMBER,
	LISPDECL_MOD,
	LISPDECL_NOT,
	LISPDECL_SATISFIES,
	LISPDECL_VALUES,

	/* Extract-type */
	LISPDECL_ATOM,
	LISPDECL_LIST,
	LISPDECL_BOOLEAN,
	LISPDECL_SEQUENCE,
	LISPDECL_VECTOR,
	LISPDECL_SIMPLE_VECTOR,
	LISPDECL_BIT_VECTOR,
	LISPDECL_SIMPLE_BIT_VECTOR,
	LISPDECL_EXTENDED_CHAR,
	LISPDECL_STRING,
	LISPDECL_BASE_STRING,
	LISPDECL_SIMPLE_STRING,
	LISPDECL_SIMPLE_BASE_STRING,
	LISPDECL_SIGNED_BYTE,
	LISPDECL_UNSIGNED_BYTE,
	LISPDECL_BIT,
	LISPDECL_FIXNUM,
	LISPDECL_BIGNUM,

	/* Atomic-type */
	LISPDECL_NIL,
	LISPDECL_T,
	LISPDECL_NULL,
	LISPDECL_CONS,
	LISPDECL_HASH_TABLE,
	LISPDECL_SYMBOL,
	LISPDECL_KEYWORD,
	LISPDECL_PACKAGE,
	LISPDECL_RANDOM_STATE,
	LISPDECL_READTABLE,
	LISPDECL_FUNCTION,
	LISPDECL_COMPILED_FUNCTION,
	LISPDECL_PATHNAME,
	LISPDECL_LOGICAL_PATHNAME,
	LISPDECL_ARRAY,
	LISPDECL_SIMPLE_ARRAY,
	LISPDECL_CHARACTER,
	LISPDECL_BASE_CHAR,
	LISPDECL_STANDARD_CHAR,
	LISPDECL_NUMBER,
	LISPDECL_REAL,
	LISPDECL_RATIONAL,
	LISPDECL_RATIO,
	LISPDECL_INTEGER,
	LISPDECL_COMPLEX,
	LISPDECL_FLOAT,
	LISPDECL_SHORT_FLOAT,
	LISPDECL_SINGLE_FLOAT,
	LISPDECL_DOUBLE_FLOAT,
	LISPDECL_LONG_FLOAT,
	LISPDECL_RESTART,
	LISPDECL_ENVIRONMENT,
	LISPDECL_STREAM,
	LISPDECL_BROADCAST_STREAM,
	LISPDECL_CONCATENATED_STREAM,
	LISPDECL_ECHO_STREAM,
	LISPDECL_FILE_STREAM,
	LISPDECL_STRING_STREAM,
	LISPDECL_SYNONYM_STREAM,
	LISPDECL_TWO_WAY_STREAM,
	LISPDECL_PROMPT_STREAM,
	LISPDECL_PRETTY_STREAM,
	LISPDECL_MEMORY_STREAM,
	LISPDECL_PIPE_STREAM,
	LISPDECL_QUOTE,
	LISPDECL_BYTESPEC,
	LISPDECL_PRINT_DISPATCH,
	LISPDECL_PAPER,
	LISPDECL_EVAL,

	/* Size */
	LISPDECL_SIZE
};

typedef enum LISPDECL LispDecl;

#endif


/************************************************************
 *  typedef_value.h
 ************************************************************/
#ifndef __TYPEDEF_VALUE_HEADER__
#define __TYPEDEF_VALUE_HEADER__

enum LISPTYPE {
	LISPTYPE_NIL = 0,
	LISPTYPE_T,
	LISPTYPE_TYPE,
	LISPTYPE_CLOS,
	LISPTYPE_CONS,
	LISPTYPE_ARRAY,
	LISPTYPE_VECTOR,
	LISPTYPE_CHARACTER,
	LISPTYPE_STRING,
	LISPTYPE_HASHTABLE,
	LISPTYPE_READTABLE,
	LISPTYPE_SYMBOL,
	LISPTYPE_FIXNUM,
	LISPTYPE_BIGNUM,
	LISPTYPE_RATIO,
	LISPTYPE_SHORT_FLOAT,
	LISPTYPE_SINGLE_FLOAT,
	LISPTYPE_DOUBLE_FLOAT,
	LISPTYPE_LONG_FLOAT,
	LISPTYPE_COMPLEX,
	LISPTYPE_CONTROL,
	LISPTYPE_CODE,
	LISPTYPE_CALLNAME,
	LISPTYPE_FUNCTION,
	LISPTYPE_INDEX,
	LISPTYPE_PACKAGE,
	LISPTYPE_RANDOM_STATE,
	LISPTYPE_PATHNAME,
	LISPTYPE_STREAM,
	LISPTYPE_QUOTE,
	LISPTYPE_RESTART,
	LISPTYPE_EVAL,
	LISPTYPE_ENVIRONMENT,
	LISPTYPE_BITVECTOR,
	LISPTYPE_PRINT_DISPATCH,
	LISPTYPE_BYTESPEC,
	LISPTYPE_FORMAT,
	LISPTYPE_LOAD_TIME_VALUE,
	LISPTYPE_PAPER,
	LISPTYPE_COMPILE, /* for faslwrite */

	LISPSYSTEM_CONSTANT,
	LISPSYSTEM_FIXNUM_CACHE,
	LISPSYSTEM_CHARACTER_CACHE,
	LISPSYSTEM_BIGBUFFER,
	LISPSYSTEM_BIGCONS,
	LISPSYSTEM_BIGDATA,
	LISPSYSTEM_CHARACTER2,
	LISPSYSTEM_CHARQUEUE,
	LISPSYSTEM_CHARBIT,
	LISPSYSTEM_SYMSTACK,
	LISPSYSTEM_BITTYPE,
	LISPSYSTEM_READLABEL,
	LISPSYSTEM_READINFO,
	LISPSYSTEM_READTYPE,
	LISPSYSTEM_BITCONS,
	LISPSYSTEM_BITBUFFER,
	LISPSYSTEM_HASHITERATOR,
	LISPSYSTEM_PACKAGEITERATOR,
	LISPSYSTEM_TAGINFO,
	LISPSYSTEM_ARRAY_DIMENSION,
	LISPSYSTEM_ARRAY_GENERAL,
	LISPSYSTEM_ARRAY_SPECIALIZED,
	LISPSYSTEM_CODE,
	LISPSYSTEM_PROMPT,
	LISPSYSTEM_ENVROOT,
	LISPSYSTEM_ENVSTACK,
	LISPSYSTEM_SLOT,
	LISPSYSTEM_SLOT_VECTOR,
	LISPSYSTEM_CLOS_VALUE,
	LISPSYSTEM_GENERIC,
	LISPSYSTEM_ARGUMENT,
	LISPSYSTEM_UNICODE,
	LISPSYSTEM_TYPE_PARSE,
	LISPSYSTEM_STRUCTURE,
	LISPSYSTEM_STRUCTURE_TYPE,
	LISPSYSTEM_PRINT_TABLE,
	LISPSYSTEM_PRINT_WRITE,
	LISPSYSTEM_PRINT_CHECK,
	LISPSYSTEM_PRINT_PRETTY,
	LISPSYSTEM_EVALSTACK,
	LISPSYSTEM_GCHOLD,
	LISPSYSTEM_FORMAT_PRETTY,
	LISPSYSTEM_SLEEP,
	LISPSYSTEM_REDEFINE,
	LISPSYSTEM_HANDLER,
	LISPSYSTEM_SPECIAL,
	LISPSYSTEM_VALUES,
	LISPSYSTEM_EXECUTE,
	LISPSYSTEM_LEXICAL,
	LISPSYSTEM_CLOSURE,
	LISPSYSTEM_REFERENCE,
	LISPSYSTEM_HOLD,
	LISPSYSTEM_BUFFERING,
	LISPSYSTEM_BUFCELL,
	LISPSYSTEM_TERME,
	LISPSYSTEM_CHECK,

	LISPSYSTEM_UNBOUND = 0xFB,
	LISPSYSTEM_SPACE = 0xFC,
	LISPSYSTEM_SPACE1 = 0xFD,
	LISPSYSTEM_RESERVED = 0xFE,
	LISPSYSTEM_END = 0xFF,  /* for core file */
	LISPTYPE_SIZE
};
typedef enum LISPTYPE LispType;

enum LISPINDEX {
	LISPINDEX_NIL = 0,
	LISPINDEX_T,
	LISPINDEX_PACKAGE,
	LISPINDEX_SPECIALIZER,
	LISPINDEX_CONST,
	LISPINDEX_NAME_CHAR,
	LISPINDEX_CHAR_NAME,
	LISPINDEX_DECLARE,
	LISPINDEX_TYPETABLE,
	LISPINDEX_SIZE
};

enum EVAL_OPTIMIZE {
	EVAL_OPTIMIZE_COMPILATION = 0,
	EVAL_OPTIMIZE_DEBUG,
	EVAL_OPTIMIZE_SAFETY,
	EVAL_OPTIMIZE_SPACE,
	EVAL_OPTIMIZE_SPEED,
	EVAL_OPTIMIZE_SIZE
};

enum GcMode {
	GcMode_Off,
	GcMode_Default,
	GcMode_Partial,
	GcMode_Full
};

#endif


/************************************************************
 *  typedef.h
 ************************************************************/
#ifndef __LISP_TYPEDEF_HEADER__
#define __LISP_TYPEDEF_HEADER__


/* setjmp */
typedef void (*lisp_abort_calltype)(void);
typedef int (*lisp_equal_calltype)(addr, addr, int *);

/* code */
union CODEVALUE {
	fixnum value;
	unicode character;
	size_t index;
	addr pos;
};
typedef union CODEVALUE CodeValue;

#endif


/************************************************************
 *  arch.h
 ************************************************************/
#ifndef __ARCH_HEADER__
#define __ARCH_HEADER__


#define read_unix _n(read_unix)
#define readf_unix _n(readf_unix)
#define read_windows _n(read_windows)
#define readf_windows _n(readf_windows)
#define multisafe_size _n(multisafe_size)
#define plussafe_size _n(plussafe_size)

#define exit_arch _n(exit_arch)
#define stdout_arch _n(stdout_arch)
#define stderr_arch _n(stderr_arch)
#define getwidth_arch _n(getwidth_arch)

/* read force */
#ifdef LISP_UNIX
int read_unix(int file, void *pos, size_t size, size_t *ret);
int readf_unix(int file, void *pos, size_t size, size_t *ret);
#endif
#ifdef LISP_WINDOWS
#include <windows.h>
int read_windows(HANDLE file, void *pos, size_t size, size_t *ret);
int readf_windows(HANDLE file, void *pos, size_t size, size_t *ret);
#endif

/* safe */
int multisafe_size(size_t left, size_t right, size_t *result);
int plussafe_size(size_t a, size_t b, size_t *result);

/* arch */
void exit_arch(int code);
void stdout_arch(const char *msg);
void stderr_arch(const char *msg);
int getwidth_arch(unsigned *rx, unsigned *ry);

#endif


/************************************************************
 *  alloc.h
 ************************************************************/
#ifndef __ALLOC_HEADER__
#define __ALLOC_HEADER__


/*
 *  Constant
 */
#define PtrSize					(sizeof(void *))
#define IdxSize					(sizeof(size_t))
#define PtrSizet				((size_t)sizeof(void *))
#define IdxSizet				((size_t)sizeof(size_t))


/*
 *  Low level memory access
 */
#define ClearJmpBuf(x)			memset((x), 0, sizeoft(jmp_buf))
#define CopyJmpBuf(x,y)			memcpy((x), (y), sizeoft(jmp_buf))
#define WtType(p,v)				memcpy((p), &(v), sizeoft(v))
#define RdType(p,v)				memcpy(&(v), (p), sizeoft(v))
#define WtTypePtr(p,v)			memcpy((p), (v), sizeoft(*v))
#define RdTypePtr(p,v)			memcpy((v), (p), sizeoft(*v))
#define WtByte(p,c)				(*(addr)(p) = (c))
#define RdByte(p)				(*(addr)(p))


/*
 *  Alignment
 */
#define PointerMask             (~(uintptr_t)0)
#define Align8Mask				(PointerMask ^ 7UL)
#define Align8Cut(p)			(Align8Mask & (uintptr_t)(p))
#define Align8Out(p)            (((uintptr_t)(p)) & 7UL)
#define Align8Space(p)			((8UL - Align8Out(p)) % 8UL)
#define Align8Inplace(p)		((void *)(((uintptr_t)(p)) + Align8Space(p)))
#define Align8Front(x,y) { \
	uintptr_t __align = Align8Out(x); \
	if (__align) { \
		*(void **)(y) = (void *)(((uintptr_t)(x)) + (8UL - __align)); \
	} else { \
		*(void **)(y) = (void *)(x); \
	} \
}

#define IndexMask               (~(size_t)0)
#define Index8Mask				(IndexMask ^ 7UL)
#define AlignSize8Out(x)		(((size_t)(x)) & 7UL)
#define AlignSize8Cut(p)		(Index8Mask & (size_t)(p))
#define AlignSize8Space(x)		((8UL - AlignSize8Out(x)) % 8UL)
#define AlignSize8Inplace(x)	(((size_t)(x)) + AlignSize8Space(x))
#define AlignSize8Front(x,y) { \
	size_t __align = AlignSize8Out(x); \
	if (__align) { \
		*(y) = (x) + (8UL - __align); \
	} else { \
		*(y) = (x); \
	} \
}

#define CheckAlign8(x,y)		Check(Align8Out(x), (y))
#define CheckAlignSize8(x,y)	Check(AlignSize8Out(x), (y))


/*
 *  allocate
 */
#define sizeoft(n)              ((size_t)sizeof(n))
#define sizeofm(n,s)            (((size_t)(s)) * sizeoft(n))
#define malloctype(n)           ((n *)malloc(sizeoft(n)))
#define mallocsize(n,s)         ((n *)malloc(sizeofm(n, (s))))
#define reallocsize(p,n,s)      ((n *)realloc((p), sizeofm(n, (s))))
#define clearmemory(n,s)		memset((void *)(n), 0, (size_t)(s))
#define clearpoint(n)			clearmemory((n), sizeof(*n))
#define cleartype(n)			clearmemory(&(n), sizeof(n))
#define clearsize(n,s)			clearmemory((n), sizeofm(n[0], (s)))
#define aamemory(n,s)			memset((void *)(n), 0xAA, (size_t)(s))
#define aatype(n)				aamemory(&(n), sizeof(n))


/*
 *  Bit shift
 */
#define GetShiftValue(x,i,s)    ((x) & ((s) << (i)))
#define SetShiftValue(x,i,v,s,t) { \
	if (v) (x) |= (t)((s) << (i)); \
	else (x) &= ~(t)((s) << (i)); \
}
#define GetBitByte(x,i)        GetShiftValue(x,i,1U)
#define SetBitByte(x,i,v)      SetShiftValue(x,i,v,1U,byte)


/*
 *  compare
 */
#define EqualPointer(x,y)			(((void *)(x)) == ((void *)(y)))
#define NotEqualPointer(x,y)		(((void *)(x)) != ((void *)(y)))
#define LessPointer(x,y)			(((void *)(x)) < ((void *)(y)))
#define GreaterPointer(x,y)			(((void *)(x)) > ((void *)(y)))
#define LessEqualPointer(x,y)		(((void *)(x)) <= ((void *)(y)))
#define GreaterEqualPointer(x,y)	(((void *)(x)) >= ((void *)(y)))
#define ComparePointer(x,y)			(((intptr_t)(x)) - ((intptr_t)(y)))

#endif


/************************************************************
 *  build_define.h
 ************************************************************/
#ifndef __BUILD_DEFINE_HEADER__
#define __BUILD_DEFINE_HEADER__

#define LISP_SYSTEM             LISPNAME "-SYSTEM"
#define LISP_CODE               LISPNAME "-CODE"
#define LISP_CLOS               LISPNAME "-CLOS"
#define LISP_RT                 LISPNAME "-RT"
#define LISP_KEYWORD            "KEYWORD"
#define LISP_COMMON             "COMMON-LISP"
#define LISP_COMMON_USER        "COMMON-LISP-USER"
#define Nil                     (lisp_nil_object)
#define T                       (lisp_t_object)
#define Unbound                 ((addr)~(uintptr_t)0)
#define LispRoot(x)             (lisp_root[LISPINDEX_##x])
#define SetLispRoot(x,y)		setlisproot(LISPINDEX_##x, (y));

#define Abort(x)                {Debug(x); abort_execute();}
#define Abort2(x,y)             {Debug2(x,y); abort_execute();}
#define IfDebug(x,y)            {if (x) { Debug(y); return 1; }}
#define CheckType(x,y)          Check(GetType(x) != (y), "type error")
#define CheckType2(x,y,z)       Check(GetType(x) != (y), (z))
#define CheckReadOnly(x)        Check(GetStatusReadOnly(x), "readonly error");
#define CheckSymbol(x)          Check(! symbolp(x), "type error")
#define CheckLocal(x)           Check((x) == NULL, "local error")
#define CheckLocalType(x,y,z)   { \
	CheckLocal(x); \
	CheckType((y), (z)); \
}
#define Return(x)               {if (x) return 1;}
#define Result(x, y)            ((*(x) = (y)), 0)
#define ResultIf(x, y)          ((x)? ((*(x) = (y)), 0): 0)
#define Error(x)                {if (x) {Abort("return error.");}}

#ifdef LISP_DEBUG
#define Info(x)                 info(x)
#define Debug(x)                infoerror(__FILE__, __LINE__, __func__, x)
#define Debug2(x,y)             infoerror(__FILE__, __LINE__, __func__, x, y)
#define Check(x,y)              {if (x) {Abort(y);}}
#define Check2(x,y1,y2)         {if (x) {Abort((y),(z));}}
#else
#define Info(x)                 ;
#define Debug(x)                ;
#define Debug2(x,y)             ;
#define Check(x,y)              ;
#define Check2(x,y1,y2)         ;
#endif

#endif


/************************************************************
 *  define_setjmp.h
 ************************************************************/
#ifndef __LISP_DEFINE_SETJMP__
#define __LISP_DEFINE_SETJMP__


/* abort */
#ifdef LISP_ABORT_SETJMP
extern jmp_buf Lisp_abort_setjmp;
#define Lisp_abort_throw()  longjmp(Lisp_abort_setjmp, 1)
#define Lisp_abort_Begin    if (setjmp(Lisp_abort_setjmp) == 0)
#define Lisp_abort_End      memset(&Lisp_abort_setjmp, 0, sizeof(Lisp_abort_setjmp))
#else
class Lisp_abort_class {};
#define Lisp_abort_throw()  throw Lisp_abort_class()
#define Lisp_abort_Begin    try
#define Lisp_abort_End      catch (Lisp_abort_class) {}
#endif

/* degrade */
#ifdef LISP_ABORT_SETJMP
extern jmp_buf Lisp_degrade_setjmp;
#define Lisp_degrade_throw()	longjmp(Lisp_degrade_setjmp, 1)
#define Lisp_degrade_Begin		if (setjmp(Lisp_degrade_setjmp) == 0)
#define Lisp_degrade_End		memset(&Lisp_degrade_setjmp, 0, sizeof(Lisp_degrade_setjmp))
#else
class Lisp_degrade_class {};
#define Lisp_degrade_throw()	throw Lisp_degrade_class()
#define Lisp_degrade_Begin		try
#define Lisp_degrade_End		catch (Lisp_degrade_class) {}
#endif

#endif


/************************************************************
 *  execute_setjmp.h
 ************************************************************/
#ifndef __EXECUTE_SETJMP__
#define __EXECUTE_SETJMP__


#define abort_execute _n(abort_execute)
#define set_abort_handler _n(set_abort_handler)
#define set_abort_setjmp_handler _n(set_abort_setjmp_handler)
#define set_degrade_setjmp_handler _n(set_degrade_setjmp_handler)

/* abort */
extern lisp_abort_calltype Lisp_abort_handler;
void abort_execute(void);
lisp_abort_calltype set_abort_handler(lisp_abort_calltype call);
lisp_abort_calltype set_abort_setjmp_handler(void);

/* degrade */
lisp_abort_calltype set_degrade_setjmp_handler(void);

#endif


/************************************************************
 *  local.h
 ************************************************************/
#ifndef __LOCAL_HEADER__
#define __LOCAL_HEADER__


#define decrement_local _n(decrement_local)
#define lowlevel_local _n(lowlevel_local)
#define alloc_local _n(alloc_local)
#define make_local _n(make_local)
#define free_local _n(free_local)
#define push_local _n(push_local)
#define rollback_local _n(rollback_local)
#define local_cons _n(local_cons)
#define local_symbol _n(local_symbol)
#define local_array2_memory _n(local_array2_memory)
#define local_array4_memory _n(local_array4_memory)
#define local_body2_memory _n(local_body2_memory)
#define local_body4_memory _n(local_body4_memory)
#define local_smallsize_memory _n(local_smallsize_memory)
#define local_arraybody_memory _n(local_arraybody_memory)
#define local_array4_unbound_memory _n(local_array4_unbound_memory)
#define local_array _n(local_array)
#define local_body _n(local_body)
#define local_array8 _n(local_array8)
#define local_body8 _n(local_body8)
#define local_array2_debug _n(local_array2_debug)
#define local_array4_debug _n(local_array4_debug)
#define local_body2_debug _n(local_body2_debug)
#define local_body4_debug _n(local_body4_debug)
#define local_smallsize_debug _n(local_smallsize_debug)
#define local_arraybody_debug _n(local_arraybody_debug)
#define local_array4_unbound_debug _n(local_array4_unbound_debug)

#ifdef LISP_DEBUG
#define LocalCount		8
#else
#define LocalCount		32
#endif

#ifdef LISP_MEMORY_MALLOC
struct localmemory {
	struct localmemory *next;
	size_t count;
	void *point[LocalCount];
	size_t size[LocalCount];
};

struct localcell {
	struct localcell *next;
	size_t count;
	addr point[LocalCount];
};

struct localstack {
	struct localstack *stack;
	struct localmemory *mem;
	struct localcell *cell;
	size_t cellcount, memcount;
};

struct localroot {
	size_t size, now;
	struct localmemory *mem;
	struct localcell *cell;
	struct localstack *stack;
};

#else
struct localcell {
	struct localcell *next;
	size_t count;
	addr point[LocalCount];
};

struct localstack {
	struct localstack *stack;
	struct localcell *cell;
	size_t cellcount;
};

struct localroot {
	void *alloc;
	size_t size;
	addr tail, front;
	struct localcell *cell;
	struct localstack *stack;
};
#endif

typedef struct localroot *LocalRoot;
typedef struct localstack *LocalStack;

void *lowlevel_local(struct localroot *, size_t);
addr alloc_local(struct localroot *, size_t);
struct localroot *make_local(size_t);
void free_local(struct localroot *);
void push_local(struct localroot *, struct localstack **stack);
void rollback_local(struct localroot *, struct localstack *);

void local_cons(struct localroot *, addr *);
void local_symbol(struct localroot *, addr *);
void local_array2_memory(struct localroot *, addr *, enum LISPTYPE, byte16);
void local_array4_memory(struct localroot *, addr *, enum LISPTYPE, byte32);
void local_body2_memory(struct localroot *, addr *, enum LISPTYPE, byte16);
void local_body4_memory(struct localroot *, addr *, enum LISPTYPE, byte32);
void local_smallsize_memory(struct localroot *,
		addr *, enum LISPTYPE, byte, byte);
void local_arraybody_memory(struct localroot *,
		addr *, enum LISPTYPE, byte16, byte16);
void local_array4_unbound_memory(struct localroot *,
		addr *, enum LISPTYPE, byte32);
void local_array(struct localroot *, addr *, enum LISPTYPE, size_t);
void local_body(struct localroot *, addr *, enum LISPTYPE, size_t);
#ifdef LISP_ARCH_64BIT
void local_array8(struct localroot *, addr *, enum LISPTYPE, size_t);
void local_body8(struct localroot *, addr *, enum LISPTYPE, size_t);
#endif

#ifdef LISP_DEBUG
void local_array2_debug(struct localroot *, addr *, enum LISPTYPE, size_t);
void local_array4_debug(struct localroot *, addr *, enum LISPTYPE, size_t);
void local_body2_debug(struct localroot *, addr *, enum LISPTYPE, size_t);
void local_body4_debug(struct localroot *, addr *, enum LISPTYPE, size_t);
void local_smallsize_debug(struct localroot *, addr *, enum LISPTYPE, size_t, size_t);
void local_arraybody_debug(struct localroot *, addr *, enum LISPTYPE, size_t, size_t);
void local_array4_unbound_debug(struct localroot *, addr *, enum LISPTYPE, size_t);
#define local_array2 local_array2_debug
#define local_array4 local_array4_debug
#define local_body2 local_body2_debug
#define local_body4 local_body4_debug
#define local_smallsize local_smallsize_debug
#define local_arraybody local_arraybody_debug
#define local_array4_unbound local_array4_unbound_debug
#else
#define local_array2(m,r,t,a) local_array2_memory((m),(r),(t),(byte16)(a))
#define local_array4(m,r,t,a) local_array4_memory((m),(r),(t),(byte32)(a))
#define local_body2(m,r,t,b) local_body2_memory((m),(r),(t),(byte16)(b))
#define local_body4(m,r,t,b) local_body4_memory((m),(r),(t),(byte32)(b))
#define local_smallsize(m,r,t,a,b) \
	local_smallsize_memory((m),(r),(t),(byte)(a),(byte)(b))
#define local_arraybody(m,r,t,a,b) \
	local_arraybody_memory((m),(r),(t),(byte16)(a),(byte16)(b))
#define local_array4_unbound(m,r,t,a) \
	local_array4_unbound_memory((m),(r),(t),(byte32)(a))
#endif
#endif


/************************************************************
 *  typedef_thread.h
 ************************************************************/
#ifndef __TYPEDEF_THREAD_HEADER__
#define __TYPEDEF_THREAD_HEADER__


/* single thread mode */
#ifdef LISP_THREAD_DISABLE
typedef int threadhandle;
typedef int mutexlite;
typedef int rwlocklite;
struct threadlocal_single {
	const void *value;
};
typedef struct threadlocal_single *threadlocal;
typedef int condlite;
typedef int binsem;
#endif

/* pthread mode */
#ifdef LISP_THREAD_UNIX
#include <pthread.h>
#include <semaphore.h>
typedef pthread_t threadhandle;
typedef pthread_mutex_t mutexlite;
typedef pthread_rwlock_t rwlocklite;
typedef pthread_key_t threadlocal;
typedef sem_t semunix;
typedef semunix binsem;
typedef pthread_cond_t condlite;
#endif

/* Windows mode */
#ifdef LISP_THREAD_WINDOWS
#include <windows.h>
typedef HANDLE threadhandle;
typedef DWORD threadid;
typedef CRITICAL_SECTION mutexlite;
/* required Vista */
typedef SRWLOCK rwlocklite;
typedef DWORD threadlocal;
typedef CONDITION_VARIABLE condlite;
typedef HANDLE semwindows;
struct binsemlite_tag {
	mutexlite mutex;
	condlite cond;
	int value;
};
typedef struct binsemlite_tag binsemlite;
typedef binsemlite binsem;
#endif

#endif


/************************************************************
 *  execute_typedef.h
 ************************************************************/
#ifndef __EXECUTE_TYPEDEF_HEADER__
#define __EXECUTE_TYPEDEF_HEADER__


#define ThreadLocal_Execute _n(ThreadLocal_Execute)
#define ThreadLocal_Index _n(ThreadLocal_Index)
#define ThreadLocal_Local _n(ThreadLocal_Local)

#ifdef LISP_DEBUG
#define EXECUTE_VALUES		2
#else
#define EXECUTE_VALUES		4
#endif

/*
 *  execute
 */
enum throw_type {
	throw_normal,
	throw_tagbody,
	throw_block,
	throw_catch,
	throw_handler_case,
	throw_restart_case
};

enum ThreadState {
	ThreadState_Empty = 0,
	ThreadState_Run,
	ThreadState_Finish,
	ThreadState_GcWait,
	ThreadState_Join,
	ThreadState_Size
};

struct execute;
typedef void (*execfunction)(struct execute *);

struct execute {
	unsigned disable_copy_p  : 1;
	unsigned throw_point_p   : 1;
	unsigned abort           : 1;
	unsigned jump            : 1;
	unsigned step_begin      : 1;
	unsigned step_in         : 1;

	/* lisp info */
	jmp_buf *exec;
	LocalRoot local;
	int result;

	/* control */
	addr control;
	size_t sizer;
	addr values_vector, *values_reader;
	addr lexical_vector, *lexical_reader;

	/* runcode */
	enum throw_type throw_value;
	size_t throw_point;
	addr throw_handler;
	addr throw_control;

	/* step */
	uint32_t step_depth, step_break;

	/* thread info */
	size_t index;
	enum ThreadState state;
	mutexlite mutex;
	execfunction routine;
	threadhandle handle;
#ifdef LISP_THREAD_WINDOWS
	threadid handleid;
#endif
};
typedef struct execute *Execute;

struct execute_throw {
	unsigned throw_point_p   : 1;
	enum throw_type throw_value;
	size_t throw_point;
	addr throw_handler;
	addr throw_control;
	size_t size;
};


/*
 *  threadlocal
 */
extern threadlocal ThreadLocal_Execute;
extern threadlocal ThreadLocal_Index;
extern threadlocal ThreadLocal_Local;

#endif


/************************************************************
 *  thread.h
 ************************************************************/
#ifndef __THREAD_HEADER__
#define __THREAD_HEADER__


/*
 *  single
 */
#ifdef LISP_THREAD_SINGLE
/* mutex */
int lispd_make_mutexlite(mutexlite *mutex);
void lispd_destroy_mutexlite(mutexlite *mutex);
void lispd_lock_mutexlite(mutexlite *mutex);
int lispd_trylock_mutexlite(mutexlite *mutex);
void lispd_unlock_mutexlite(mutexlite *mutex);
/* read / write */
int lispd_make_rwlocklite(rwlocklite *lock);
void lispd_destroy_rwlocklite(rwlocklite *lock);
void lispd_rdlock_rwlocklite(rwlocklite *lock);
void lispd_wrlock_rwlocklite(rwlocklite *lock);
int lispd_tryrdlock_rwlocklite(rwlocklite *lock);
int lispd_trywrlock_rwlocklite(rwlocklite *lock);
void lispd_unrdlock_rwlocklite(rwlocklite *lock);
void lispd_unwrlock_rwlocklite(rwlocklite *lock);
/* thread local */
void lispd_make_threadlocal(threadlocal *key);
void lispd_destroy_threadlocal(threadlocal key);
const void *lispd_get_threadlocal(threadlocal key);
void lispd_set_threadlocal(threadlocal key, const void *value);
/* binary semaphore */
void lispd_make_binsem(binsem *x);
void lispd_destroy_binsem(binsem *x);
void lispd_lock_binsem(binsem *x);
int lispd_trylock_binsem(binsem *x);
void lispd_unlock_binsem(binsem *x);
/* condition variable */
void lispd_make_condlite(condlite *x);
void lispd_destroy_condlite(condlite *x);
void lispd_wait_condlite(condlite *x, mutexlite *m);
void lispd_signal_condlite(condlite *x);
void lispd_broadcast_condlite(condlite *x);
#endif


/*
 *  remove
 */
#ifdef LISP_THREAD_REMOVE
/* mutex */
#define lispd_make_mutexlite(mutex) (*(mutex) = 0)
#define lispd_destroy_mutexlite(mutex) ((void)mutex)
#define lispd_lock_mutexlite(mutex) ((void)mutex)
#define lispd_trylock_mutexlite(mutex) 0
#define lispd_unlock_mutexlite(mutex) ((void)mutex)
/* read / write */
#define lispd_make_rwlocklite(rw) (*(rw) = 0)
#define lispd_destroy_rwlocklite(rw) ((void)rw)
#define lispd_rdlock_rwlocklite(rw) ((void)rw)
#define lispd_wrlock_rwlocklite(rw) ((void)rw)
#define lispd_tryrdlock_rwlocklite(rw) 0
#define lispd_trywrlock_rwlocklite(rw) 0
#define lispd_unrdlock_rwlocklite(rw) ((void)rw)
#define lispd_unwrlock_rwlocklite(rw)((void)rw)
/* thread local */
#define lispd_make_threadlocal(key) ((void)key)
#define lispd_destroy_threadlocal(key) ((void)key)
/*static int __get_threadlocal;
#define lispd_get_threadlocal(key) ((void *)&__get_threadlocal)
 */
#define lispd_get_threadlocal(key) ((void *)NULL)
#define lispd_set_threadlocal(key, value) ((void)NULL)
/* binary semaphore */
#define lispd_make_binsem(x) (*(x) = 0)
#define lispd_destroy_binsem(x) ((void)x)
#define lispd_lock_binsem(x) ((void)x)
#define lispd_trylock_binsem(x) 0
#define lispd_unlock_binsem(x) ((void)x)
/* condition variable */
#define lispd_make_condlite(x) (*(x) = 0)
#define lispd_destroy_condlite(x) ((void)x)
#define lispd_wait_condlite(x, m)  ((void)x)
#define lispd_signal_condlite(x)  ((void)x)
#define lispd_broadcast_condlite(x)  ((void)x)
#endif


/*
 *  unix
 */
#ifdef LISP_THREAD_UNIX
/* mutex */
#define lispd_make_mutexlite(mutex) \
	pthread_mutex_init((mutex), NULL)
#define lispd_destroy_mutexlite(mutex) \
	if (pthread_mutex_destroy(mutex)) { \
		Debug("pthread_mutex_destroy error"); \
		lispd_threaderror(); \
	}
#define lispd_lock_mutexlite(mutex) \
	if (pthread_mutex_lock(mutex)) { \
		Debug("pthread_mutex_lock error"); \
		lispd_threaderror(); \
	}
/* trylock_mutelite return zero if success. */
/* pthread_mutex_trylock: return zero if success, else non-zero. */
#define lispd_trylock_mutexlite(mutex) \
	pthread_mutex_trylock(mutex)
#define lispd_unlock_mutexlite(mutex) \
	if (pthread_mutex_unlock(mutex)) { \
		Debug("pthread_mutex_unlock error"); \
		lispd_threaderror(); \
	}

/* read / write */
#define lispd_make_rwlocklite(rw) \
	pthread_rwlock_init((rw), NULL)
#define lispd_destroy_rwlocklite(rw) \
	if (pthread_rwlock_destroy(rw)) { \
		Debug("pthread_rwlock_destroy error"); \
		lispd_threaderror(); \
	}
#define lispd_rdlock_rwlocklite(rw) \
	if (pthread_rwlock_rdlock(rw)) { \
		Debug("pthread_rwlock_rdlock error"); \
		lispd_threaderror(); \
	}
#define lispd_wrlock_rwlocklite(rw) \
	if (pthread_rwlock_wrlock(rw)) { \
		Debug("pthread_rwlock_wrlock error"); \
		lispd_threaderror(); \
	}
/* lispd_tryrdlock_rwlocklite return zero if success. */
/* pthread_rwlock_tryrdlock: return zero if success, else non-zero. */
#define lispd_tryrdlock_rwlocklite(rw) \
	pthread_rwlock_tryrdlock(rw)
/* lispd_trywrlock_rwlocklite return zero if success. */
/* pthread_rwlock_trywrlock: return zero if success, else non-zero. */
#define lispd_trywrlock_rwlocklite(rw) \
	pthread_rwlock_trywrlock(rw)
#define lispd_unrdlock_rwlocklite(rw) \
	if (pthread_rwlock_unlock(rw)) { \
		Debug("pthread_rwlock_unlock [unrdlock] error"); \
		lispd_threaderror(); \
	}
#define lispd_unwrlock_rwlocklite(rw) \
	if (pthread_rwlock_unlock(rw)) { \
		Debug("pthread_rwlock_unlock [unwrlock] error"); \
		lispd_threaderror(); \
	}

#define lispd_make_threadlocal(key) \
	if (pthread_key_create(key, NULL)) { \
		Debug("pthread_key_create error"); \
		lispd_threaderror(); \
	}

/* thread local */
#define lispd_destroy_threadlocal(key) \
	if (pthread_key_delete(key)) { \
		Debug("pthread_key_delete error"); \
		lispd_threaderror(); \
	}
#define lispd_get_threadlocal(key) pthread_getspecific(key)
#define lispd_set_threadlocal(key, value) \
	if (pthread_setspecific(key, value)) { \
		Debug("pthread_setspecific error"); \
		lispd_threaderror(); \
	}

/* Unix semaphore */
#define make_semunix(x, v) { \
	if (sem_init((x), 0, (v))) { \
		Debug("sem_init error"); \
		lispd_threaderror(); \
	} \
}
#define destroy_semunix(x) { \
	if (sem_destroy(x)) { \
		Debug("sem_destroy error"); \
		lispd_threaderror(); \
	} \
}
#define lock_semunix(x) { \
	if (sem_wait(x)) { \
		Debug("sem_destroy error"); \
		lispd_threaderror(); \
	} \
}
int lispd_trylock_semunix(semunix *sem);
#define unlock_semunix(x) { \
	if (sem_post(x)) { \
		Debug("sem_post error"); \
		lispd_threaderror(); \
	} \
}
int lispd_get_semunix(semunix *sem);

/* binary semaphore */
#define lispd_make_binsem(x) make_semunix((x), 1);
#define lispd_destroy_binsem destroy_semunix
#define lispd_lock_binsem lock_semunix
#define lispd_trylock_binsem lispd_trylock_semunix
#define lispd_unlock_binsem(x) { \
	unlock_semunix(x); \
	if (1 < lispd_get_semunix(x)) { \
		Debug("lispd_unlock_binsem error"); \
		lispd_threaderror(); \
	} \
}

/* condition variable */
#define lispd_make_condlite(x) { \
	if (pthread_cond_init(x, NULL)) { \
		Debug("pthread_cond_init error"); \
		lispd_threaderror(); \
	} \
}
#define lispd_destroy_condlite(x) { \
	if (pthread_cond_destroy(x)) { \
		Debug("pthread_cond_destroy error"); \
		lispd_threaderror(); \
	} \
}
#define lispd_wait_condlite(x, m) { \
	if (pthread_cond_wait((x), (m))) { \
		Debug("pthread_cond_wait error"); \
		lispd_threaderror(); \
	} \
}
#define lispd_signal_condlite(x) { \
	if (pthread_cond_signal(x)) { \
		Debug("pthread_cond_signal error"); \
		lispd_threaderror(); \
	} \
}
#define lispd_broadcast_condlite(x) { \
	if (pthread_cond_broadcast(x)) { \
		Debug("pthread_cond_broadcast error"); \
		lispd_threaderror(); \
	} \
}
#endif


/*
 *  Windows
 */
#ifdef LISP_THREAD_WINDOWS
#include <windows.h>
#include <synchapi.h>

/* mutex */
int lispd_make_mutexlite(mutexlite *);
#define lispd_destroy_mutexlite DeleteCriticalSection
#define lispd_lock_mutexlite EnterCriticalSection
/* trylock_mutelite return zero if success. */
/* TryEnterCriticalSection: return non-zero if success, else zero. */
#define lispd_trylock_mutexlite(mutex) (TryEnterCriticalSection(mutex) == 0)
#define lispd_unlock_mutexlite LeaveCriticalSection

/* read / write  [SRWLock Vista module] */
int lispd_make_rwlocklite(rwlocklite *);
#define lispd_destroy_rwlocklite(rw)
#define lispd_rdlock_rwlocklite(rw) AcquireSRWLockShared(rw)
#define lispd_wrlock_rwlocklite(rw) AcquireSRWLockExclusive(rw)
/* lispd_tryrdlock_rwlocklite return zero if success. */
/* TryAcquireSRWLockShared: return non-zero if success, else zero. */
#define lispd_tryrdlock_rwlocklite(rw) (TryAcquireSRWLockShared(rw) == 0)
/* lispd_trywrlock_rwlocklite return zero if success. */
/* TryAcquireSRWLockExclusive: return non-zero if success, else zero. */
#define lispd_trywrlock_rwlocklite(rw) (TryAcquireSRWLockExclusive(rw) == 0)
#define lispd_unrdlock_rwlocklite(rw) ReleaseSRWLockShared(rw)
#define lispd_unwrlock_rwlocklite(rw) ReleaseSRWLockExclusive(rw)

/* thread local */
#define lispd_make_threadlocal(key) \
	if ((*key = TlsAlloc()) == 0xFFFFFFFF) { \
		Debug("TlsAlloc error"); \
		lispd_threaderror(); \
	}
#define lispd_destroy_threadlocal(key) \
	if (TlsFree(key) == 0) { \
		Debug("TlsFree error"); \
		lispd_threaderror(); \
	}
#define lispd_get_threadlocal(key) TlsGetValue(key)
#define lispd_set_threadlocal(key, value) \
	if (TlsSetValue(key, value) == 0) { \
		Debug("TlsSetValue error"); \
		lispd_threaderror(); \
	}

/* windows semaphore */
#define make_semwindows(x, init, maxvalue) { \
	HANDLE __handle = CreateSemaphore(NULL, (init), (maxvalue), NULL); \
	if (__handle == NULL) { \
		Debug("CreateSemaphore error"); \
		lispd_threaderror(); \
	} \
	*(x) = __handle; \
}
#define destroy_semwindows(x) { \
	if (CloseHandle(*(x)) == 0) { \
		Debug("CloseHandle (semaphore) error"); \
		lispd_threaderror(); \
	} \
}
#define lock_semwindows(x) { \
	if (WaitForSingleObject(*(x), INFINITE) != WAIT_OBJECT_0) { \
		Debug("WaitForSingleObject (lock semaphore) error"); \
		lispd_threaderror(); \
	} \
}
int lispd_trylock_semwindows(semwindows *ptr);
#define unlock_semwindows(x) { \
	if (ReleaseSemaphore(*(x), 1, NULL) == 0) { \
		Debug("ReleaseSemaphore (semaphore) error"); \
		lispd_threaderror(); \
	} \
}

#if 0
/* binary semaphore */
#define lispd_make_binsem(x) make_semwindows((x), 1, 1)
#define lispd_destroy_binsem destroy_semwindows
#define lispd_lock_binsem lock_semwindows
#define lispd_trylock_binsem lispd_trylock_semwindows
#define lispd_unlock_binsem unlock_semwindows
#endif
/* binary semaphore  [condition variable] */
#define lispd_make_binsem lispd_make_binsemlite
#define lispd_destroy_binsem lispd_destroy_binsemlite
#define lispd_lock_binsem lispd_lock_binsemlite
#define lispd_unlock_binsem lispd_unlock_binsemlite
#define lispd_trylock_binsem lispd_trylock_binsemlite
void lispd_make_binsemlite(binsemlite *ptr);
void lispd_destroy_binsemlite(binsemlite *ptr);
void lispd_lock_binsemlite(binsemlite *ptr);
void lispd_unlock_binsemlite(binsemlite *ptr);
int lispd_trylock_binsemlite(binsemlite *ptr);

/* condition variable */
#define lispd_make_condlite(x) InitializeConditionVariable(x)
#define lispd_destroy_condlite(x)
#define lispd_wait_condlite(x, m) { \
	if (SleepConditionVariableCS((x), (m), INFINITE) == 0) { \
		Debug("SleepConditionVariableCS error"); \
		lispd_threaderror(); \
	} \
}
#define lispd_signal_condlite(x) WakeConditionVariable(x)
#define lispd_broadcast_condlite(x) WakeAllConditionVariable(x)

#endif


/*
 *  tools
 */
void lispd_threaderror(void);
void lispd_wrlock2_rwlocklite(rwlocklite *, rwlocklite *);
void lispd_unwrlock2_rwlocklite(rwlocklite *, rwlocklite *);
void lispd_wrlock3_rwlocklite(rwlocklite *m1, rwlocklite *m2, rwlocklite *m3);
void lispd_unwrlock3_rwlocklite(rwlocklite *m1, rwlocklite *m2, rwlocklite *m3);

#endif


/************************************************************
 *  execute.h
 ************************************************************/
#ifndef __EXECUTE_HEADER__
#define __EXECUTE_HEADER__


#define init_execute _n(init_execute)
#define free_execute _n(free_execute)
#define reload_execute _n(reload_execute)
#define set_execute_local _n(set_execute_local)
#define make_execute _n(make_execute)
#define setstate_execute _n(setstate_execute)
#define join_execute _n(join_execute)
#define count_execute _n(count_execute)
#define joinindex_execute _n(joinindex_execute)
#define create_thread _n(create_thread)
#define join_thread _n(join_thread)
#define getexecute _n(getexecute)
#define equal_control_restart _n(equal_control_restart)
#define equal_control_catch _n(equal_control_catch)
#define gcstate_execute _n(gcstate_execute)
#define gcstart_execute _n(gcstart_execute)
#define gcwait_execute _n(gcwait_execute)
#define gcend_execute _n(gcend_execute)
#define foreach_execute _n(foreach_execute)
#define foreach_check_execute _n(foreach_check_execute)

#define Degrade_execute_Execute _n(Degrade_execute_Execute)
#define Degrade_execute_Size _n(Degrade_execute_Size)
#define Degrade_execute_Position _n(Degrade_execute_Position)

/* threadlocal */
#ifdef LISP_THREAD_DISABLE
#define Execute_Thread (getexecute(0))
#define Local_Thread (getexecute(0)->local)
#define Index_Thread 0
#else
#define Execute_Thread ((struct execute *)lispd_get_threadlocal(ThreadLocal_Execute))
#define Local_Thread ((LocalRoot)lispd_get_threadlocal(ThreadLocal_Local))
#define Index_Thread (*(const size_t *)lispd_get_threadlocal(ThreadLocal_Index))
#endif


/* function */
int init_execute(size_t);
void free_execute(void);
int reload_execute(void);
void set_execute_local(struct execute *ptr);
int make_execute(execfunction, struct execute **, size_t);
void setstate_execute(struct execute *, enum ThreadState);
int join_execute(struct execute *);
size_t count_execute(void);

int joinindex_execute(size_t);
int create_thread(execfunction, struct execute *);
int join_thread(threadhandle *);

struct execute *getexecute(size_t index);
int equal_control_restart(Execute ptr, addr control);
int equal_control_catch(Execute ptr, addr symbol);


/* gc sync */
void gcstate_execute(enum GcMode mode);
void gcstart_execute(struct execute *ptr);
void gcwait_execute(struct execute *ptr);
void gcend_execute(void);
void foreach_execute(void (*call)(struct execute *));
int foreach_check_execute(int (*call)(struct execute *));

#endif


/************************************************************
 *  file_type.h
 ************************************************************/
#ifndef __FILE_TYPE_HEADER__
#define __FILE_TYPE_HEADER__


enum EncodeType {
	EncodeType_binary,
	EncodeType_unsigned16,
	EncodeType_unsigned32,
	EncodeType_unsigned64,
	EncodeType_signed8,
	EncodeType_signed16,
	EncodeType_signed32,
	EncodeType_signed64,
	EncodeType_ascii,
	EncodeType_utf8,
	EncodeType_utf16le,
	EncodeType_utf16be,
	EncodeType_utf32le,
	EncodeType_utf32be,
	EncodeType_windows,
	EncodeType_size
};

enum EncodeBom {
	EncodeBom_auto,
	EncodeBom_empty,
	EncodeBom_exist
};

enum FileOutput {
	FileOutput_supersede,
	FileOutput_append,
	FileOutput_overwrite
};

struct FileEncode {
	unsigned error : 1;
	unsigned create : 1;
	unsigned bom : 2;
	enum EncodeType type : 5;
	unicode code;
};


/*
 *  Mode
 */
#if defined LISP_ANSIC
typedef FILE *file_type;
#elif defined LISP_UNIX
typedef int file_type;
#elif defined LISP_WINDOWS
#include <windows.h>
typedef HANDLE file_type;
#else
/* default -> LISP_ANSIC */
typedef FILE *file_type;
#endif


/*
 *  filememory
 */
#ifdef LISP_DEBUG
#define FILEMEMORY_SIZE     8
#else
#define FILEMEMORY_SIZE     4096
#endif
#define FILEMEMORY_UNGETC_SIZE  16

enum filememory_system {
	filememory_stream,
	filememory_stdin,
	filememory_stdout,
	filememory_stderr
};

enum filememory_mode {
	filememory_normal,
	filememory_end,
	filememory_close,
	filememory_error
};

enum filememory_direct {
	filememory_input,
	filememory_output,
	filememory_io
};

struct filememory {
	unsigned cache : 1;
	unsigned readio : 1;
	unsigned redirect : 1;
	enum filememory_system system : 4;
	enum filememory_mode mode : 4;
	enum filememory_direct direct : 4;
	uint8_t ungetc;
	addr pos;
	file_type file;
	size_t index, size, now;
	struct FileEncode encode;
	byte ungetc_value[FILEMEMORY_UNGETC_SIZE];
	byte buffer[FILEMEMORY_SIZE];
};

typedef struct filememory *filestream;

#endif


/************************************************************
 *  info.h
 ************************************************************/
#ifndef __INFO_HEADER__
#define __INFO_HEADER__

/*
 *  Print object for debug.
 *    Similary to print-object function but info don't use stream object.
 */

#define info _n(info)
#define info_noeol _n(info_noeol)
#define infobit _n(infobit)
#define infoprint _n(infoprint)
#define infoprint_depth _n(infoprint_depth)
#define infoprint_noeol _n(infoprint_noeol)
#define infoprint_once _n(infoprint_once)
#define infoerror _n(infoerror)
#define infosystem _n(infosystem)
#define infotype _n(infotype)

void info(const char *, ...);
void info_noeol(const char *, ...);
void infobit(addr pos);
void infoprint(addr pos);
void infoprint_depth(addr pos, int depth);
void infoprint_noeol(addr pos);
void infoprint_once(addr pos, const char *name);
void infoerror(const char *, int, const char *, const char *, ...);
void infosystem(void);
void infotype(addr pos);

#endif


/************************************************************
 *  build.h
 ************************************************************/
#ifndef __BUILD_HEADER__
#define __BUILD_HEADER__


#define initlisp _n(initlisp)
#define alloclisp _n(alloclisp)
#define freelisp _n(freelisp)
#define degradelisp _n(degradelisp)
#define setlisproot _n(setlisproot)
#define build_lisproot _n(build_lisproot)
#define buildlisp _n(buildlisp)
#define reloadlisp _n(reloadlisp)
#define save_lisp _n(save_lisp)
#define load_lisp _n(load_lisp)

/* variable */
extern int      lisp_initialize;
extern addr     lisp_root[LISPINDEX_SIZE];
extern addr     lisp_nil_object;
extern addr     lisp_t_object;
extern int      lisp_info_enable;
extern enum GcMode lisp_gcsync;

/* function */
void initlisp(void);
int alloclisp(size_t heap, size_t stack);
void freelisp(void);
int reloadlisp(void);
int degradelisp(void);

void setlisproot(enum LISPINDEX index, addr value);
void build_lisproot(Execute ptr);
void buildlisp(Execute ptr);

/* core */
int save_lisp(filestream fm);
int load_lisp(filestream fm);

#endif


/************************************************************
 *  c99.h
 ************************************************************/
#ifndef __C99_HEADER__
#define __C99_HEADER__


#define setlocale_c _n(setlocale_c)
#define vsnprintc _n(vsnprintc)
#define snprintc _n(snprintc)
#define sscanc _n(sscanc)

#ifdef _WIN32

/* Visual C++ 2010 Express */
#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#pragma warning(disable:4996)
#define __func__	__FUNCTION__
/* #define strtoll		_strtoi64 */
#endif

#else

/* gcc or clang */

#endif

const char *setlocale_c(int category);
int vsnprintc(char *, size_t, const char *, va_list);
int snprintc(char *, size_t, const char *, ...);
int sscanc(const char *buffer, const char *fmt, ...);

#endif


/************************************************************
 *  constant_table.h
 ************************************************************/
#ifndef __CONSTANT_TABLE_HEADER__
#define __CONSTANT_TABLE_HEADER__


enum CONSTANT_INDEX {
	CONSTANT_EMPTY = 0,

#ifdef LISP_DEGRADE
	CONSTANT_DEBUG1,
	CONSTANT_DEBUG2,
	CONSTANT_DEBUG3,
#endif

	CONSTANT_COMMON_NIL,
	CONSTANT_COMMON_T,

	CONSTANT_FUNCTION_NIL,
	CONSTANT_FUNCTION_T,
	CONSTANT_FUNCTION_VALUES,
	CONSTANT_PACKAGE_COMMON_LISP,
	CONSTANT_PACKAGE_COMMON_LISP_USER,
	CONSTANT_PACKAGE_KEYWORD,
	CONSTANT_PACKAGE_SYSTEM,
	CONSTANT_PACKAGE_CODE,
	CONSTANT_PACKAGE_CLOS,
	CONSTANT_PACKAGE_RT,
	CONSTANT_PACKAGE_GENTEMP,
	CONSTANT_PACKAGE_DEFAULT_USE,
	CONSTANT_FIXNUM_CACHE,
	CONSTANT_FIXNUM_MAX,
	CONSTANT_FIXNUM_MIN,
	CONSTANT_INDEX_MAX,
	CONSTANT_SINGLE_FLOAT_MOST_POSITIVE,
	CONSTANT_SINGLE_FLOAT_MOST_NEGATIVE,
	CONSTANT_SINGLE_FLOAT_LEAST_POSITIVE,
	CONSTANT_SINGLE_FLOAT_LEAST_POSITIVE_NORMALIZED,
	CONSTANT_SINGLE_FLOAT_LEAST_NEGATIVE,
	CONSTANT_SINGLE_FLOAT_LEAST_NEGATIVE_NORMALIZED,
	CONSTANT_SINGLE_FLOAT_EPSILON,
	CONSTANT_SINGLE_FLOAT_NEGATIVE_EPSILON,
	CONSTANT_CHARACTER_CACHE,
	CONSTANT_STREAM_STDIN,
	CONSTANT_STREAM_STDOUT,
	CONSTANT_STREAM_STDERR,
	CONSTANT_CLOSDATA_NO_METHOD,
	CONSTANT_CLOSDATA_SYMBOL_TYPE,

	CONSTANT_ARRAY_T,
	CONSTANT_ARRAY_BIT,
	CONSTANT_ARRAY_CHARACTER,
	CONSTANT_ARRAY_SINGLE_FLOAT,
	CONSTANT_ARRAY_DOUBLE_FLOAT,
	CONSTANT_ARRAY_LONG_FLOAT,
	CONSTANT_ARRAY_SIGNED8,
	CONSTANT_ARRAY_SIGNED16,
	CONSTANT_ARRAY_SIGNED32,
	CONSTANT_ARRAY_UNSIGNED8,
	CONSTANT_ARRAY_UNSIGNED16,
	CONSTANT_ARRAY_UNSIGNED32,
#ifdef LISP_64BIT
	CONSTANT_ARRAY_SIGNED64,
	CONSTANT_ARRAY_UNSIGNED64,
#endif

	CONSTANT_CLOS_T,
	CONSTANT_CLOS_CLASS,
	CONSTANT_CLOS_STANDARD_OBJECT,
	CONSTANT_CLOS_STANDARD_CLASS,
	CONSTANT_CLOS_BUILT_IN_CLASS,
	CONSTANT_CLOS_STRUCTURE_CLASS,
	CONSTANT_CLOS_STRUCTURE_OBJECT,
	CONSTANT_CLOS_FUNCTION,
	CONSTANT_CLOS_GENERIC_FUNCTION,
	CONSTANT_CLOS_STANDARD_GENERIC_FUNCTION,
	CONSTANT_CLOS_METHOD,
	CONSTANT_CLOS_STANDARD_METHOD,
	CONSTANT_CLOS_DEFINE_METHOD_COMBINATION,
	CONSTANT_CLOS_DEFINE_LONG_METHOD_COMBINATION,
	CONSTANT_CLOS_DEFINE_SHORT_METHOD_COMBINATION,
	CONSTANT_CLOS_LONG_METHOD_COMBINATION,
	CONSTANT_CLOS_SHORT_METHOD_COMBINATION,
	CONSTANT_CLOS_METHOD_COMBINATION,

	CONSTANT_CLOS_METAOBJECT,
	CONSTANT_CLOS_SPECIALIZER,
	CONSTANT_CLOS_EQL_SPECIALIZER,
	CONSTANT_CLOS_FORWARD_REFERENCED_CLASS,
	CONSTANT_CLOS_FUNCALLABLE_STANDARD_OBJECT,
	CONSTANT_CLOS_FUNCALLABLE_STANDARD_CLASS,
	CONSTANT_CLOS_STANDARD_READER_METHOD,
	CONSTANT_CLOS_STANDARD_WRITER_METHOD,
	CONSTANT_CLOS_STANDARD_ACCESSOR_METHOD,
	CONSTANT_CLOS_SLOT_DEFINITION,
	CONSTANT_CLOS_DIRECT_SLOT_DEFINITION,
	CONSTANT_CLOS_EFFECTIVE_SLOT_DEFINITION,
	CONSTANT_CLOS_STANDARD_SLOT_DEFINITION,
	CONSTANT_CLOS_STANDARD_DIRECT_SLOT_DEFINITION,
	CONSTANT_CLOS_STANDARD_EFFECTIVE_SLOT_DEFINITION,

	CONSTANT_CLOS_COMBINATION_STANDARD,

	CONSTANT_CLOS_ARRAY,
	CONSTANT_CLOS_CHARACTER,
	CONSTANT_CLOS_CONDITION,
	CONSTANT_CLOS_HASH_TABLE,
	CONSTANT_CLOS_NUMBER,
	CONSTANT_CLOS_PACKAGE,
	CONSTANT_CLOS_PATHNAME,
	CONSTANT_CLOS_RANDOM_STATE,
	CONSTANT_CLOS_READTABLE,
	CONSTANT_CLOS_RESTART,
	CONSTANT_CLOS_SEQUENCE,
	CONSTANT_CLOS_STREAM,
	CONSTANT_CLOS_SYMBOL,
	CONSTANT_CLOS_LOGICAL_PATHNAME,

	CONSTANT_CLOS_LIST,
	CONSTANT_CLOS_CONS,
	CONSTANT_CLOS_VECTOR,
	CONSTANT_CLOS_BIT_VECTOR,
	CONSTANT_CLOS_NULL,
	CONSTANT_CLOS_STRING,
	CONSTANT_CLOS_COMPLEX,
	CONSTANT_CLOS_REAL,
	CONSTANT_CLOS_FLOAT,
	CONSTANT_CLOS_RATIONAL,
	CONSTANT_CLOS_INTEGER,
	CONSTANT_CLOS_RATIO,
	CONSTANT_CLOS_BROADCAST_STREAM,
	CONSTANT_CLOS_CONCATENATED_STREAM,
	CONSTANT_CLOS_ECHO_STREAM,
	CONSTANT_CLOS_FILE_STREAM,
	CONSTANT_CLOS_STRING_STREAM,
	CONSTANT_CLOS_SYNONYM_STREAM,
	CONSTANT_CLOS_TWO_WAY_STREAM,
	CONSTANT_CLOS_PROMPT_STREAM,
	CONSTANT_CLOS_BASE_CHAR,
	CONSTANT_CLOS_EXTENDED_CHAR,
	CONSTANT_CLOS_STANDARD_CHAR,
	CONSTANT_CLOS_SIMPLE_ARRAY,
	CONSTANT_CLOS_SIMPLE_VECTOR,
	CONSTANT_CLOS_BASE_STRING,
	CONSTANT_CLOS_SIMPLE_STRING,
	CONSTANT_CLOS_SIMPLE_BASE_STRING,
	CONSTANT_CLOS_SIMPLE_BIT_VECTOR,
	CONSTANT_CLOS_BIGNUM,
	CONSTANT_CLOS_FIXNUM,
	CONSTANT_CLOS_SHORT_FLOAT,
	CONSTANT_CLOS_SINGLE_FLOAT,
	CONSTANT_CLOS_DOUBLE_FLOAT,
	CONSTANT_CLOS_LONG_FLOAT,
	CONSTANT_CLOS_SIGNED_BYTE,
	CONSTANT_CLOS_UNSIGNED_BYTE,
	CONSTANT_CLOS_BIT,
	CONSTANT_CLOS_COMPILED_FUNCTION,
	CONSTANT_CLOS_KEYWORD,
	CONSTANT_CLOS_PAPER,

	CONSTANT_CONDITION_ARITHMETIC_ERROR,
	CONSTANT_CONDITION_CELL_ERROR,
	CONSTANT_CONDITION_CONTROL_ERROR,
	CONSTANT_CONDITION_DIVISION_BY_ZERO,
	CONSTANT_CONDITION_END_OF_FILE,
	CONSTANT_CONDITION_ERROR,
	CONSTANT_CONDITION_FILE_ERROR,
	CONSTANT_CONDITION_FLOATING_POINT_INEXACT,
	CONSTANT_CONDITION_FLOATING_POINT_INVALID_OPERATION,
	CONSTANT_CONDITION_FLOATING_POINT_OVERFLOW,
	CONSTANT_CONDITION_FLOATING_POINT_UNDERFLOW,
	CONSTANT_CONDITION_PACKAGE_ERROR,
	CONSTANT_CONDITION_PARSE_ERROR,
	CONSTANT_CONDITION_PRINT_NOT_READABLE,
	CONSTANT_CONDITION_PROGRAM_ERROR,
	CONSTANT_CONDITION_READER_ERROR,
	CONSTANT_CONDITION_SERIOUS_CONDITION,
	CONSTANT_CONDITION_SIMPLE_CONDITION,
	CONSTANT_CONDITION_SIMPLE_ERROR,
	CONSTANT_CONDITION_SIMPLE_TYPE_ERROR,
	CONSTANT_CONDITION_SIMPLE_WARNING,
	CONSTANT_CONDITION_STORAGE_CONDITION,
	CONSTANT_CONDITION_STREAM_ERROR,
	CONSTANT_CONDITION_STYLE_WARNING,
	CONSTANT_CONDITION_TYPE_ERROR,
	CONSTANT_CONDITION_UNBOUND_SLOT,
	CONSTANT_CONDITION_UNBOUND_VARIABLE,
	CONSTANT_CONDITION_UNDEFINED_FUNCTION,
	CONSTANT_CONDITION_WARNING,
	CONSTANT_CONDITION_SAVECORE,
	CONSTANT_CONDITION_EXIT,
	CONSTANT_CONDITION_SIMPLE_CONTROL_ERROR,
	CONSTANT_CONDITION_SIMPLE_FILE_ERROR,
	CONSTANT_CONDITION_SIMPLE_PACKAGE_ERROR,
	CONSTANT_CONDITION_SIMPLE_PARSE_ERROR,
	CONSTANT_CONDITION_SIMPLE_PROGRAM_ERROR,
	CONSTANT_CONDITION_SIMPLE_READER_ERROR,
	CONSTANT_CONDITION_SIMPLE_STYLE_WARNING,
	CONSTANT_CONDITION_DELAY_WARNING,

CONSTANT_AMPERSAND_WHOLE,
CONSTANT_AMPERSAND_OPTIONAL,
CONSTANT_AMPERSAND_REST,
CONSTANT_AMPERSAND_BODY,
CONSTANT_AMPERSAND_KEY,
CONSTANT_AMPERSAND_ALLOW,
CONSTANT_AMPERSAND_AUX,
CONSTANT_AMPERSAND_ENVIRONMENT,
CONSTANT_KEYWORD_ABORT,
CONSTANT_KEYWORD_ABSOLUTE,
CONSTANT_KEYWORD_ACCESSOR,
CONSTANT_KEYWORD_ADJUSTABLE,
CONSTANT_KEYWORD_AFTER,
CONSTANT_KEYWORD_ALLOCATION,
CONSTANT_KEYWORD_ALLOW_OTHER_KEYS,
CONSTANT_KEYWORD_AND,
CONSTANT_KEYWORD_APPEND,
CONSTANT_KEYWORD_ARRAY,
CONSTANT_KEYWORD_ARGUMENT_PRECEDENCE_ORDER,
CONSTANT_KEYWORD_ARGUMENTS,
CONSTANT_KEYWORD_AROUND,
CONSTANT_KEYWORD_BASE,
CONSTANT_KEYWORD_BEFORE,
CONSTANT_KEYWORD_BLOCK,
CONSTANT_KEYWORD_CAPITALIZE,
CONSTANT_KEYWORD_CASE,
CONSTANT_KEYWORD_CLASS,
CONSTANT_KEYWORD_CIRCLE,
CONSTANT_KEYWORD_COMMON,
CONSTANT_KEYWORD_COMMON_LISP_USER,
CONSTANT_KEYWORD_COMPILE_TOPLEVEL,
CONSTANT_KEYWORD_CONC_NAME,
CONSTANT_KEYWORD_CONSTRUCTOR,
CONSTANT_KEYWORD_COPIER,
CONSTANT_KEYWORD_COUNT,
CONSTANT_KEYWORD_CREATE,
CONSTANT_KEYWORD_CURRENT,
CONSTANT_KEYWORD_DATUM,
CONSTANT_KEYWORD_DECLARE,
CONSTANT_KEYWORD_DEFAULT,
CONSTANT_KEYWORD_DEFAULT_INITARGS,
CONSTANT_KEYWORD_DEFAULTS,
CONSTANT_KEYWORD_DESCRIPTION,
CONSTANT_KEYWORD_DEVICE,
CONSTANT_KEYWORD_DIRECTION,
CONSTANT_KEYWORD_DIRECTORY,
CONSTANT_KEYWORD_DISPLACED_TO,
CONSTANT_KEYWORD_DISPLACED_INDEX_OFFSET,
CONSTANT_KEYWORD_DOCUMENTATION,
CONSTANT_KEYWORD_DOWNCASE,
CONSTANT_KEYWORD_ELEMENT_TYPE,
CONSTANT_KEYWORD_END,
CONSTANT_KEYWORD_END1,
CONSTANT_KEYWORD_END2,
CONSTANT_KEYWORD_ENVIRONMENT,
CONSTANT_KEYWORD_ERROR,
CONSTANT_KEYWORD_ESCAPE,
CONSTANT_KEYWORD_EXECUTE,
CONSTANT_KEYWORD_EXPECTED_TYPE,
CONSTANT_KEYWORD_EXPORT,
CONSTANT_KEYWORD_EXTERNAL,
CONSTANT_KEYWORD_EXTERNAL_FORMAT,
CONSTANT_KEYWORD_FILL,
CONSTANT_KEYWORD_FILL_POINTER,
CONSTANT_KEYWORD_FROM_END,
CONSTANT_KEYWORD_FORMAT_ARGUMENTS,
CONSTANT_KEYWORD_FORMAT_CONTROL,
CONSTANT_KEYWORD_FULL,
CONSTANT_KEYWORD_GENERIC_FUNCTION,
CONSTANT_KEYWORD_GENERIC_FUNCTION_CLASS,
CONSTANT_KEYWORD_GENSYM,
CONSTANT_KEYWORD_HOST,
CONSTANT_KEYWORD_IDENTITY,
CONSTANT_KEYWORD_IDENTITY_WITH_ONE_ARGUMENT,
CONSTANT_KEYWORD_IF_DOES_NOT_EXIST,
CONSTANT_KEYWORD_IF_EXISTS,
CONSTANT_KEYWORD_IMPORT_FROM,
CONSTANT_KEYWORD_INCLUDE,
CONSTANT_KEYWORD_INDEX,
CONSTANT_KEYWORD_INITARG,
CONSTANT_KEYWORD_INITFORM,
CONSTANT_KEYWORD_INITIAL_ELEMENT,
CONSTANT_KEYWORD_INITIAL_CONTENTS,
CONSTANT_KEYWORD_INITIAL_OFFSET,
CONSTANT_KEYWORD_INITIAL_VALUE,
CONSTANT_KEYWORD_INHERITED,
CONSTANT_KEYWORD_INPUT,
CONSTANT_KEYWORD_INSTANCE,
CONSTANT_KEYWORD_INTERACTIVE,
CONSTANT_KEYWORD_INTERACTIVE_FUNCTION,
CONSTANT_KEYWORD_INTERN,
CONSTANT_KEYWORD_INTERNAL,
CONSTANT_KEYWORD_INVERT,
CONSTANT_KEYWORD_IO,
CONSTANT_KEYWORD_JUNK_ALLOWED,
CONSTANT_KEYWORD_KEY,
CONSTANT_KEYWORD_LAMBDA_LIST,
CONSTANT_KEYWORD_LENGTH,
CONSTANT_KEYWORD_LEVEL,
CONSTANT_KEYWORD_LINEAR,
CONSTANT_KEYWORD_LINE,
CONSTANT_KEYWORD_LINE_RELATIVE,
CONSTANT_KEYWORD_LINES,
CONSTANT_KEYWORD_LOAD_TOPLEVEL,
CONSTANT_KEYWORD_LOCAL,
CONSTANT_KEYWORD_MANDATORY,
CONSTANT_KEYWORD_METACLASS,
CONSTANT_KEYWORD_METHOD,
CONSTANT_KEYWORD_METHOD_CLASS,
CONSTANT_KEYWORD_METHOD_COMBINATION,
CONSTANT_KEYWORD_MISER,
CONSTANT_KEYWORD_MISER_WIDTH,
CONSTANT_KEYWORD_MOST_SPECIFIC_FIRST,
CONSTANT_KEYWORD_MOST_SPECIFIC_LAST,
CONSTANT_KEYWORD_NAME,
CONSTANT_KEYWORD_NAMED,
CONSTANT_KEYWORD_NEW_VERSION,
CONSTANT_KEYWORD_NEWEST,
CONSTANT_KEYWORD_NICKNAMES,
CONSTANT_KEYWORD_NO_ERROR,
CONSTANT_KEYWORD_NOT,
CONSTANT_KEYWORD_OBJECT,
CONSTANT_KEYWORD_OPERANDS,
CONSTANT_KEYWORD_OPERATION,
CONSTANT_KEYWORD_OPERATOR,
CONSTANT_KEYWORD_OR,
CONSTANT_KEYWORD_ORDER,
CONSTANT_KEYWORD_OUTPUT,
CONSTANT_KEYWORD_OUTPUT_FILE,
CONSTANT_KEYWORD_OVERRIDE,
CONSTANT_KEYWORD_OVERWRITE,
CONSTANT_KEYWORD_PACKAGE,
CONSTANT_KEYWORD_PATHNAME,
CONSTANT_KEYWORD_PER_LINE_PREFIX,
CONSTANT_KEYWORD_PPRINT_DISPATCH,
CONSTANT_KEYWORD_PREDICATE,
CONSTANT_KEYWORD_PREFIX,
CONSTANT_KEYWORD_PRESERVE,
CONSTANT_KEYWORD_PRESERVE_WHITESPACE,
CONSTANT_KEYWORD_PRETTY,
CONSTANT_KEYWORD_PRINT,
CONSTANT_KEYWORD_PRINT_FUNCTION,
CONSTANT_KEYWORD_PRINT_OBJECT,
CONSTANT_KEYWORD_PROBE,
CONSTANT_KEYWORD_RADIX,
CONSTANT_KEYWORD_READ_ONLY,
CONSTANT_KEYWORD_READABLY,
CONSTANT_KEYWORD_READER,
CONSTANT_KEYWORD_REHASH_SIZE,
CONSTANT_KEYWORD_REHASH_THRESHOLD,
CONSTANT_KEYWORD_RELATIVE,
CONSTANT_KEYWORD_RENAME,
CONSTANT_KEYWORD_RENAME_AND_DELETE,
CONSTANT_KEYWORD_REPORT,
CONSTANT_KEYWORD_REPORT_FUNCTION,
CONSTANT_KEYWORD_REQUIRED,
CONSTANT_KEYWORD_RIGHT_MARGIN,
CONSTANT_KEYWORD_SECTION,
CONSTANT_KEYWORD_SECTION_RELATIVE,
CONSTANT_KEYWORD_SHADOW,
CONSTANT_KEYWORD_SHADOWING_IMPORT_FROM,
CONSTANT_KEYWORD_SIZE,
CONSTANT_KEYWORD_SLOT_NAMES,
CONSTANT_KEYWORD_START,
CONSTANT_KEYWORD_START1,
CONSTANT_KEYWORD_START2,
CONSTANT_KEYWORD_STREAM,
CONSTANT_KEYWORD_SUFFIX,
CONSTANT_KEYWORD_SUPERSEDE,
CONSTANT_KEYWORD_TEST,
CONSTANT_KEYWORD_TEST_FUNCTION,
CONSTANT_KEYWORD_TEST_NOT,
CONSTANT_KEYWORD_TYPE,
CONSTANT_KEYWORD_UNSPECIFIC,
CONSTANT_KEYWORD_UP,
CONSTANT_KEYWORD_UPCASE,
CONSTANT_KEYWORD_USE,
CONSTANT_KEYWORD_VERBOSE,
CONSTANT_KEYWORD_VERSION,
CONSTANT_KEYWORD_WILD,
CONSTANT_KEYWORD_WILD_INFERIORS,
CONSTANT_KEYWORD_WRITER,
CONSTANT_KEYWORD_ARGS,
CONSTANT_KEYWORD_CACHE,
CONSTANT_KEYWORD_EXIT,
CONSTANT_KEYWORD_IF_ERROR_EXISTS,
CONSTANT_KEYWORD_IF_INPUT_DOES_NOT_EXIST,
CONSTANT_KEYWORD_IF_OUTPUT_EXISTS,
CONSTANT_KEYWORD_PIPE,
CONSTANT_KEYWORD_PROGRAM,
CONSTANT_KEYWORD_SEARCH,
CONSTANT_KEYWORD_VALUE,
CONSTANT_KEYWORD_WAIT,
CONSTANT_COMMON_ASTERISK,
CONSTANT_COMMON_ASTERISK2,
CONSTANT_COMMON_ASTERISK3,
CONSTANT_COMMON_PLUS,
CONSTANT_COMMON_PLUS2,
CONSTANT_COMMON_PLUS3,
CONSTANT_COMMON_MINUS,
CONSTANT_COMMON_SLASH,
CONSTANT_COMMON_SLASH2,
CONSTANT_COMMON_SLASH3,
CONSTANT_COMMON_ONE_PLUS,
CONSTANT_COMMON_ONE_MINUS,
CONSTANT_COMMON_NUMBER_EQUAL,
CONSTANT_COMMON_NUMBER_NOT_EQUAL,
CONSTANT_COMMON_NUMBER_LESS,
CONSTANT_COMMON_NUMBER_GREATER,
CONSTANT_COMMON_NUMBER_LESS_EQUAL,
CONSTANT_COMMON_NUMBER_GREATER_EQUAL,
CONSTANT_COMMON_ABORT,
CONSTANT_COMMON_ABS,
CONSTANT_COMMON_ACONS,
CONSTANT_COMMON_ACOS,
CONSTANT_COMMON_ACOSH,
CONSTANT_COMMON_ADD_METHOD,
CONSTANT_COMMON_ADJOIN,
CONSTANT_COMMON_ADJUST_ARRAY,
CONSTANT_COMMON_ADJUSTABLE_ARRAY_P,
CONSTANT_COMMON_ALPHA_CHAR_P,
CONSTANT_COMMON_ALPHANUMERICP,
CONSTANT_COMMON_AND,
CONSTANT_COMMON_ATOM,
CONSTANT_COMMON_APPEND,
CONSTANT_COMMON_APPLY,
CONSTANT_COMMON_APROPOS,
CONSTANT_COMMON_APROPOS_LIST,
CONSTANT_COMMON_ARITHMETIC_ERROR,
CONSTANT_COMMON_ARITHMETIC_ERROR_OPERANDS,
CONSTANT_COMMON_ARITHMETIC_ERROR_OPERATION,
CONSTANT_COMMON_AREF,
CONSTANT_COMMON_ARRAY,
CONSTANT_COMMON_ARRAY_DIMENSION,
CONSTANT_COMMON_ARRAY_DIMENSION_LIMIT,
CONSTANT_COMMON_ARRAY_DIMENSIONS,
CONSTANT_COMMON_ARRAY_ELEMENT_TYPE,
CONSTANT_COMMON_ARRAY_HAS_FILL_POINTER_P,
CONSTANT_COMMON_ARRAY_DISPLACEMENT,
CONSTANT_COMMON_ARRAY_IN_BOUNDS_P,
CONSTANT_COMMON_ARRAY_RANK,
CONSTANT_COMMON_ARRAY_RANK_LIMIT,
CONSTANT_COMMON_ARRAY_ROW_MAJOR_INDEX,
CONSTANT_COMMON_ARRAY_TOTAL_SIZE,
CONSTANT_COMMON_ARRAY_TOTAL_SIZE_LIMIT,
CONSTANT_COMMON_ARRAYP,
CONSTANT_COMMON_ASH,
CONSTANT_COMMON_ASIN,
CONSTANT_COMMON_ASINH,
CONSTANT_COMMON_ASSERT,
CONSTANT_COMMON_ASSOC,
CONSTANT_COMMON_ASSOC_IF,
CONSTANT_COMMON_ASSOC_IF_NOT,
CONSTANT_COMMON_ATAN,
CONSTANT_COMMON_ATANH,
CONSTANT_COMMON_BASE_CHAR,
CONSTANT_COMMON_BASE_STRING,
CONSTANT_COMMON_BIGNUM,
CONSTANT_COMMON_BIT,
CONSTANT_COMMON_BIT_AND,
CONSTANT_COMMON_BIT_ANDC1,
CONSTANT_COMMON_BIT_ANDC2,
CONSTANT_COMMON_BIT_EQV,
CONSTANT_COMMON_BIT_IOR,
CONSTANT_COMMON_BIT_NAND,
CONSTANT_COMMON_BIT_NOR,
CONSTANT_COMMON_BIT_NOT,
CONSTANT_COMMON_BIT_ORC1,
CONSTANT_COMMON_BIT_ORC2,
CONSTANT_COMMON_BIT_VECTOR,
CONSTANT_COMMON_BIT_VECTOR_P,
CONSTANT_COMMON_BIT_XOR,
CONSTANT_COMMON_BLOCK,
CONSTANT_COMMON_BOOLE,
CONSTANT_COMMON_BOOLE_1,
CONSTANT_COMMON_BOOLE_2,
CONSTANT_COMMON_BOOLE_AND,
CONSTANT_COMMON_BOOLE_ANDC1,
CONSTANT_COMMON_BOOLE_ANDC2,
CONSTANT_COMMON_BOOLE_C1,
CONSTANT_COMMON_BOOLE_C2,
CONSTANT_COMMON_BOOLE_CLR,
CONSTANT_COMMON_BOOLE_EQV,
CONSTANT_COMMON_BOOLE_IOR,
CONSTANT_COMMON_BOOLE_NAND,
CONSTANT_COMMON_BOOLE_NOR,
CONSTANT_COMMON_BOOLE_ORC1,
CONSTANT_COMMON_BOOLE_ORC2,
CONSTANT_COMMON_BOOLE_SET,
CONSTANT_COMMON_BOOLE_XOR,
CONSTANT_COMMON_BOOLEAN,
CONSTANT_COMMON_BOTH_CASE_P,
CONSTANT_COMMON_BOUNDP,
CONSTANT_COMMON_BREAK,
CONSTANT_COMMON_BROADCAST_STREAM,
CONSTANT_COMMON_BROADCAST_STREAM_STREAMS,
CONSTANT_COMMON_BUILT_IN_CLASS,
CONSTANT_COMMON_BUTLAST,
CONSTANT_COMMON_BYTE,
CONSTANT_COMMON_BYTE_SIZE,
CONSTANT_COMMON_BYTE_POSITION,
CONSTANT_COMMON_CALL_ARGUMENTS_LIMIT,
CONSTANT_COMMON_CALL_METHOD,
CONSTANT_COMMON_CALL_NEXT_METHOD,
CONSTANT_COMMON_CAR,
CONSTANT_COMMON_CDR,
CONSTANT_COMMON_CAAR,
CONSTANT_COMMON_CADR,
CONSTANT_COMMON_CDAR,
CONSTANT_COMMON_CDDR,
CONSTANT_COMMON_CAAAR,
CONSTANT_COMMON_CAADR,
CONSTANT_COMMON_CADAR,
CONSTANT_COMMON_CADDR,
CONSTANT_COMMON_CDAAR,
CONSTANT_COMMON_CDADR,
CONSTANT_COMMON_CDDAR,
CONSTANT_COMMON_CDDDR,
CONSTANT_COMMON_CAAAAR,
CONSTANT_COMMON_CAAADR,
CONSTANT_COMMON_CAADAR,
CONSTANT_COMMON_CAADDR,
CONSTANT_COMMON_CADAAR,
CONSTANT_COMMON_CADADR,
CONSTANT_COMMON_CADDAR,
CONSTANT_COMMON_CADDDR,
CONSTANT_COMMON_CDAAAR,
CONSTANT_COMMON_CDAADR,
CONSTANT_COMMON_CDADAR,
CONSTANT_COMMON_CDADDR,
CONSTANT_COMMON_CDDAAR,
CONSTANT_COMMON_CDDADR,
CONSTANT_COMMON_CDDDAR,
CONSTANT_COMMON_CDDDDR,
CONSTANT_COMMON_CASE,
CONSTANT_COMMON_CATCH,
CONSTANT_COMMON_CCASE,
CONSTANT_COMMON_CEILING,
CONSTANT_COMMON_CELL_ERROR,
CONSTANT_COMMON_CELL_ERROR_NAME,
CONSTANT_COMMON_CERROR,
CONSTANT_COMMON_CHAR,
CONSTANT_COMMON_CHARACTER,
CONSTANT_COMMON_CHARACTERP,
CONSTANT_COMMON_CHAR_EQL,
CONSTANT_COMMON_CHAR_NOT_EQL,
CONSTANT_COMMON_CHAR_LESS,
CONSTANT_COMMON_CHAR_GREATER,
CONSTANT_COMMON_CHAR_LESS_EQUAL,
CONSTANT_COMMON_CHAR_GREATER_EQUAL,
CONSTANT_COMMON_CHAR_CODE,
CONSTANT_COMMON_CHAR_CODE_LIMIT,
CONSTANT_COMMON_CHAR_DOWNCASE,
CONSTANT_COMMON_CHAR_EQUAL,
CONSTANT_COMMON_CHAR_GREATERP,
CONSTANT_COMMON_CHAR_INT,
CONSTANT_COMMON_CHAR_LESSP,
CONSTANT_COMMON_CHAR_NAME,
CONSTANT_COMMON_CHAR_NOT_EQUAL,
CONSTANT_COMMON_CHAR_NOT_GREATERP,
CONSTANT_COMMON_CHAR_NOT_LESSP,
CONSTANT_COMMON_CHAR_UPCASE,
CONSTANT_COMMON_CHECK_TYPE,
CONSTANT_COMMON_CIS,
CONSTANT_COMMON_CLASS,
CONSTANT_COMMON_CLASS_OF,
CONSTANT_COMMON_CLEAR_INPUT,
CONSTANT_COMMON_CLEAR_OUTPUT,
CONSTANT_COMMON_CLOSE,
CONSTANT_COMMON_CLRHASH,
CONSTANT_COMMON_CODE_CHAR,
CONSTANT_COMMON_COERCE,
CONSTANT_COMMON_COMPILATION_SPEED,
CONSTANT_COMMON_COMPILE,
CONSTANT_COMMON_COMPILED_FUNCTION,
CONSTANT_COMMON_COMPILED_FUNCTION_P,
CONSTANT_COMMON_COMPILER_MACRO,
CONSTANT_COMMON_COMPILER_MACRO_FUNCTION,
CONSTANT_COMMON_COMPLEMENT,
CONSTANT_COMMON_COMPLEX,
CONSTANT_COMMON_COMPLEXP,
CONSTANT_COMMON_COMPUTE_APPLICABLE_METHODS,
CONSTANT_COMMON_COMPUTE_RESTARTS,
CONSTANT_COMMON_CONCATENATE,
CONSTANT_COMMON_CONCATENATED_STREAM,
CONSTANT_COMMON_CONCATENATED_STREAM_STREAMS,
CONSTANT_COMMON_COND,
CONSTANT_COMMON_CONDITION,
CONSTANT_COMMON_CONJUGATE,
CONSTANT_COMMON_COMPILE_FILE,
CONSTANT_COMMON_COMPILE_FILE_PATHNAME,
CONSTANT_COMMON_CONS,
CONSTANT_COMMON_CONSP,
CONSTANT_COMMON_CONSTANTLY,
CONSTANT_COMMON_CONSTANTP,
CONSTANT_COMMON_CONTINUE,
CONSTANT_COMMON_CONTROL_ERROR,
CONSTANT_COMMON_COPY_ALIST,
CONSTANT_COMMON_COPY_LIST,
CONSTANT_COMMON_COPY_PPRINT_DISPATCH,
CONSTANT_COMMON_COPY_READTABLE,
CONSTANT_COMMON_COPY_SEQ,
CONSTANT_COMMON_COPY_STRUCTURE,
CONSTANT_COMMON_COPY_SYMBOL,
CONSTANT_COMMON_COPY_TREE,
CONSTANT_COMMON_COS,
CONSTANT_COMMON_COSH,
CONSTANT_COMMON_COUNT,
CONSTANT_COMMON_COUNT_IF,
CONSTANT_COMMON_COUNT_IF_NOT,
CONSTANT_COMMON_CTYPECASE,
CONSTANT_COMMON_DEBUG,
CONSTANT_COMMON_DECF,
CONSTANT_COMMON_DECLARATION,
CONSTANT_COMMON_DECLARE,
CONSTANT_COMMON_DECLAIM,
CONSTANT_COMMON_DECODE_FLOAT,
CONSTANT_COMMON_DECODE_UNIVERSAL_TIME,
CONSTANT_COMMON_DEFCLASS,
CONSTANT_COMMON_DEFCONSTANT,
CONSTANT_COMMON_DEFGENERIC,
CONSTANT_COMMON_DEFINE_COMPILER_MACRO,
CONSTANT_COMMON_DEFINE_CONDITION,
CONSTANT_COMMON_DEFINE_METHOD_COMBINATION,
CONSTANT_COMMON_DEFINE_MODIFY_MACRO,
CONSTANT_COMMON_DEFINE_SETF_EXPANDER,
CONSTANT_COMMON_DEFINE_SYMBOL_MACRO,
CONSTANT_COMMON_DEFMACRO,
CONSTANT_COMMON_DEFMETHOD,
CONSTANT_COMMON_DEFPACKAGE,
CONSTANT_COMMON_DEFPARAMETER,
CONSTANT_COMMON_DEFSETF,
CONSTANT_COMMON_DEFSTRUCT,
CONSTANT_COMMON_DEFTYPE,
CONSTANT_COMMON_DEFUN,
CONSTANT_COMMON_DEFVAR,
CONSTANT_COMMON_DELETE,
CONSTANT_COMMON_DELETE_DUPLICATES,
CONSTANT_COMMON_DELETE_FILE,
CONSTANT_COMMON_DELETE_IF,
CONSTANT_COMMON_DELETE_IF_NOT,
CONSTANT_COMMON_DELETE_PACKAGE,
CONSTANT_COMMON_DENOMINATOR,
CONSTANT_COMMON_DEPOSIT_FIELD,
CONSTANT_COMMON_DESCRIBE,
CONSTANT_COMMON_DESCRIBE_OBJECT,
CONSTANT_COMMON_DESTRUCTURING_BIND,
CONSTANT_COMMON_DIGIT_CHAR,
CONSTANT_COMMON_DIGIT_CHAR_P,
CONSTANT_COMMON_DIRECTORY,
CONSTANT_COMMON_DIRECTORY_NAMESTRING,
CONSTANT_COMMON_DISASSEMBLE,
CONSTANT_COMMON_DIVISION_BY_ZERO,
CONSTANT_COMMON_DO,
CONSTANT_COMMON_DOA,
CONSTANT_COMMON_DOCUMENTATION,
CONSTANT_COMMON_DOLIST,
CONSTANT_COMMON_DOTIMES,
CONSTANT_COMMON_DOUBLE_FLOAT,
CONSTANT_COMMON_DOUBLE_FLOAT_EPSILON,
CONSTANT_COMMON_DOUBLE_FLOAT_NEGATIVE_EPSILON,
CONSTANT_COMMON_DO_ALL_SYMBOLS,
CONSTANT_COMMON_DO_EXTERNAL_SYMBOLS,
CONSTANT_COMMON_DO_SYMBOLS,
CONSTANT_COMMON_DPB,
CONSTANT_COMMON_DRIBBLE,
CONSTANT_COMMON_DYNAMIC_EXTENT,
CONSTANT_COMMON_ECASE,
CONSTANT_COMMON_ECHO_STREAM,
CONSTANT_COMMON_ECHO_STREAM_INPUT_STREAM,
CONSTANT_COMMON_ECHO_STREAM_OUTPUT_STREAM,
CONSTANT_COMMON_ED,
CONSTANT_COMMON_EIGHTH,
CONSTANT_COMMON_ELT,
CONSTANT_COMMON_ENCODE_UNIVERSAL_TIME,
CONSTANT_COMMON_END_OF_FILE,
CONSTANT_COMMON_ENDP,
CONSTANT_COMMON_ENOUGH_NAMESTRING,
CONSTANT_COMMON_ENSURE_DIRECTORIES_EXIST,
CONSTANT_COMMON_EQ,
CONSTANT_COMMON_EQL,
CONSTANT_COMMON_EQUAL,
CONSTANT_COMMON_EQUALP,
CONSTANT_COMMON_ERROR,
CONSTANT_COMMON_ETYPECASE,
CONSTANT_COMMON_EVAL,
CONSTANT_COMMON_EVAL_WHEN,
CONSTANT_COMMON_EVENP,
CONSTANT_COMMON_EVERY,
CONSTANT_COMMON_EXP,
CONSTANT_COMMON_EXPORT,
CONSTANT_COMMON_EXPT,
CONSTANT_COMMON_EXTENDED_CHAR,
CONSTANT_COMMON_FBOUNDP,
CONSTANT_COMMON_FCEILING,
CONSTANT_COMMON_FDEFINITION,
CONSTANT_COMMON_FFLOOR,
CONSTANT_COMMON_FMAKUNBOUND,
CONSTANT_COMMON_FIFTH,
CONSTANT_COMMON_FILE_AUTHOR,
CONSTANT_COMMON_FILE_ERROR,
CONSTANT_COMMON_FILE_ERROR_PATHNAME,
CONSTANT_COMMON_FILE_LENGTH,
CONSTANT_COMMON_FILE_POSITION,
CONSTANT_COMMON_FILE_NAMESTRING,
CONSTANT_COMMON_FILE_STREAM,
CONSTANT_COMMON_FILE_STRING_LENGTH,
CONSTANT_COMMON_FILE_WRITE_DATE,
CONSTANT_COMMON_FILL,
CONSTANT_COMMON_FILL_POINTER,
CONSTANT_COMMON_FIND,
CONSTANT_COMMON_FIND_ALL_SYMBOLS,
CONSTANT_COMMON_FIND_CLASS,
CONSTANT_COMMON_FIND_IF,
CONSTANT_COMMON_FIND_IF_NOT,
CONSTANT_COMMON_FIND_METHOD,
CONSTANT_COMMON_FIND_PACKAGE,
CONSTANT_COMMON_FIND_RESTART,
CONSTANT_COMMON_FIND_SYMBOL,
CONSTANT_COMMON_FINISH_OUTPUT,
CONSTANT_COMMON_FIRST,
CONSTANT_COMMON_FIXNUM,
CONSTANT_COMMON_FLET,
CONSTANT_COMMON_FLOAT,
CONSTANT_COMMON_FLOATP,
CONSTANT_COMMON_FLOATING_POINT_INEXACT,
CONSTANT_COMMON_FLOATING_POINT_INVALID_OPERATION,
CONSTANT_COMMON_FLOATING_POINT_OVERFLOW,
CONSTANT_COMMON_FLOATING_POINT_UNDERFLOW,
CONSTANT_COMMON_FLOAT_RADIX,
CONSTANT_COMMON_FLOAT_SIGN,
CONSTANT_COMMON_FLOAT_DIGITS,
CONSTANT_COMMON_FLOAT_PRECISION,
CONSTANT_COMMON_FLOOR,
CONSTANT_COMMON_FORCE_OUTPUT,
CONSTANT_COMMON_FORMAT,
CONSTANT_COMMON_FORMATTER,
CONSTANT_COMMON_FOURTH,
CONSTANT_COMMON_FRESH_LINE,
CONSTANT_COMMON_FROUND,
CONSTANT_COMMON_FUNCALL,
CONSTANT_COMMON_FUNCTION,
CONSTANT_COMMON_FUNCTION_LAMBDA_EXPRESSION,
CONSTANT_COMMON_FUNCTIONP,
CONSTANT_COMMON_FTYPE,
CONSTANT_COMMON_FTRUNCATE,
CONSTANT_COMMON_GCD,
CONSTANT_COMMON_GENERIC_FUNCTION,
CONSTANT_COMMON_GENSYM,
CONSTANT_COMMON_GENTEMP,
CONSTANT_COMMON_GET,
CONSTANT_COMMON_GET_DECODED_TIME,
CONSTANT_COMMON_GET_DISPATCH_MACRO_CHARACTER,
CONSTANT_COMMON_GET_INTERNAL_REAL_TIME,
CONSTANT_COMMON_GET_INTERNAL_RUN_TIME,
CONSTANT_COMMON_GET_MACRO_CHARACTER,
CONSTANT_COMMON_GET_OUTPUT_STREAM_STRING,
CONSTANT_COMMON_GET_SETF_EXPANSION,
CONSTANT_COMMON_GET_UNIVERSAL_TIME,
CONSTANT_COMMON_GETF,
CONSTANT_COMMON_GETHASH,
CONSTANT_COMMON_GET_PROPERTIES,
CONSTANT_COMMON_GO,
CONSTANT_COMMON_GRAPHIC_CHAR_P,
CONSTANT_COMMON_HANDLER_BIND,
CONSTANT_COMMON_HANDLER_CASE,
CONSTANT_COMMON_HASH_TABLE,
CONSTANT_COMMON_HASH_TABLE_COUNT,
CONSTANT_COMMON_HASH_TABLE_P,
CONSTANT_COMMON_HASH_TABLE_REHASH_SIZE,
CONSTANT_COMMON_HASH_TABLE_REHASH_THRESHOLD,
CONSTANT_COMMON_HASH_TABLE_SIZE,
CONSTANT_COMMON_HASH_TABLE_TEST,
CONSTANT_COMMON_HOST_NAMESTRING,
CONSTANT_COMMON_IDENTITY,
CONSTANT_COMMON_IF,
CONSTANT_COMMON_IGNORABLE,
CONSTANT_COMMON_IGNORE,
CONSTANT_COMMON_IGNORE_ERRORS,
CONSTANT_COMMON_IMAGPART,
CONSTANT_COMMON_IMPORT,
CONSTANT_COMMON_INCF,
CONSTANT_COMMON_INLINE,
CONSTANT_COMMON_INPUT_STREAM_P,
CONSTANT_COMMON_INSPECT,
CONSTANT_COMMON_INTEGER,
CONSTANT_COMMON_INTEGERP,
CONSTANT_COMMON_INTEGER_DECODE_FLOAT,
CONSTANT_COMMON_INTEGER_LENGTH,
CONSTANT_COMMON_INTERACTIVE_STREAM_P,
CONSTANT_COMMON_INTERN,
CONSTANT_COMMON_INTERNAL_TIME_UNITS_PER_SECOND,
CONSTANT_COMMON_INTERSECTION,
CONSTANT_COMMON_INVALID_METHOD_ERROR,
CONSTANT_COMMON_INVOKE_DEBUGGER,
CONSTANT_COMMON_INVOKE_RESTART,
CONSTANT_COMMON_INVOKE_RESTART_INTERACTIVELY,
CONSTANT_COMMON_IN_PACKAGE,
CONSTANT_COMMON_ISQRT,
CONSTANT_COMMON_KEYWORD,
CONSTANT_COMMON_KEYWORDP,
CONSTANT_COMMON_LABELS,
CONSTANT_COMMON_LAMBDA,
CONSTANT_COMMON_LAMBDA_LIST_KEYWORDS,
CONSTANT_COMMON_LAMBDA_PARAMETERS_LIMIT,
CONSTANT_COMMON_LAST,
CONSTANT_COMMON_LCM,
CONSTANT_COMMON_LDB,
CONSTANT_COMMON_LDB_TEST,
CONSTANT_COMMON_LDIFF,
CONSTANT_COMMON_LEAST_NEGATIVE_DOUBLE_FLOAT,
CONSTANT_COMMON_LEAST_NEGATIVE_LONG_FLOAT,
CONSTANT_COMMON_LEAST_NEGATIVE_NORMALIZED_DOUBLE_FLOAT,
CONSTANT_COMMON_LEAST_NEGATIVE_NORMALIZED_LONG_FLOAT,
CONSTANT_COMMON_LEAST_NEGATIVE_NORMALIZED_SHORT_FLOAT,
CONSTANT_COMMON_LEAST_NEGATIVE_NORMALIZED_SINGLE_FLOAT,
CONSTANT_COMMON_LEAST_NEGATIVE_SHORT_FLOAT,
CONSTANT_COMMON_LEAST_NEGATIVE_SINGLE_FLOAT,
CONSTANT_COMMON_LEAST_POSITIVE_DOUBLE_FLOAT,
CONSTANT_COMMON_LEAST_POSITIVE_LONG_FLOAT,
CONSTANT_COMMON_LEAST_POSITIVE_NORMALIZED_DOUBLE_FLOAT,
CONSTANT_COMMON_LEAST_POSITIVE_NORMALIZED_LONG_FLOAT,
CONSTANT_COMMON_LEAST_POSITIVE_NORMALIZED_SHORT_FLOAT,
CONSTANT_COMMON_LEAST_POSITIVE_NORMALIZED_SINGLE_FLOAT,
CONSTANT_COMMON_LEAST_POSITIVE_SHORT_FLOAT,
CONSTANT_COMMON_LEAST_POSITIVE_SINGLE_FLOAT,
CONSTANT_COMMON_LENGTH,
CONSTANT_COMMON_LET,
CONSTANT_COMMON_LETA,
CONSTANT_COMMON_LISP_IMPLEMENTATION_TYPE,
CONSTANT_COMMON_LISP_IMPLEMENTATION_VERSION,
CONSTANT_COMMON_LIST,
CONSTANT_COMMON_LISTEN,
CONSTANT_COMMON_LISTP,
CONSTANT_COMMON_LISTA,
CONSTANT_COMMON_LIST_ALL_PACKAGES,
CONSTANT_COMMON_LIST_LENGTH,
CONSTANT_COMMON_LOAD,
CONSTANT_COMMON_LOAD_LOGICAL_PATHNAME_TRANSLATIONS,
CONSTANT_COMMON_LOAD_TIME_VALUE,
CONSTANT_COMMON_LOCALLY,
CONSTANT_COMMON_LOG,
CONSTANT_COMMON_LOGAND,
CONSTANT_COMMON_LOGANDC1,
CONSTANT_COMMON_LOGANDC2,
CONSTANT_COMMON_LOGBITP,
CONSTANT_COMMON_LOGCOUNT,
CONSTANT_COMMON_LOGEQV,
CONSTANT_COMMON_LOGICAL_PATHNAME,
CONSTANT_COMMON_LOGICAL_PATHNAME_TRANSLATIONS,
CONSTANT_COMMON_LOGIOR,
CONSTANT_COMMON_LOGNAND,
CONSTANT_COMMON_LOGNOR,
CONSTANT_COMMON_LOGNOT,
CONSTANT_COMMON_LOGORC1,
CONSTANT_COMMON_LOGORC2,
CONSTANT_COMMON_LOGTEST,
CONSTANT_COMMON_LOGXOR,
CONSTANT_COMMON_LONG_FLOAT,
CONSTANT_COMMON_LONG_FLOAT_EPSILON,
CONSTANT_COMMON_LONG_FLOAT_NEGATIVE_EPSILON,
CONSTANT_COMMON_LONG_SITE_NAME,
CONSTANT_COMMON_LOOP,
CONSTANT_COMMON_LOOP_FINISH,
CONSTANT_COMMON_LOWER_CASE_P,
CONSTANT_COMMON_MACHINE_INSTANCE,
CONSTANT_COMMON_MACHINE_TYPE,
CONSTANT_COMMON_MACHINE_VERSION,
CONSTANT_COMMON_MACRO_FUNCTION,
CONSTANT_COMMON_MACROEXPAND,
CONSTANT_COMMON_MACROEXPAND_1,
CONSTANT_COMMON_MACROLET,
CONSTANT_COMMON_MAKE_ARRAY,
CONSTANT_COMMON_MAKE_BROADCAST_STREAM,
CONSTANT_COMMON_MAKE_CONDITION,
CONSTANT_COMMON_MAKE_CONCATENATED_STREAM,
CONSTANT_COMMON_MAKE_DISPATCH_MACRO_CHARACTER,
CONSTANT_COMMON_MAKE_ECHO_STREAM,
CONSTANT_COMMON_MAKE_HASH_TABLE,
CONSTANT_COMMON_MAKE_INSTANCES_OBSOLETE,
CONSTANT_COMMON_MAKE_LIST,
CONSTANT_COMMON_MAKE_LOAD_FORM,
CONSTANT_COMMON_MAKE_LOAD_FORM_SAVING_SLOTS,
CONSTANT_COMMON_MAKE_METHOD,
CONSTANT_COMMON_MAKE_PACKAGE,
CONSTANT_COMMON_MAKE_PATHNAME,
CONSTANT_COMMON_MAKE_RANDOM_STATE,
CONSTANT_COMMON_MAKE_SEQUENCE,
CONSTANT_COMMON_MAKE_STRING,
CONSTANT_COMMON_MAKE_STRING_INPUT_STREAM,
CONSTANT_COMMON_MAKE_STRING_OUTPUT_STREAM,
CONSTANT_COMMON_MAKE_SYMBOL,
CONSTANT_COMMON_MAKE_SYNONYM_STREAM,
CONSTANT_COMMON_MAKE_TWO_WAY_STREAM,
CONSTANT_COMMON_MAKUNBOUND,
CONSTANT_COMMON_MAP,
CONSTANT_COMMON_MAPC,
CONSTANT_COMMON_MAPCAR,
CONSTANT_COMMON_MAPCAN,
CONSTANT_COMMON_MAPHASH,
CONSTANT_COMMON_MAPL,
CONSTANT_COMMON_MAPLIST,
CONSTANT_COMMON_MAPCON,
CONSTANT_COMMON_MAP_INTO,
CONSTANT_COMMON_MASK_FIELD,
CONSTANT_COMMON_MAX,
CONSTANT_COMMON_MERGE,
CONSTANT_COMMON_METHOD,
CONSTANT_COMMON_METHOD_COMBINATION_ERROR,
CONSTANT_COMMON_MEMBER,
CONSTANT_COMMON_MEMBER_IF,
CONSTANT_COMMON_MEMBER_IF_NOT,
CONSTANT_COMMON_MERGE_PATHNAMES,
CONSTANT_COMMON_METHOD_COMBINATION,
CONSTANT_COMMON_MIN,
CONSTANT_COMMON_MINUSP,
CONSTANT_COMMON_MISMATCH,
CONSTANT_COMMON_MOD,
CONSTANT_COMMON_MOST_NEGATIVE_DOUBLE_FLOAT,
CONSTANT_COMMON_MOST_NEGATIVE_FIXNUM,
CONSTANT_COMMON_MOST_NEGATIVE_LONG_FLOAT,
CONSTANT_COMMON_MOST_NEGATIVE_SHORT_FLOAT,
CONSTANT_COMMON_MOST_NEGATIVE_SINGLE_FLOAT,
CONSTANT_COMMON_MOST_POSITIVE_DOUBLE_FLOAT,
CONSTANT_COMMON_MOST_POSITIVE_FIXNUM,
CONSTANT_COMMON_MOST_POSITIVE_LONG_FLOAT,
CONSTANT_COMMON_MOST_POSITIVE_SHORT_FLOAT,
CONSTANT_COMMON_MOST_POSITIVE_SINGLE_FLOAT,
CONSTANT_COMMON_MUFFLE_WARNING,
CONSTANT_COMMON_MULTIPLE_VALUE_BIND,
CONSTANT_COMMON_MULTIPLE_VALUE_CALL,
CONSTANT_COMMON_MULTIPLE_VALUE_LIST,
CONSTANT_COMMON_MULTIPLE_VALUE_PROG1,
CONSTANT_COMMON_MULTIPLE_VALUE_SETQ,
CONSTANT_COMMON_MULTIPLE_VALUES_LIMIT,
CONSTANT_COMMON_NAME_CHAR,
CONSTANT_COMMON_NAMESTRING,
CONSTANT_COMMON_NBUTLAST,
CONSTANT_COMMON_NCONC,
CONSTANT_COMMON_NEXT_METHOD_P,
CONSTANT_COMMON_NINTH,
CONSTANT_COMMON_NINTERSECTION,
CONSTANT_COMMON_NO_APPLICABLE_METHOD,
CONSTANT_COMMON_NO_NEXT_METHOD,
CONSTANT_COMMON_NOT,
CONSTANT_COMMON_NOTANY,
CONSTANT_COMMON_NOTEVERY,
CONSTANT_COMMON_NOTINLINE,
CONSTANT_COMMON_NRECONC,
CONSTANT_COMMON_NREVERSE,
CONSTANT_COMMON_NSET_DIFFERENCE,
CONSTANT_COMMON_NSET_EXCLUSIVE_OR,
CONSTANT_COMMON_NSTRING_CAPITALIZE,
CONSTANT_COMMON_NSTRING_DOWNCASE,
CONSTANT_COMMON_NSTRING_UPCASE,
CONSTANT_COMMON_NSUBLIS,
CONSTANT_COMMON_NSUBST,
CONSTANT_COMMON_NSUBSTITUTE,
CONSTANT_COMMON_NSUBSTITUTE_IF,
CONSTANT_COMMON_NSUBSTITUTE_IF_NOT,
CONSTANT_COMMON_NSUBST_IF,
CONSTANT_COMMON_NSUBST_IF_NOT,
CONSTANT_COMMON_NTH,
CONSTANT_COMMON_NTH_VALUE,
CONSTANT_COMMON_NTHCDR,
CONSTANT_COMMON_NULL,
CONSTANT_COMMON_NUMBER,
CONSTANT_COMMON_NUMBERP,
CONSTANT_COMMON_NUMERATOR,
CONSTANT_COMMON_NUNION,
CONSTANT_COMMON_ODDP,
CONSTANT_COMMON_OTHERWISE,
CONSTANT_COMMON_OPEN,
CONSTANT_COMMON_OPEN_STREAM_P,
CONSTANT_COMMON_OPTIMIZE,
CONSTANT_COMMON_OR,
CONSTANT_COMMON_OUTPUT_STREAM_P,
CONSTANT_COMMON_PACKAGE,
CONSTANT_COMMON_PACKAGEP,
CONSTANT_COMMON_PACKAGE_ERROR,
CONSTANT_COMMON_PACKAGE_ERROR_PACKAGE,
CONSTANT_COMMON_PACKAGE_NAME,
CONSTANT_COMMON_PACKAGE_NICKNAMES,
CONSTANT_COMMON_PACKAGE_SHADOWING_SYMBOLS,
CONSTANT_COMMON_PACKAGE_USE_LIST,
CONSTANT_COMMON_PACKAGE_USED_BY_LIST,
CONSTANT_COMMON_PAIRLIS,
CONSTANT_COMMON_PARSE_ERROR,
CONSTANT_COMMON_PARSE_INTEGER,
CONSTANT_COMMON_PARSE_NAMESTRING,
CONSTANT_COMMON_PATHNAME,
CONSTANT_COMMON_PATHNAME_HOST,
CONSTANT_COMMON_PATHNAME_DEVICE,
CONSTANT_COMMON_PATHNAME_DIRECTORY,
CONSTANT_COMMON_PATHNAME_NAME,
CONSTANT_COMMON_PATHNAME_MATCH_P,
CONSTANT_COMMON_PATHNAME_TYPE,
CONSTANT_COMMON_PATHNAME_VERSION,
CONSTANT_COMMON_PATHNAMEP,
CONSTANT_COMMON_PEEK_CHAR,
CONSTANT_COMMON_PHASE,
CONSTANT_COMMON_PI,
CONSTANT_COMMON_PLUSP,
CONSTANT_COMMON_POP,
CONSTANT_COMMON_POSITION,
CONSTANT_COMMON_POSITION_IF,
CONSTANT_COMMON_POSITION_IF_NOT,
CONSTANT_COMMON_PPRINT,
CONSTANT_COMMON_PPRINT_DISPATCH,
CONSTANT_COMMON_PPRINT_EXIT_IF_LIST_EXHAUSTED,
CONSTANT_COMMON_PPRINT_FILL,
CONSTANT_COMMON_PPRINT_INDENT,
CONSTANT_COMMON_PPRINT_LINEAR,
CONSTANT_COMMON_PPRINT_LOGICAL_BLOCK,
CONSTANT_COMMON_PPRINT_NEWLINE,
CONSTANT_COMMON_PPRINT_POP,
CONSTANT_COMMON_PPRINT_TAB,
CONSTANT_COMMON_PPRINT_TABULAR,
CONSTANT_COMMON_PRIN1,
CONSTANT_COMMON_PRIN1_TO_STRING,
CONSTANT_COMMON_PRINC,
CONSTANT_COMMON_PRINC_TO_STRING,
CONSTANT_COMMON_PRINT,
CONSTANT_COMMON_PRINT_NOT_READABLE,
CONSTANT_COMMON_PRINT_NOT_READABLE_OBJECT,
CONSTANT_COMMON_PRINT_OBJECT,
CONSTANT_COMMON_PRINT_UNREADABLE_OBJECT,
CONSTANT_COMMON_PROBE_FILE,
CONSTANT_COMMON_PROCLAIM,
CONSTANT_COMMON_PROG,
CONSTANT_COMMON_PROG1,
CONSTANT_COMMON_PROG2,
CONSTANT_COMMON_PROGA,
CONSTANT_COMMON_PROGN,
CONSTANT_COMMON_PROGV,
CONSTANT_COMMON_PROGRAM_ERROR,
CONSTANT_COMMON_PROVIDE,
CONSTANT_COMMON_PSETF,
CONSTANT_COMMON_PSETQ,
CONSTANT_COMMON_PUSH,
CONSTANT_COMMON_PUSHNEW,
CONSTANT_COMMON_QUOTE,
CONSTANT_COMMON_RANDOM,
CONSTANT_COMMON_RANDOM_STATE,
CONSTANT_COMMON_RANDOM_STATE_P,
CONSTANT_COMMON_RASSOC,
CONSTANT_COMMON_RASSOC_IF,
CONSTANT_COMMON_RASSOC_IF_NOT,
CONSTANT_COMMON_RATIO,
CONSTANT_COMMON_RATIONAL,
CONSTANT_COMMON_RATIONALIZE,
CONSTANT_COMMON_RATIONALP,
CONSTANT_COMMON_READ,
CONSTANT_COMMON_READ_BYTE,
CONSTANT_COMMON_READ_CHAR,
CONSTANT_COMMON_READ_CHAR_NO_HANG,
CONSTANT_COMMON_READ_DELIMITED_LIST,
CONSTANT_COMMON_READ_FROM_STRING,
CONSTANT_COMMON_READ_LINE,
CONSTANT_COMMON_READ_PRESERVING_WHITESPACE,
CONSTANT_COMMON_READ_SEQUENCE,
CONSTANT_COMMON_READER_ERROR,
CONSTANT_COMMON_READTABLE,
CONSTANT_COMMON_READTABLE_CASE,
CONSTANT_COMMON_READTABLEP,
CONSTANT_COMMON_REAL,
CONSTANT_COMMON_REALP,
CONSTANT_COMMON_REALPART,
CONSTANT_COMMON_REDUCE,
CONSTANT_COMMON_REM,
CONSTANT_COMMON_REMF,
CONSTANT_COMMON_REMHASH,
CONSTANT_COMMON_REMOVE,
CONSTANT_COMMON_REMOVE_DUPLICATES,
CONSTANT_COMMON_REMOVE_IF,
CONSTANT_COMMON_REMOVE_IF_NOT,
CONSTANT_COMMON_REMOVE_METHOD,
CONSTANT_COMMON_REMPROP,
CONSTANT_COMMON_RENAME_FILE,
CONSTANT_COMMON_RENAME_PACKAGE,
CONSTANT_COMMON_REPLACE,
CONSTANT_COMMON_REQUIRE,
CONSTANT_COMMON_REST,
CONSTANT_COMMON_RESTART,
CONSTANT_COMMON_RESTART_BIND,
CONSTANT_COMMON_RESTART_CASE,
CONSTANT_COMMON_RESTART_NAME,
CONSTANT_COMMON_RETURN,
CONSTANT_COMMON_RETURN_FROM,
CONSTANT_COMMON_REVAPPEND,
CONSTANT_COMMON_REVERSE,
CONSTANT_COMMON_ROOM,
CONSTANT_COMMON_ROTATEF,
CONSTANT_COMMON_ROUND,
CONSTANT_COMMON_ROW_MAJOR_AREF,
CONSTANT_COMMON_RPLACA,
CONSTANT_COMMON_RPLACD,
CONSTANT_COMMON_SAFETY,
CONSTANT_COMMON_SATISFIES,
CONSTANT_COMMON_SBIT,
CONSTANT_COMMON_SCALE_FLOAT,
CONSTANT_COMMON_SCHAR,
CONSTANT_COMMON_SEARCH,
CONSTANT_COMMON_SECOND,
CONSTANT_COMMON_SEQUENCE,
CONSTANT_COMMON_SERIOUS_CONDITION,
CONSTANT_COMMON_SET,
CONSTANT_COMMON_SET_DISPATCH_MACRO_CHARACTER,
CONSTANT_COMMON_SET_MACRO_CHARACTER,
CONSTANT_COMMON_SET_PPRINT_DISPATCH,
CONSTANT_COMMON_SET_SYNTAX_FROM_CHAR,
CONSTANT_COMMON_SETF,
CONSTANT_COMMON_SETQ,
CONSTANT_COMMON_SET_DIFFERENCE,
CONSTANT_COMMON_SET_EXCLUSIVE_OR,
CONSTANT_COMMON_SEVENTH,
CONSTANT_COMMON_SHADOW,
CONSTANT_COMMON_SHADOWING_IMPORT,
CONSTANT_COMMON_SHIFTF,
CONSTANT_COMMON_SHORT_FLOAT,
CONSTANT_COMMON_SHORT_FLOAT_EPSILON,
CONSTANT_COMMON_SHORT_FLOAT_NEGATIVE_EPSILON,
CONSTANT_COMMON_SHORT_SITE_NAME,
CONSTANT_COMMON_SIGNAL,
CONSTANT_COMMON_SIGNED_BYTE,
CONSTANT_COMMON_SIGNUM,
CONSTANT_COMMON_SIMPLE_ARRAY,
CONSTANT_COMMON_SIMPLE_BASE_STRING,
CONSTANT_COMMON_SIMPLE_BIT_VECTOR,
CONSTANT_COMMON_SIMPLE_BIT_VECTOR_P,
CONSTANT_COMMON_SIMPLE_CONDITION,
CONSTANT_COMMON_SIMPLE_CONDITION_FORMAT_CONTROL,
CONSTANT_COMMON_SIMPLE_CONDITION_FORMAT_ARGUMENTS,
CONSTANT_COMMON_SIMPLE_ERROR,
CONSTANT_COMMON_SIMPLE_STRING,
CONSTANT_COMMON_SIMPLE_STRING_P,
CONSTANT_COMMON_SIMPLE_TYPE_ERROR,
CONSTANT_COMMON_SIMPLE_VECTOR,
CONSTANT_COMMON_SIMPLE_VECTOR_P,
CONSTANT_COMMON_SIMPLE_WARNING,
CONSTANT_COMMON_SIN,
CONSTANT_COMMON_SINH,
CONSTANT_COMMON_SINGLE_FLOAT,
CONSTANT_COMMON_SINGLE_FLOAT_EPSILON,
CONSTANT_COMMON_SINGLE_FLOAT_NEGATIVE_EPSILON,
CONSTANT_COMMON_SIXTH,
CONSTANT_COMMON_SLEEP,
CONSTANT_COMMON_SLOT_BOUNDP,
CONSTANT_COMMON_SLOT_EXISTS_P,
CONSTANT_COMMON_SLOT_MAKUNBOUND,
CONSTANT_COMMON_SLOT_VALUE,
CONSTANT_COMMON_SOFTWARE_TYPE,
CONSTANT_COMMON_SOFTWARE_VERSION,
CONSTANT_COMMON_SOME,
CONSTANT_COMMON_SORT,
CONSTANT_COMMON_SPACE,
CONSTANT_COMMON_SPECIAL,
CONSTANT_COMMON_SPECIAL_OPERATOR_P,
CONSTANT_COMMON_SPEED,
CONSTANT_COMMON_SQRT,
CONSTANT_COMMON_STABLE_SORT,
CONSTANT_COMMON_STANDARD,
CONSTANT_COMMON_STANDARD_CHAR,
CONSTANT_COMMON_STANDARD_CHAR_P,
CONSTANT_COMMON_STANDARD_CLASS,
CONSTANT_COMMON_STANDARD_GENERIC_FUNCTION,
CONSTANT_COMMON_STANDARD_METHOD,
CONSTANT_COMMON_STANDARD_OBJECT,
CONSTANT_COMMON_STEP,
CONSTANT_COMMON_STORAGE_CONDITION,
CONSTANT_COMMON_STORE_VALUE,
CONSTANT_COMMON_STREAM,
CONSTANT_COMMON_STREAMP,
CONSTANT_COMMON_STREAM_ELEMENT_TYPE,
CONSTANT_COMMON_STREAM_ERROR,
CONSTANT_COMMON_STREAM_ERROR_STREAM,
CONSTANT_COMMON_STREAM_EXTERNAL_FORMAT,
CONSTANT_COMMON_STRING,
CONSTANT_COMMON_STRING_EQL,
CONSTANT_COMMON_STRING_NOT_EQL,
CONSTANT_COMMON_STRING_LESS,
CONSTANT_COMMON_STRING_GREATER,
CONSTANT_COMMON_STRING_LESS_EQUAL,
CONSTANT_COMMON_STRING_GREATER_EQUAL,
CONSTANT_COMMON_STRING_CAPITALIZE,
CONSTANT_COMMON_STRING_DOWNCASE,
CONSTANT_COMMON_STRING_EQUAL,
CONSTANT_COMMON_STRING_GREATERP,
CONSTANT_COMMON_STRING_LEFT_TRIM,
CONSTANT_COMMON_STRING_LESSP,
CONSTANT_COMMON_STRING_NOT_EQUAL,
CONSTANT_COMMON_STRING_NOT_GREATERP,
CONSTANT_COMMON_STRING_NOT_LESSP,
CONSTANT_COMMON_STRING_RIGHT_TRIM,
CONSTANT_COMMON_STRING_STREAM,
CONSTANT_COMMON_STRING_TRIM,
CONSTANT_COMMON_STRING_UPCASE,
CONSTANT_COMMON_STRINGP,
CONSTANT_COMMON_STRUCTURE,
CONSTANT_COMMON_STRUCTURE_CLASS,
CONSTANT_COMMON_STRUCTURE_OBJECT,
CONSTANT_COMMON_STYLE_WARNING,
CONSTANT_COMMON_SUBSETP,
CONSTANT_COMMON_SUBSEQ,
CONSTANT_COMMON_SUBLIS,
CONSTANT_COMMON_SUBST,
CONSTANT_COMMON_SUBSTITUTE,
CONSTANT_COMMON_SUBSTITUTE_IF,
CONSTANT_COMMON_SUBSTITUTE_IF_NOT,
CONSTANT_COMMON_SUBST_IF,
CONSTANT_COMMON_SUBST_IF_NOT,
CONSTANT_COMMON_SUBTYPEP,
CONSTANT_COMMON_SVREF,
CONSTANT_COMMON_SXHASH,
CONSTANT_COMMON_SYMBOL,
CONSTANT_COMMON_SYMBOL_FUNCTION,
CONSTANT_COMMON_SYMBOL_MACROLET,
CONSTANT_COMMON_SYMBOL_NAME,
CONSTANT_COMMON_SYMBOL_PACKAGE,
CONSTANT_COMMON_SYMBOL_PLIST,
CONSTANT_COMMON_SYMBOL_VALUE,
CONSTANT_COMMON_SYMBOLP,
CONSTANT_COMMON_SYNONYM_STREAM,
CONSTANT_COMMON_SYNONYM_STREAM_SYMBOL,
CONSTANT_COMMON_TAGBODY,
CONSTANT_COMMON_TAILP,
CONSTANT_COMMON_TAN,
CONSTANT_COMMON_TANH,
CONSTANT_COMMON_TENTH,
CONSTANT_COMMON_TERPRI,
CONSTANT_COMMON_THE,
CONSTANT_COMMON_THIRD,
CONSTANT_COMMON_THROW,
CONSTANT_COMMON_TIME,
CONSTANT_COMMON_TRACE,
CONSTANT_COMMON_TRANSLATE_LOGICAL_PATHNAME,
CONSTANT_COMMON_TRANSLATE_PATHNAME,
CONSTANT_COMMON_TREE_EQUAL,
CONSTANT_COMMON_TRUENAME,
CONSTANT_COMMON_TRUNCATE,
CONSTANT_COMMON_TWO_WAY_STREAM,
CONSTANT_COMMON_TWO_WAY_STREAM_INPUT_STREAM,
CONSTANT_COMMON_TWO_WAY_STREAM_OUTPUT_STREAM,
CONSTANT_COMMON_TYPE,
CONSTANT_COMMON_TYPEP,
CONSTANT_COMMON_TYPE_ERROR,
CONSTANT_COMMON_TYPE_ERROR_DATUM,
CONSTANT_COMMON_TYPE_ERROR_EXPECTED_TYPE,
CONSTANT_COMMON_TYPE_OF,
CONSTANT_COMMON_TYPECASE,
CONSTANT_COMMON_UNBOUND_SLOT,
CONSTANT_COMMON_UNBOUND_SLOT_INSTANCE,
CONSTANT_COMMON_UNBOUND_VARIABLE,
CONSTANT_COMMON_UNDEFINED_FUNCTION,
CONSTANT_COMMON_UNEXPORT,
CONSTANT_COMMON_UNINTERN,
CONSTANT_COMMON_UNION,
CONSTANT_COMMON_UNLESS,
CONSTANT_COMMON_UNREAD_CHAR,
CONSTANT_COMMON_UNSIGNED_BYTE,
CONSTANT_COMMON_UNTRACE,
CONSTANT_COMMON_UNUSE_PACKAGE,
CONSTANT_COMMON_UNWIND_PROTECT,
CONSTANT_COMMON_UPDATE_INSTANCE_FOR_DIFFERENT_CLASS,
CONSTANT_COMMON_UPDATE_INSTANCE_FOR_REDEFINED_CLASS,
CONSTANT_COMMON_UPGRADED_ARRAY_ELEMENT_TYPE,
CONSTANT_COMMON_UPGRADED_COMPLEX_PART_TYPE,
CONSTANT_COMMON_UPPER_CASE_P,
CONSTANT_COMMON_USE_PACKAGE,
CONSTANT_COMMON_USE_VALUE,
CONSTANT_COMMON_USER_HOMEDIR_PATHNAME,
CONSTANT_COMMON_VALUES,
CONSTANT_COMMON_VALUES_LIST,
CONSTANT_COMMON_VARIABLE,
CONSTANT_COMMON_VECTOR,
CONSTANT_COMMON_VECTOR_POP,
CONSTANT_COMMON_VECTOR_PUSH,
CONSTANT_COMMON_VECTOR_PUSH_EXTEND,
CONSTANT_COMMON_VECTORP,
CONSTANT_COMMON_WARN,
CONSTANT_COMMON_WARNING,
CONSTANT_COMMON_WILD_PATHNAME_P,
CONSTANT_COMMON_WITH_ACCESSORS,
CONSTANT_COMMON_WITH_COMPILATION_UNIT,
CONSTANT_COMMON_WITH_CONDITION_RESTARTS,
CONSTANT_COMMON_WITH_HASH_TABLE_ITERATOR,
CONSTANT_COMMON_WITH_INPUT_FROM_STRING,
CONSTANT_COMMON_WITH_OPEN_FILE,
CONSTANT_COMMON_WITH_OPEN_STREAM,
CONSTANT_COMMON_WITH_OUTPUT_TO_STRING,
CONSTANT_COMMON_WITH_PACKAGE_ITERATOR,
CONSTANT_COMMON_WITH_SIMPLE_RESTART,
CONSTANT_COMMON_WITH_SLOTS,
CONSTANT_COMMON_WITH_STANDARD_IO_SYNTAX,
CONSTANT_COMMON_WHEN,
CONSTANT_COMMON_WRITE,
CONSTANT_COMMON_WRITE_BYTE,
CONSTANT_COMMON_WRITE_CHAR,
CONSTANT_COMMON_WRITE_LINE,
CONSTANT_COMMON_WRITE_SEQUENCE,
CONSTANT_COMMON_WRITE_STRING,
CONSTANT_COMMON_WRITE_TO_STRING,
CONSTANT_COMMON_YES_OR_NO_P,
CONSTANT_COMMON_Y_OR_N_P,
CONSTANT_COMMON_ZEROP,
CONSTANT_CLOSNAME_DATUM,
CONSTANT_CLOSNAME_EXPECTED_TYPE,
CONSTANT_CLOSNAME_FORMAT_ARGUMENTS,
CONSTANT_CLOSNAME_FORMAT_CONTROL,
CONSTANT_CLOSNAME_OPERANDS,
CONSTANT_CLOSNAME_OPERATION,
CONSTANT_CLOSNAME_PACKAGE,
CONSTANT_CLOSNAME_PATHNAME,
CONSTANT_CLOSNAME_STREAM,
CONSTANT_CLOSNAME_NAME,
CONSTANT_CLOSNAME_DIRECT_SLOTS,
CONSTANT_CLOSNAME_DIRECT_SUBCLASSES,
CONSTANT_CLOSNAME_DIRECT_SUPERCLASSES,
CONSTANT_CLOSNAME_CLASS_PRECEDENCE_LIST,
CONSTANT_CLOSNAME_EFFECTIVE_SLOTS,
CONSTANT_CLOSNAME_FINALIZED_P,
CONSTANT_CLOSNAME_PROTOTYPE,
CONSTANT_CLOSNAME_DEFAULT_INITARGS,
CONSTANT_CLOSNAME_DIRECT_DEFAULT_INITARGS,
CONSTANT_CLOSNAME_VERSION,
CONSTANT_CLOSNAME_REDEFINED_CLASS,
CONSTANT_CLOSKEY_NAME,
CONSTANT_CLOSKEY_DIRECT_SLOTS,
CONSTANT_CLOSKEY_DIRECT_SUBCLASSES,
CONSTANT_CLOSKEY_DIRECT_SUPERCLASSES,
CONSTANT_CLOSKEY_CLASS_PRECEDENCE_LIST,
CONSTANT_CLOSKEY_EFFECTIVE_SLOTS,
CONSTANT_CLOSKEY_FINALIZED_P,
CONSTANT_CLOSKEY_PROTOTYPE,
CONSTANT_CLOSKEY_DEFAULT_INITARGS,
CONSTANT_CLOSKEY_DIRECT_DEFAULT_INITARGS,
CONSTANT_CLOSKEY_VERSION,
CONSTANT_CLOSKEY_REDEFINED_CLASS,
CONSTANT_CLOSNAME_METHODS,
CONSTANT_CLOSNAME_LAMBDA_LIST,
CONSTANT_CLOSNAME_ARGUMENT_PRECEDENCE_ORDER,
CONSTANT_CLOSNAME_DECLARATIONS,
CONSTANT_CLOSNAME_METHOD_CLASS,
CONSTANT_CLOSNAME_METHOD_COMBINATION,
CONSTANT_CLOSNAME_VECTOR,
CONSTANT_CLOSNAME_REMOVE,
CONSTANT_CLOSNAME_ARGUMENT,
CONSTANT_CLOSNAME_EQLCHECK,
CONSTANT_CLOSNAME_CACHE,
CONSTANT_CLOSNAME_CALL,
CONSTANT_CLOSNAME_FUNCTION,
CONSTANT_CLOSNAME_PRECEDENCE_INDEX,
CONSTANT_CLOSKEY_METHODS,
CONSTANT_CLOSKEY_LAMBDA_LIST,
CONSTANT_CLOSKEY_ARGUMENT_PRECEDENCE_ORDER,
CONSTANT_CLOSKEY_DECLARATIONS,
CONSTANT_CLOSKEY_METHOD_CLASS,
CONSTANT_CLOSKEY_METHOD_COMBINATION,
CONSTANT_CLOSKEY_VECTOR,
CONSTANT_CLOSKEY_REMOVE,
CONSTANT_CLOSKEY_ARGUMENT,
CONSTANT_CLOSKEY_EQLCHECK,
CONSTANT_CLOSKEY_CACHE,
CONSTANT_CLOSKEY_CALL,
CONSTANT_CLOSKEY_FUNCTION,
CONSTANT_CLOSKEY_PRECEDENCE_INDEX,
CONSTANT_CLOSNAME_GENERIC_FUNCTION,
CONSTANT_CLOSNAME_QUALIFIERS,
CONSTANT_CLOSNAME_SPECIALIZERS,
CONSTANT_CLOSNAME_LONG_P,
CONSTANT_CLOSNAME_DOCUMENTATION,
CONSTANT_CLOSNAME_IDENTITY,
CONSTANT_CLOSNAME_OPERATOR,
CONSTANT_CLOSNAME_ARGUMENTS,
CONSTANT_CLOSNAME_GENERIC,
CONSTANT_CLOSNAME_FORM,
CONSTANT_CLOSNAME_DECLARE,
CONSTANT_CLOSKEY_GENERIC_FUNCTION,
CONSTANT_CLOSKEY_QUALIFIERS,
CONSTANT_CLOSKEY_SPECIALIZERS,
CONSTANT_CLOSKEY_LONG_P,
CONSTANT_CLOSKEY_DOCUMENTATION,
CONSTANT_CLOSKEY_IDENTITY,
CONSTANT_CLOSKEY_OPERATOR,
CONSTANT_CLOSKEY_ARGUMENTS,
CONSTANT_CLOSKEY_GENERIC,
CONSTANT_CLOSKEY_FORM,
CONSTANT_CLOSKEY_DECLARE,
CONSTANT_CLOSNAME_OBJECT,
CONSTANT_CLOSNAME_TYPE,
CONSTANT_CLOSKEY_OBJECT,
CONSTANT_CLOSKEY_TYPE,
CONSTANT_CLOSNAME_READERS,
CONSTANT_CLOSNAME_WRITERS,
CONSTANT_CLOSNAME_ACCESSORS,
CONSTANT_CLOSNAME_INITARGS,
CONSTANT_CLOSNAME_INITFORM,
CONSTANT_CLOSNAME_INITFUNCTION,
CONSTANT_CLOSNAME_ALLOCATION,
CONSTANT_CLOSNAME_INSTANCE,
CONSTANT_CLOSNAME_CLASS,
CONSTANT_CLOSNAME_METACLASS,
CONSTANT_CLOSNAME_BINDING,
CONSTANT_CLOSNAME_ORDER,
CONSTANT_CLOSKEY_READERS,
CONSTANT_CLOSKEY_WRITERS,
CONSTANT_CLOSKEY_ACCESSORS,
CONSTANT_CLOSKEY_INITARGS,
CONSTANT_CLOSKEY_INITFORM,
CONSTANT_CLOSKEY_INITFUNCTION,
CONSTANT_CLOSKEY_ALLOCATION,
CONSTANT_CLOSKEY_INSTANCE,
CONSTANT_CLOSKEY_CLASS,
CONSTANT_CLOSKEY_METACLASS,
CONSTANT_CLOSKEY_BINDING,
CONSTANT_CLOSKEY_ORDER,
CONSTANT_CLOSNAME_SLOTS,
CONSTANT_CLOSNAME_INCLUDE,
CONSTANT_CLOSNAME_VALUE,
CONSTANT_CLOSNAME_PREDICATE,
CONSTANT_CLOSNAME_ACCESS,
CONSTANT_CLOSNAME_COPIER,
CONSTANT_CLOSNAME_CONSTRUCTOR,
CONSTANT_CLOSKEY_SLOTS,
CONSTANT_CLOSKEY_INCLUDE,
CONSTANT_CLOSKEY_VALUE,
CONSTANT_CLOSKEY_PREDICATE,
CONSTANT_CLOSKEY_ACCESS,
CONSTANT_CLOSKEY_COPIER,
CONSTANT_CLOSKEY_CONSTRUCTOR,
CONSTANT_SYSTEM_VALUE,
CONSTANT_SYSTEM_FUNCTION,
CONSTANT_SYSTEM_SETF,
CONSTANT_SYSTEM_INLINE_FUNCTION,
CONSTANT_SYSTEM_INLINE_SETF,
CONSTANT_SYSTEM_TAGBODY,
CONSTANT_SYSTEM_BLOCK,
CONSTANT_SYSTEM_DECLAIM,
CONSTANT_SYSTEM_DEFUN,
CONSTANT_SYSTEM_DEFMACRO,
CONSTANT_SYSTEM_DEFTYPE,
CONSTANT_SYSTEM_DEFINE_COMPILER_MACRO,
CONSTANT_SYSTEM_MACRO_LAMBDA,
CONSTANT_SYSTEM_DESTRUCTURING_BIND,
CONSTANT_SYSTEM_SPECIAL,
CONSTANT_SYSTEM_LEXICAL,
CONSTANT_SYSTEM_LOCAL,
CONSTANT_SYSTEM_GLOBAL,
CONSTANT_SYSTEM_LAMBDA,
CONSTANT_SYSTEM_SCOPE,
CONSTANT_SYSTEM_MULTIPLE_VALUE_BIND,
CONSTANT_SYSTEM_DECLARATION,
CONSTANT_SYSTEM_INLINE,
CONSTANT_SYSTEM_DYNAMIC_VALUE,
CONSTANT_SYSTEM_DYNAMIC_FUNCTION,
CONSTANT_SYSTEM_IGNORE_VALUE,
CONSTANT_SYSTEM_IGNORE_FUNCTION,
CONSTANT_SYSTEM_TYPE,
CONSTANT_SYSTEM_TYPE_SPECIAL,
CONSTANT_SYSTEM_TYPE_LEXICAL,
CONSTANT_SYSTEM_TYPE_VALUE,
CONSTANT_SYSTEM_TYPE_FUNCTION,
CONSTANT_SYSTEM_TYPE_SETF,
CONSTANT_SYSTEM_FUNCTION_ARGTYPE,
CONSTANT_SYSTEM_FUNCTION_RETTYPE,
CONSTANT_SYSTEM_HANDLER,
CONSTANT_SYSTEM_HANDLER_BIND,
CONSTANT_SYSTEM_HANDLER_CASE,
CONSTANT_SYSTEM_RESTART,
CONSTANT_SYSTEM_RESTART_BIND,
CONSTANT_SYSTEM_RESTART_CASE,
CONSTANT_SYSTEM_STANDARD,
CONSTANT_SYSTEM_COMPILED_MACRO_FUNCTION,
CONSTANT_SYSTEM_CONTROL,
CONSTANT_SYSTEM_CODE,
CONSTANT_SYSTEM_CALLNAME,
CONSTANT_SYSTEM_EVAL,
CONSTANT_SYSTEM_INDEX,
CONSTANT_SYSTEM_SYSTEM,
CONSTANT_SYSTEM_QUOTE,
CONSTANT_SYSTEM_ENVIRONMENT,
CONSTANT_SYSTEM_CHARACTER2,
CONSTANT_SYSTEM_CHARQUEUE,
CONSTANT_SYSTEM_CHARBIT,
CONSTANT_SYSTEM_SYMSTACK,
CONSTANT_SYSTEM_BITTYPE,
CONSTANT_SYSTEM_READLABEL,
CONSTANT_SYSTEM_READINFO_SYMBOL,
CONSTANT_SYSTEM_READTYPE,
CONSTANT_SYSTEM_BITCONS,
CONSTANT_SYSTEM_BITBUFFER,
CONSTANT_SYSTEM_HASHITERATOR,
CONSTANT_SYSTEM_PACKAGEITERATOR,
CONSTANT_SYSTEM_TAGINFO,
CONSTANT_SYSTEM_ARRAY_DIMENSION,
CONSTANT_SYSTEM_ARRAY_GENERAL,
CONSTANT_SYSTEM_ARRAY_SPECIALIZED,
CONSTANT_SYSTEM_UNBOUND,
CONSTANT_SYSTEM_SPACE,
CONSTANT_SYSTEM_SPACE1,
CONSTANT_SYSTEM_RESERVED,
CONSTANT_SYSTEM_END,
CONSTANT_SYSTEM_PROMPT_STREAM,
CONSTANT_SYSTEM_PRETTY_STREAM,
CONSTANT_SYSTEM_MEMORY_STREAM,
CONSTANT_SYSTEM_PIPE_STREAM,
CONSTANT_SYSTEM_SIMPLE_CONTROL_ERROR,
CONSTANT_SYSTEM_SIMPLE_FILE_ERROR,
CONSTANT_SYSTEM_SIMPLE_PACKAGE_ERROR,
CONSTANT_SYSTEM_SIMPLE_PARSE_ERROR,
CONSTANT_SYSTEM_SIMPLE_PROGRAM_ERROR,
CONSTANT_SYSTEM_SIMPLE_READER_ERROR,
CONSTANT_SYSTEM_SIMPLE_STYLE_WARNING,
CONSTANT_SYSTEM_LOOP_INITIALLY,
CONSTANT_SYSTEM_LOOP_FINALLY,
CONSTANT_SYSTEM_LOOP_WITH,
CONSTANT_SYSTEM_LOOP_FOR_AS,
CONSTANT_SYSTEM_LOOP_FOR_AS_IN_LIST,
CONSTANT_SYSTEM_LOOP_FOR_AS_ON_LIST,
CONSTANT_SYSTEM_LOOP_FOR_AS_EQUALS_THEN,
CONSTANT_SYSTEM_LOOP_FOR_AS_ACROSS,
CONSTANT_SYSTEM_LOOP_FOR_AS_HASH,
CONSTANT_SYSTEM_LOOP_FOR_AS_PACKAGE_SYMBOL,
CONSTANT_SYSTEM_LOOP_FOR_AS_PACKAGE_PRESENT,
CONSTANT_SYSTEM_LOOP_FOR_AS_PACKAGE_EXTERNAL,
CONSTANT_SYSTEM_LOOP_FOR_AS_ARITHMETIC_UP,
CONSTANT_SYSTEM_LOOP_FOR_AS_ARITHMETIC_DOWNTO,
CONSTANT_SYSTEM_LOOP_FOR_AS_ARITHMETIC_DOWNFROM,
CONSTANT_SYSTEM_LOOP_DO,
CONSTANT_SYSTEM_LOOP_RETURN,
CONSTANT_SYSTEM_LOOP_IF,
CONSTANT_SYSTEM_LOOP_UNLESS,
CONSTANT_SYSTEM_LOOP_COLLECT,
CONSTANT_SYSTEM_LOOP_APPEND,
CONSTANT_SYSTEM_LOOP_NCONC,
CONSTANT_SYSTEM_LOOP_COUNT,
CONSTANT_SYSTEM_LOOP_SUM,
CONSTANT_SYSTEM_LOOP_MAXIMIZE,
CONSTANT_SYSTEM_LOOP_MINIMIZE,
CONSTANT_SYSTEM_LOOP_WHILE,
CONSTANT_SYSTEM_LOOP_UNTIL,
CONSTANT_SYSTEM_LOOP_REPEAT,
CONSTANT_SYSTEM_LOOP_ALWAYS,
CONSTANT_SYSTEM_LOOP_NEVER,
CONSTANT_SYSTEM_LOOP_THEREIS,
CONSTANT_SYSTEM_NEXT_LOOP,
CONSTANT_SYSTEM_END_LOOP,
CONSTANT_SYSTEM_VALUE_LOOP,
CONSTANT_SYSTEM_FUNCTION_LOOP,
CONSTANT_SYSTEM_IT_LOOP,
CONSTANT_SYSTEM_STRUCTURE_GENSYM,
CONSTANT_SYSTEM_STRUCTURE_NAMED,
CONSTANT_SYSTEM_CACHE,
CONSTANT_SYSTEM_TYPE_DOCUMENTATION,
CONSTANT_SYSTEM_COMPILER_MACRO_FUNCTION,
CONSTANT_SYSTEM_SETF_COMPILER_MACRO_FUNCTION,
CONSTANT_SYSTEM_COMPILE_WARNING,
CONSTANT_SYSTEM_COMPILE_STYLE_WARNING,
CONSTANT_SYSTEM_NTH_VALUE,
CONSTANT_SYSTEM_OPTIMIZE_CHECK,
CONSTANT_SYSTEM_CAST_SINGLE_FLOAT,
CONSTANT_SYSTEM_CAST_DOUBLE_FLOAT,
CONSTANT_SYSTEM_CAST_LONG_FLOAT,
CONSTANT_SYSTEM_BYTESPEC,
CONSTANT_SYSTEM_TYPE_SYMBOL,
CONSTANT_SYSTEM_TYPE_LIST,
CONSTANT_SYSTEM_UNIX,
CONSTANT_SYSTEM_WINDOWS,
CONSTANT_SYSTEM_UNIVERSAL,
CONSTANT_SYSTEM_DEVICE,
CONSTANT_SYSTEM_LOGICAL_PATHNAME,
CONSTANT_SYSTEM_TIME1970,
CONSTANT_SYSTEM_ASCII,
CONSTANT_SYSTEM_UTF_8,
CONSTANT_SYSTEM_UTF_8_BOM,
CONSTANT_SYSTEM_UTF_16,
CONSTANT_SYSTEM_UTF_16LE,
CONSTANT_SYSTEM_UTF_16BE,
CONSTANT_SYSTEM_UTF_16LE_BOM,
CONSTANT_SYSTEM_UTF_16BE_BOM,
CONSTANT_SYSTEM_UTF_32,
CONSTANT_SYSTEM_UTF_32LE,
CONSTANT_SYSTEM_UTF_32BE,
CONSTANT_SYSTEM_UTF_32LE_BOM,
CONSTANT_SYSTEM_UTF_32BE_BOM,
CONSTANT_SYSTEM_CR,
CONSTANT_SYSTEM_LF,
CONSTANT_SYSTEM_CRLF,
CONSTANT_SYSTEM_AUTO,
CONSTANT_SYSTEM_CLOSE_ABORT,
CONSTANT_SYSTEM_PRINT_DISPATCH,
CONSTANT_SYSTEM_N,
CONSTANT_SYSTEM_A,
CONSTANT_SYSTEM_H,
CONSTANT_SYSTEM_W,
CONSTANT_SYSTEM_F,
CONSTANT_SYSTEM_NA,
CONSTANT_SYSTEM_DISPATCH_VECTOR,
CONSTANT_SYSTEM_DISPATCH_QUOTE,
CONSTANT_SYSTEM_DISPATCH_CALL,
CONSTANT_SYSTEM_DISPATCH_DEFUN,
CONSTANT_SYSTEM_DISPATCH_LET,
CONSTANT_SYSTEM_DELAY_WARNING,
CONSTANT_SYSTEM_DOC_TYPE,
CONSTANT_SYSTEM_OBJECT,
CONSTANT_SYSTEM_STEP,
CONSTANT_CODE_NOP,
CONSTANT_CODE_BEGIN,
CONSTANT_CODE_BEGIN_CALL,
CONSTANT_CODE_END,
CONSTANT_CODE_ESCAPE,
CONSTANT_CODE_ESCAPE_NOT,
CONSTANT_CODE_SAVE,
CONSTANT_CODE_RESTORE,
CONSTANT_CODE_NORMAL,
CONSTANT_CODE_REVERT,
CONSTANT_CODE_REVERT_GOTO,
CONSTANT_CODE_SET,
CONSTANT_CODE_PUSH,
CONSTANT_CODE_PUSH_RESULT,
CONSTANT_CODE_PUSH_VALUES,
CONSTANT_CODE_NIL_SET,
CONSTANT_CODE_NIL_PUSH,
CONSTANT_CODE_T_SET,
CONSTANT_CODE_T_PUSH,
CONSTANT_CODE_LEXICAL,
CONSTANT_CODE_LEXICAL_SET,
CONSTANT_CODE_LEXICAL_PUSH,
CONSTANT_CODE_LEXICAL_REM,
CONSTANT_CODE_LEXICAL_FREE,
CONSTANT_CODE_SPECIAL,
CONSTANT_CODE_SPECIAL_SET,
CONSTANT_CODE_SPECIAL_PUSH,
CONSTANT_CODE_SPECIAL_REM,
CONSTANT_CODE_DECLAIM_SPECIAL,
CONSTANT_CODE_DECLAIM_TYPE_VALUE,
CONSTANT_CODE_DECLAIM_TYPE_FUNCTION,
CONSTANT_CODE_DECLAIM_INLINE,
CONSTANT_CODE_DECLAIM_NOTINLINE,
CONSTANT_CODE_DECLAIM_COMPILATION,
CONSTANT_CODE_DECLAIM_DEBUG,
CONSTANT_CODE_DECLAIM_SAFETY,
CONSTANT_CODE_DECLAIM_SPACE,
CONSTANT_CODE_DECLAIM_SPEED,
CONSTANT_CODE_DECLAIM_DECLARATION,
CONSTANT_CODE_TYPE_RESULT,
CONSTANT_CODE_TYPE_LEXICAL,
CONSTANT_CODE_TYPE_SPECIAL,
CONSTANT_CODE_TYPE_GLOBAL,
CONSTANT_CODE_TYPE_FUNCTION,
CONSTANT_CODE_TYPE_SETF,
CONSTANT_CODE_LET_LEXICAL,
CONSTANT_CODE_LET_SPECIAL,
CONSTANT_CODE_LETA_SPECIAL,
CONSTANT_CODE_SETQ_LEXICAL,
CONSTANT_CODE_SETQ_SPECIAL,
CONSTANT_CODE_SETQ_GLOBAL,
CONSTANT_CODE_FUNCTION_SET,
CONSTANT_CODE_FUNCTION_PUSH,
CONSTANT_CODE_SETF_SET,
CONSTANT_CODE_SETF_PUSH,
CONSTANT_CODE_DEFMACRO,
CONSTANT_CODE_DEFTYPE,
CONSTANT_CODE_DEFINE_COMPILER_MACRO,
CONSTANT_CODE_DEFUN,
CONSTANT_CODE_CALL_NAME,
CONSTANT_CODE_CALL_RESULT,
CONSTANT_CODE_CALL_TYPE,
CONSTANT_CODE_CALL_KEY,
CONSTANT_CODE_CALL_FUNCTION,
CONSTANT_CODE_CALL_SETF,
CONSTANT_CODE_CALL_LEXICAL,
CONSTANT_CODE_VALUES_NIL,
CONSTANT_CODE_VALUES_SET,
CONSTANT_CODE_THE_SET,
CONSTANT_CODE_THE_PUSH,
CONSTANT_CODE_IF_UNBOUND,
CONSTANT_CODE_IF_NIL,
CONSTANT_CODE_IF_T,
CONSTANT_CODE_GOTO,
CONSTANT_CODE_GO,
CONSTANT_CODE_RETURN_FROM,
CONSTANT_CODE_CATCH,
CONSTANT_CODE_THROW,
CONSTANT_CODE_TAG,
CONSTANT_CODE_TAGINFO,
CONSTANT_CODE_BLOCKINFO,
CONSTANT_CODE_HANDLER_BIND,
CONSTANT_CODE_HANDLER_CASE,
CONSTANT_CODE_RESTART_BIND,
CONSTANT_CODE_RESTART_CASE,
CONSTANT_CODE_RESTART_PROGN,
CONSTANT_CODE_FUNCALL,
CONSTANT_CODE_NTH_VALUE,
CONSTANT_CODE_PROGV,
CONSTANT_CODE_POP,
CONSTANT_CODE_POP_UNBOUND,
CONSTANT_CODE_GETF,
CONSTANT_CODE_REST_COPY,
CONSTANT_CODE_REST_BIND,
CONSTANT_CODE_ALLOW_OTHER_KEYS,
CONSTANT_CODE_REST_NULL,
CONSTANT_CODE_WHOLE,
CONSTANT_CODE_LAMBDA,
CONSTANT_CODE_LAMBDA_NAME,
CONSTANT_CODE_LAMBDA_TYPE,
CONSTANT_CODE_LAMBDA_DOC,
CONSTANT_CODE_LAMBDA_FORM,
CONSTANT_CODE_LAMBDA_DEFUN,
CONSTANT_CODE_LAMBDA_CLOSURE,
CONSTANT_CODE_LAMBDA_LEXICAL,
CONSTANT_CODE_LAMBDA_CACHE,
CONSTANT_CODE_LAMBDA_CACHE_SET,
CONSTANT_CODE_MACRO,
CONSTANT_CODE_MACRO_SPECIAL,
CONSTANT_CODE_MACRO_ENV,
CONSTANT_CODE_MACRO_WHOLE,
CONSTANT_CODE_LABELS_MAKE,
CONSTANT_CODE_LABELS_LAMBDA,
CONSTANT_CODE_BIND1_TYPE,
CONSTANT_CODE_BIND1_SPECIAL,
CONSTANT_CODE_BIND1_LEXICAL,
CONSTANT_CODE_BIND2_TYPE,
CONSTANT_CODE_BIND2_SPECIAL,
CONSTANT_CODE_BIND2_LEXICAL,
CONSTANT_CODE_LOAD_ALLOC,
CONSTANT_CODE_LOAD_GENSYM,
CONSTANT_CODE_LOAD_SET,
CONSTANT_CODE_REFERENCE_SET,
CONSTANT_CODE_REFERENCE_PUSH,
CONSTANT_CODE_STEP,
CONSTANT_CODE_STEP_OFF,
CONSTANT_CODE_STEP_BEGIN,
CONSTANT_CODE_STEP_END,
CONSTANT_CODE_OPTCODE_RESULT_TYPE,
CONSTANT_CODE_OPTCODE_CAR0_SET,
CONSTANT_CODE_OPTCODE_CAR0_PUSH,
CONSTANT_CODE_OPTCODE_CAR1_SET,
CONSTANT_CODE_OPTCODE_CAR1_PUSH,
CONSTANT_CODE_OPTCODE_CDR0_SET,
CONSTANT_CODE_OPTCODE_CDR0_PUSH,
CONSTANT_CODE_OPTCODE_CDR1_SET,
CONSTANT_CODE_OPTCODE_CDR1_PUSH,
CONSTANT_CODE_OPTCODE_CONS,
CONSTANT_CLOSNAME_METAOBJECT,
CONSTANT_CLOSNAME_SPECIALIZER,
CONSTANT_CLOSNAME_EQL_SPECIALIZER,
CONSTANT_CLOSNAME_FORWARD_REFERENCED_CLASS,
CONSTANT_CLOSNAME_FUNCALLABLE_STANDARD_OBJECT,
CONSTANT_CLOSNAME_FUNCALLABLE_STANDARD_CLASS,
CONSTANT_CLOSNAME_STANDARD_READER_METHOD,
CONSTANT_CLOSNAME_STANDARD_WRITER_METHOD,
CONSTANT_CLOSNAME_STANDARD_ACCESSOR_METHOD,
CONSTANT_CLOSNAME_SLOT_DEFINITION,
CONSTANT_CLOSNAME_DIRECT_SLOT_DEFINITION,
CONSTANT_CLOSNAME_EFFECTIVE_SLOT_DEFINITION,
CONSTANT_CLOSNAME_STANDARD_SLOT_DEFINITION,
CONSTANT_CLOSNAME_STANDARD_DIRECT_SLOT_DEFINITION,
CONSTANT_CLOSNAME_STANDARD_EFFECTIVE_SLOT_DEFINITION,
CONSTANT_COMMON_ALLOCATE_INSTANCE,
CONSTANT_COMMON_INITIALIZE_INSTANCE,
CONSTANT_COMMON_REINITIALIZE_INSTANCE,
CONSTANT_COMMON_SHARED_INITIALIZE,
CONSTANT_COMMON_ENSURE_GENERIC_FUNCTION,
CONSTANT_COMMON_MAKE_INSTANCE,
CONSTANT_COMMON_SLOT_MISSING,
CONSTANT_COMMON_SLOT_UNBOUND,
CONSTANT_COMMON_CHANGE_CLASS,
CONSTANT_COMMON_FUNCTION_KEYWORDS,
CONSTANT_CLOSNAME_REDEFINED,
CONSTANT_CLOSNAME_REFERENCED_CLASS,
CONSTANT_CLOSNAME_ENSURE_CLASS,
CONSTANT_CLOSNAME_ENSURE_CLASS_USING_CLASS,
CONSTANT_CLOSNAME_ENSURE_GENERIC_FUNCTION_USING_CLASS,
CONSTANT_CLOSNAME_ENSURE_METHOD,
CONSTANT_CLOSNAME_SLOT_BOUNDP_USING_CLASS,
CONSTANT_CLOSNAME_SLOT_EXISTS_P_USING_CLASS,
CONSTANT_CLOSNAME_SLOT_MAKUNBOUND_USING_CLASS,
CONSTANT_CLOSNAME_SLOT_VALUE_USING_CLASS,
CONSTANT_CLOSNAME_FLET_METHOD_P,
CONSTANT_CLOSNAME_FLET_NEXT_METHOD,
CONSTANT_CLOSNAME_DEFINE_METHOD_COMBINATION,
CONSTANT_CLOSNAME_DEFINE_LONG_METHOD_COMBINATION,
CONSTANT_CLOSNAME_DEFINE_SHORT_METHOD_COMBINATION,
CONSTANT_CLOSNAME_LONG_METHOD_COMBINATION,
CONSTANT_CLOSNAME_SHORT_METHOD_COMBINATION,
CONSTANT_CLOSNAME_METHOD_COMBINATION_INSTANCE,
CONSTANT_CLOSNAME_ENSURE_METHOD_COMBINATION_SHORT,
CONSTANT_CLOSNAME_ENSURE_METHOD_COMBINATION_LONG,
CONSTANT_CLOSNAME_QUALIFIERS_ELT,
CONSTANT_CLOSNAME_COMBINATION_BINDING,
CONSTANT_CLOSNAME_MACRO_MAKE_METHOD,
CONSTANT_CLOSNAME_MACRO_CALL_METHOD,
CONSTANT_CLOSNAME_MACRO_METHOD_LAMBDA,
CONSTANT_COMMON_CLASS_NAME,
CONSTANT_CLOSNAME_CLASS_SLOTS,
CONSTANT_CLOSNAME_CLASS_DIRECT_SLOTS,
CONSTANT_CLOSNAME_CLASS_DEFAULT_INITARGS,
CONSTANT_CLOSNAME_CLASS_DIRECT_DEFAULT_INITARGS,
CONSTANT_CLOSNAME_CLASS_DIRECT_SUPERCLASSES,
CONSTANT_CLOSNAME_CLASS_DIRECT_SUBCLASSES,
CONSTANT_CLOSNAME_CLASS_FINALIZED_P,
CONSTANT_CLOSNAME_CLASS_PROTOTYPE,
CONSTANT_CLOSNAME_SLOT_DEFINITION_NAME,
CONSTANT_CLOSNAME_SLOT_DEFINITION_TYPE,
CONSTANT_CLOSNAME_SLOT_DEFINITION_ALLOCATION,
CONSTANT_CLOSNAME_SLOT_DEFINITION_INITARGS,
CONSTANT_CLOSNAME_SLOT_DEFINITION_INITFORM,
CONSTANT_CLOSNAME_SLOT_DEFINITION_INITFUNCTION,
CONSTANT_CLOSNAME_GENERIC_FUNCTION_NAME,
CONSTANT_CLOSNAME_GENERIC_FUNCTION_METHODS,
CONSTANT_CLOSNAME_GENERIC_FUNCTION_LAMBDA_LIST,
CONSTANT_CLOSNAME_GENERIC_FUNCTION_ARGUMENT_PRECEDENCE_ORDER,
CONSTANT_CLOSNAME_GENERIC_FUNCTION_DECLARATIONS,
CONSTANT_CLOSNAME_GENERIC_FUNCTION_METHOD_CLASS,
CONSTANT_CLOSNAME_GENERIC_FUNCTION_METHOD_COMBINATION,
CONSTANT_CLOSNAME_METHOD_FUNCTION,
CONSTANT_CLOSNAME_METHOD_GENERIC_FUNCTION,
CONSTANT_CLOSNAME_METHOD_LAMBDA_LIST,
CONSTANT_CLOSNAME_METHOD_SPECIALIZERS,
CONSTANT_COMMON_METHOD_QUALIFIERS,
CONSTANT_CLOSNAME_ACCESSOR_METHOD_SLOT_DEFINITION,
CONSTANT_CLOSNAME_MAKE_METHOD_LAMBDA,
CONSTANT_CLOSNAME_FIND_METHOD_COMBINATION,
CONSTANT_RT_ERROR,
CONSTANT_RT_PUSH_ENTRIES,
CONSTANT_RT_DEFTEST,
CONSTANT_RT_DEFTEST_ERROR,
CONSTANT_RT_DEFTEST_ERROR_,
CONSTANT_RT_DO_TESTS,
CONSTANT_RT_REM_ALL_TESTS,
CONSTANT_RT_EQUALRT,
CONSTANT_SYSTEM_INPUT,
CONSTANT_SYSTEM_PROCESS,
CONSTANT_SYSTEM_READTABLE_DOT,
CONSTANT_SYSTEM_DOUBLE_QUOTE_READER,
CONSTANT_SYSTEM_SINGLE_QUOTE_READER,
CONSTANT_SYSTEM_PARENSIS_OPEN_READER,
CONSTANT_SYSTEM_PARENSIS_CLOSE_READER,
CONSTANT_SYSTEM_SEMICOLON_READER,
CONSTANT_SYSTEM_BACKQUOTE_READER,
CONSTANT_SYSTEM_COMMA_READER,
CONSTANT_SYSTEM_SHARP_READER,
CONSTANT_SYSTEM_DISPATCH_FUNCTION,
CONSTANT_SYSTEM_ERROR_DISPATCH,
CONSTANT_SYSTEM_EQUAL_DISPATCH,
CONSTANT_SYSTEM_SHARP_DISPATCH,
CONSTANT_SYSTEM_SINGLE_QUOTE_DISPATCH,
CONSTANT_SYSTEM_PARENSIS_OPEN_DISPATCH,
CONSTANT_SYSTEM_PARENSIS_CLOSE_DISPATCH,
CONSTANT_SYSTEM_ASTERISK_DISPATCH,
CONSTANT_SYSTEM_COLON_DISPATCH,
CONSTANT_SYSTEM_LESS_DISPATCH,
CONSTANT_SYSTEM_BACKSLASH_DISPATCH,
CONSTANT_SYSTEM_OR_DISPATCH,
CONSTANT_SYSTEM_PLUS_DISPATCH,
CONSTANT_SYSTEM_MINUS_DISPATCH,
CONSTANT_SYSTEM_DOT_DISPATCH,
CONSTANT_SYSTEM_ARRAY_DISPATCH,
CONSTANT_SYSTEM_BINARY_DISPATCH,
CONSTANT_SYSTEM_COMPLEX_DISPATCH,
CONSTANT_SYSTEM_OCTAL_DISPATCH,
CONSTANT_SYSTEM_PATHNAME_DISPATCH,
CONSTANT_SYSTEM_RADIX_DISPATCH,
CONSTANT_SYSTEM_STRUCTURE_DISPATCH,
CONSTANT_SYSTEM_HEXADECIMAL_DISPATCH,
CONSTANT_SYSTEM_BACKQUOTE,
CONSTANT_SYSTEM_UNBOUND_VALUE,
CONSTANT_SYSTEM_INCLUDE,
CONSTANT_SYSTEM_EXCLUDE,
CONSTANT_SYSTEM_INVALID,
CONSTANT_SYSTEM_FALSE,
CONSTANT_SYSTEM_SUBTYPEP_ATOMIC,
CONSTANT_SYSTEM_SUBTYPEP_ATOMIC_NOT,
CONSTANT_SYSTEM_SUBTYPEP_COMPOUND,
CONSTANT_SYSTEM_SUBTYPEP_FORCE_NUMBER,
CONSTANT_SYSTEM_SUBTYPEP_NORMAL,
CONSTANT_SYSTEM_TERME_INPUT,
CONSTANT_SYSTEM_TERME_OUTPUT,
CONSTANT_SYSTEM_TERME_MOVE,
CONSTANT_SYSTEM_TERME_CLEAR,
CONSTANT_SYSTEM_TERME_DELETE,
CONSTANT_SYSTEM_TERME_FONT,
CONSTANT_SYSTEM_TERME_SIZE,
CONSTANT_SYSTEM_TERME_SCROLL,
CONSTANT_SYSTEM_TERME_BEGIN,
CONSTANT_SYSTEM_TERME_END,
CONSTANT_SYSTEM_TERME_ENABLE,
CONSTANT_SYSTEM_TERME_SIGNAL,
CONSTANT_SYSTEM_TERME_HANG,
CONSTANT_SYSTEM_TERME_CODE,
CONSTANT_SYSTEM_TERME_UP,
CONSTANT_SYSTEM_TERME_DOWN,
CONSTANT_SYSTEM_TERME_LEFT,
CONSTANT_SYSTEM_TERME_RIGHT,
CONSTANT_SYSTEM_TERME_PAGE_UP,
CONSTANT_SYSTEM_TERME_PAGE_DOWN,
CONSTANT_SYSTEM_TERME_HOME,
CONSTANT_SYSTEM_TERME_INSERT,
CONSTANT_SYSTEM_TERME_FUNCTION,
CONSTANT_SYSTEM_TERME_ESCAPE,
CONSTANT_SYSTEM_FP_NAN,
CONSTANT_SYSTEM_FP_INFINITE,
CONSTANT_SYSTEM_FP_NORMAL,
CONSTANT_SYSTEM_FP_SUBNORMAL,
CONSTANT_SYSTEM_FP_ZERO,
CONSTANT_SYSTEM_PAPER,
CONSTANT_SYSTEM_DEFINE_SYMBOL_MACRO,
CONSTANT_SYSTEM_SYMBOL_MACRO_EXPANDER,
CONSTANT_SYSTEM_DEFCONSTANT,
CONSTANT_SYSTEM_IN_PACKAGE,
CONSTANT_SYSTEM_SETPLIST,
CONSTANT_SYSTEM_REMPLIST,
CONSTANT_SYSTEM_MAKE_HASH_ITERATOR,
CONSTANT_SYSTEM_NEXT_HASH_ITERATOR,
CONSTANT_SYSTEM_MAKE_PACKAGE_ITERATOR,
CONSTANT_SYSTEM_NEXT_PACKAGE_ITERATOR,
CONSTANT_SYSTEM_DEFPACKAGE,
CONSTANT_SYSTEM_DO_SYMBOLS,
CONSTANT_SYSTEM_DO_EXTERNAL_SYMBOLS,
CONSTANT_SYSTEM_DO_ALL_SYMBOLS,
CONSTANT_SYSTEM_GETDOC_VARIABLE,
CONSTANT_SYSTEM_SETDOC_VARIABLE,
CONSTANT_SYSTEM_ECASE_ERROR,
CONSTANT_SYSTEM_ETYPECASE_ERROR,
CONSTANT_SYSTEM_DEFINE_SETF_EXPANDER,
CONSTANT_SYSTEM_END_INPUT_STREAM,
CONSTANT_SYSTEM_MAKE_EXTEND_OUTPUT_STREAM,
CONSTANT_SYSTEM_PROMPT_FOR,
CONSTANT_SYSTEM_PRINT_UNREADABLE_CALL,
CONSTANT_SYSTEM_WRITE_DEFAULT,
CONSTANT_SYSTEM_SYMBOL_DEFTYPE,
CONSTANT_SYSTEM_DELETE_DEFTYPE,
CONSTANT_SYSTEM_ENSURE_STRUCTURE,
CONSTANT_SYSTEM_STRUCTURE_CONSTRUCTOR,
CONSTANT_SYSTEM_LOOP_BIND,
CONSTANT_SYSTEM_MAKE_PPRINT_STREAM,
CONSTANT_SYSTEM_PPRINT_GENSYM,
CONSTANT_SYSTEM_PPRINT_EXIT,
CONSTANT_SYSTEM_PPRINT_POP,
CONSTANT_SYSTEM_PPRINT_CHECK,
CONSTANT_SYSTEM_PPRINT_CLOSE,
CONSTANT_SYSTEM_PPRINT_PRETTY,
CONSTANT_SYSTEM_TIMEINFO,
CONSTANT_SYSTEM_TRACE_ADD,
CONSTANT_SYSTEM_TRACE_DEL,
CONSTANT_SYSTEM_WITH_COMPILATION_UNIT,
CONSTANT_SYSTEM_SET_SLOTS,
CONSTANT_SYSTEM_INTERN_EQL_SPECIALIZER,
CONSTANT_SYSTEM_DEFGENERIC_DEFINE,
CONSTANT_SYSTEM_DEFGENERIC_METHOD,
CONSTANT_SYSTEM_CONDITION_RESTARTS_PUSH,
CONSTANT_SYSTEM_CONDITION_RESTARTS_POP,
CONSTANT_SYSTEM_CONDITION_RESTARTS_MAKE,
CONSTANT_SYSTEM_MAKE_RESTART,
CONSTANT_SYSTEM_RESTART_PROGN,
CONSTANT_SYSTEM_ABORT_LISP,
CONSTANT_SYSTEM_HELLO,
CONSTANT_SYSTEM_INFOBIT,
CONSTANT_SYSTEM_INFOPRINT,
CONSTANT_SYSTEM_GC,
CONSTANT_SYSTEM_SAVECORE,
CONSTANT_SYSTEM_LOADCORE,
CONSTANT_SYSTEM_PACKAGE_EXPORT_LIST,
CONSTANT_SYSTEM_SPECIALP,
CONSTANT_SYSTEM_ARRAY_GENERAL_P,
CONSTANT_SYSTEM_ARRAY_SPECIALIZED_P,
CONSTANT_SYSTEM_SIMPLE_SORT,
CONSTANT_SYSTEM_BUBBLE_SORT,
CONSTANT_SYSTEM_QUICK_SORT,
CONSTANT_SYSTEM_MERGE_SORT,
CONSTANT_SYSTEM_EXIT,
CONSTANT_SYSTEM_QUIT,
CONSTANT_SYSTEM_CLOSP,
CONSTANT_SYSTEM_FIXNUMP,
CONSTANT_SYSTEM_BIGNUMP,
CONSTANT_SYSTEM_RATIOP,
CONSTANT_SYSTEM_SHORT_FLOAT_P,
CONSTANT_SYSTEM_SINGLE_FLOAT_P,
CONSTANT_SYSTEM_DOUBLE_FLOAT_P,
CONSTANT_SYSTEM_LONG_FLOAT_P,
CONSTANT_SYSTEM_CALLNAMEP,
CONSTANT_SYSTEM_LARGE_NUMBER,
CONSTANT_SYSTEM_MAKE_CHARACTER,
CONSTANT_SYSTEM_MAKE_FIXNUM,
CONSTANT_SYSTEM_MAKE_BIGNUM,
CONSTANT_SYSTEM_MAKE_RATIO,
CONSTANT_SYSTEM_MAKE_COMPLEX,
CONSTANT_SYSTEM_EQUAL_RANDOM_STATE,
CONSTANT_SYSTEM_SUBTYPEP_EXTEND,
CONSTANT_SYSTEM_SUBTYPEP_NUMBER,
CONSTANT_SYSTEM_EASTASIAN_SET,
CONSTANT_SYSTEM_EASTASIAN_GET,
CONSTANT_SYSTEM_EASTASIAN_WIDTH,
CONSTANT_SYSTEM_RUN_PROGRAM,
CONSTANT_SYSTEM_MAKE_CALLNAME,
CONSTANT_SYSTEM_REMOVE_FILE,
CONSTANT_SYSTEM_REMOVE_DIRECTORY,
CONSTANT_SYSTEM_DECLARE_PARSE,
CONSTANT_SYSTEM_PARSE_TYPE,
CONSTANT_SYSTEM_UPGRADED_OPEN_ELEMENT_TYPE,
CONSTANT_SYSTEM_MAKE_MEMORY_INPUT_STREAM,
CONSTANT_SYSTEM_MAKE_MEMORY_OUTPUT_STREAM,
CONSTANT_SYSTEM_MAKE_MEMORY_IO_STREAM,
CONSTANT_SYSTEM_WITH_INPUT_FROM_MEMORY,
CONSTANT_SYSTEM_WITH_OUTPUT_TO_MEMORY,
CONSTANT_SYSTEM_GET_OUTPUT_STREAM_MEMORY,
CONSTANT_SYSTEM_MEMORY_STREAM_P,
CONSTANT_SYSTEM_BYTE_INTEGER,
CONSTANT_SYSTEM_SYSCTL,
CONSTANT_SYSTEM_TERME,
CONSTANT_SYSTEM_FPCLASSIFY,
CONSTANT_SYSTEM_MAKE_PAPER,
CONSTANT_SYSTEM_INFO_PAPER,
CONSTANT_SYSTEM_ARRAY_PAPER,
CONSTANT_SYSTEM_BODY_PAPER,
CONSTANT_SYSTEM_DLFILE,
CONSTANT_SYSTEM_DLCALL,
CONSTANT_SPECIAL_BREAK_ON_SIGNALS,
CONSTANT_SPECIAL_COMPILE_FILE_PATHNAME,
CONSTANT_SPECIAL_COMPILE_FILE_TRUENAME,
CONSTANT_SPECIAL_COMPILE_PRINT,
CONSTANT_SPECIAL_COMPILE_VERBOSE,
CONSTANT_SPECIAL_DEBUG_IO,
CONSTANT_SPECIAL_DEBUGGER_HOOK,
CONSTANT_SPECIAL_DEFAULT_PATHNAME_DEFAULTS,
CONSTANT_SPECIAL_ERROR_OUTPUT,
CONSTANT_SPECIAL_FEATURES,
CONSTANT_SPECIAL_GENSYM_COUNTER,
CONSTANT_SPECIAL_LOAD_PATHNAME,
CONSTANT_SPECIAL_LOAD_PRINT,
CONSTANT_SPECIAL_LOAD_TRUENAME,
CONSTANT_SPECIAL_LOAD_VERBOSE,
CONSTANT_SPECIAL_MACROEXPAND_HOOK,
CONSTANT_SPECIAL_MODULES,
CONSTANT_SPECIAL_PACKAGE,
CONSTANT_SPECIAL_PRINT_ARRAY,
CONSTANT_SPECIAL_PRINT_BASE,
CONSTANT_SPECIAL_PRINT_CASE,
CONSTANT_SPECIAL_PRINT_CIRCLE,
CONSTANT_SPECIAL_PRINT_ESCAPE,
CONSTANT_SPECIAL_PRINT_GENSYM,
CONSTANT_SPECIAL_PRINT_LENGTH,
CONSTANT_SPECIAL_PRINT_LEVEL,
CONSTANT_SPECIAL_PRINT_LINES,
CONSTANT_SPECIAL_PRINT_MISER_WIDTH,
CONSTANT_SPECIAL_PRINT_PPRINT_DISPATCH,
CONSTANT_SPECIAL_PRINT_PRETTY,
CONSTANT_SPECIAL_PRINT_RADIX,
CONSTANT_SPECIAL_PRINT_READABLY,
CONSTANT_SPECIAL_PRINT_RIGHT_MARGIN,
CONSTANT_SPECIAL_QUERY_IO,
CONSTANT_SPECIAL_RANDOM_STATE,
CONSTANT_SPECIAL_READTABLE,
CONSTANT_SPECIAL_READ_BASE,
CONSTANT_SPECIAL_READ_DEFAULT_FLOAT_FORMAT,
CONSTANT_SPECIAL_READ_EVAL,
CONSTANT_SPECIAL_READ_SUPPRESS,
CONSTANT_SPECIAL_STANDARD_INPUT,
CONSTANT_SPECIAL_STANDARD_OUTPUT,
CONSTANT_SPECIAL_TERMINAL_IO,
CONSTANT_SPECIAL_TRACE_OUTPUT,
CONSTANT_SYSTEM_ENABLE_DEBUGGER,
CONSTANT_SYSTEM_INDEX_DEBUGGER,
CONSTANT_SYSTEM_EVAL_PARSE_ENVIRONMENT,
CONSTANT_SYSTEM_PARSE_DECLARE,
CONSTANT_SYSTEM_EVAL_SCOPE,
CONSTANT_SYSTEM_EVAL_SCOPE_GLOBAL,
CONSTANT_SYSTEM_EVAL_TOPLEVEL,
CONSTANT_SYSTEM_EVAL_COMPILE_TIME,
CONSTANT_SYSTEM_EVAL_COMPILE_TOPLEVEL,
CONSTANT_SYSTEM_EVAL_LOAD_TOPLEVEL,
CONSTANT_SYSTEM_EVAL_EXECUTE,
CONSTANT_SYSTEM_SPECIAL_ENVIRONMENT,
CONSTANT_SYSTEM_SPECIAL_ARGUMENTS,
CONSTANT_SYSTEM_LOAD_SIZE,
CONSTANT_SYSTEM_LOAD_ARRAY,
CONSTANT_SYSTEM_LOAD_TABLE,
CONSTANT_SYSTEM_LOAD_GENSYM,
CONSTANT_SYSTEM_LOAD_DEPEND,
CONSTANT_SYSTEM_LOAD_PUSH,
CONSTANT_SYSTEM_DEPEND_LOOP,
CONSTANT_SYSTEM_DEPEND_PASS,
CONSTANT_SYSTEM_DEPEND_ERROR,
CONSTANT_SYSTEM_DEPEND_ROOT,
CONSTANT_SYSTEM_GCHOLD,
CONSTANT_SYSTEM_LOOP_NAMED,
CONSTANT_SYSTEM_LOOP_VARS,
CONSTANT_SYSTEM_LOOP_INIT,
CONSTANT_SYSTEM_LOOP_FINAL,
CONSTANT_SYSTEM_LOOP_FORM,
CONSTANT_SYSTEM_LOOP_LET,
CONSTANT_SYSTEM_ENABLE_COMPILER_MACRO,
CONSTANT_SYSTEM_LOAD_LOGICAL_PATHNAME_TRANSLATIONS,
CONSTANT_SYSTEM_EXTERNAL_FORMAT,
CONSTANT_SYSTEM_END_OF_LINE,
CONSTANT_SYSTEM_PRINT_WRITE,
CONSTANT_SYSTEM_DEFAULT_PRINT_DISPATCH,
CONSTANT_SYSTEM_EMPTY_PRINT_DISPATCH,
CONSTANT_SYSTEM_DELAY_WARNING_LIST,
CONSTANT_SYSTEM_DELAY_WARNING_SWITCH,
CONSTANT_SYSTEM_MODULE_PROVIDER_FUNCTIONS,
CONSTANT_SYSTEM_COMPILE_OUTPUT,
CONSTANT_SYSTEM_COMPILE_CODE,
CONSTANT_SYSTEM_ENCODE_UNIVERSAL_1970,
CONSTANT_SYSTEM_ED_FUNCTION,
CONSTANT_SYSTEM_ED_TEMPFILE,
CONSTANT_SYSTEM_ED_PROGRAM,
CONSTANT_SYSTEM_TRACE_LIST,
CONSTANT_SYSTEM_TRACE_DEPTH,
CONSTANT_SYSTEM_DRIBBLE_FILE,
CONSTANT_SYSTEM_DRIBBLE_INPUT,
CONSTANT_SYSTEM_DRIBBLE_OUTPUT,
CONSTANT_SYSTEM_DRIBBLE_ECHO,
CONSTANT_SYSTEM_DRIBBLE_BROADCAST,
CONSTANT_SYSTEM_INSPECTED,
CONSTANT_SYSTEM_STEP_BEGIN,
CONSTANT_RT_RESULT,
CONSTANT_RT_INDEX,
CONSTANT_RT_ENTRIES,
CONSTANT_RT_ENTRIES_TABLE,
CONSTANT_RT_ENTRIES_WARNING,
CONSTANT_SYSTEM_READINFO_SPECIAL,
CONSTANT_SYSTEM_EVAL_LOOP_EXIT,
CONSTANT_SYSTEM_PROMPT,
CONSTANT_SYSTEM_PROMPT_READING,
CONSTANT_SYSTEM_PROMPT_VALUE,
CONSTANT_SYSTEM_PROMPT_BRIGHT,
CONSTANT_SYSTEM_PROMPT_COLOR,
CONSTANT_SYSTEM_SPECIAL_TERME,
CONSTANT_SYSTEM_SPECIAL_DLFILE,
CONSTANT_SYSTEM_CORE_INPUT,
CONSTANT_SYSTEM_CORE_OUTPUT,
CONSTANT_SYSTEM_SUBTYPEP_VALUE,
CONSTANT_SYSTEM_STANDARD_INPUT,
CONSTANT_SYSTEM_STANDARD_OUTPUT,
CONSTANT_SYSTEM_STANDARD_ERROR,
	CONSTANT_SIZE
};

#ifdef __cplusplus
typedef int constindex;
#else
typedef enum CONSTANT_INDEX constindex;
#endif

#endif


/************************************************************
 *  object.h
 ************************************************************/
#ifndef __OBJECT_HEADER__
#define __OBJECT_HEADER__


#define alloc_cons _n(alloc_cons)
#define alloc_symbol _n(alloc_symbol)
#define alloc_array2_memory _n(alloc_array2_memory)
#define alloc_array4_memory _n(alloc_array4_memory)
#define alloc_body2_memory _n(alloc_body2_memory)
#define alloc_body4_memory _n(alloc_body4_memory)
#define alloc_smallsize_memory _n(alloc_smallsize_memory)
#define alloc_arraybody_memory _n(alloc_arraybody_memory)
#define alloc_array _n(alloc_array)
#define alloc_body _n(alloc_body)
#define alloc_array8 _n(alloc_array8)
#define alloc_body8 _n(alloc_body8)
#define alloc_array2_debug _n(alloc_array2_debug)
#define alloc_array4_debug _n(alloc_array4_debug)
#define alloc_body2_debug _n(alloc_body2_debug)
#define alloc_body4_debug _n(alloc_body4_debug)
#define alloc_smallsize_debug _n(alloc_smallsize_debug)
#define alloc_arraybody_debug _n(alloc_arraybody_debug)
#define build_object _n(build_object)
#define nil_heap _n(nil_heap)
#define t_heap _n(t_heap)
#define consnil_heap _n(consnil_heap)
#define conscar_heap _n(conscar_heap)
#define conscdr_heap _n(conscdr_heap)
#define cons_heap _n(cons_heap)
#define consnil_local _n(consnil_local)
#define conscar_local _n(conscar_local)
#define conscdr_local _n(conscdr_local)
#define cons_local _n(cons_local)
#define consnil_alloc _n(consnil_alloc)
#define conscar_alloc _n(conscar_alloc)
#define conscdr_alloc _n(conscdr_alloc)
#define cons_alloc _n(cons_alloc)
#define refconscar_unsafe _n(refconscar_unsafe)
#define refconscdr_unsafe _n(refconscdr_unsafe)
#define getconscar_unsafe _n(getconscar_unsafe)
#define getconscdr_unsafe _n(getconscdr_unsafe)
#define getcons_unsafe _n(getcons_unsafe)
#define setconscar_unsafe _n(setconscar_unsafe)
#define setconscdr_unsafe _n(setconscdr_unsafe)
#define setcons_unsafe _n(setcons_unsafe)
#define setconscar_force _n(setconscar_force)
#define setconscdr_force _n(setconscdr_force)
#define setcons_force _n(setcons_force)
#define listp _n(listp)
#define consp _n(consp)
#define singlep _n(singlep)
#define vector2_heap _n(vector2_heap)
#define vector2_local _n(vector2_local)
#define vector2_alloc _n(vector2_alloc)
#define vector4_heap _n(vector4_heap)
#define vector4_local _n(vector4_local)
#define vector4_alloc _n(vector4_alloc)
#define vector8_heap _n(vector8_heap)
#define vector8_local _n(vector8_local)
#define vector8_alloc _n(vector8_alloc)
#define vector_heap _n(vector_heap)
#define vector_local _n(vector_local)
#define vector_alloc _n(vector_alloc)
#define vector_type_heap _n(vector_type_heap)
#define copy_vector4_alloc _n(copy_vector4_alloc)
#define copy_vector4_local _n(copy_vector4_local)
#define copy_vector4_heap _n(copy_vector4_heap)
#define copy_vector_alloc _n(copy_vector_alloc)
#define copy_vector_local _n(copy_vector_local)
#define copy_vector_heap _n(copy_vector_heap)
#define fixnump _n(fixnump)
#define make_fixnum_heap _n(make_fixnum_heap)
#define fixnum_heap _n(fixnum_heap)
#define fixnum_local _n(fixnum_local)
#define fixnum_alloc _n(fixnum_alloc)
#define fixnumh _n(fixnumh)
#define fixnuml _n(fixnuml)
#define fixnuma _n(fixnuma)
#define ptrfixnum _n(ptrfixnum)
#define reffixnum _n(reffixnum)
#define getfixnum _n(getfixnum)
#define setfixnum _n(setfixnum)
#define fixnumequal _n(fixnumequal)
#define fixnumcompare _n(fixnumcompare)
#define indexp _n(indexp)
#define index_heap _n(index_heap)
#define index_local _n(index_local)
#define index_alloc _n(index_alloc)
#define ptrindex _n(ptrindex)
#define refindex _n(refindex)
#define getindex _n(getindex)
#define setindex _n(setindex)
#define incindex _n(incindex)
#define decindex _n(decindex)
#define short_float_p _n(short_float_p)
#define single_float_p _n(single_float_p)
#define single_float_heap _n(single_float_heap)
#define single_float_local _n(single_float_local)
#define single_float_alloc _n(single_float_alloc)
#define ptrsinglefloat _n(ptrsinglefloat)
#define refsinglefloat _n(refsinglefloat)
#define getsinglefloat _n(getsinglefloat)
#define setsinglefloat _n(setsinglefloat)
#define double_float_p _n(double_float_p)
#define double_float_heap _n(double_float_heap)
#define double_float_local _n(double_float_local)
#define double_float_alloc _n(double_float_alloc)
#define ptrdoublefloat _n(ptrdoublefloat)
#define refdoublefloat _n(refdoublefloat)
#define getdoublefloat _n(getdoublefloat)
#define setdoublefloat _n(setdoublefloat)
#define long_float_p _n(long_float_p)
#define long_float_heap _n(long_float_heap)
#define long_float_local _n(long_float_local)
#define long_float_alloc _n(long_float_alloc)
#define ptrlongfloat _n(ptrlongfloat)
#define reflongfloat _n(reflongfloat)
#define getlongfloat _n(getlongfloat)
#define setlongfloat _n(setlongfloat)
#define singleh _n(singleh)
#define doubleh _n(doubleh)
#define longh _n(longh)
#define queue_heap _n(queue_heap)
#define queue_local _n(queue_local)
#define queue_alloc _n(queue_alloc)
#define pushqueue_heap _n(pushqueue_heap)
#define pushqueue_local _n(pushqueue_local)
#define pushqueue_alloc _n(pushqueue_alloc)
#define dotqueue _n(dotqueue)
#define clearqueue _n(clearqueue)
#define rootqueue _n(rootqueue)
#define tailqueue _n(tailqueue)
#define firstqueue _n(firstqueue)
#define lastqueue _n(lastqueue)
#define nthqueue _n(nthqueue)

enum SYMBOL_INDEX {
	SYMBOL_INDEX_SPECIAL  = 0,
	SYMBOL_INDEX_CDR      = 1, /* (cdr nil) -> nil */
	SYMBOL_INDEX_VALUE    = 2,
	SYMBOL_INDEX_FUNCTION = 3,
	SYMBOL_INDEX_NAME     = 4,
	SYMBOL_INDEX_PACKAGE  = 5,
	SYMBOL_INDEX_PLIST    = 6,
	SYMBOL_INDEX_INFO     = 7,
	SYMBOL_INDEX_SIZE     = 8  /* size must be a even number. */
};


/****************************************************************************
 *  low level macro
 ****************************************************************************/
#define GetCons_Low(x,l,r)			{ \
	addr *_getcons_pos = PtrArrayA2(x); \
	*(l) = _getcons_pos[0]; \
	*(r) = _getcons_pos[1]; \
}
#define GetCar_Low(x,v)				GetArrayA2(x, 0, v)
#define GetCdr_Low(x,v)				GetArrayA2(x, 1, v)
#define RefCar_Low(x)				RefArrayA2(x, 0)
#define RefCdr_Low(x)				RefArrayA2(x, 1)

#ifdef LISP_DEBUG
#define SetCons_Low(x,l,r)			{ \
	addr _pos = (x); \
	addr _left = (l); \
	addr _right = (r); \
	CheckDynamic(_pos, _left); \
	CheckDynamic(_pos, _right); \
	SetCar_Low(_pos, _left); \
	SetCdr_Low(_pos, _right); \
}
#else
#define SetCons_Low(x,l,r)			{ \
	addr _pos = (x); \
	SetCar_Low(_pos, (l)); \
	SetCdr_Low(_pos, (r)); \
}
#endif
#define SetCar_Low(x,v)				SetArrayA2(x,0,v)
#define SetCdr_Low(x,v)				SetArrayA2(x,1,v)
#define SetCar_force(x,v)			SetArrayA2_force(x,0,v)
#define SetCdr_force(x,v)			SetArrayA2_force(x,1,v)

#define PtrFixnum_Low(x)			((const fixnum *)PtrBodyB2(x))
#define RefFixnum_Low(x)			(*PtrFixnum_Low(x))
#define GetFixnum_Low(x,v)			GetvBodyB2((x),fixnum,(v))
#define SetFixnum_Low(x,v)			SetvBodyB2((x),fixnum,(v))

#define PtrIndex_Low(x)				((const size_t *)PtrBodyB2(x))
#define RefIndex_Low(x)				(*PtrIndex_Low(x))
#define GetIndex_Low(x,v)			GetvBodyB2((x),size_t,(v))
#define SetIndex_Low(x,v)			SetvBodyB2((x),size_t,(v))
#define IncIndex_Low(x,v)			IncvBodyB2((x),size_t,(v))
#define DecIndex_Low(x,v)			DecvBodyB2((x),size_t,(v))

#define PtrSingleFloat_Low(x)		((const single_float *)PtrBodyB2(x))
#define RefSingleFloat_Low(x)		(*PtrSingleFloat_Low(x))
#define GetSingleFloat_Low(x,v)		GetvBodyB2((x),single_float,(v))
#define SetSingleFloat_Low(x,v)		SetvBodyB2((x),single_float,(v))
#define PtrDoubleFloat_Low(x)		((const double_float *)PtrBodyB2(x))
#define RefDoubleFloat_Low(x)		(*PtrDoubleFloat_Low(x))
#define GetDoubleFloat_Low(x,v)		GetvBodyB2((x),double_float,(v))
#define SetDoubleFloat_Low(x,v)		SetvBodyB2((x),double_float,(v))
#define PtrLongFloat_Low(x)			((const long_float*)PtrBodyB2(x))
#define RefLongFloat_Low(x)			(*PtrLongFloat_Low(x))
#define GetLongFloat_Low(x,v)		GetvBodyB2((x),long_float,(v))
#define SetLongFloat_Low(x,v)		SetvBodyB2((x),long_float,(v))


/****************************************************************************
 *  function
 ****************************************************************************/
#ifdef LISP_DEBUG
#define GetCons(x,l,r)				getcons_unsafe(x,l,r)
#define GetCar(x,v)					getconscar_unsafe(x,v)
#define GetCdr(x,v)					getconscdr_unsafe(x,v)
#define RefCar(x)					refconscar_unsafe(x)
#define RefCdr(x)					refconscdr_unsafe(x)
#define SetCons(x,l,r)				setcons_unsafe(x,l,r)
#define SetCar(x,v)					setconscar_unsafe(x,v)
#define SetCdr(x,v)					setconscdr_unsafe(x,v)

#define RefFixnum(x)				(*ptrfixnum(x))
#define GetFixnum(x,v)				getfixnum(x,v)
#define SetFixnum(x,v)				setfixnum(x,v)

#define RefIndex(x)					(*ptrindex(x))
#define GetIndex(x,v)				getindex(x,v)
#define SetIndex(x,v)				setindex(x,v)
#define IncIndex(x,v)				incindex(x,v)
#define DecIndex(x,v)				decindex(x,v)

#define RefSingleFloat(x)			(*ptrsinglefloat(x))
#define GetSingleFloat(x,v)			getsinglefloat(x,v)
#define SetSingleFloat(x,v)			setsinglefloat(x,v)
#define RefDoubleFloat(x)			(*ptrdoublefloat(x))
#define GetDoubleFloat(x,v)			getdoublefloat(x,v)
#define SetDoubleFloat(x,v)			setdoublefloat(x,v)
#define RefLongFloat(x)				(*ptrlongfloat(x))
#define GetLongFloat(x,v)			getlongfloat(x,v)
#define SetLongFloat(x,v)			setlongfloat(x,v)

#else

#define GetCons(x,l,r)				GetCons_Low(x,l,r)
#define GetCar(x,v)					GetCar_Low(x,v)
#define GetCdr(x,v)					GetCdr_Low(x,v)
#define RefCar(x)					RefCar_Low(x)
#define RefCdr(x)					RefCdr_Low(x)
#define SetCons(x,l,r)				SetCons_Low(x,l,r)
#define SetCar(x,v)					SetCar_Low(x,v)
#define SetCdr(x,v)					SetCdr_Low(x,v)

#define RefFixed(x)					RefFixed_Low(x)
#define GetFixed(x,v)				GetFixed_Low(x,v)
#define SetFixed(x,v)				SetFixed_Low(x,v)
#define IncFixed(x,v)				IncFixed_Low(x,v)
#define DecFixed(x,v)				DecFixed_Low(x,v)

#define RefFixnum(x)				RefFixnum_Low(x)
#define GetFixnum(x,v)				GetFixnum_Low(x,v)
#define SetFixnum(x,v)				SetFixnum_Low(x,v)

#define RefIndex(x)					RefIndex_Low(x)
#define GetIndex(x,v)				GetIndex_Low(x,v)
#define SetIndex(x,v)				SetIndex_Low(x,v)
#define IncIndex(x,v)				IncIndex_Low(x,v)
#define DecIndex(x,v)				DecIndex_Low(x,v)

#define RefSingleFloat(x)			RefSingleFloat_Low(x)
#define GetSingleFloat(x,v)			GetSingleFloat_Low(x,v)
#define SetSingleFloat(x,v)			SetSingleFloat_Low(x,v)
#define RefDoubleFloat(x)			RefDoubleFloat_Low(x)
#define GetDoubleFloat(x,v)			GetDoubleFloat_Low(x,v)
#define SetDoubleFloat(x,v)			SetDoubleFloat_Low(x,v)
#define RefLongFloat(x)				RefLongFloat_Low(x)
#define GetLongFloat(x,v)			GetLongFloat_Low(x,v)
#define SetLongFloat(x,v)			SetLongFloat_Low(x,v)

#endif

/* alloc */
void alloc_cons(LocalRoot, addr *);
void alloc_symbol(LocalRoot, addr *);
void alloc_array2_memory(LocalRoot, addr *, enum LISPTYPE, byte16);
void alloc_array4_memory(LocalRoot, addr *, enum LISPTYPE, byte32);
void alloc_body2_memory(LocalRoot, addr *, enum LISPTYPE, byte16);
void alloc_body4_memory(LocalRoot, addr *, enum LISPTYPE, byte32);
void alloc_smallsize_memory(LocalRoot, addr *, enum LISPTYPE, byte, byte);
void alloc_arraybody_memory(LocalRoot, addr *, enum LISPTYPE, byte16, byte16);
void alloc_array(LocalRoot, addr *, enum LISPTYPE, size_t);
void alloc_body(LocalRoot, addr *, enum LISPTYPE, size_t);
#ifdef LISP_ARCH_64BIT
void alloc_array8(LocalRoot, addr *, enum LISPTYPE, size_t);
void alloc_body8(LocalRoot, addr *, enum LISPTYPE, size_t);
#endif

#ifdef LISP_DEBUG
void alloc_array2_debug(LocalRoot, addr *, enum LISPTYPE, size_t);
void alloc_array4_debug(LocalRoot, addr *, enum LISPTYPE, size_t);
void alloc_body2_debug(LocalRoot, addr *, enum LISPTYPE, size_t);
void alloc_body4_debug(LocalRoot, addr *, enum LISPTYPE, size_t);
void alloc_smallsize_debug(LocalRoot, addr *, enum LISPTYPE, size_t, size_t);
void alloc_arraybody_debug(LocalRoot, addr *, enum LISPTYPE, size_t, size_t);
#define alloc_array2 alloc_array2_debug
#define alloc_array4 alloc_array4_debug
#define alloc_body2 alloc_body2_debug
#define alloc_body4 alloc_body4_debug
#define alloc_smallsize alloc_smallsize_debug
#define alloc_arraybody alloc_arraybody_debug
#else
#define alloc_array2(m,r,t,a) alloc_array2_memory((m),(r),(t),(byte16)(a))
#define alloc_array4(m,r,t,a) alloc_array4_memory((m),(r),(t),(byte32)(a))
#define alloc_body2(m,r,t,b) alloc_body2_memory((m),(r),(t),(byte16)(b))
#define alloc_body4(m,r,t,b) alloc_body4_memory((m),(r),(t),(byte32)(b))
#define alloc_smallsize(m,r,t,a,b) \
	alloc_smallsize_memory((m),(r),(t),(byte)(a),(byte)(b))
#define alloc_arraybody(m,r,t,a,b) \
	alloc_arraybody_memory((m),(r),(t),(byte16)(a),(byte16)(b))
#endif

/* init / free */
void build_object(void);

/* nil t */
void nil_heap(void);
void t_heap(void);

/* cons */
void consnil_heap(addr *ret);
void conscar_heap(addr *ret, addr left);
void conscdr_heap(addr *ret, addr right);
void cons_heap(addr *ret, addr left, addr right);
void consnil_local(LocalRoot local, addr *ret);
void conscar_local(LocalRoot local, addr *ret, addr left);
void conscdr_local(LocalRoot local, addr *ret, addr right);
void cons_local(LocalRoot local, addr *ret, addr left, addr right);
void consnil_alloc(LocalRoot local, addr *ret);
void conscar_alloc(LocalRoot local, addr *ret, addr left);
void conscdr_alloc(LocalRoot local, addr *ret, addr right);
void cons_alloc(LocalRoot local, addr *ret, addr left, addr right);

addr refconscar_unsafe(addr pos);
addr refconscdr_unsafe(addr pos);
void getconscar_unsafe(addr pos, addr *ret);
void getconscdr_unsafe(addr pos, addr *ret);
void getcons_unsafe(addr pos, addr *left, addr *right);
void setconscar_unsafe(addr pos, addr value);
void setconscdr_unsafe(addr pos, addr value);
void setcons_unsafe(addr pos, addr left, addr right);
void setconscar_force(addr pos, addr value);
void setconscdr_force(addr pos, addr value);
void setcons_force(addr pos, addr left, addr right);

/* list */
int listp(addr pos);
int consp(addr pos);
int singlep(addr pos);

/* vector */
void vector2_heap(addr *ret, size_t size);
void vector2_local(LocalRoot local, addr *ret, size_t size);
void vector2_alloc(LocalRoot local, addr *ret, size_t size);
void vector4_heap(addr *ret, size_t size);
void vector4_local(LocalRoot local, addr *ret, size_t size);
void vector4_alloc(LocalRoot local, addr *ret, size_t size);
#ifdef LISP_ARCH_64BIT
void vector8_heap(addr *ret, size_t size);
void vector8_local(LocalRoot local, addr *ret, size_t size);
void vector8_alloc(LocalRoot local, addr *ret, size_t size);
#endif
void vector_heap(addr *ret, size_t size);
void vector_local(LocalRoot local, addr *ret, size_t size);
void vector_alloc(LocalRoot local, addr *ret, size_t size);
void vector_type_heap(addr *ret, addr pos, size_t size);
void copy_vector4_alloc(LocalRoot local, addr *ret, addr pos);
void copy_vector4_local(LocalRoot local, addr *ret, addr pos);
void copy_vector4_heap(addr *ret, addr pos);
void copy_vector_alloc(LocalRoot local, addr *ret, addr pos);
void copy_vector_local(LocalRoot local, addr *ret, addr pos);
void copy_vector_heap(addr *ret, addr pos);

/* fixnum */
int fixnump(addr pos);
void make_fixnum_heap(addr *ret, fixnum value);
void fixnum_heap(addr *ret, fixnum value);
void fixnum_local(LocalRoot local, addr *ret, fixnum value);
void fixnum_alloc(LocalRoot local, addr *ret, fixnum value);
addr fixnumh(fixnum value);
addr fixnuml(fixnum value);
addr fixnuma(LocalRoot local, fixnum value);
const fixnum *ptrfixnum(addr pos);
fixnum reffixnum(addr pos);
void getfixnum(addr pos, fixnum *ret);
void setfixnum(addr pos, fixnum value);
int fixnumequal(addr left, addr right);
int fixnumcompare(addr left, addr right);

/* index */
int indexp(addr pos);
void index_heap(addr *ret, size_t value);
void index_local(LocalRoot local, addr *ret, size_t value);
void index_alloc(LocalRoot local, addr *ret, size_t value);

const size_t *ptrindex(addr pos);
size_t refindex(addr pos);
void getindex(addr pos, size_t *ret);
void setindex(addr pos, size_t value);
void incindex(addr pos, size_t value);
void decindex(addr pos, size_t value);

/* float */
int short_float_p(addr value);
int single_float_p(addr value);
void single_float_heap(addr *ret, single_float value);
void single_float_local(LocalRoot local, addr *ret, single_float value);
void single_float_alloc(LocalRoot local, addr *ret, single_float value);
const single_float *ptrsinglefloat(addr pos);
single_float refsinglefloat(addr pos);
void getsinglefloat(addr pos, single_float *ret);
void setsinglefloat(addr pos, single_float value);

int double_float_p(addr value);
void double_float_heap(addr *ret, double_float value);
void double_float_local(LocalRoot local, addr *ret, double_float value);
void double_float_alloc(LocalRoot local, addr *ret, double_float value);
const double_float *ptrdoublefloat(addr pos);
double_float refdoublefloat(addr pos);
void getdoublefloat(addr pos, double_float *ret);
void setdoublefloat(addr pos, double_float value);

int long_float_p(addr value);
void long_float_heap(addr *ret, long_float value);
void long_float_local(LocalRoot local, addr *ret, long_float value);
void long_float_alloc(LocalRoot local, addr *ret, long_float value);
const long_float *ptrlongfloat(addr pos);
long_float reflongfloat(addr pos);
void getlongfloat(addr pos, long_float *ret);
void setlongfloat(addr pos, long_float value);

addr singleh(single_float value);
addr doubleh(double_float value);
addr longh(long_float value);

/* queue */
void queue_heap(addr *ret);
void queue_local(LocalRoot local, addr *ret);
void queue_alloc(LocalRoot local, addr *ret);
void pushqueue_heap(addr pos, addr insert);
void pushqueue_local(LocalRoot local, addr pos, addr insert);
void pushqueue_alloc(LocalRoot local, addr pos, addr insert);
void dotqueue(addr pos, addr right);
void clearqueue(addr pos);

void rootqueue(addr pos, addr *ret);
void tailqueue(addr pos, addr *ret);
int firstqueue(addr pos, addr *ret);
int lastqueue(addr pos, addr *ret);
int nthqueue(addr pos, size_t index, addr *ret);

#endif


/************************************************************
 *  memory.h
 ************************************************************/
#ifndef __MEMORY_HEADER__
#define __MEMORY_HEADER__


#define gettype _n(gettype)
#define getobjectlength _n(getobjectlength)
#define getmemorylength _n(getmemorylength)
#define valid_header _n(valid_header)
#define lenarrayA2 _n(lenarrayA2)
#define lenarraySS _n(lenarraySS)
#define lenarrayA4 _n(lenarrayA4)
#define lenarrayAB _n(lenarrayAB)
#define lenarray _n(lenarray)
#define lenarrayA8 _n(lenarrayA8)
#define lenarrayA2r _n(lenarrayA2r)
#define lenarraySSr _n(lenarraySSr)
#define lenarrayA4r _n(lenarrayA4r)
#define lenarrayABr _n(lenarrayABr)
#define lenarrayr _n(lenarrayr)
#define lenarrayA8r _n(lenarrayA8r)
#define lenbodyB2 _n(lenbodyB2)
#define lenbodySS _n(lenbodySS)
#define lenbodyB4 _n(lenbodyB4)
#define lenbodyAB _n(lenbodyAB)
#define lenbody _n(lenbody)
#define lenbodyB8 _n(lenbodyB8)
#define lenbodyB2r _n(lenbodyB2r)
#define lenbodySSr _n(lenbodySSr)
#define lenbodyB4r _n(lenbodyB4r)
#define lenbodyABr _n(lenbodyABr)
#define lenbodyr _n(lenbodyr)
#define lenbodyB8r _n(lenbodyB8r)
#define posbodySSa _n(posbodySSa)
#define posbodyABa _n(posbodyABa)
#define posbodyB2 _n(posbodyB2)
#define posbodySS _n(posbodySS)
#define posbodyB4 _n(posbodyB4)
#define posbodyAB _n(posbodyAB)
#define posbody _n(posbody)
#define posbodyB8 _n(posbodyB8)
#define posbodySSar _n(posbodySSar)
#define posbodyABar _n(posbodyABar)
#define posbodyB2r _n(posbodyB2r)
#define posbodySSr _n(posbodySSr)
#define posbodyB4r _n(posbodyB4r)
#define posbodyABr _n(posbodyABr)
#define posbodyr _n(posbodyr)
#define posbodyB8r _n(posbodyB8r)
#define posbodylenSSa _n(posbodylenSSa)
#define posbodylenABa _n(posbodylenABa)
#define posbodylenB2 _n(posbodylenB2)
#define posbodylenSS _n(posbodylenSS)
#define posbodylenB4 _n(posbodylenB4)
#define posbodylenAB _n(posbodylenAB)
#define posbodylen _n(posbodylen)
#define posbodylenB8 _n(posbodylenB8)
#define getarrayA2 _n(getarrayA2)
#define getarraySS _n(getarraySS)
#define getarrayA4 _n(getarrayA4)
#define getarrayAB _n(getarrayAB)
#define getarray _n(getarray)
#define getarrayA8 _n(getarrayA8)
#define refarrayA2 _n(refarrayA2)
#define refarraySS _n(refarraySS)
#define refarrayA4 _n(refarrayA4)
#define refarrayAB _n(refarrayAB)
#define refarray _n(refarray)
#define refarrayA8 _n(refarrayA8)
#define checkdynamic _n(checkdynamic)
#define setarray_chain _n(setarray_chain)
#define setarrayA2 _n(setarrayA2)
#define setarraySS _n(setarraySS)
#define setarrayA4 _n(setarrayA4)
#define setarrayAB _n(setarrayAB)
#define setarray _n(setarray)
#define setarrayA8 _n(setarrayA8)
#define setarrayA2_force _n(setarrayA2_force)
#define setarraySS_force _n(setarraySS_force)
#define setarrayA4_force _n(setarrayA4_force)
#define setarrayAB_force _n(setarrayAB_force)
#define setarrayA8_force _n(setarrayA8_force)
#define nilarray2 _n(nilarray2)
#define nilarray4 _n(nilarray4)
#define nilarray8 _n(nilarray8)
#define unboundarray2 _n(unboundarray2)
#define unboundarray4 _n(unboundarray4)
#define unboundarray8 _n(unboundarray8)
#define size_split _n(size_split)

/****************************************************************************
 *  Object
 *     [T S C U] [v v v v] ...
 *     (Type Status - -)
 *
 *  Value
 *    PtrValue1A: [T S C U][v - - -]
 *    PtrValue1B: [T S C U][- v - -]
 *    PtrValue2A: [T S C U][v v - -]
 *    PtrValue2B: [T S C U][- - v v]
 *    PtrValue4A: [T S C U][v4-----]
 *    PtrValue4B: [T S C U][- - - -] [v4-----]
 *    PtrValue4C: [T S C U][- - - -] [- - - -][v4-----]
 *    PtrValue4D: [T S C U][- - - -] [- - - -][- - - -] [v4-----]
 *    PtrValue8A: [T S C U][- - - -] [v8--------------]
 *    PtrValue8B: [T S C U][- - - -] [- - - -][- - - -] [v8--------------]
 *    PtrValue8C: [T S C U][- - - -] [- - - -][- - - -] [- - - -][- - - -] [v8]
 *
 *  64bit
 *            A4: [T S C U][a a a a] [s s s s][s s s s]
 *            B4: [T S C U][b b b b] [s s s s][s s s s]
 *            AB: [T S C U][a a b b] [s s s s][s s s s]
 *            A8: [T S C U][- - - -] [s s s s][s s s s] [a a a a][a a a a]
 *            B8: [T S C U][- - - -] [s s s s][s s s s] [b b b b][b b b b]
 *  32bit
 *            A4: [T S C U][a a a a] [- - - -][s s s s]
 *            B4: [T S C U][b b b b] [- - - -][s s s s]
 *            AB: [T S C U][a a b b] [- - - -][s s s s]
 *
 *  ---
 *            SS: [T S C U][a b s s]
 *            A2: [T S C U][a a s s]
 *            B2: [T S C U][b b s s]
 ****************************************************************************/

enum LISPSIZE {
	LISPSIZE_ARRAY2      = 0,
	LISPSIZE_ARRAY4      = 1,
	LISPSIZE_ARRAY8      = 2,
	LISPSIZE_SMALLSIZE   = 3,
	LISPSIZE_ARRAYBODY   = 4,
	LISPSIZE_BODY2       = 5,
	LISPSIZE_BODY4       = 6,
	LISPSIZE_BODY8       = 7,
	LISPSIZE_SIZE
};

enum LISPSTATUS {
	LISPSTATUS_SIZE1     = 0,
	LISPSTATUS_SIZE2     = 1,
	LISPSTATUS_SIZE3     = 2,
	LISPSTATUS_DYNAMIC   = 3,   /* local object */
	LISPSTATUS_READONLY  = 4,   /* can't write */
	LISPSTATUS_SYSTEM    = 5,   /* can't gc */
	LISPSTATUS_FIXED     = 6,   /* can't move */
	LISPSTATUS_GC        = 7,
	LISPSTATUS_SIZE
};


/****************************************************************************
 *  function
 ****************************************************************************/
/* Header */
#define GetType(x)              ((enum LISPTYPE)(RdByte(x)))
#define SetType(x,y)            (WtByte((x), (y)))
#define PtrStatus(x)            (((addr)(x)) + 1UL)
#define GetStatus(x)            (RdByte(PtrStatus(x)))
#define SetStatus(x,y)          (WtByte(PtrStatus(x), (y)))
#define PtrChain(x)				(((addr)(x)) + 2UL)
#define GetChain(x)				(RdByte(PtrChain(x)))
#define SetChain(x,y)			(WtByte(PtrChain(x), (y)))
#define PtrUser(x)				(((addr)(x)) + 3UL)
#define GetUser(x)				(RdByte(PtrUser(x)))
#define SetUser(x,y)			(WtByte(PtrUser(x), (y)))

#define BitStatusSize(x)        ((x) & 0x07UL)
#define BitStatusDynamic(x)     GetBitByte((x), LISPSTATUS_DYNAMIC)
#define BitStatusReadOnly(x)    GetBitByte((x), LISPSTATUS_READONLY)
#define BitStatusSystem(x)      GetBitByte((x), LISPSTATUS_SYSTEM)
#define BitStatusFixed(x)       GetBitByte((x), LISPSTATUS_FIXED)
#define BitStatusGc(x)          GetBitByte((x), LISPSTATUS_GC)

#define GetStatusSize(x)        ((enum LISPSIZE)(BitStatusSize(GetStatus(x))))
#define GetStatusDynamic(x)     (BitStatusDynamic(GetStatus(x)))
#define GetStatusReadOnly(x)    (BitStatusReadOnly(GetStatus(x)))
#define GetStatusSystem(x)      (BitStatusSystem(GetStatus(x)))
#define GetStatusFixed(x)       (BitStatusFixed(GetStatus(x)))
#define GetStatusGc(x)          (BitStatusGc(GetStatus(x)))
#define GetStatusValue(x,i)     GetBitByte(*PtrStatus(x),(i))
#define SetStatusValue(x,i,v)   SetBitByte(*PtrStatus(x),(i),(v))
#define SetStatusSize(x,y,z)	SetStatus((x), ((y)|(1U<<(z))))
#define SetStatusReadOnly(x)	SetStatusValue(x, LISPSTATUS_READONLY, 1)
#define ResetStatusReadOnly(x)	SetStatusValue(x, LISPSTATUS_READONLY, 0)

/* Object Header */
#define PtrByte1A(x)            (((addr)(x)) + 4UL)
#define PtrByte1B(x)            (((addr)(x)) + 5UL)
#define PtrByte2A(x)            (((addr)(x)) + 4UL)
#define PtrByte2B(x)            (((addr)(x)) + 6UL)
#define PtrByte2C(x)            (((addr)(x)) + 8UL)
#define PtrByte4A(x)            (((addr)(x)) + 4UL)
#define PtrByte4B(x)            (((addr)(x)) + 8UL)
#define PtrByte4C(x)            (((addr)(x)) + 12UL)
#define PtrByte4D(x)            (((addr)(x)) + 16UL)
#define PtrValue2A(x)           ((byte16 *)PtrByte2A(x))
#define PtrValue2B(x)           ((byte16 *)PtrByte2B(x))
#define PtrValue2C(x)           ((byte16 *)PtrByte2C(x))
#define PtrValue4A(x)           ((byte32 *)PtrByte4A(x))
#define PtrValue4B(x)           ((byte32 *)PtrByte4B(x))
#define PtrValue4C(x)           ((byte32 *)PtrByte4C(x))
#define PtrValue4D(x)           ((byte32 *)PtrByte4D(x))

#define PtrByte2va(x)			PtrByte1A(x)
#define PtrByte2vb(x)			PtrByte1B(x)
#define PtrByte2V(x)			PtrByte2A(x)
#define PtrByte2L(x)			PtrByte2B(x)
#define PtrByte2P(x)			PtrByte2C(x)
#define PtrValue2va(x)			((byte *)PtrByte2va(x))
#define PtrValue2vb(x)			((byte *)PtrByte2vb(x))
#define PtrValue2V(x)			((byte16 *)PtrByte2V(x))
#define PtrValue2L(x)			((byte16 *)PtrByte2L(x))

#define PtrByte4va(x)			PtrByte2A(x)
#define PtrByte4vb(x)			PtrByte2B(x)
#define PtrByte4V(x)			PtrByte4A(x)
#define PtrByte4P(x)			PtrByte4D(x)
#define PtrValue4va(x)			((byte16 *)PtrByte4va(x))
#define PtrValue4vb(x)			((byte16 *)PtrByte4vb(x))
#define PtrValue4V(x)			((byte32 *)PtrByte4V(x))

/* 64bit */
#ifdef LISP_ARCH_64BIT
#define PtrByte8A(x)            (((addr)(x)) + 8UL)
#define PtrByte8B(x)            (((addr)(x)) + 16UL)
#define PtrByte8C(x)            (((addr)(x)) + 24UL)
#define PtrValue8A(x,t)			((t *)(((addr)(x)) + 8UL))
#define PtrValue8B(x,t)			((t *)(((addr)(x)) + 16UL))
#define PtrValue8C(x,t)			((t *)(((addr)(x)) + 24UL))

#define PtrByte8V(x)			PtrByte8B(x)
#define PtrByte8P(x)			PtrByte8C(x)
#define PtrValue8V(x)			((size_t *)PtrByte8V(x))
#endif

/* Length */
#ifdef LISP_ARCH_64BIT
#define PtrByteL(x)				PtrByte8A(x)
#else
#define PtrByteL(x)				PtrByte4C(x)
#endif
#define PtrValueL(x)			((size_t *)PtrByteL(x))

/* memory object */
#define PtrValueReserved(x)		((size_t *)(8UL + (addr)(x)))
#define GetValueReserved(x,y)	(*(y) = *PtrValueReserved(x))
#define SetValueReserved(x,y)	(*PtrValueReserved(x) = (y))
#define PtrValueSpace(x)		((size_t *)(8UL + (addr)(x)))
#define GetValueSpace(x,y)		(*(y) = *PtrValueReserved(x))
#define SetValueSpace(x,y)		(*PtrValueReserved(x) = (y))
#define GetValueSpace1(x,y)		(*(y) = (size_t)(((addr)(x))[1]))
#define SetValueSpace1(x,y)		(((addr)(x))[1] = (byte)(y))

#define GetSizeReserved(x,y)	(*(y) = *PtrValueReserved(x) + 8UL + IdxSize)
#define SetSizeReserved(x,y)	(*PtrValueReserved(x) = (y) - (8UL + IdxSize))
#define GetSizeSpace(x,y)		(*(y) = *PtrValueReserved(x) + 8UL + IdxSize)
#define SetSizeSpace(x,y)		(*PtrValueReserved(x) = (y) - (8UL + IdxSize))
#define GetSizeSpace1(x,y)		(*(y) = (size_t)((((addr)(x))[1]) + 2UL))
#define SetSizeSpace1(x,y)		(((addr)(x))[1] = (byte)(((size_t)(y)) - 2UL))

#define PtrArrayA2(x)			((addr *)PtrByte2P(x))
#define PtrArraySS(x)			((addr *)PtrByte2P(x))
#define PtrArrayA4(x)			((addr *)PtrByte4P(x))
#define PtrArrayAB(x)			((addr *)PtrByte4P(x))
#define PtrArrayA2i(x,i)        (PtrArrayA2(x) + (i))
#define PtrArraySSi(x,i)        (PtrArraySS(x) + (i))
#define PtrArrayA4i(x,i)        (PtrArrayA4(x) + (i))
#define PtrArrayABi(x,i)        (PtrArrayAB(x) + (i))

#define PtrLenArrayA2(x)        PtrValue2V(x)
#define PtrLenArraySS(x)        PtrValue2va(x)
#define PtrLenArrayA4(x)        PtrValue4V(x)
#define PtrLenArrayAB(x)        PtrValue4va(x)
#define PtrLenBodyB2(x)         PtrValue2V(x)
#define PtrLenBodySS(x)         PtrValue2vb(x)
#define PtrLenBodyB4(x)         PtrValue4V(x)
#define PtrLenBodyAB(x)         PtrValue4vb(x)

#define GetLenArrayA2(x)        (*PtrLenArrayA2(x))
#define GetLenArraySS(x)        (*PtrLenArraySS(x))
#define GetLenArrayA4(x)        (*PtrLenArrayA4(x))
#define GetLenArrayAB(x)        (*PtrLenArrayAB(x))
#define GetLenBodyB2(x)         (*PtrLenBodyB2(x))
#define GetLenBodySS(x)         (*PtrLenBodySS(x))
#define GetLenBodyB4(x)         (*PtrLenBodyB4(x))
#define GetLenBodyAB(x)         (*PtrLenBodyAB(x))

#ifdef LISP_ARCH_64BIT
#define PtrArrayA8(x)			((addr *)PtrByte8P(x))
#define PtrArrayA8i(x,i)		(PtrArrayA8(x) + (i))
#define PtrLenArrayA8(x)        PtrValue8V(x)
#define PtrLenBodyB8(x)         PtrValue8V(x)
#define GetLenArrayA8(x)        (*PtrLenArrayA8(x))
#define GetLenBodyB8(x)         (*PtrLenBodyB8(x))
#endif

#define PtrBodySSa(x,y)			(PtrByte2P(x) + (y)*PtrSize)
#define PtrBodyABa(x,y)			(PtrByte4P(x) + (y)*PtrSize)
#define PtrBodyB2(x)			PtrByte2P(x)
#define PtrBodySS(x)			PtrBodySSa(x, GetLenArraySS(x))
#define PtrBodyB4(x)			PtrByte4P(x)
#define PtrBodyAB(x)			PtrBodyABa(x, GetLenArrayAB(x))

#define RefBodySSa(x,a,t)		(*(t *)PtrBodySSa(x,a))
#define RefBodyABa(x,a,t)		(*(t *)PtrBodyABa(x,a))
#define RefBodyB2(x,t)			(*(t *)PtrBodyB2(x))
#define RefBodySS(x,t)			(*(t *)PtrBodySS(x))
#define RefBodyB4(x,t)			(*(t *)PtrBodyB4(x))
#define RefBodyAB(x,t)			(*(t *)PtrBodyAB(x))

#define RefBodySSai(x,a,t,i)	(((t *)PtrBodySSa(x,a))[i])
#define RefBodyABai(x,a,t,i)	(((t *)PtrBodyABa(x,a))[i])
#define RefBodyB2i(x,t,i)		(((t *)PtrBodyB2(x))[i])
#define RefBodySSi(x,t,i)		(((t *)PtrBodySS(x))[i])
#define RefBodyB4i(x,t,i)		(((t *)PtrBodyB4(x))[i])
#define RefBodyABi(x,t,i)		(((t *)PtrBodyAB(x))[i])

#ifdef LISP_ARCH_64BIT
#define PtrBodyB8(x)			PtrByte8P(x)
#define RefBodyB8(x,t)			(*(t *)PtrBodyB8(x))
#define RefBodyB8i(x,t,i)		(((t *)PtrBodyB8(x))[i])
#endif

#define GetvBodySSa(x,a,t,v)	(*(v) = RefBodySSa(x,a,t))
#define GetvBodyABa(x,a,t,v)	(*(v) = RefBodyABa(x,a,t))
#define GetvBodyB2(x,t,v)		(*(v) = RefBodyB2(x,t))
#define GetvBodySS(x,t,v)		(*(v) = RefBodySS(x,t))
#define GetvBodyB4(x,t,v)		(*(v) = RefBodyB4(x,t))
#define GetvBodyAB(x,t,v)		(*(v) = RefBodyAB(x,t))

#define SetvBodySSa(x,a,t,v)	(RefBodySSa(x,a,t) = (v))
#define SetvBodyABa(x,a,t,v)	(RefBodyABa(x,a,t) = (v))
#define SetvBodyB2(x,t,v)		(RefBodyB2(x,t) = (v))
#define SetvBodySS(x,t,v)		(RefBodySS(x,t) = (v))
#define SetvBodyB4(x,t,v)		(RefBodyB4(x,t) = (v))
#define SetvBodyAB(x,t,v)		(RefBodyAB(x,t) = (v))

#define IncvBodySSa(x,a,t,v)	(RefBodySSa(x,a,t) += (v))
#define IncvBodyABa(x,a,t,v)	(RefBodyABa(x,a,t) += (v))
#define IncvBodyB2(x,t,v)		(RefBodyB2(x,t) += (v))
#define IncvBodySS(x,t,v)		(RefBodySS(x,t) += (v))
#define IncvBodyB4(x,t,v)		(RefBodyB4(x,t) += (v))
#define IncvBodyAB(x,t,v)		(RefBodyAB(x,t) += (v))

#define DecvBodySSa(x,a,t,v)	(RefBodySSa(x,a,t) -= (v))
#define DecvBodyABa(x,a,t,v)	(RefBodyABa(x,a,t) -= (v))
#define DecvBodyB2(x,t,v)		(RefBodyB2(x,t) -= (v))
#define DecvBodySS(x,t,v)		(RefBodySS(x,t) -= (v))
#define DecvBodyB4(x,t,v)		(RefBodyB4(x,t) -= (v))
#define DecvBodyAB(x,t,v)		(RefBodyAB(x,t) -= (v))

#define GetvBodySSai(x,a,t,i,v)	(*(v) = RefBodySSai(x,a,t,i))
#define GetvBodyABai(x,a,t,i,v)	(*(v) = RefBodyABai(x,a,t,i))
#define GetvBodyB2i(x,t,i,v)	(*(v) = RefBodyB2i(x,t,i))
#define GetvBodySSi(x,t,i,v)	(*(v) = RefBodySSi(x,t,i))
#define GetvBodyB4i(x,t,i,v)	(*(v) = RefBodyB4i(x,t,i))
#define GetvBodyABi(x,t,i,v)	(*(v) = RefBodyABi(x,t,i))

#define SetvBodySSai(x,a,t,i,v)	(RefBodySSai(x,a,t,i) = (v))
#define SetvBodyABai(x,a,t,i,v)	(RefBodyABai(x,a,t,i) = (v))
#define SetvBodyB2i(x,t,i,v)	(RefBodyB2i(x,t,i) = (v))
#define SetvBodySSi(x,t,i,v)	(RefBodySSi(x,t,i) = (v))
#define SetvBodyB4i(x,t,i,v)	(RefBodyB4i(x,t,i) = (v))
#define SetvBodyABi(x,t,i,v)	(RefBodyABi(x,t,i) = (v))

#define IncvBodySSai(x,a,t,i,v)	(RefBodySSai(x,a,t,i) += (v))
#define IncvBodyABai(x,a,t,i,v)	(RefBodyABai(x,a,t,i) += (v))
#define IncvBodyB2i(x,t,i,v)	(RefBodyB2i(x,t,i) += (v))
#define IncvBodySSi(x,t,i,v)	(RefBodySSi(x,t,i) += (v))
#define IncvBodyB4i(x,t,i,v)	(RefBodyB4i(x,t,i) += (v))
#define IncvBodyABi(x,t,i,v)	(RefBodyABi(x,t,i) += (v))

#define DecvBodySSai(x,a,t,i,v)	(RefBodySSai(x,a,t,i) -= (v))
#define DecvBodyABai(x,a,t,i,v)	(RefBodyABai(x,a,t,i) -= (v))
#define DecvBodyB2i(x,t,i,v)	(RefBodyB2i(x,t,i) -= (v))
#define DecvBodySSi(x,t,i,v)	(RefBodySSi(x,t,i) -= (v))
#define DecvBodyB4i(x,t,i,v)	(RefBodyB4i(x,t,i) -= (v))
#define DecvBodyABi(x,t,i,v)	(RefBodyABi(x,t,i) -= (v))

#ifdef LISP_ARCH_64BIT
#define GetvBodyB8(x,t,v)		(*(v) = RefBodyB8(x,t))
#define SetvBodyB8(x,t,v)		(RefBodyB8(x,t) = (v))
#define IncvBodyB8(x,t,v)		(RefBodyB8(x,t) += (v))
#define DecvBodyB8(x,t,v)		(RefBodyB8(x,t) -= (v))
#define GetvBodyB8i(x,t,i,v)	(*(v) = RefBodyB8i(x,t,i))
#define SetvBodyB8i(x,t,i,v)	(RefBodyB8i(x,t,i) = (v))
#define IncvBodyB8i(x,t,i,v)	(RefBodyB8i(x,t,i) += (v))
#define DecvBodyB8i(x,t,i,v)	(RefBodyB8i(x,t,i) -= (v))
#endif

#define IsValueSymbol(x)		\
	((x) == LISPTYPE_SYMBOL || (x) == LISPTYPE_NIL || (x) == LISPTYPE_T)
#define IsValueFloat(x)         \
	(LISPTYPE_SHORT_FLOAT <= (x) && (x) <= LISPTYPE_LONG_FLOAT)
#define IsValueByte2(x)			\
	((x) == LISPSIZE_ARRAY2 || (x) == LISPSIZE_BODY2 || (x) == LISPSIZE_SMALLSIZE)

#define IsClassSmall(x)			((x) < LISPCLASS_SizeK)
#define IsClassLarge(x)			(LISPCLASS_SizeK <= (x))
#define IsBoolean(x)			((x) == Nil || (x) == T)
#define IsCons(x)               (GetType(x) == LISPTYPE_CONS)
#define IsList(x)               ((x) == Nil || GetType(x) == LISPTYPE_CONS)
#define IsArray(x)              (GetStatusSize(x) <= LISPSIZE_ARRAYBODY)
#define IsBody(x)               (LISPSIZE_SMALLSIZE <= GetStatusSize(x))
#define IsFloat(x)              IsValueFloat(GetType(x))

#define MemoryLengthSS(a,b)		( 8UL + (a)*PtrSize + (b))
#define MemoryLengthAB(a,b)		(16UL + (a)*PtrSize + (b))
#define MemoryLengthA2(a)		( 8UL + (a)*PtrSize)
#define MemoryLengthA4(a)		(16UL + (a)*PtrSize)
#define MemoryLengthB2(b)		( 8UL + (b))
#define MemoryLengthB4(b)		(16UL + (b))
#ifdef LISP_ARCH_64BIT
#define MemoryLengthA8(a)		(24UL + (a)*PtrSize)
#define MemoryLengthB8(b)		(24UL + (b))
#endif

#ifdef LISP_DEBUG
#define LenArrayA2(x,len)		lenarrayA2(x,len)
#define LenArraySS(x,len)		lenarraySS(x,len)
#define LenArrayA4(x,len)		lenarrayA4(x,len)
#define LenArrayAB(x,len)		lenarrayAB(x,len)
#define LenBodyB2(x,len)		lenbodyB2(x,len)
#define LenBodySS(x,len)		lenbodySS(x,len)
#define LenBodyB4(x,len)		lenbodyB4(x,len)
#define LenBodyAB(x,len)		lenbodyAB(x,len)

#define LenArrayA2r(x)			lenarrayA2r(x)
#define LenArraySSr(x)			lenarraySSr(x)
#define LenArrayA4r(x)			lenarrayA4r(x)
#define LenArrayABr(x)			lenarrayABr(x)
#define LenBodyB2r(x)			lenbodyB2r(x)
#define LenBodySSr(x)			lenbodySSr(x)
#define LenBodyB4r(x)			lenbodyB4r(x)
#define LenBodyABr(x)			lenbodyABr(x)

#define PosBodySSa(x,a,len)		posbodySSa(x,a,len)
#define PosBodyABa(x,a,len)		posbodyABa(x,a,len)
#define PosBodyB2(x,len)        posbodyB2(x,len)
#define PosBodySS(x,len)        posbodySS(x,len)
#define PosBodyB4(x,len)        posbodyB4(x,len)
#define PosBodyAB(x,len)        posbodyAB(x,len)

#define PosBodySSar(x,a)		posbodySSar(x,a)
#define PosBodyABar(x,a)		posbodyABar(x,a)
#define PosBodyB2r(x)			posbodyB2r(x)
#define PosBodySSr(x)			posbodySSr(x)
#define PosBodyB4r(x)			posbodyB4r(x)
#define PosBodyABr(x)			posbodyABr(x)

#define PosBodyLenSSa(x,a,b,n)	posbodylenSSa(x,a,b,n)
#define PosBodyLenABa(x,a,b,n)	posbodylenABa(x,a,b,n)
#define PosBodyLenB2(x,b,n)     posbodylenB2(x,b,n)
#define PosBodyLenSS(x,b,n)     posbodylenSS(x,b,n)
#define PosBodyLenB4(x,b,n)     posbodylenB4(x,b,n)
#define PosBodyLenAB(x,b,n)     posbodylenAB(x,b,n)

#ifdef LISP_ARCH_64BIT
#define LenArrayA8(x,len)       lenarrayA8(x,len)
#define LenBodyB8(x,len)        lenbodyB8(x,len)
#define PosBodyB8(x,len)        posbodyB8(x,len)
#define PosBodyLenB8(x,b,n)     posbodylenB8(x,b,n)

#define LenArrayA8r(x)			lenarrayA8r(x)
#define LenBodyB8r(x)			lenbodyB8r(x)
#define PosBodyB8r(x)			posbodyB8r(x)
#endif

#else
#define LenArrayA2(x,len)       (*(len) = GetLenArrayA2(x))
#define LenArraySS(x,len)       (*(len) = GetLenArraySS(x))
#define LenArrayA4(x,len)       (*(len) = GetLenArrayA4(x))
#define LenArrayAB(x,len)       (*(len) = GetLenArrayAB(x))
#define LenBodyB2(x,len)        (*(len) = GetLenBodyB2(x))
#define LenBodySS(x,len)        (*(len) = GetLenBodySS(x))
#define LenBodyB4(x,len)        (*(len) = GetLenBodyB4(x))
#define LenBodyAB(x,len)        (*(len) = GetLenBodyAB(x))

#define LenArrayA2r(x)			GetLenArrayA2(x)
#define LenArraySSr(x)			GetLenArraySS(x)
#define LenArrayA4r(x)			GetLenArrayA4(x)
#define LenArrayABr(x)			GetLenArrayAB(x)
#define LenBodyB2r(x)			GetLenBodyB2(x)
#define LenBodySSr(x)			GetLenBodySS(x)
#define LenBodyB4r(x)			GetLenBodyB4(x)
#define LenBodyABr(x)			GetLenBodyAB(x)

#define PosBodySSa(x,a,len)		(*(len) = PtrBodySSa(x,a))
#define PosBodyABa(x,a,len)		(*(len) = PtrBodyABa(x,a))
#define PosBodyB2(x,len)        (*(len) = PtrBodyB2(x))
#define PosBodySS(x,len)        (*(len) = PtrBodySS(x))
#define PosBodyB4(x,len)        (*(len) = PtrBodyB4(x))
#define PosBodyAB(x,len)        (*(len) = PtrBodyAB(x))

#define PosBodySSar(x,a)		PtrBodySSa(x,a)
#define PosBodyABar(x,a)		PtrBodyABa(x,a)
#define PosBodyB2r(x)			PtrBodyB2(x)
#define PosBodySSr(x)			PtrBodySS(x)
#define PosBodyB4r(x)			PtrBodyB4(x)
#define PosBodyABr(x)			PtrBodyAB(x)

#define PosBodyLenSSa(x,a,b,n)	(*(b)=PtrBodySSa(x,a), *(n)=GetLenBodySS(x))
#define PosBodyLenABa(x,a,b,n)	(*(b)=PtrBodyABa(x,a), *(n)=GetLenBodyAB(x))
#define PosBodyLenB2(x,b,n)     (*(b)=PtrBodyB2(x), *(n)=GetLenBodyB2(x))
#define PosBodyLenSS(x,b,n)     (*(b)=PtrBodySS(x), *(n)=GetLenBodySS(x))
#define PosBodyLenB4(x,b,n)     (*(b)=PtrBodyB4(x), *(n)=GetLenBodyB4(x))
#define PosBodyLenAB(x,b,n)     (*(b)=PtrBodyAB(x), *(n)=GetLenBodyAB(x))

#ifdef LISP_ARCH_64BIT
#define LenArrayA8(x,len)       (*(len) = GetLenArrayA8(x))
#define LenBodyB8(x,len)        (*(len) = GetLenBodyB8(x))
#define PosBodyB8(x,len)        (*(len) = PtrBodyB8(x))
#define PosBodyLenB8(x,b,n)     (*(b)=PtrBodyB8(x), *(n)=GetLenBodyB8(x))

#define LenArrayA8r(x)			GetLenArrayA8(x)
#define LenBodyB8r(x)			GetLenBodyB8(x)
#define PosBodyB8r(x)			PtrBodyB8(x)
#endif
#endif

/* GetArray / RefArray */
#ifdef LISP_DEBUG
#define GetArrayA2(x,i,v)		getarrayA2(x,i,v)
#define GetArraySS(x,i,v)		getarraySS(x,i,v)
#define GetArrayA4(x,i,v)		getarrayA4(x,i,v)
#define GetArrayAB(x,i,v)		getarrayAB(x,i,v)

#define RefArrayA2(x,i)			refarrayA2(x,i)
#define RefArraySS(x,i)			refarraySS(x,i)
#define RefArrayA4(x,i)			refarrayA4(x,i)
#define RefArrayAB(x,i)			refarrayAB(x,i)

#ifdef LISP_ARCH_64BIT
#define GetArrayA8(x,i,v)		getarrayA8(x,i,v)
#define RefArrayA8(x,i)			refarrayA8(x,i)
#endif
#else

#define GetArrayA2(r,i,n)		(*(n) = PtrArrayA2(r)[i])
#define GetArraySS(r,i,n)		(*(n) = PtrArraySS(r)[i])
#define GetArrayA4(r,i,n)		(*(n) = PtrArrayA4(r)[i])
#define GetArrayAB(r,i,n)		(*(n) = PtrArrayAB(r)[i])

#define RefArrayA2(r,i)			(PtrArrayA2(r)[i])
#define RefArraySS(r,i)			(PtrArraySS(r)[i])
#define RefArrayA4(r,i)			(PtrArrayA4(r)[i])
#define RefArrayAB(r,i)			(PtrArrayAB(r)[i])

#ifdef LISP_ARCH_64BIT
#define GetArrayA8(r,i,n)		(*(n) = PtrArrayA8(r)[i])
#define RefArrayA8(r,i)			(PtrArrayA8(r)[i])
#endif
#endif


#ifdef LISP_DEBUG
#define SetArrayA2(x,i,v)		setarrayA2(x,i,v)
#define SetArraySS(x,i,v)		setarraySS(x,i,v)
#define SetArrayA4(x,i,v)		setarrayA4(x,i,v)
#define SetArrayAB(x,i,v)		setarrayAB(x,i,v)

#define SetArrayA2_force(x,i,v)	setarrayA2_force(x,i,v)
#define SetArraySS_force(x,i,v)	setarraySS_force(x,i,v)
#define SetArrayA4_force(x,i,v)	setarrayA4_force(x,i,v)
#define SetArrayAB_force(x,i,v)	setarrayAB_force(x,i,v)

#ifdef LISP_ARCH_64BIT
#define SetArrayA8(x,i,v)       setarrayA8(x,i,v)
#define SetArrayA8_force(x,i,v)	setarrayA8_force(x,i,v)
#endif

#else

#define SetArrayA2(x,i,v)       (PtrArrayA2(x)[i] = (v))
#define SetArraySS(x,i,v)       (PtrArraySS(x)[i] = (v))
#define SetArrayA4(x,i,v)       (PtrArrayA4(x)[i] = (v))
#define SetArrayAB(x,i,v)       (PtrArrayAB(x)[i] = (v))

#define SetArrayA2_force(x,i,v) SetArrayA2(x,i,v)
#define SetArraySS_force(x,i,v) SetArraySS(x,i,v)
#define SetArrayA4_force(x,i,v) SetArrayA4(x,i,v)
#define SetArrayAB_force(x,i,v) SetArrayAB(x,i,v)

#ifdef LISP_ARCH_64BIT
#define GetArrayA8(r,i,n)       (*(n) = PtrArrayA8(r)[i])
#define RefArrayA8(r,i)         (PtrArrayA8(r)[i])
#define SetArrayA8(x,i,v)       (PtrArrayA8(x)[i] = (v))
#define SetArrayA8_force(x,i,v) SetArrayA8(x,i,v)
#endif
#endif

#define ClearBodyB2(p,b)		memset(PtrByte2P(p), 0, (b))
#define ClearBodySS(p,a,b)		memset(PtrByte2P(p) + (a)*PtrSize, 0, b)
#define ClearBodyB4(p,b)		memset(PtrByte4P(p), 0, (b))
#define ClearBodyAB(p,a,b)		memset(PtrByte4P(p) + (a)*PtrSize, 0, b)
#ifdef LISP_ARCH_64BIT
#define ClearBodyB8(p,b)		memset(PtrByte8P(p), 0, (b))
#endif


/*
 *  type
 */
enum LISPTYPE gettype(addr pos);


/*
 *  size class
 */
size_t getobjectlength(addr pos);
size_t getmemorylength(addr pos);
int valid_header(addr pos);


/*
 *  Memory Access
 */
void lenarrayA2(addr pos, size_t *ret);
void lenarraySS(addr pos, size_t *ret);
void lenarrayA4(addr pos, size_t *ret);
void lenarrayAB(addr pos, size_t *ret);
void lenarray(addr pos, size_t *ret);
#ifdef LISP_ARCH_64BIT
void lenarrayA8(addr pos, size_t *ret);
#endif

size_t lenarrayA2r(addr pos);
size_t lenarraySSr(addr pos);
size_t lenarrayA4r(addr pos);
size_t lenarrayABr(addr pos);
size_t lenarrayr(addr pos);
#ifdef LISP_ARCH_64BIT
size_t lenarrayA8r(addr pos);
#endif

void lenbodyB2(addr pos, size_t *ret);
void lenbodySS(addr pos, size_t *ret);
void lenbodyB4(addr pos, size_t *ret);
void lenbodyAB(addr pos, size_t *ret);
void lenbody(addr pos, size_t *ret);
#ifdef LISP_ARCH_64BIT
void lenbodyB8(addr pos, size_t *ret);
#endif

size_t lenbodyB2r(addr pos);
size_t lenbodySSr(addr pos);
size_t lenbodyB4r(addr pos);
size_t lenbodyABr(addr pos);
size_t lenbodyr(addr pos);
#ifdef LISP_ARCH_64BIT
size_t lenbodyB8r(addr pos);
#endif

void posbodySSa(addr pos, size_t array, addr *ret);
void posbodyABa(addr pos, size_t array, addr *ret);
void posbodyB2(addr pos, addr *ret);
void posbodySS(addr pos, addr *ret);
void posbodyB4(addr pos, addr *ret);
void posbodyAB(addr pos, addr *ret);
void posbody(addr pos, addr *ret);
#ifdef LISP_ARCH_64BIT
void posbodyB8(addr pos, addr *ret);
#endif

addr posbodySSar(addr pos, size_t array);
addr posbodyABar(addr pos, size_t array);
addr posbodyB2r(addr pos);
addr posbodySSr(addr pos);
addr posbodyB4r(addr pos);
addr posbodyABr(addr pos);
addr posbodyr(addr pos);
#ifdef LISP_ARCH_64BIT
addr posbodyB8r(addr pos);
#endif

void posbodylenSSa(addr pos, size_t array, addr *body, size_t *len);
void posbodylenABa(addr pos, size_t array, addr *body, size_t *len);
void posbodylenB2(addr pos, addr *body, size_t *len);
void posbodylenSS(addr pos, addr *body, size_t *len);
void posbodylenB4(addr pos, addr *body, size_t *len);
void posbodylenAB(addr pos, addr *body, size_t *len);
void posbodylen(addr pos, addr *body, size_t *len);
#ifdef LISP_ARCH_64BIT
void posbodylenB8(addr pos, addr *body, size_t *len);
#endif

void getarrayA2(addr pos, size_t index, addr *ret);
void getarraySS(addr pos, size_t index, addr *ret);
void getarrayA4(addr pos, size_t index, addr *ret);
void getarrayAB(addr pos, size_t index, addr *ret);
void getarray(addr pos, size_t index, addr *ret);
#ifdef LISP_ARCH_64BIT
void getarrayA8(addr pos, size_t index, addr *ret);
#endif

addr refarrayA2(addr pos, size_t index);
addr refarraySS(addr pos, size_t index);
addr refarrayA4(addr pos, size_t index);
addr refarrayAB(addr pos, size_t index);
addr refarray(addr pos, size_t index);
#ifdef LISP_ARCH_64BIT
addr refarrayA8(addr pos, size_t index);
#endif

int checkdynamic(addr pos, addr value);
#define CheckDynamic(p,v) { \
	Check(checkdynamic((p), (v)), "dynamic error"); \
}
void setarray_chain(addr *ptr, addr value);
void setarrayA2(addr pos, size_t index, addr ret);
void setarraySS(addr pos, size_t index, addr ret);
void setarrayA4(addr pos, size_t index, addr ret);
void setarrayAB(addr pos, size_t index, addr ret);
void setarray(addr pos, size_t index, addr ret);
#ifdef LISP_ARCH_64BIT
void setarrayA8(addr pos, size_t index, addr ret);
#endif

void setarrayA2_force(addr pos, size_t index, addr ret);
void setarraySS_force(addr pos, size_t index, addr ret);
void setarrayA4_force(addr pos, size_t index, addr ret);
void setarrayAB_force(addr pos, size_t index, addr ret);
#ifdef LISP_ARCH_64BIT
void setarrayA8_force(addr pos, size_t index, addr ret);
#endif


/*
 *  Object
 */
void nilarray2(addr pos, size_t size);
void nilarray4(addr pos, size_t size);
#ifdef LISP_ARCH_64BIT
void nilarray8(addr pos, size_t size);
#endif
void unboundarray2(addr pos, size_t size);
void unboundarray4(addr pos, size_t size);
#ifdef LISP_ARCH_64BIT
void unboundarray8(addr pos, size_t size);
#endif

size_t size_split(size_t size);

#endif


/************************************************************
 *  constant.h
 ************************************************************/
#ifndef __CONSTANT_HEADER__
#define __CONSTANT_HEADER__


#define build_constant _n(build_constant)
#define intern_symbol_header_ _n(intern_symbol_header_)
#define specialconstant_ _n(specialconstant_)
#define gensymconstant _n(gensymconstant)
#define keywordconstant_ _n(keywordconstant_)
#define commonconstant_ _n(commonconstant_)
#define symbolchar_common_ _n(symbolchar_common_)
#define symbolchar_keyword_ _n(symbolchar_keyword_)
#define quotelist_heap _n(quotelist_heap)
#define pushconst_heap _n(pushconst_heap)

#define RetConstant(i)		RetArrayA4(LispRoot(CONST),(i))
#define GetConstant(i,v)	GetArrayA4(LispRoot(CONST),(i),(v))
#define SetConstant(i,v)	SetArrayA4(LispRoot(CONST),(i),(v))

#define GetConst(i,v)		GetConstant(CONSTANT_##i, (v))
#define SetConst(i,v)		SetConstant(CONSTANT_##i, (v))

void build_constant(void);
int intern_symbol_header_(void);
int specialconstant_(constindex index, const char *package, const char *name);
void gensymconstant(constindex index, const char *name);
int keywordconstant_(constindex index, const char *name);
int commonconstant_(constindex index, const char *name);

int symbolchar_common_(constindex index, const char *name);
int symbolchar_keyword_(constindex index, const char *name);
void quotelist_heap(addr *ret, addr name);
void pushconst_heap(addr *ret, constindex index);
#define PushConst(a,b) pushconst_heap((a),CONSTANT_##b)

#endif


/************************************************************
 *  type_constant.h
 ************************************************************/
#ifndef __TYPE_CONSTANT_HEADER__
#define __TYPE_CONSTANT_HEADER__


enum TypeTable {
#ifdef LISP_DEGRADE
	/* Debug */
	TypeTable_Debug1,
	TypeTable_Debug2,
	TypeTable_Debug3,
	TypeArgs_Debug1,
	TypeArgs_Debug2,
	TypeArgs_Debug3,
	TypeValues_Debug1,
	TypeValues_Debug2,
	TypeValues_Debug3,
	TypeCompiled_Debug1,
	TypeCompiled_Debug2,
	TypeCompiled_Debug3,
#endif

	/* Atomic-Type */
	TypeTable_Invalid,
	TypeTable_Type,
	TypeTable_Clos,
	TypeTable_Asterisk,
	TypeTable_Atom,
	TypeTable_List,
	TypeTable_Boolean,
	TypeTable_Vector,
	TypeTable_SimpleVector,
	TypeTable_BitVector,
	TypeTable_ExtendedChar,
	TypeTable_SimpleBitVector,
	TypeTable_String,
	TypeTable_BaseString,
	TypeTable_SimpleString,
	TypeTable_SimpleBaseString,
	TypeTable_SignedByte,
	TypeTable_UnsignedByte,
	TypeTable_Bit,
	TypeTable_Fixnum,
	TypeTable_Bignum,
	TypeTable_Nil,
	TypeTable_T,
	TypeTable_Null,
	TypeTable_Cons,
	TypeTable_Hashtable,
	TypeTable_Symbol,
	TypeTable_Keyword,
	TypeTable_Package,
	TypeTable_RandomState,
	TypeTable_Readtable,
	TypeTable_Function,
	TypeTable_CompiledFunction,
	TypeTable_Pathname,
	TypeTable_LogicalPathname,
	TypeTable_Sequence,
	TypeTable_Array,
	TypeTable_SimpleArray,
	TypeTable_Character,
	TypeTable_BaseChar,
	TypeTable_StandardChar,
	TypeTable_Number,
	TypeTable_Real,
	TypeTable_Rational,
	TypeTable_Ratio,
	TypeTable_Integer,
	TypeTable_Complex,
	TypeTable_Float,
	TypeTable_ShortFloat,
	TypeTable_SingleFloat,
	TypeTable_DoubleFloat,
	TypeTable_LongFloat,
	TypeTable_Restart,
	TypeTable_Environment,
	TypeTable_Stream,
	TypeTable_BroadcastStream,
	TypeTable_ConcatenatedStream,
	TypeTable_EchoStream,
	TypeTable_FileStream,
	TypeTable_StringStream,
	TypeTable_SynonymStream,
	TypeTable_TwoWayStream,
	TypeTable_PromptStream,
	TypeTable_PrettyStream,
	TypeTable_MemoryStream,
	TypeTable_PipeStream,
	TypeTable_Quote,
	TypeTable_ByteSpec,
	TypeTable_PrintDispatch,
	TypeTable_Paper,
	TypeTable_Eval,

	/* Condition */
	TypeTable_ArithmeticError,
	TypeTable_CellError,
	TypeTable_FileError,
	TypeTable_PackageError,
	TypeTable_PrintNotReadable,
	TypeTable_SimpleCondition,
	TypeTable_StreamError,
	TypeTable_TypeError,

	/* Type */
	TypeTable_Cxr,
	TypeTable_Cxar,
	TypeTable_Cxdr,
	TypeTable_Cxaar,
	TypeTable_Cxadr,
	TypeTable_Cxdar,
	TypeTable_Cxddr,
	TypeTable_Cxaaar,
	TypeTable_Cxaadr,
	TypeTable_Cxadar,
	TypeTable_Cxaddr,
	TypeTable_Cxdaar,
	TypeTable_Cxdadr,
	TypeTable_Cxddar,
	TypeTable_Cxdddr,
	TypeTable_SetfCxar,
	TypeTable_SetfCxdr,
	TypeTable_SetfCxaar,
	TypeTable_SetfCxadr,
	TypeTable_SetfCxdar,
	TypeTable_SetfCxddr,
	TypeTable_SetfCxaaar,
	TypeTable_SetfCxaadr,
	TypeTable_SetfCxadar,
	TypeTable_SetfCxaddr,
	TypeTable_SetfCxdaar,
	TypeTable_SetfCxdadr,
	TypeTable_SetfCxddar,
	TypeTable_SetfCxdddr,
	TypeTable_Fifth,
	TypeTable_Sixth,
	TypeTable_Seventh,
	TypeTable_Eighth,
	TypeTable_Ninth,
	TypeTable_Tenth,
	TypeTable_SetfFifth,
	TypeTable_SetfSixth,
	TypeTable_SetfSeventh,
	TypeTable_SetfEighth,
	TypeTable_SetfNinth,
	TypeTable_SetfTenth,
	TypeTable_CharacterNull,
	TypeTable_StringNull,
	TypeTable_StreamNull,
	TypeTable_Condition,
	TypeTable_ConditionNull,
	TypeTable_RestartNull,
	TypeTable_FunctionNull,
	TypeTable_EnvironmentNull,
	TypeTable_IntegerNull,
	TypeTable_PathnameNull,
	TypeTable_PackageNull,
	TypeTable_PrintDispatchNull,
	TypeTable_StringDesignator,
	TypeTable_PackageDesignator,
	TypeTable_PackageDesignatorNull,
	TypeTable_FunctionDesignator,
	TypeTable_RestartDesignator,
	TypeTable_PathnameDesignator,
	TypeTable_PathnameDesignatorNull,
	TypeTable_PathnameDesignatorBoolean,
	TypeTable_StreamDesignator,
	TypeTable_ReadtableDesignator,
	TypeTable_ConditionDesignator,
	TypeTable_Index,
	TypeTable_IndexNull,
	TypeTable_Plus1,
	TypeTable_Plus1Null,
	TypeTable_Intplus,
	TypeTable_IntplusNull,
	TypeTable_InputStream,
	TypeTable_OutputStream,
	TypeTable_TypeSpec,
	TypeTable_TypeSymbol,
	TypeTable_BitArray,
	TypeTable_SimpleBitArray,
	TypeTable_KeywordStart,
	TypeTable_KeywordEnd,
	TypeTable_KeyStart1End1,
	TypeTable_KeyStart2End2,
	TypeTable_FunctionName,
	TypeTable_RadixInteger,
	TypeTable_FloatSymbol,
	TypeTable_EqlT,
	TypeTable_CaseSensitivity,
	TypeTable_PrintCase,
	TypeTable_KeyTestList,
	TypeTable_RehashSize,
	TypeTable_RehashThreshold,
	TypeTable_CountKey,
	TypeTable_CountIfKey,
	TypeTable_PathnameHost,
	TypeTable_PathnameDevice,
	TypeTable_PathnameDirectory,
	TypeTable_PathnameName,
	TypeTable_PathnameType,
	TypeTable_PathnameVersion,
	TypeTable_Signed8,
	TypeTable_Signed16,
	TypeTable_Signed32,
	TypeTable_Unsigned8,
	TypeTable_Unsigned16,
	TypeTable_Unsigned32,
#ifdef LISP_64BIT
	TypeTable_Signed64,
	TypeTable_Unsigned64,
#endif
	TypeTable_OpenDirection,
	TypeTable_OpenElementType,
	TypeTable_OpenIfExists,
	TypeTable_OpenIfDoesNotExist,
	TypeTable_ExternalFormat,
	TypeTable_PprintNewline,
	TypeTable_PprintTabular,
	TypeTable_Format,
	TypeTable_TimeSecond,
	TypeTable_TimeHour,
	TypeTable_TimeDay,
	TypeTable_TimeMonth,
	TypeTable_TimeZone,
	TypeTable_SymbolList,
	TypeTable_StringList,
	TypeTable_StringDesignatorList,
	TypeTable_PackageDesignatorList,

	TypeTable_Method,
	TypeTable_Method1,
	TypeTable_Method2,
	TypeTable_Class,
	TypeTable_ClassNull,
	TypeTable_StandardClass,
	TypeTable_StandardObject,
	TypeTable_StructureClass,
	TypeTable_StructureObject,
	TypeTable_StandardMethod,
	TypeTable_MethodCombination,
	TypeTable_GenericFunction,

	/* Array */
	TypeTable_Array_T,
	TypeTable_Array_Bit,
	TypeTable_Array_Character,
	TypeTable_Array_SingleFloat,
	TypeTable_Array_DoubleFloat,
	TypeTable_Array_LongFloat,
	TypeTable_Array_Signed8,
	TypeTable_Array_Signed16,
	TypeTable_Array_Signed32,
	TypeTable_Array_Unsigned8,
	TypeTable_Array_Unsigned16,
	TypeTable_Array_Unsigned32,
#ifdef LISP_64BIT
	TypeTable_Array_Signed64,
	TypeTable_Array_Unsigned64,
#endif

	/* Arguments */
	TypeArgs_Empty,
	TypeArgs_OptConditionNull,
	TypeArgs_PackageDesignator,
	TypeArgs_PathnameCase,
	TypeArgs_Error,

	/* Values */
	TypeValues_Nil,
	TypeValues_T,
	TypeValues_Null,
	TypeValues_Cons,
	TypeValues_List,
	TypeValues_Boolean,
	TypeValues_Character,
	TypeValues_CharacterNull,
	TypeValues_Symbol,
	TypeValues_Vector,
	TypeValues_SimpleVector,
	TypeValues_String,
	TypeValues_StringNull,
	TypeValues_SimpleString,
	TypeValues_Stream,
	TypeValues_StreamNull,
	TypeValues_PrettyStream,
	TypeValues_MemoryStream,
	TypeValues_Function,
	TypeValues_FunctionNull,
	TypeValues_EqlT,
	TypeValues_Package,
	TypeValues_PackageNull,
	TypeValues_Sequence,
	TypeValues_Array,
	TypeValues_Integer,
	TypeValues_Ratio,
	TypeValues_Rational,
	TypeValues_Index,
	TypeValues_IndexNull,
	TypeValues_Intplus,
	TypeValues_IntplusNull,
	TypeValues_Bit,
	TypeValues_BitArray,
	TypeValues_Pathname,
	TypeValues_PathnameNull,
	TypeValues_LogicalPathname,
	TypeValues_Float,
	TypeValues_Real,
	TypeValues_Number,
	TypeValues_Complex,
	TypeValues_TypeSymbol,
	TypeValues_Class,
	TypeValues_ClassNull,
	TypeValues_Paper,

	TypeValues_DecodeUniversalTime,
	TypeValues_Empty,
	TypeValues_MethodCombination,
	TypeValues_GenericFunction,

	/* Compiled-Function */
	TypeCompiled_Object_Boolean,
	TypeCompiled_Symbol_Boolean,
	TypeCompiled_StringCase,
	TypeCompiled_NStringCase,
	TypeCompiled_StringTrim,
	TypeCompiled_StringEqual,
	TypeCompiled_StringMismatch,
	TypeCompiled_Rplaca,
	TypeCompiled_List_List,
	TypeCompiled_Nth,
	TypeCompiled_Nconc,
	TypeCompiled_Nreconc,
	TypeCompiled_ButLast,
	TypeCompiled_MacroFunction,
	TypeCompiled_MacroExpand,
	TypeCompiled_Abort,
	TypeCompiled_Continue,
	TypeCompiled_StoreValue,
	TypeCompiled_MacroReader,
	TypeCompiled_MacroDispatch,
	TypeCompiled_Read,
	TypeCompiled_Sublis,
	TypeCompiled_Subst,
	TypeCompiled_SubstIf,
	TypeCompiled_Eq,
	TypeCompiled_Every,
	TypeCompiled_Number_Equal,
	TypeCompiled_Number_Compare,
	TypeCompiled_Max,
	TypeCompiled_Minusp,
	TypeCompiled_Zerop,
	TypeCompiled_Plus,
	TypeCompiled_Minus,
	TypeCompiled_OnePlus,
	TypeCompiled_HashTableCount,
	TypeCompiled_Evenp,
	TypeCompiled_Export,
	TypeCompiled_Import,
	TypeCompiled_UsePackage,
	TypeCompiled_Intern,
	TypeCompiled_PackageNicknames,
	TypeCompiled_Prin1,
	TypeCompiled_Prin1ToString,
	TypeCompiled_Reverse,
	TypeCompiled_Member,
	TypeCompiled_MemberIf,
	TypeCompiled_Mapc,
	TypeCompiled_Acons,
	TypeCompiled_Intersection,
	TypeCompiled_EcaseError,
	TypeCompiled_DoSymbols,
	TypeCompiled_ArrayBoolean,
	TypeCompiled_ArrayIndex,
	TypeCompiled_BitAnd,
	TypeCompiled_CountIf,
	TypeCompiled_Sort,
	TypeCompiled_FindIf,
	TypeCompiled_PositionIf,
	TypeCompiled_Search,
	TypeCompiled_Substitute,
	TypeCompiled_SubstituteIf,
	TypeCompiled_Remove,
	TypeCompiled_RemoveIf,
	TypeCompiled_RemoveDuplicates,
	TypeCompiled_Namestring,
	TypeCompiled_Pathname,
	TypeCompiled_InputStreamP,
	TypeCompiled_Exit,
	TypeCompiled_ReadChar,
	TypeCompiled_WriteString,
	TypeCompiled_FinishOutput,
	TypeCompiled_YesOrNoP,
	TypeCompiled_Floor,
	TypeCompiled_Ffloor,
	TypeCompiled_EnvInfo,
	TypeCompiled_Sin,
	TypeCompiled_RealPart,
	TypeCompiled_Gcd,
	TypeCompiled_Mod,
	TypeCompiled_FloatDigits,
	TypeCompiled_Rational,
	TypeCompiled_Logand,
	TypeCompiled_Logandc1,
	TypeCompiled_ByteSize,
	TypeCompiled_DepositField,
	TypeCompiled_Ldb,
	TypeCompiled_UpgradedType,
	TypeCompiled_SlotBoundp,
	TypeCompiled_SlotBoundp_Method,
	TypeCompiled_Reader_Method,
	TypeCompiled_Writer_Method,
	TypeCompiled_Signal,
	TypeCompiled_PrintObject_Method,
	TypeCompiled_PprintFill,
	TypeCompiled_DispatchFunction,
	TypeCompiled_FormatterFunction,
	TypeCompiled_GetInternalRealTime,
	TypeCompiled_RemoveFile,
	TypeCompiled_InfoBit,
	TypeCompiled_CharEql,
	TypeCompiled_MakeMemoryOutputStream,

	/* Size */
	TypeTable_Size
};

#endif


/************************************************************
 *  condition_define.h
 ************************************************************/
#ifndef __CONDITION_DEFINE_HEADER__
#define __CONDITION_DEFINE_HEADER__


#define instance_serious_condition_ _n(instance_serious_condition_)
#define call_serious_condition_ _n(call_serious_condition_)

#define instance_simple_condition_ _n(instance_simple_condition_)
#define call_simple_condition_ _n(call_simple_condition_)
#define simple_condition_format_ _n(simple_condition_format_)
#define simple_condition_format_control_ _n(simple_condition_format_control_)
#define simple_condition_format_arguments_ _n(simple_condition_format_arguments_)

#define instance_simple_error_ _n(instance_simple_error_)
#define call_simple_error_ _n(call_simple_error_)

#define instance_error_condition_ _n(instance_error_condition_)
#define call_error_condition_ _n(call_error_condition_)

#define instance_warning_condition_ _n(instance_warning_condition_)
#define call_warning_condition_ _n(call_warning_condition_)

#define instance_simple_warning_ _n(instance_simple_warning_)
#define call_simple_warning_ _n(call_simple_warning_)

#define instance_storage_condition_ _n(instance_storage_condition_)
#define call_storage_condition_ _n(call_storage_condition_)

#define instance_arithmetic_error_ _n(instance_arithmetic_error_)
#define call_arithmetic_error_ _n(call_arithmetic_error_)
#define arithmetic_error_operation_ _n(arithmetic_error_operation_)
#define arithmetic_error_operands_ _n(arithmetic_error_operands_)

#define instance_float_inexact_ _n(instance_float_inexact_)
#define call_float_inexact_ _n(call_float_inexact_)
#define call_float_inexact_const_ _n(call_float_inexact_const_)
#define call_float_inexact_va_ _n(call_float_inexact_va_)

#define instance_float_invalid_ _n(instance_float_invalid_)
#define call_float_invalid_ _n(call_float_invalid_)
#define call_float_invalid_const_ _n(call_float_invalid_const_)

#define instance_float_overflow_ _n(instance_float_overflow_)
#define call_float_overflow_ _n(call_float_overflow_)
#define call_float_overflow_const_ _n(call_float_overflow_const_)
#define call_float_overflow_va_ _n(call_float_overflow_va_)

#define instance_float_underflow_ _n(instance_float_underflow_)
#define call_float_underflow_ _n(call_float_underflow_)
#define call_float_underflow_const_ _n(call_float_underflow_const_)
#define call_float_underflow_va_ _n(call_float_underflow_va_)

#define instance_division_by_zero_ _n(instance_division_by_zero_)
#define call_division_by_zero_ _n(call_division_by_zero_)
#define call_division_by_zero_const_ _n(call_division_by_zero_const_)
#define call_division_by_zero_real1_ _n(call_division_by_zero_real1_)
#define call_division_by_zero_real2_ _n(call_division_by_zero_real2_)
#define call_division_by_zero1_ _n(call_division_by_zero1_)
#define call_division_by_zero2_ _n(call_division_by_zero2_)

#define instance_cell_error_ _n(instance_cell_error_)
#define call_cell_error_ _n(call_cell_error_)
#define cell_error_name_ _n(cell_error_name_)

#define instance_control_error_ _n(instance_control_error_)
#define call_control_error_ _n(call_control_error_)

#define instance_stream_error_ _n(instance_stream_error_)
#define call_stream_error_ _n(call_stream_error_)
#define stream_error_stream_ _n(stream_error_stream_)

#define instance_end_of_file_ _n(instance_end_of_file_)
#define call_end_of_file_ _n(call_end_of_file_)

#define instance_reader_error_ _n(instance_reader_error_)
#define call_reader_error_ _n(call_reader_error_)

#define instance_file_error_ _n(instance_file_error_)
#define call_file_error_ _n(call_file_error_)
#define file_error_pathname_ _n(file_error_pathname_)

#define instance_package_error_ _n(instance_package_error_)
#define call_package_error_ _n(call_package_error_)
#define package_error_package_ _n(package_error_package_)

#define instance_parse_error_ _n(instance_parse_error_)
#define call_parse_error_ _n(call_parse_error_)

#define instance_print_not_readable_ _n(instance_print_not_readable_)
#define call_print_not_readable_ _n(call_print_not_readable_)
#define print_not_readable_object_ _n(print_not_readable_object_)

#define instance_program_error_ _n(instance_program_error_)
#define call_program_error_ _n(call_program_error_)

#define instance_style_warning_ _n(instance_style_warning_)
#define call_style_warning_ _n(call_style_warning_)

#define instance_type_error_ _n(instance_type_error_)
#define call_type_error_ _n(call_type_error_)
#define call_type_error_const_ _n(call_type_error_const_)
#define type_error_datum_ _n(type_error_datum_)
#define type_error_expected_ _n(type_error_expected_)
#define call_typep_error_ _n(call_typep_error_)
#define call_typep_asterisk_error_ _n(call_typep_asterisk_error_)
#define call_typep_unbound_error_ _n(call_typep_unbound_error_)

#define instance_simple_type_error_ _n(instance_simple_type_error_)
#define call_simple_type_error_ _n(call_simple_type_error_)
#define call_type_error_va_ _n(call_type_error_va_)
#define call_type_error_fill_pointer_ _n(call_type_error_fill_pointer_)
#define call_type_error_fill_pointer_zero_ _n(call_type_error_fill_pointer_zero_)
#define call_type_error_adjustable_ _n(call_type_error_adjustable_)

#define instance_unbound_slot_ _n(instance_unbound_slot_)
#define call_unbound_slot_ _n(call_unbound_slot_)
#define unbound_slot_instance_ _n(unbound_slot_instance_)

#define instance_unbound_variable_ _n(instance_unbound_variable_)
#define call_unbound_variable_ _n(call_unbound_variable_)

#define instance_undefined_function_ _n(instance_undefined_function_)
#define call_undefined_function_ _n(call_undefined_function_)

#define instance_savecore_condition_ _n(instance_savecore_condition_)
#define call_savecore_condition_ _n(call_savecore_condition_)

#define instance_loadcore_condition_ _n(instance_loadcore_condition_)
#define call_loadcore_condition_ _n(call_loadcore_condition_)

#define instance_exit_condition_ _n(instance_exit_condition_)
#define call_exit_condition_ _n(call_exit_condition_)
#define exit_condition_value_ _n(exit_condition_value_)

#define instance_simple_control_error_ _n(instance_simple_control_error_)
#define call_simple_control_error_ _n(call_simple_control_error_)
#define call_simple_control_error_va_ _n(call_simple_control_error_va_)

#define instance_simple_file_error_ _n(instance_simple_file_error_)
#define call_simple_file_error_ _n(call_simple_file_error_)
#define call_simple_file_error_va_ _n(call_simple_file_error_va_)

#define instance_simple_package_error_ _n(instance_simple_package_error_)
#define call_simple_package_error_ _n(call_simple_package_error_)
#define call_simple_package_error_va_ _n(call_simple_package_error_va_)

#define instance_simple_parse_error_ _n(instance_simple_parse_error_)
#define call_simple_parse_error_ _n(call_simple_parse_error_)
#define call_simple_parse_error_va_ _n(call_simple_parse_error_va_)

#define instance_simple_program_error_ _n(instance_simple_program_error_)
#define call_simple_program_error_ _n(call_simple_program_error_)
#define call_simple_program_error_stdarg_ _n(call_simple_program_error_stdarg_)
#define call_simple_program_error_va_ _n(call_simple_program_error_va_)

#define instance_simple_reader_error_ _n(instance_simple_reader_error_)
#define call_simple_reader_error_ _n(call_simple_reader_error_)
#define call_simple_reader_error_va_ _n(call_simple_reader_error_va_)

#define instance_simple_style_warning_ _n(instance_simple_style_warning_)
#define call_simple_style_warning_ _n(call_simple_style_warning_)
#define call_simple_style_warning_va_ _n(call_simple_style_warning_va_)

/* serious_condition */
int instance_serious_condition_(addr *ret);
int call_serious_condition_(Execute ptr);

/* simple_condition */
int instance_simple_condition_(addr *ret, addr control, addr args);
int call_simple_condition_(Execute ptr, addr control, addr args);
int simple_condition_format_(addr condition, addr *control, addr *arguments);
int simple_condition_format_control_(addr condition, addr *ret);
int simple_condition_format_arguments_(addr condition, addr *ret);

/* simple_error */
int instance_simple_error_(addr *ret, addr control, addr args);
int call_simple_error_(Execute ptr, addr control, addr args);

/* error */
int instance_error_condition_(addr *ret);
int call_error_condition_(Execute ptr);

/* warning */
int instance_warning_condition_(addr *ret);
int call_warning_condition_(Execute ptr);

/* simple_warning */
int instance_simple_warning_(addr *ret, addr control, addr args);
int call_simple_warning_(Execute ptr, addr control, addr args);

/* storage_condition */
int instance_storage_condition_(addr *ret);
int call_storage_condition_(Execute ptr);

/* arithmetic_error */
int instance_arithmetic_error_(addr *ret, addr pos, addr list);
int call_arithmetic_error_(Execute ptr, addr pos, addr list);
int arithmetic_error_operation_(addr condition, addr *ret);
int arithmetic_error_operands_(addr condition, addr *ret);

/* floating_point_inexact */
int instance_float_inexact_(addr *ret, addr pos, addr list);
int call_float_inexact_(Execute ptr, addr pos, addr list);
int call_float_inexact_const_(Execute ptr, constindex id, addr list);
int call_float_inexact_va_(Execute ptr, constindex id, ...);

/* floating_point_invalid_operation */
int instance_float_invalid_(addr *ret, addr pos, addr list);
int call_float_invalid_(Execute ptr, addr pos, addr list);
int call_float_invalid_const_(Execute ptr, constindex id, addr list);

/* floating_point_overflow */
int instance_float_overflow_(addr *ret, addr pos, addr list);
int call_float_overflow_(Execute ptr, addr operation, addr operands);
int call_float_overflow_const_(Execute ptr, constindex id, addr list);
int call_float_overflow_va_(Execute ptr, constindex id, ...);

/* floating_point_underflow */
int instance_float_underflow_(addr *ret, addr operation, addr operands);
int call_float_underflow_(Execute ptr, addr operation, addr operands);
int call_float_underflow_const_(Execute ptr, constindex id, addr list);
int call_float_underflow_va_(Execute ptr, constindex id, ...);

/* division_by_zero */
int instance_division_by_zero_(addr *ret, addr pos, addr list);
int call_division_by_zero_(Execute ptr, addr pos, addr list);
int call_division_by_zero_const_(Execute ptr, constindex id, addr list);
int call_division_by_zero_real1_(Execute ptr, constindex id, addr x);
int call_division_by_zero_real2_(Execute ptr, constindex id, addr x, addr y);
int call_division_by_zero1_(Execute ptr, addr left);
int call_division_by_zero2_(Execute ptr, addr left, addr right);

/* cell_error */
int instance_cell_error_(addr *ret, addr name);
int call_cell_error_(Execute ptr, addr name);
int cell_error_name_(addr instance, addr *ret);

/* control_error */
int instance_control_error_(addr *ret);
int call_control_error_(Execute ptr);

/* stream_error */
int instance_stream_error_(addr *ret, addr stream);
int call_stream_error_(Execute ptr, addr stream);
int stream_error_stream_(addr instance, addr *ret);

/* end_of_file */
int instance_end_of_file_(addr *ret, addr stream);
int call_end_of_file_(Execute ptr, addr stream);

/* reader_error */
int instance_reader_error_(addr *ret, addr stream);
int call_reader_error_(Execute ptr, addr stream);

/* file_error */
int instance_file_error_(addr *ret, addr pathname);
int call_file_error_(Execute ptr, addr pathname);
int file_error_pathname_(addr instance, addr *ret);

/* package_error */
int instance_package_error_(addr *ret, addr package);
int call_package_error_(Execute ptr, addr package);
int package_error_package_(addr instance, addr *ret);

/* parse_error */
int instance_parse_error_(addr *ret);
int call_parse_error_(Execute ptr);

/* print_not_readable */
int instance_print_not_readable_(addr *ret, addr object);
int call_print_not_readable_(Execute ptr, addr object);
int print_not_readable_object_(addr instance, addr *ret);

/* program_error */
int instance_program_error_(addr *ret);
int call_program_error_(Execute ptr);

/* style_warning */
int instance_style_warning_(addr *ret);
int call_style_warning_(Execute ptr);

/* type_error */
int instance_type_error_(addr *ret, addr datum, addr expected);
int call_type_error_(Execute ptr, addr datum, addr expected);
int call_type_error_const_(Execute ptr, addr datum, constindex expected);
int type_error_datum_(addr instance, addr *ret);
int type_error_expected_(addr instance, addr *ret);
#define TypeError_(a,b) call_type_error_const_(NULL, (a), CONSTANT_COMMON_##b)
int call_typep_error_(Execute ptr, addr value, addr type);
int call_typep_asterisk_error_(Execute ptr, addr value, addr type);
int call_typep_unbound_error_(Execute ptr, addr value, addr type);

/* simple_type_error */
int instance_simple_type_error_(addr *ret,
		addr control, addr args, addr datum, addr expected);
int call_simple_type_error_(Execute ptr,
		addr control, addr args, addr datum, addr expected);
int call_type_error_va_(Execute ptr,
		addr datum, addr expected, const char *fmt, ...);
int call_type_error_fill_pointer_(Execute ptr, addr datum);
int call_type_error_fill_pointer_zero_(Execute ptr, addr datum);
int call_type_error_adjustable_(Execute ptr, addr datum);

/* unbound_slot */
int instance_unbound_slot_(addr *ret, addr instance, addr name);
int call_unbound_slot_(Execute ptr, addr argument, addr name);
int unbound_slot_instance_(addr instance, addr *ret);

/* unbound_variable */
int instance_unbound_variable_(addr *ret, addr name);
int call_unbound_variable_(Execute ptr, addr name);

/* undefined_function */
int instance_undefined_function_(addr *ret, addr name);
int call_undefined_function_(Execute ptr, addr name);

/* savecore */
int instance_savecore_condition_(addr *ret);
int call_savecore_condition_(Execute ptr);

/* exit */
int instance_exit_condition_(addr *ret, addr value);
int call_exit_condition_(Execute ptr, addr value);
int exit_condition_value_(addr instance, addr *ret);

/* simple_control_error */
int instance_simple_control_error_(addr *ret, addr control, addr args);
int call_simple_control_error_(Execute ptr, addr control, addr args);
int call_simple_control_error_va_(Execute ptr, const char *fmt, ...);

/* simple_file_error */
int instance_simple_file_error_(addr *ret, addr pathname, addr control, addr args);
int call_simple_file_error_(Execute ptr, addr pathname, addr control, addr args);
int call_simple_file_error_va_(Execute ptr, addr pathname, const char *fmt, ...);

/* simple_package_error */
int instance_simple_package_error_(addr *ret, addr control, addr args);
int call_simple_package_error_(Execute ptr, addr control, addr args);
int call_simple_package_error_va_(Execute ptr, const char *fmt, ...);

/* simple_parse_error */
int instance_simple_parse_error_(addr *ret, addr control, addr args);
int call_simple_parse_error_(Execute ptr, addr control, addr args);
int call_simple_parse_error_va_(Execute ptr, const char *fmt, ...);

/* simple_program_error */
int instance_simple_program_error_(addr *ret, addr control, addr args);
int call_simple_program_error_(Execute ptr, addr control, addr args);
int call_simple_program_error_stdarg_(Execute ptr, const char *fmt, va_list va);
int call_simple_program_error_va_(Execute ptr, const char *fmt, ...);

/* simple_reader_error */
int instance_simple_reader_error_(addr *ret, addr control, addr args);
int call_simple_reader_error_(Execute ptr, addr control, addr args);
int call_simple_reader_error_va_(Execute ptr, const char *fmt, ...);

/* simple_style_warning */
int instance_simple_style_warning_(addr *ret, addr control, addr args);
int call_simple_style_warning_(Execute ptr, addr control, addr args);
int call_simple_style_warning_va_(Execute ptr, const char *fmt, ...);

#endif


/************************************************************
 *  condition.h
 ************************************************************/
#ifndef __CONDITION_HEADER__
#define __CONDITION_HEADER__


#define conditionp_ _n(conditionp_)
#define conditionp_debug _n(conditionp_debug)
#define condition_instance_p_ _n(condition_instance_p_)
#define signal_function_ _n(signal_function_)
#define error_function_ _n(error_function_)
#define warning_restart_case_ _n(warning_restart_case_)
#define callclang_error_ _n(callclang_error_)
#define callclang_warning_ _n(callclang_warning_)
#define build_condition _n(build_condition)
#define init_condition _n(init_condition)

int conditionp_(addr pos, int *ret);
int conditionp_debug(addr pos);
int condition_instance_p_(addr pos, int *ret);
int signal_function_(Execute ptr, addr condition);
int error_function_(Execute ptr, addr condition);
int warning_restart_case_(Execute ptr, addr instance);
int callclang_error_(const char *str, ...);
int callclang_warning_(const char *str, ...);
#define fmte_ callclang_error_
#define fmtw_ callclang_warning_

void build_condition(Execute ptr);
void init_condition(void);

#endif


/************************************************************
 *  array_typedef.h
 ************************************************************/
#ifndef __ARRAY_TYPEDEF_HEADER__
#define __ARRAY_TYPEDEF_HEADER__


enum ARRAY_INDEX {
	ARRAY_INDEX_MEMORY,
	ARRAY_INDEX_TYPE,
	ARRAY_INDEX_DIMENSION,
	ARRAY_INDEX_DISPLACED,
	ARRAY_INDEX_SIZE
};

struct array_value {
	enum ARRAY_TYPE type;
	unsigned size;
	union array_value_union {
		void *voidp;
		addr object;
		int8_t signed8;
		int16_t signed16;
		int32_t signed32;
		uint8_t unsigned8;
		uint16_t unsigned16;
		uint32_t unsigned32;
#ifdef LISP_64BIT
		int64_t signed64;
		uint64_t unsigned64;
#endif
		unsigned bit : 1;
		unicode character;
		single_float single_value;
		double_float double_value;
		long_float long_value;
	} value;
};

struct array_struct {
	unsigned simple : 1;
	unsigned adjustable : 1;
	unsigned fillpointer : 1;
	unsigned displaced : 1;
	enum ARRAY_TYPE type : 8;  /* max 16 (signed) */
	unsigned element : 8;
	unsigned bytesize : 8; /* 8, 16, 32, 64 */
	size_t size, front, dimension, offset;
};

typedef fixed (*bitcalc_call)(fixed, fixed);

#endif


/************************************************************
 *  array.h
 ************************************************************/
#ifndef __ARRAY_HEADER__
#define __ARRAY_HEADER__


#define arraygen_set_debug _n(arraygen_set_debug)
#define arraygen_get_debug _n(arraygen_get_debug)
#define arraygen_len_debug _n(arraygen_len_debug)
#define arraygen_lenr_debug _n(arraygen_lenr_debug)
#define arrayspec_pos_debug _n(arrayspec_pos_debug)
#define arrayspec_ptr_debug _n(arrayspec_ptr_debug)
#define arraysize_ptr_debug _n(arraysize_ptr_debug)
#define arrayinfo_struct_debug _n(arrayinfo_struct_debug)
#define getarrayinfo_debug _n(getarrayinfo_debug)
#define setarrayinfo_debug _n(setarrayinfo_debug)
#define lenarrayinfo_debug _n(lenarrayinfo_debug)
#define lenarrayinfor_debug _n(lenarrayinfor_debug)
#define arraygen_alloc _n(arraygen_alloc)
#define arraygen_local _n(arraygen_local)
#define arraygen_heap _n(arraygen_heap)
#define arrayspec_alloc _n(arrayspec_alloc)
#define arrayspec_local _n(arrayspec_local)
#define arrayspec_heap _n(arrayspec_heap)
#define arrayinfo_alloc _n(arrayinfo_alloc)
#define arrayinfo_local _n(arrayinfo_local)
#define arrayinfo_heap _n(arrayinfo_heap)
#define arraysize_alloc_ _n(arraysize_alloc_)
#define arraysize_local_ _n(arraysize_local_)
#define arraysize_heap_ _n(arraysize_heap_)
#define arraysize_copy_alloc_ _n(arraysize_copy_alloc_)
#define arraysize_copy_local_ _n(arraysize_copy_local_)
#define arraysize_copy_heap_ _n(arraysize_copy_heap_)
#define array_empty_alloc _n(array_empty_alloc)
#define array_empty_local _n(array_empty_local)
#define array_empty_heap _n(array_empty_heap)
#define array_alloc_ _n(array_alloc_)
#define array_local_ _n(array_local_)
#define array_heap_ _n(array_heap_)
#define array_va_alloc_ _n(array_va_alloc_)
#define array_va_local_ _n(array_va_local_)
#define array_va_heap_ _n(array_va_heap_)
#define array_system_general_p _n(array_system_general_p)
#define array_system_specialized_p _n(array_system_specialized_p)
#define array_system_p _n(array_system_p)
#define arrayp _n(arrayp)
#define array_simple_p _n(array_simple_p)
#define array_vector_p _n(array_vector_p)
#define array_displaced_p _n(array_displaced_p)
#define array_size_vector_p _n(array_size_vector_p)
#define array_general_p _n(array_general_p)
#define array_specialized_p _n(array_specialized_p)
#define array_simple_vector_p _n(array_simple_vector_p)
#define array_adjustable_p _n(array_adjustable_p)
#define array_fillpointer_p _n(array_fillpointer_p)
#define array_dimension_size _n(array_dimension_size)
#define array_total_size _n(array_total_size)
#define array_fill_size _n(array_fill_size)
#define array_type _n(array_type)
#define array_type_size _n(array_type_size)
#define array_ptrsize _n(array_ptrsize)
#define array_ptrwrite_ _n(array_ptrwrite_)
#define array_ptrread_ _n(array_ptrread_)
#define array_fill_pointer _n(array_fill_pointer)
#define array_setf_fill_pointer_ _n(array_setf_fill_pointer_)
#define array_fill_pointer_start _n(array_fill_pointer_start)
#define array_fill_pointer_end _n(array_fill_pointer_end)
#define array_fill_pointer_set _n(array_fill_pointer_set)

#ifdef LISP_64BIT
#define arraygen_alloc_Low			alloc_array8
#define arrayspec_alloc_Low			alloc_body8
#else
#define arraygen_alloc_Low			alloc_array4
#define arrayspec_alloc_Low			alloc_body4
#endif
#define arrayinfo_alloc_Low			alloc_smallsize
#define arraysize1_alloc_Low		alloc_body4

#ifdef LISP_64BIT
#define arraygen_set_Low			SetArrayA8
#define arraygen_get_Low			GetArrayA8
#define arraygen_len_Low			LenArrayA8
#define arraygen_lenr_Low			LenArrayA8r
#define arrayspec_pos_Low			PosBodyB8
#define arrayspec_ptr_Low			PtrBodyB8
#else
#define arraygen_set_Low			SetArrayA4
#define arraygen_get_Low			GetArrayA4
#define arraygen_len_Low			LenArrayA4
#define arraygen_lenr_Low			LenArrayA4r
#define arrayspec_pos_Low			PosBodyB4
#define arrayspec_ptr_Low			PtrBodyB4
#endif

#define arraysize_ptr_Low(p)		((size_t *)PtrBodyB4(p))
#define arrayinfo_struct_Low(p)		\
	((struct array_struct *)PtrBodySSa((p), ARRAY_INDEX_SIZE))
#define GetArrayInfo_Low			GetArraySS
#define SetArrayInfo_Low			SetArraySS
#define LenArrayInfo_Low			LenArraySS
#define LenArrayInfor_Low			LenArraySSr

#ifdef LISP_DEBUG
#define arraygen_set				arraygen_set_debug
#define arraygen_get				arraygen_get_debug
#define arraygen_len				arraygen_len_debug
#define arraygen_lenr				arraygen_lenr_debug
#define arrayspec_pos				arrayspec_pos_debug
#define arrayspec_ptr				arrayspec_ptr_debug
#define arraysize_ptr				arraysize_ptr_debug
#define ArrayInfoStruct				arrayinfo_struct_debug
#define GetArrayInfo				getarrayinfo_debug
#define SetArrayInfo				setarrayinfo_debug
#define LenArrayInfo				lenarrayinfo_debug
#define LenArrayInfor				lenarrayinfor_debug
#else
#define arraygen_set				arraygen_set_Low
#define arraygen_get				arraygen_get_Low
#define arraygen_len				arraygen_len_Low
#define arraygen_lenr				arraygen_lenr_Low
#define arrayspec_pos				arrayspec_pos_Low
#define arrayspec_ptr				arrayspec_ptr_Low
#define arraysize_ptr				arraysize_ptr_Low
#define ArrayInfoStruct				arrayinfo_struct_Low
#define GetArrayInfo				GetArrayInfo_Low
#define SetArrayInfo				SetArrayInfo_Low
#define LenArrayInfo				LenArrayInfo_Low
#define LenArrayInfor				LenArrayInfor_Low
#endif

/* accessor */
void arraygen_set_debug(addr pos, size_t index, addr value);
void arraygen_get_debug(addr pos, size_t index, addr *ret);
void arraygen_len_debug(addr pos, size_t *ret);
size_t arraygen_lenr_debug(addr pos);
void arrayspec_pos_debug(addr pos, addr *ret);
addr arrayspec_ptr_debug(addr po);
size_t *arraysize_ptr_debug(addr pos);
struct array_struct *arrayinfo_struct_debug(addr pos);
void getarrayinfo_debug(addr pos, size_t index, addr *ret);
void setarrayinfo_debug(addr pos, size_t index, addr value);
void lenarrayinfo_debug(addr pos, size_t *ret);
size_t lenarrayinfor_debug(addr pos);

/* memory allocate */
void arraygen_alloc(LocalRoot local, addr *ret, size_t size);
void arraygen_local(LocalRoot local, addr *ret, size_t size);
void arraygen_heap(addr *ret, size_t size);
void arrayspec_alloc(LocalRoot local, addr *ret, size_t size);
void arrayspec_local(LocalRoot local, addr *ret, size_t size);
void arrayspec_heap(addr *ret, size_t size);
void arrayinfo_alloc(LocalRoot local, addr *ret);
void arrayinfo_local(LocalRoot local, addr *ret);
void arrayinfo_heap(addr *ret);
int arraysize_alloc_(LocalRoot local, addr *ret, size_t index);
int arraysize_local_(LocalRoot local, addr *ret, size_t index);
int arraysize_heap_(addr *ret, size_t index);
int arraysize_copy_alloc_(LocalRoot local, addr *ret, addr pos, size_t size);
int arraysize_copy_local_(LocalRoot local, addr *ret, addr pos, size_t size);
int arraysize_copy_heap_(addr *ret, addr pos, size_t size);
void array_empty_alloc(LocalRoot local, addr *ret);
void array_empty_local(LocalRoot local, addr *ret);
void array_empty_heap(addr *ret);
int array_alloc_(LocalRoot local, addr *ret, size_t index, size_t size);
int array_local_(LocalRoot local, addr *ret, size_t index, size_t size);
int array_heap_(addr *ret, size_t index, size_t size);
int array_va_alloc_(LocalRoot local, addr *ret, ...);
int array_va_local_(LocalRoot local, addr *ret, ...);
int array_va_heap_(addr *ret, ...);

/* type check */
int array_system_general_p(addr pos);
int array_system_specialized_p(addr pos);
int array_system_p(addr pos);
int arrayp(addr pos);
int array_simple_p(addr pos);
int array_vector_p(addr pos);
int array_displaced_p(addr pos);
int array_size_vector_p(addr pos, size_t size);
int array_general_p(addr pos);
int array_specialized_p(addr pos);
int array_simple_vector_p(addr pos);
int array_adjustable_p(addr pos);
int array_fillpointer_p(addr pos);
size_t array_dimension_size(addr pos);
size_t array_total_size(addr pos);
size_t array_fill_size(addr pos);
enum ARRAY_TYPE array_type(addr pos);
unsigned array_type_size(addr pos);

/* memory access */
const size_t *array_ptrsize(addr pos);
int array_ptrwrite_(addr pos, size_t index, void **ret);
int array_ptrread_(addr pos, size_t index, void *const *ret);

/* fill-pointer */
int array_fill_pointer(addr array, addr *ret);
int array_setf_fill_pointer_(addr array, addr value, int *ret);
int array_fill_pointer_start(addr array);
int array_fill_pointer_end(addr array);
int array_fill_pointer_set(addr array, size_t size);

#endif


/************************************************************
 *  integer.h
 ************************************************************/
#ifndef __INTEGER_HEADER__
#define __INTEGER_HEADER__


#define integerp _n(integerp)
#define minusp_integerp _n(minusp_integerp)
#define integer_throw_alloc_ _n(integer_throw_alloc_)
#define integer_throw_local_ _n(integer_throw_local_)
#define integer_throw_heap_ _n(integer_throw_heap_)
#define integer_result_alloc_ _n(integer_result_alloc_)
#define integer_result_local_ _n(integer_result_local_)
#define integer_result_heap_ _n(integer_result_heap_)
#define fixnum_copy_alloc _n(fixnum_copy_alloc)
#define fixnum_copy_local _n(fixnum_copy_local)
#define fixnum_copy_heap _n(fixnum_copy_heap)
#define integer_copy_alloc_ _n(integer_copy_alloc_)
#define integer_copy_local_ _n(integer_copy_local_)
#define integer_copy_heap_ _n(integer_copy_heap_)
#define getsign_integer_ _n(getsign_integer_)
#define zerop_or_plusp_integer_ _n(zerop_or_plusp_integer_)
#define plusp_integer_ _n(plusp_integer_)
#define minusp_integer_ _n(minusp_integer_)
#define zerop_integer_ _n(zerop_integer_)
#define equal_integer_ _n(equal_integer_)
#define not_equal_integer_ _n(not_equal_integer_)
#define compare_integer_ _n(compare_integer_)
#define less_integer_ _n(less_integer_)
#define less_equal_integer_ _n(less_equal_integer_)
#define greater_integer_ _n(greater_integer_)
#define greater_equal_integer_ _n(greater_equal_integer_)
#define zerop_integer_debug _n(zerop_integer_debug)
#define plusp_integer_debug _n(plusp_integer_debug)
#define minusp_integer_debug _n(minusp_integer_debug)
#define less_integer_debug _n(less_integer_debug)
#define less_equal_integer_debug _n(less_equal_integer_debug)
#define sign_reverse_integer_common_ _n(sign_reverse_integer_common_)
#define evenp_integer_ _n(evenp_integer_)
#define make_index_integer_alloc _n(make_index_integer_alloc)
#define make_index_integer_local _n(make_index_integer_local)
#define make_index_integer_heap _n(make_index_integer_heap)
#define make_indexmax_alloc _n(make_indexmax_alloc)
#define reference_index_integer_alloc _n(reference_index_integer_alloc)
#define reference_index_integer_local _n(reference_index_integer_local)
#define reference_index_integer_heap _n(reference_index_integer_heap)
#define GetIndex_integer _n(GetIndex_integer)
#define getindex_integer_ _n(getindex_integer_)
#define getindex_sign_integer_ _n(getindex_sign_integer_)
#define GetIndex_fixnum _n(GetIndex_fixnum)
#define getindex_fixnum_ _n(getindex_fixnum_)
#define fixnum_index_heap_ _n(fixnum_index_heap_)
#define GetByte_integer _n(GetByte_integer)
#define getunicode_integer_ _n(getunicode_integer_)
#define int8_integer_alloc _n(int8_integer_alloc)
#define int16_integer_alloc _n(int16_integer_alloc)
#define int32_integer_alloc _n(int32_integer_alloc)
#define uint8_integer_alloc _n(uint8_integer_alloc)
#define uint16_integer_alloc _n(uint16_integer_alloc)
#define uint32_integer_alloc _n(uint32_integer_alloc)
#define int64_integer_alloc _n(int64_integer_alloc)
#define uint64_integer_alloc _n(uint64_integer_alloc)
#define IsByteSign(x)  (0 <= (x) && (x) <= 0xFF)
#define IsByteUnsign(x)  ((x) <= 0xFF)

int integerp(addr pos);
int minusp_integerp(addr pos);

int integer_throw_alloc_(LocalRoot local, addr pos, addr *ret);
int integer_throw_local_(LocalRoot local, addr pos, addr *ret);
int integer_throw_heap_(addr pos, addr *ret);
int integer_result_alloc_(LocalRoot local, addr pos, addr *ret);
int integer_result_local_(LocalRoot local, addr pos, addr *ret);
int integer_result_heap_(addr pos, addr *ret);

void fixnum_copy_alloc(LocalRoot local, addr pos, addr *ret);
void fixnum_copy_local(LocalRoot local, addr pos, addr *ret);
void fixnum_copy_heap(LocalRoot local, addr pos, addr *ret);
int integer_copy_alloc_(LocalRoot local, addr pos, addr *ret);
int integer_copy_local_(LocalRoot local, addr pos, addr *ret);
int integer_copy_heap_(addr pos, addr *ret);

/* fixnum */
#define zerop_or_plusp_fixnum(a) (0 <= RefFixnum(a))
#define plusp_fixnum(a) (0 < RefFixnum(a))
#define minusp_fixnum(a) (RefFixnum(a) < 0)
#define zerop_fixnum(a) (RefFixnum(a) == 0)
#define equal_ff_real(a,b) (RefFixnum(a) == RefFixnum(b))
#define compare_ff_real fixnumcompare

/* integer */
int getsign_integer_(addr pos, int *ret);
int zerop_or_plusp_integer_(addr pos, int *ret);
int plusp_integer_(addr pos, int *ret);
int minusp_integer_(addr pos, int *ret);
int zerop_integer_(addr pos, int *ret);
int equal_integer_(addr left, addr right, int *ret);
int not_equal_integer_(addr left, addr right, int *ret);
int compare_integer_(addr left, addr right, int *ret);
int less_integer_(addr left, addr right, int *ret);
int less_equal_integer_(addr left, addr right, int *ret);
int greater_integer_(addr left, addr right, int *ret);
int greater_equal_integer_(addr left, addr right, int *ret);

int zerop_integer_debug(addr pos);
int plusp_integer_debug(addr pos);
int minusp_integer_debug(addr pos);
int less_integer_debug(addr left, addr right);
int less_equal_integer_debug(addr left, addr right);

int sign_reverse_integer_common_(addr pos, addr *ret);
int evenp_integer_(addr left, int *ret);

/* size */
void make_index_integer_alloc(LocalRoot local, addr *ret, size_t value);
void make_index_integer_local(LocalRoot local, addr *ret, size_t value);
void make_index_integer_heap(addr *ret, size_t value);
void make_indexmax_alloc(LocalRoot local, addr *ret);
addr reference_index_integer_alloc(LocalRoot local, size_t value);
addr reference_index_integer_local(LocalRoot local, size_t value);
addr reference_index_integer_heap(size_t value);
#define intsizea reference_index_integer_alloc
#define intsizeh reference_index_integer_heap
#define intsizel(v) reference_index_integer_local(Local_Thread, (v))

int GetIndex_integer(addr pos, size_t *ret);
int getindex_integer_(addr pos, size_t *ret);
int getindex_sign_integer_(addr pos, int *sign, size_t *value, int *ret);
int GetIndex_fixnum(addr pos, size_t *ret);
int getindex_fixnum_(addr pos, size_t *ret);
int fixnum_index_heap_(addr *ret, size_t value);
int GetByte_integer(addr pos, byte *ret);
int getunicode_integer_(addr pos, unicode *ret);

/* standard type */
void int8_integer_alloc(LocalRoot local, addr *ret, int8_t value);
void int16_integer_alloc(LocalRoot local, addr *ret, int16_t value);
void int32_integer_alloc(LocalRoot local, addr *ret, int32_t value);
void uint8_integer_alloc(LocalRoot local, addr *ret, uint8_t value);
void uint16_integer_alloc(LocalRoot local, addr *ret, uint16_t value);
void uint32_integer_alloc(LocalRoot local, addr *ret, uint32_t value);
#ifdef LISP_64BIT
void int64_integer_alloc(LocalRoot local, addr *ret, int64_t value);
void uint64_integer_alloc(LocalRoot local, addr *ret, uint64_t value);
#endif

#endif


/************************************************************
 *  type_memory.h
 ************************************************************/
#ifndef __TYPE_MEMORY_HEADER__
#define __TYPE_MEMORY_HEADER__


#define type_alloc _n(type_alloc)
#define type_local _n(type_local)
#define type_heap _n(type_heap)

#define type_lowlispdecl _n(type_lowlispdecl)
#define type_reflispdecl _n(type_reflispdecl)
#define type_getlispdecl _n(type_getlispdecl)
#define type_setlispdecl _n(type_setlispdecl)
#define type_refnotdecl _n(type_refnotdecl)
#define type_getnotdecl _n(type_getnotdecl)
#define type_setnotdecl _n(type_setnotdecl)
#define type_revnotdecl _n(type_revnotdecl)
#define type_setnotobject _n(type_setnotobject)
#define type_refarraytype _n(type_refarraytype)
#define type_getarraytype _n(type_getarraytype)
#define type_setarraytype _n(type_setarraytype)
#define type_lenarraytype _n(type_lenarraytype)
#define type_getvalues1 _n(type_getvalues1)

#define type0_alloc _n(type0_alloc)
#define type1_alloc _n(type1_alloc)
#define type2_alloc _n(type2_alloc)
#define type3_alloc _n(type3_alloc)
#define type4_alloc _n(type4_alloc)
#define type0_local _n(type0_local)
#define type1_local _n(type1_local)
#define type2_local _n(type2_local)
#define type3_local _n(type3_local)
#define type4_local _n(type4_local)
#define type0_heap _n(type0_heap)
#define type1_heap _n(type1_heap)
#define type2_heap _n(type2_heap)
#define type3_heap _n(type3_heap)
#define type4_heap _n(type4_heap)
#define type0not_alloc _n(type0not_alloc)
#define type1not_alloc _n(type1not_alloc)
#define type2not_alloc _n(type2not_alloc)
#define type3not_alloc _n(type3not_alloc)
#define type4not_alloc _n(type4not_alloc)
#define type0not_local _n(type0not_local)
#define type1not_local _n(type1not_local)
#define type2not_local _n(type2not_local)
#define type3not_local _n(type3not_local)
#define type4not_local _n(type4not_local)
#define type0not_heap _n(type0not_heap)
#define type1not_heap _n(type1not_heap)
#define type2not_heap _n(type2not_heap)
#define type3not_heap _n(type3not_heap)
#define type4not_heap _n(type4not_heap)
#define type1aster_localall _n(type1aster_localall)
#define type2aster_localall _n(type2aster_localall)
#define type3aster_localall _n(type3aster_localall)
#define type4aster_localall _n(type4aster_localall)

#define type_copy_unsafe_alloc _n(type_copy_unsafe_alloc)
#define type_copy_unsafe_local _n(type_copy_unsafe_local)
#define type_copy_unsafe_heap _n(type_copy_unsafe_heap)
#define type_copydecl_unsafe_alloc _n(type_copydecl_unsafe_alloc)
#define type_copydecl_unsafe_local _n(type_copydecl_unsafe_local)
#define type_copydecl_unsafe_heap _n(type_copydecl_unsafe_heap)

#define type_eql_alloc _n(type_eql_alloc)
#define type_eql_local _n(type_eql_local)
#define type_eql_heap _n(type_eql_heap)
#define type_member_heap _n(type_member_heap)
#define type_satisfies_heap _n(type_satisfies_heap)
#define type_values_local _n(type_values_local)
#define type_values_heap _n(type_values_heap)
#define type_signed_alloc _n(type_signed_alloc)
#define type_signed_local _n(type_signed_local)
#define type_signed_heap _n(type_signed_heap)
#define type_unsigned_alloc _n(type_unsigned_alloc)
#define type_unsigned_local _n(type_unsigned_local)
#define type_unsigned_heap _n(type_unsigned_heap)
#define type_function_heap _n(type_function_heap)
#define type_compiled_heap _n(type_compiled_heap)
#define type_clos_heap _n(type_clos_heap)
#define type_delay_heap _n(type_delay_heap)

#define LowLispDecl_Low(p)		((LispDecl)(GetUser(p)))
#define RefLispDecl_Low(p)		((LispDecl)(LowLispDecl_Low(p) & 0x7F))
#define GetLispDecl_Low(p,v)	(*(v) = RefLispDecl(p))
#define SetLispDecl_Low(p,v)	SetUser((p), (byte)(v))
#define RefNotDecl_Low(p)		((int)(GetUser(p) & 0x80))
#define GetNotDecl_Low(p,v)		(*(v) = (int)RefNotDecl(p))
#define SetNotDecl_Low			type_setnotdecl
#define RefArrayType_Low		RefArrayA2
#define GetArrayType_Low		GetArrayA2
#define SetArrayType_Low		SetArrayA2
#define LenArrayType_Low		LenArrayA2

#ifdef LISP_DEBUG
#define LowLispDecl				LowLispDecl_Low
#define RefLispDecl				RefLispDecl_Low
#define GetLispDecl				GetLispDecl_Low
#define SetLispDecl				SetLispDecl_Low
#define RefNotDecl				RefNotDecl_Low
#define GetNotDecl				GetNotDecl_Low
#define SetNotDecl				type_setnotdecl
#define RefArrayType			RefArrayType_Low
#define GetArrayType			GetArrayType_Low
#define SetArrayType			SetArrayType_Low
#define LenArrayType			LenArrayType_Low
#else
#define LowLispDecl				type_lowlispdecl
#define RefLispDecl				type_reflispdecl
#define GetLispDecl				type_getlispdecl
#define SetLispDecl				type_setlispdecl
#define RefNotDecl				type_refnotdecl
#define GetNotDecl				type_getnotdecl
#define SetNotDecl				type_setnotdecl
#define RefArrayType			type_refarraytype
#define GetArrayType			type_getarraytype
#define SetArrayType			type_setarraytype
#define LenArrayType			type_lenarraytype
#endif

/* allocate */
void type_alloc(LocalRoot local, addr *ret, LispDecl type, size_t size);
void type_local(LocalRoot local, addr *ret, LispDecl type, size_t size);
void type_heap(addr *ret, LispDecl type, size_t size);

/* access */
LispDecl type_lowlispdecl(addr pos);
LispDecl type_reflispdecl(addr pos);
void type_getlispdecl(addr pos, LispDecl *ret);
void type_setlispdecl(addr pos, LispDecl value);
int type_refnotdecl(addr pos);
void type_getnotdecl(addr pos, int *ret);
void type_setnotdecl(addr pos, int value);
void type_revnotdecl(addr pos);
void type_setnotobject(addr pos, addr value);
addr type_refarraytype(addr pos, size_t index);
void type_getarraytype(addr pos, size_t index, addr *ret);
void type_setarraytype(addr pos, size_t index, addr value);
void type_lenarraytype(addr pos, size_t *ret);
void type_getvalues1(addr type, addr *ret);

/* object */
void type0_alloc(LocalRoot local, LispDecl type, addr *ret);
void type1_alloc(LocalRoot local, LispDecl type, addr a, addr *ret);
void type2_alloc(LocalRoot local, LispDecl type, addr a, addr b, addr *ret);
void type3_alloc(LocalRoot local, LispDecl type, addr a, addr b, addr c, addr *ret);
void type4_alloc(LocalRoot local, LispDecl type,
		addr a, addr b, addr c, addr d, addr *ret);
void type0_local(LocalRoot local, LispDecl type, addr *ret);
void type1_local(LocalRoot local, LispDecl type, addr a, addr *ret);
void type2_local(LocalRoot local, LispDecl type, addr a, addr b, addr *ret);
void type3_local(LocalRoot local, LispDecl type, addr a, addr b, addr c, addr *ret);
void type4_local(LocalRoot local, LispDecl type,
		addr a, addr b, addr c, addr d, addr *ret);
void type0_heap(LispDecl type, addr *ret);
void type1_heap(LispDecl type, addr a, addr *ret);
void type2_heap(LispDecl type, addr a, addr b, addr *ret);
void type3_heap(LispDecl type, addr a, addr b, addr c, addr *ret);
void type4_heap(LispDecl type, addr a, addr b, addr c, addr d, addr *ret);

void type0not_alloc(LocalRoot local, LispDecl type, addr *ret);
void type1not_alloc(LocalRoot local, LispDecl type, addr a, addr *ret);
void type2not_alloc(LocalRoot local, LispDecl type, addr a, addr b, addr *ret);
void type3not_alloc(LocalRoot local, LispDecl type, addr a, addr b, addr c, addr *ret);
void type4not_alloc(LocalRoot local, LispDecl type,
		addr a, addr b, addr c, addr d, addr *ret);
void type0not_local(LocalRoot local, LispDecl type, addr *ret);
void type1not_local(LocalRoot local, LispDecl type, addr a, addr *ret);
void type2not_local(LocalRoot local, LispDecl type, addr a, addr b, addr *ret);
void type3not_local(LocalRoot local, LispDecl type, addr a, addr b, addr c, addr *ret);
void type4not_local(LocalRoot local, LispDecl type,
		addr a, addr b, addr c, addr d, addr *ret);
void type0not_heap(LispDecl type, addr *ret);
void type1not_heap(LispDecl type, addr a, addr *ret);
void type2not_heap(LispDecl type, addr a, addr b, addr *ret);
void type3not_heap(LispDecl type, addr a, addr b, addr c, addr *ret);
void type4not_heap(LispDecl type, addr a, addr b, addr c, addr d, addr *ret);

void type1aster_localall(LocalRoot local, LispDecl type, addr *ret);
void type2aster_localall(LocalRoot local, LispDecl type, addr *ret);
void type3aster_localall(LocalRoot local, LispDecl type, addr *ret);
void type4aster_localall(LocalRoot local, LispDecl type, addr *ret);

/* copy */
void type_copy_unsafe_alloc(LocalRoot local, addr *ret, addr left);
void type_copy_unsafe_local(LocalRoot local, addr *ret, addr left);
void type_copy_unsafe_heap(addr *ret, addr left);
void type_copydecl_unsafe_alloc(LocalRoot local, addr *ret, addr left);
void type_copydecl_unsafe_local(LocalRoot local, addr *ret, addr left);
void type_copydecl_unsafe_heap(addr *ret, addr left);

/* make */
void type_eql_alloc(LocalRoot local, addr pos, addr *ret);
void type_eql_local(LocalRoot local, addr pos, addr *ret);
void type_eql_heap(addr pos, addr *ret);
void type_member_heap(addr *ret, ...);
void type_satisfies_heap(addr call, addr *ret);
void type_values_local(LocalRoot local, addr v1, addr v2, addr v3, addr v4, addr *ret);
void type_values_heap(addr v1, addr v2, addr v3, addr v4, addr *ret);
void type_signed_alloc(LocalRoot local, fixnum value, addr *ret);
void type_signed_local(LocalRoot local, fixnum value, addr *ret);
void type_signed_heap(fixnum value, addr *ret);
void type_unsigned_alloc(LocalRoot local, fixnum value, addr *ret);
void type_unsigned_local(LocalRoot local, fixnum value, addr *ret);
void type_unsigned_heap(fixnum value, addr *ret);
void type_function_heap(addr args, addr values, addr *ret);
void type_compiled_heap(addr args, addr values, addr *ret);
void type_clos_heap(addr clos, addr *ret);
void type_delay_heap(addr pos, addr *ret);

#endif


/************************************************************
 *  type.h
 ************************************************************/
#ifndef __TYPE_HEADER__
#define __TYPE_HEADER__


#define decl_function_p _n(decl_function_p)
#define decl_character_p _n(decl_character_p)
#define decl_float_p _n(decl_float_p)
#define decl_range_p _n(decl_range_p)
#define decl_subtypep_real _n(decl_subtypep_real)
#define type_delay_p _n(type_delay_p)
#define type_function_p _n(type_function_p)
#define type_astert_p _n(type_astert_p)
#define type_function_aster_p _n(type_function_aster_p)
#define type_asterisk_p _n(type_asterisk_p)
#define type_range_p _n(type_range_p)
#define type_string_p _n(type_string_p)

#define init_type _n(init_type)
#define build_type _n(build_type)

int decl_function_p(LispDecl type);
int decl_character_p(LispDecl type);
int decl_float_p(LispDecl type);
int decl_range_p(LispDecl type);
int decl_subtypep_real(LispDecl left, LispDecl right);
int type_delay_p(addr pos);
int type_function_p(addr pos);
int type_astert_p(addr pos);
int type_function_aster_p(addr pos);
int type_asterisk_p(addr pos);
int type_range_p(addr pos);
int type_string_p(addr pos);

void init_type(void);
void build_type(void);

#endif


/************************************************************
 *  type_table.h
 ************************************************************/
#ifndef __TYPE_TABLE_HEADER__
#define __TYPE_TABLE_HEADER__


#define reftypetable _n(reftypetable)
#define gettypetable _n(gettypetable)
#define settypetable _n(settypetable)
#define keytypetable _n(keytypetable)
#define build_type_table _n(build_type_table)
#define build_type_constant _n(build_type_constant)
#define typeargs_empty _n(typeargs_empty)
#define typeargs_full _n(typeargs_full)
#define typeargs_var1 _n(typeargs_var1)
#define typeargs_var2 _n(typeargs_var2)
#define typeargs_var3 _n(typeargs_var3)
#define typeargs_var4 _n(typeargs_var4)
#define typeargs_var5 _n(typeargs_var5)
#define typeargs_var1key _n(typeargs_var1key)
#define typeargs_var2key _n(typeargs_var2key)
#define typeargs_var3key _n(typeargs_var3key)
#define typeargs_var4key _n(typeargs_var4key)
#define typeargs_opt1 _n(typeargs_opt1)
#define typeargs_opt2 _n(typeargs_opt2)
#define typeargs_opt3 _n(typeargs_opt3)
#define typeargs_opt4 _n(typeargs_opt4)
#define typeargs_opt5 _n(typeargs_opt5)
#define typeargs_var1opt1 _n(typeargs_var1opt1)
#define typeargs_var1opt2 _n(typeargs_var1opt2)
#define typeargs_var1opt2key _n(typeargs_var1opt2key)
#define typeargs_var2opt1 _n(typeargs_var2opt1)
#define typeargs_var2opt2 _n(typeargs_var2opt2)
#define typeargs_var2opt3 _n(typeargs_var2opt3)
#define typeargs_var3opt1 _n(typeargs_var3opt1)
#define typeargs_var4opt1 _n(typeargs_var4opt1)
#define typeargs_var1rest _n(typeargs_var1rest)
#define typeargs_var2rest _n(typeargs_var2rest)
#define typeargs_var3rest _n(typeargs_var3rest)
#define typeargs_var4rest _n(typeargs_var4rest)
#define typeargs_opt1rest _n(typeargs_opt1rest)
#define typeargs_var1rest_allow _n(typeargs_var1rest_allow)
#define typeargs_var2rest_allow _n(typeargs_var2rest_allow)
#define typeargs_var3rest_allow _n(typeargs_var3rest_allow)
#define typeargs_var4rest_allow _n(typeargs_var4rest_allow)
#define typeargs_rest _n(typeargs_rest)
#define typeargs_key _n(typeargs_key)
#define typeargs_method _n(typeargs_method)
#define typeargs_methodkey _n(typeargs_methodkey)
#define typevalues_result _n(typevalues_result)
#define typevalues_values2 _n(typevalues_values2)
#define typevalues_values3 _n(typevalues_values3)
#define typevalues_values4 _n(typevalues_values4)
#define typevalues_values5 _n(typevalues_values5)
#define typevalues_values_va _n(typevalues_values_va)
#define typevalues_rest _n(typevalues_rest)
#define type1aster_alloc _n(type1aster_alloc)
#define type2aster_alloc _n(type2aster_alloc)
#define type3aster_alloc _n(type3aster_alloc)
#define type4aster_alloc _n(type4aster_alloc)
#define type1aster_local _n(type1aster_local)
#define type2aster_local _n(type2aster_local)
#define type3aster_local _n(type3aster_local)
#define type4aster_local _n(type4aster_local)
#define type1aster_heap _n(type1aster_heap)
#define type2aster_heap _n(type2aster_heap)
#define type3aster_heap _n(type3aster_heap)
#define type4aster_heap _n(type4aster_heap)
#define type2and_alloc _n(type2and_alloc)
#define type3and_alloc _n(type3and_alloc)
#define type2and_local _n(type2and_local)
#define type3and_local _n(type3and_local)
#define type2and_heap _n(type2and_heap)
#define type3and_heap _n(type3and_heap)
#define type2or_alloc _n(type2or_alloc)
#define type3or_alloc _n(type3or_alloc)
#define type4or_alloc _n(type4or_alloc)
#define type2or_local _n(type2or_local)
#define type3or_local _n(type3or_local)
#define type4or_local _n(type4or_local)
#define type2or_heap _n(type2or_heap)
#define type3or_heap _n(type3or_heap)
#define type4or_heap _n(type4or_heap)
#define type1real_heap _n(type1real_heap)
#define type4integer_heap _n(type4integer_heap)
#define type2integer_ab_heap _n(type2integer_ab_heap)
#define type2integer_cd_heap _n(type2integer_cd_heap)
#define type4float_heap _n(type4float_heap)
#define type2float_ab_heap _n(type2float_ab_heap)
#define type2float_cd_heap _n(type2float_cd_heap)
#define type4realf_heap _n(type4realf_heap)
#define type2realf_ab_heap _n(type2realf_ab_heap)
#define type2realf_cd_heap _n(type2realf_cd_heap)
#define type_vector1_heap _n(type_vector1_heap)

/* interface */
#define GetTypeTable(a,b) gettypetable(TypeTable_##b, (a))
#define GetTypeArgs(a,b) gettypetable(TypeArgs_##b, (a))
#define GetTypeValues(a,b) gettypetable(TypeValues_##b, (a))
#define GetTypeCompiled(a,b) gettypetable(TypeCompiled_##b, (a))
#define SetTypeTable(x, y) settypetable(TypeTable_##x, y)
#define SetTypeArgs(x, y) settypetable(TypeArgs_##x, y)
#define SetTypeValues(x, y) settypetable(TypeValues_##x, y)
#define SetTypeCompiled(x, y) settypetable(TypeCompiled_##x, y)
#define KeyTypeTable(r,a,b) keytypetable(CONSTANT_KEYWORD_##a, TypeTable_##b, (r))
addr reftypetable(enum TypeTable index);
void gettypetable(enum TypeTable index, addr *ret);
void settypetable(enum TypeTable index, addr pos);
void keytypetable(constindex name, enum TypeTable type, addr *ret);
void build_type_table(void);
void build_type_constant(void);

/* arguments */
void typeargs_empty(addr *ret);
void typeargs_full(addr *ret, addr var, addr opt, addr rest, addr key);
void typeargs_var1(addr *ret, addr v1);
void typeargs_var2(addr *ret, addr v1, addr v2);
void typeargs_var3(addr *ret, addr v1, addr v2, addr v3);
void typeargs_var4(addr *ret, addr v1, addr v2, addr v3, addr v4);
void typeargs_var5(addr *ret, addr v1, addr v2, addr v3, addr v4, addr v5);
void typeargs_var1key(addr *ret, addr v1, addr key);
void typeargs_var2key(addr *ret, addr v1, addr v2, addr key);
void typeargs_var3key(addr *ret, addr v1, addr v2, addr v3, addr key);
void typeargs_var4key(addr *ret, addr v1, addr v2, addr v3, addr v4, addr key);
void typeargs_opt1(addr *ret, addr v1);
void typeargs_opt2(addr *ret, addr v1, addr v2);
void typeargs_opt3(addr *ret, addr v1, addr v2, addr v3);
void typeargs_opt4(addr *ret, addr v1, addr v2, addr v3, addr v4);
void typeargs_opt5(addr *ret, addr v1, addr v2, addr v3, addr v4, addr v5);
void typeargs_var1opt1(addr *ret, addr var1, addr opt1);
void typeargs_var1opt2(addr *ret, addr var1, addr opt1, addr opt2);
void typeargs_var1opt2key(addr *ret, addr var1, addr opt1, addr opt2, addr key);
void typeargs_var2opt1(addr *ret, addr var1, addr var2, addr opt1);
void typeargs_var2opt2(addr *ret, addr var1, addr var2, addr opt1, addr opt2);
void typeargs_var2opt3(addr *ret, addr v1, addr v2, addr o1, addr o2, addr o3);
void typeargs_var3opt1(addr *ret, addr var1, addr var2, addr var3, addr opt1);
void typeargs_var4opt1(addr *ret, addr v1, addr v2, addr v3, addr v4, addr opt1);
void typeargs_var1rest(addr *ret, addr v1, addr rest);
void typeargs_var2rest(addr *ret, addr v1, addr v2, addr rest);
void typeargs_var3rest(addr *ret, addr v1, addr v2, addr v3, addr rest);
void typeargs_var4rest(addr *ret, addr v1, addr v2, addr v3, addr v4, addr rest);
void typeargs_opt1rest(addr *ret, addr opt1, addr rest);
void typeargs_var1rest_allow(addr *ret, addr v1, addr rest);
void typeargs_var2rest_allow(addr *ret, addr v1, addr v2, addr rest);
void typeargs_var3rest_allow(addr *ret, addr v1, addr v2, addr v3, addr rest);
void typeargs_var4rest_allow(addr *ret, addr v1, addr v2, addr v3, addr v4, addr rest);
void typeargs_rest(addr *ret, addr rest);
void typeargs_key(addr *ret, addr key);
void typeargs_method(addr type);
void typeargs_methodkey(addr type);

/* values */
void typevalues_result(addr *ret, addr v1);
void typevalues_values2(addr *ret, addr v1, addr v2);
void typevalues_values3(addr *ret, addr v1, addr v2, addr v3);
void typevalues_values4(addr *ret, addr v1, addr v2, addr v3, addr v4);
void typevalues_values5(addr *ret, addr v1, addr v2, addr v3, addr v4, addr v5);
void typevalues_values_va(addr *ret, ...);
void typevalues_rest(addr *ret, addr type);

/* asterisk */
void type1aster_alloc(LocalRoot local, enum LISPDECL type, addr *ret);
void type2aster_alloc(LocalRoot local, enum LISPDECL type, addr *ret);
void type3aster_alloc(LocalRoot local, enum LISPDECL type, addr *ret);
void type4aster_alloc(LocalRoot local, enum LISPDECL type, addr *ret);
void type1aster_local(LocalRoot local, enum LISPDECL type, addr *ret);
void type2aster_local(LocalRoot local, enum LISPDECL type, addr *ret);
void type3aster_local(LocalRoot local, enum LISPDECL type, addr *ret);
void type4aster_local(LocalRoot local, enum LISPDECL type, addr *ret);
void type1aster_heap(enum LISPDECL type, addr *ret);
void type2aster_heap(enum LISPDECL type, addr *ret);
void type3aster_heap(enum LISPDECL type, addr *ret);
void type4aster_heap(enum LISPDECL type, addr *ret);

/* and/or */
void type2and_alloc(LocalRoot local, addr a, addr b, addr *ret);
void type3and_alloc(LocalRoot local, addr a, addr b, addr c, addr *ret);
void type2and_local(LocalRoot local, addr a, addr b, addr *ret);
void type3and_local(LocalRoot local, addr a, addr b, addr c, addr *ret);
void type2and_heap(addr a, addr b, addr *ret);
void type3and_heap(addr a, addr b, addr c, addr *ret);
void type2or_alloc(LocalRoot local, addr a, addr b, addr *ret);
void type3or_alloc(LocalRoot local, addr a, addr b, addr c, addr *ret);
void type4or_alloc(LocalRoot local, addr a, addr b, addr c, addr d, addr *ret);
void type2or_local(LocalRoot local, addr a, addr b, addr *ret);
void type3or_local(LocalRoot local, addr a, addr b, addr c, addr *ret);
void type4or_local(LocalRoot local, addr a, addr b, addr c, addr d, addr *ret);
void type2or_heap(addr a, addr b, addr *ret);
void type3or_heap(addr a, addr b, addr c, addr *ret);
void type4or_heap(addr a, addr b, addr c, addr d, addr *ret);

/* range */
void type1real_heap(enum LISPDECL type, addr value, addr *ret);
void type4integer_heap(addr a, fixnum b, addr c, fixnum d, addr *ret);
void type2integer_ab_heap(addr a, fixnum b, addr *ret);
void type2integer_cd_heap(addr c, fixnum d, addr *ret);
void type4float_heap(addr a, float b, addr c, float d, addr *ret);
void type2float_ab_heap(addr a, float b, addr *ret);
void type2float_cd_heap(addr c, float d, addr *ret);
void type4realf_heap(addr a, float b, addr c, float d, addr *ret);
void type2realf_ab_heap(addr a, float b, addr *ret);
void type2realf_cd_heap(addr c, float d, addr *ret);

/* vector */
void type_vector1_heap(size_t size, addr *ret);

#endif


/************************************************************
 *  type_upgraded.h
 ************************************************************/
#ifndef __TYPE_UPGRADED_HEADER__
#define __TYPE_UPGRADED_HEADER__


#define upgraded_array0_equal _n(upgraded_array0_equal)
#define upgraded_array_value_ _n(upgraded_array_value_)
#define upgraded_array_object _n(upgraded_array_object)
#define upgraded_array_type_ _n(upgraded_array_type_)
#define upgraded_array_const _n(upgraded_array_const)
#define upgraded_array_common_ _n(upgraded_array_common_)
#define upgraded_array_t_local _n(upgraded_array_t_local)
#define upgraded_array_bit_local _n(upgraded_array_bit_local)
#define upgraded_array_character_local _n(upgraded_array_character_local)
#define upgraded_complex_type_ _n(upgraded_complex_type_)
#define upgraded_complex_common_ _n(upgraded_complex_common_)
#define build_type_upgraded _n(build_type_upgraded)

/*
 *  upgraded-array-element-type
 */
/* upgraded-type check */
int upgraded_array0_equal(addr left, addr right);
/* type -> upgraded -> value */
int upgraded_array_value_(addr type, enum ARRAY_TYPE *ret, int *size);
/* value, size -> type */
void upgraded_array_object(enum ARRAY_TYPE type, int size, addr *ret);
/* type -> upgraded -> type */
int upgraded_array_type_(addr type, addr *ret);
/* value -> object */
void upgraded_array_const(enum ARRAY_TYPE type, int size, addr *ret);
/* object -> upgraded -> object */
int upgraded_array_common_(Execute ptr, addr env, addr pos, addr *ret);
/* make local */
void upgraded_array_t_local(LocalRoot local, addr *ret);
void upgraded_array_bit_local(LocalRoot local, addr *ret);
void upgraded_array_character_local(LocalRoot local, addr *ret);


/*
 *  upgraded-complex-part-type
 */
/* type -> upgraded -> type */
int upgraded_complex_type_(Execute ptr, addr env, addr type, addr *ret);
/* object -> upgraded -> object */
int upgraded_complex_common_(Execute ptr, addr env, addr pos, addr *ret);
/* build */
void build_type_upgraded(void);

#endif


/************************************************************
 *  array_access.h
 ************************************************************/
#ifndef __ARRAY_ACCESS_HEADER__
#define __ARRAY_ACCESS_HEADER__


#define arraymemory_get_ _n(arraymemory_get_)
#define array_arefindex_ _n(array_arefindex_)
#define array_get_t_ _n(array_get_t_)
#define array_get_bit_ _n(array_get_bit_)
#define array_get_unicode_ _n(array_get_unicode_)
#define array_get_ _n(array_get_)
#define array_set_bit_ _n(array_set_bit_)
#define array_set_character_ _n(array_set_character_)
#define array_set_signed8_ _n(array_set_signed8_)
#define array_set_signed16_ _n(array_set_signed16_)
#define array_set_signed32_ _n(array_set_signed32_)
#define array_set_unsigned8_ _n(array_set_unsigned8_)
#define array_set_unsigned16_ _n(array_set_unsigned16_)
#define array_set_unsigned32_ _n(array_set_unsigned32_)
#define array_set_signed64_ _n(array_set_signed64_)
#define array_set_unsigned64_ _n(array_set_unsigned64_)
#define array_set_single_ _n(array_set_single_)
#define array_set_double_ _n(array_set_double_)
#define array_set_long_ _n(array_set_long_)
#define array_set_ _n(array_set_)
#define array_setget_ _n(array_setget_)
#define array_aref_ _n(array_aref_)
#define array_setf_aref_ _n(array_setf_aref_)
#define array_aref_bit_ _n(array_aref_bit_)
#define array_setf_aref_bit_ _n(array_setf_aref_bit_)
#define array_equal_type _n(array_equal_type)
#define array_equal_dimension _n(array_equal_dimension)
#define array_get_element_type_ _n(array_get_element_type_)
#define array_get_vector_length_ _n(array_get_vector_length_)
#define array_get_rowlength _n(array_get_rowlength)

int arraymemory_get_(addr pos, size_t index, addr *retp, size_t *rets, int *ret);
int array_arefindex_(addr pos, addr args, size_t *ret);

int array_get_t_(addr pos, size_t index, addr *ret);
int array_get_bit_(addr pos, size_t index, int *ret);
int array_get_unicode_(addr pos, size_t index, unicode *ret);
int array_get_(LocalRoot local, addr pos, size_t index, addr *ret);

int array_set_bit_(addr pos, size_t index, int value);
int array_set_character_(addr pos, size_t index, unicode value);
int array_set_signed8_(addr pos, size_t index, int8_t value);
int array_set_signed16_(addr pos, size_t index, int16_t value);
int array_set_signed32_(addr pos, size_t index, int32_t value);
int array_set_unsigned8_(addr pos, size_t index, uint8_t value);
int array_set_unsigned16_(addr pos, size_t index, uint16_t value);
int array_set_unsigned32_(addr pos, size_t index, uint32_t value);
#ifdef LISP_64BIT
int array_set_signed64_(addr pos, size_t index, int64_t value);
int array_set_unsigned64_(addr pos, size_t index, uint64_t value);
#endif
int array_set_single_(addr pos, size_t index, single_float value);
int array_set_double_(addr pos, size_t index, double_float value);
int array_set_long_(addr pos, size_t index, long_float value);

int array_set_(addr pos, size_t index, addr value);
int array_setget_(addr p1, size_t s1, addr p2, size_t s2);
int array_aref_(LocalRoot local, addr pos, addr args, addr *ret);
int array_setf_aref_(addr pos, addr args, addr value);
int array_aref_bit_(LocalRoot local, addr pos, addr args, addr *ret);
int array_setf_aref_bit_(addr pos, addr args, addr value);

int array_equal_type(struct array_struct *a, enum ARRAY_TYPE type, unsigned size);
int array_equal_dimension(addr left, addr right);
int array_get_element_type_(addr pos, addr *ret);
int array_get_vector_length_(addr pos, int fill, size_t *ret);
void array_get_rowlength(addr pos, size_t *ret);

#endif


/************************************************************
 *  array_inplace.h
 ************************************************************/
#ifndef __ARRAY_INPLACE_HEADER__
#define __ARRAY_INPLACE_HEADER__


#define arrayinplace_get_ _n(arrayinplace_get_)
#define arrayinplace_set_ _n(arrayinplace_set_)

int arrayinplace_get_(addr pos, size_t index, struct array_value *str);
int arrayinplace_set_(addr pos, size_t index, const struct array_value *str);

#endif


/************************************************************
 *  array_make.h
 ************************************************************/
#ifndef __ARRAY_OBJECT_HEADER__
#define __ARRAY_OBJECT_HEADER__


#define array_set_type _n(array_set_type)
#define array_set_element_size _n(array_set_element_size)
#define array_set_dimension_ _n(array_set_dimension_)
#define array_allocate_bit _n(array_allocate_bit)
#define array_allocate_size_ _n(array_allocate_size_)
#define array_allocate_ _n(array_allocate_)
#define array_set_displaced_ _n(array_set_displaced_)
#define array_set_simple _n(array_set_simple)
#define array_make_memory_ _n(array_make_memory_)
#define array_make_initial_ _n(array_make_initial_)
#define array_make_clear_ _n(array_make_clear_)
#define array_make_array_ _n(array_make_array_)
#define array_contents_heap_ _n(array_contents_heap_)
#define array_character_alloc_ _n(array_character_alloc_)
#define array_unsigned8_heap_ _n(array_unsigned8_heap_)
#define array_build_ _n(array_build_)

/* control */
void array_set_type(addr pos);
void array_set_element_size(addr pos);

/* array-allocate */
int array_set_dimension_(addr pos, addr value);
void array_allocate_bit(LocalRoot local, addr pos, struct array_struct *str);
int array_allocate_size_(LocalRoot local, addr pos, struct array_struct *str);
int array_allocate_(LocalRoot local, addr pos, struct array_struct *str);

/* make-array */
int array_set_displaced_(addr pos, addr displaced, addr offset);
void array_set_simple(addr pos);
int array_make_memory_(addr pos,
		addr adjust, addr fill, addr displaced, addr offset);
int array_make_initial_(addr pos, addr initial, addr contents);
int array_make_clear_(addr pos);
int array_make_array_(addr *ret, addr dimension,
		addr type, addr initial, addr contents,
		addr adjustable, addr fillpointer, addr displaced, addr offset);

/* interface */
int array_contents_heap_(addr *ret, addr rank, addr contents);
int array_character_alloc_(LocalRoot local, addr pos);
int array_unsigned8_heap_(addr *ret, size_t size);
int array_build_(addr pos);

#endif


/************************************************************
 *  array_value.h
 ************************************************************/
#ifndef __ARRAY_VALUE_HEADER__
#define __ARRAY_VALUE_HEADER__


#define arrayvalue_get_character_ _n(arrayvalue_get_character_)
#define arrayvalue_get_bit_ _n(arrayvalue_get_bit_)
#define arrayvalue_get_signed8_ _n(arrayvalue_get_signed8_)
#define arrayvalue_get_signed16_ _n(arrayvalue_get_signed16_)
#define arrayvalue_get_signed32_ _n(arrayvalue_get_signed32_)
#define arrayvalue_get_signed64_ _n(arrayvalue_get_signed64_)
#define arrayvalue_get_signed_ _n(arrayvalue_get_signed_)
#define arrayvalue_get_unsigned8_ _n(arrayvalue_get_unsigned8_)
#define arrayvalue_get_unsigned16_ _n(arrayvalue_get_unsigned16_)
#define arrayvalue_get_unsigned32_ _n(arrayvalue_get_unsigned32_)
#define arrayvalue_get_unsigned64_ _n(arrayvalue_get_unsigned64_)
#define arrayvalue_get_unsigned_ _n(arrayvalue_get_unsigned_)
#define arrayvalue_get_single_ _n(arrayvalue_get_single_)
#define arrayvalue_get_double_ _n(arrayvalue_get_double_)
#define arrayvalue_get_long_ _n(arrayvalue_get_long_)
#define arrayvalue_alloc_ _n(arrayvalue_alloc_)
#define arrayvalue_local_ _n(arrayvalue_local_)
#define arrayvalue_heap_ _n(arrayvalue_heap_)

int arrayvalue_get_character_(struct array_value *str, addr x);
int arrayvalue_get_bit_(struct array_value *str, addr x);
int arrayvalue_get_signed8_(struct array_value *str, addr x);
int arrayvalue_get_signed16_(struct array_value *str, addr x);
int arrayvalue_get_signed32_(struct array_value *str, addr x);
#ifdef LISP_64BIT
int arrayvalue_get_signed64_(struct array_value *str, addr x);
#endif
int arrayvalue_get_signed_(struct array_value *str, addr x, unsigned size);
int arrayvalue_get_unsigned8_(struct array_value *str, addr x);
int arrayvalue_get_unsigned16_(struct array_value *str, addr x);
int arrayvalue_get_unsigned32_(struct array_value *str, addr x);
#ifdef LISP_64BIT
int arrayvalue_get_unsigned64_(struct array_value *str, addr x);
#endif
int arrayvalue_get_unsigned_(struct array_value *str, addr x, unsigned size);
int arrayvalue_get_single_(struct array_value *str, addr x);
int arrayvalue_get_double_(struct array_value *str, addr x);
int arrayvalue_get_long_(struct array_value *str, addr x);

int arrayvalue_alloc_(LocalRoot local, addr *ret, const struct array_value *str);
int arrayvalue_local_(LocalRoot local, addr *ret, const struct array_value *str);
int arrayvalue_heap_(addr *ret, const struct array_value *str);

#endif


/************************************************************
 *  bit.h
 ************************************************************/
#ifndef __BIT_HEADER__
#define __BIT_HEADER__


#define bitp _n(bitp)
#define bit_getint _n(bit_getint)
#define bit_getint_error_ _n(bit_getint_error_)
#define bitcons_local _n(bitcons_local)
#define push_bitcons _n(push_bitcons)
#define bitmemory_unsafe _n(bitmemory_unsafe)
#define bitmemory_alloc _n(bitmemory_alloc)
#define bitmemory_local _n(bitmemory_local)
#define bitmemory_heap _n(bitmemory_heap)
#define bitmemory_cons_alloc _n(bitmemory_cons_alloc)
#define bitmemory_cons_local _n(bitmemory_cons_local)
#define bitmemory_cons_heap _n(bitmemory_cons_heap)
#define bitmemory_char_heap _n(bitmemory_char_heap)
#define bitmemory_copy_alloc _n(bitmemory_copy_alloc)
#define bitmemory_copy_local _n(bitmemory_copy_local)
#define bitmemory_copy_heap _n(bitmemory_copy_heap)
#define bitmemoryp _n(bitmemoryp)
#define bitmemory_memset_byte _n(bitmemory_memset_byte)
#define bitmemory_memset _n(bitmemory_memset)
#define bitmemory_copy_unsafe _n(bitmemory_copy_unsafe)
#define bitmemory_length _n(bitmemory_length)
#define bitmemory_equal_length _n(bitmemory_equal_length)
#define bitmemory_equal _n(bitmemory_equal)
#define bitmemory_refint_debug _n(bitmemory_refint_debug)
#define bitmemory_getint_unsafe _n(bitmemory_getint_unsafe)
#define bitmemory_setint_unsafe _n(bitmemory_setint_unsafe)
#define bitmemory_getint_ _n(bitmemory_getint_)
#define bitmemory_setint_ _n(bitmemory_setint_)
#define bitmemory_get_ _n(bitmemory_get_)
#define bitmemory_set_ _n(bitmemory_set_)
#define bitmemory_aref_ _n(bitmemory_aref_)
#define bitmemory_setf_aref_ _n(bitmemory_setf_aref_)
#define bitmemory_bitcalc _n(bitmemory_bitcalc)
#define bitmemory_bitnot _n(bitmemory_bitnot)
#define bitmemory_fill_ _n(bitmemory_fill_)
#define bitmemory_subseq_index_ _n(bitmemory_subseq_index_)
#define bitmemory_subseq_ _n(bitmemory_subseq_)
#define bitmemory_setget_ _n(bitmemory_setget_)
#define bitmemory_reverse_ _n(bitmemory_reverse_)
#define bitmemory_nreverse_ _n(bitmemory_nreverse_)
#define array_bvarrayp _n(array_bvarrayp)
#define bvarrayp _n(bvarrayp)
#define bitvectorp _n(bitvectorp)
#define simple_array_bvarrayp _n(simple_array_bvarrayp)
#define simple_bvarrayp _n(simple_bvarrayp)
#define simple_bitvectorp _n(simple_bitvectorp)
#define bvarray_length _n(bvarray_length)
#define bvarray_getint_ _n(bvarray_getint_)
#define bvarray_setint_ _n(bvarray_setint_)
#define bitvector_length_ _n(bitvector_length_)
#define bitvector_getint_ _n(bitvector_getint_)
#define bitvector_setint_ _n(bitvector_setint_)
#define bitvector_equal_ _n(bitvector_equal_)

struct bitmemory_struct {
	size_t bitsize, fixedsize;
#ifdef __cplusplus
	fixed data[1];
#else
	fixed data[];
#endif
};

#define BitMemoryStruct(x) ((struct bitmemory_struct *)posbodyr(x))

/* bit */
int bitp(addr pos);
int bit_getint(addr pos, int *ret);
int bit_getint_error_(addr pos, int *ret);

/* bitmemory */
void bitcons_local(LocalRoot local, addr *ret, size_t bitsize);
void push_bitcons(LocalRoot local, addr pos, int value);

void bitmemory_unsafe(LocalRoot local, addr *ret, size_t bitsize);
void bitmemory_alloc(LocalRoot local, addr *ret, size_t bitsize);
void bitmemory_local(LocalRoot local, addr *ret, size_t bitsize);
void bitmemory_heap(addr *ret, size_t bitsize);
void bitmemory_cons_alloc(LocalRoot local, addr *ret, addr cons);
void bitmemory_cons_local(LocalRoot local, addr *ret, addr cons);
void bitmemory_cons_heap(addr *ret, addr cons);
void bitmemory_char_heap(addr *ret, const char *str);
void bitmemory_copy_alloc(LocalRoot local, addr *ret, addr pos);
void bitmemory_copy_local(LocalRoot local, addr *ret, addr pos);
void bitmemory_copy_heap(addr *ret, addr pos);
int bitmemoryp(addr pos);

void bitmemory_memset_byte(addr pos, byte value);
void bitmemory_memset(addr pos, int value);
void bitmemory_copy_unsafe(addr pos, addr refer, size_t bitsize);
void bitmemory_length(addr pos, size_t *ret);
int bitmemory_equal_length(addr pos1, addr pos2);
int bitmemory_equal(addr left, addr right);
int bitmemory_refint_debug(addr pos, size_t index);
void bitmemory_getint_unsafe(addr pos, size_t index, int *ret);
void bitmemory_setint_unsafe(addr pos, size_t index, int value);
int bitmemory_getint_(addr pos, size_t index, int *ret);
int bitmemory_setint_(addr pos, size_t index, int value);
int bitmemory_get_(LocalRoot local, addr pos, size_t index, addr *ret);
int bitmemory_set_(addr pos, size_t index, addr value);
int bitmemory_aref_(LocalRoot local, addr pos, addr args, addr *ret);
int bitmemory_setf_aref_(addr pos, addr args, addr value);
void bitmemory_bitcalc(addr pos, addr pos1, addr pos2, bitcalc_call call);
void bitmemory_bitnot(addr pos, addr pos1);
int bitmemory_fill_(addr pos, addr item, addr start, addr end);
int bitmemory_subseq_index_(addr *ret, addr pos, size_t index1, size_t index2);
int bitmemory_subseq_(addr *ret, addr pos, addr start, addr end);
int bitmemory_setget_(addr pos1, size_t index1, addr pos2, size_t index2);
int bitmemory_reverse_(LocalRoot local, addr *ret, addr pos);
int bitmemory_nreverse_(addr *ret, addr pos);

/* bvarray */
int array_bvarrayp(addr pos);
int bvarrayp(addr pos);
int bitvectorp(addr pos);
int simple_array_bvarrayp(addr pos);
int simple_bvarrayp(addr pos);
int simple_bitvectorp(addr pos);

void bvarray_length(addr pos, size_t *ret);
int bvarray_getint_(addr pos, size_t index, int *ret);
int bvarray_setint_(addr pos, size_t index, int value);

/* bitvector */
int bitvector_length_(addr pos, size_t *ret);
int bitvector_getint_(addr pos, size_t index, int *ret);
int bitvector_setint_(addr pos, size_t index, int value);
int bitvector_equal_(addr left, addr right, int *ret);

#endif


/************************************************************
 *  bignum_data.h
 ************************************************************/
#ifndef __BIGNUM_DATA_HEADER__
#define __BIGNUM_DATA_HEADER__


#define plusnumber_bigdata _n(plusnumber_bigdata)
#define multicarry_bigdata _n(multicarry_bigdata)
#define equal_bigdata _n(equal_bigdata)
#define compare_bigdata _n(compare_bigdata)
#define setplusvalue_bigdata _n(setplusvalue_bigdata)
#define setminusvalue_bigdata _n(setminusvalue_bigdata)
#define plusvalue_bigdata_alloc _n(plusvalue_bigdata_alloc)
#define minusvalue_bigdata_alloc _n(minusvalue_bigdata_alloc)
#define plus_bigdata_alloc _n(plus_bigdata_alloc)
#define letplus_noexpand_bigdata _n(letplus_noexpand_bigdata)
#define minus_bigdata_alloc _n(minus_bigdata_alloc)
#define minuscheck_bigdata_alloc _n(minuscheck_bigdata_alloc)
#define letminus_noexpand_bigdata _n(letminus_noexpand_bigdata)
#define multicarry_fixnum _n(multicarry_fixnum)
#define multicarry_bignum _n(multicarry_bignum)
#define setmultivalue_bigdata _n(setmultivalue_bigdata)
#define setmulti_bigdata _n(setmulti_bigdata)
#define multi_bigdata_alloc _n(multi_bigdata_alloc)
#define letdiv_noexpand_bigdata _n(letdiv_noexpand_bigdata)
#define setrem_noexpand_bigdata _n(setrem_noexpand_bigdata)
#define divrem_bigdata_local _n(divrem_bigdata_local)
#define power2_bigdata_alloc _n(power2_bigdata_alloc)
#define division2_bigdata_alloc _n(division2_bigdata_alloc)
#define shiftup_bigdata_alloc _n(shiftup_bigdata_alloc)
#define shiftdown_bigdata_alloc _n(shiftdown_bigdata_alloc)
#define shiftdown_minus_bigdata _n(shiftdown_minus_bigdata)
#define letdiv_half_bigdata _n(letdiv_half_bigdata)

/*****************************************************************************
  Macro
 *****************************************************************************/
/*
 *  macro
 *    LISP_BIGNUM_DEBUG -> 8bit
 *    LISP_64BIT        -> 64bit
 *    LISP_32BIT        -> 32bit
 */
#undef BIGNUM_FULLCODE
#undef BIGNUM_TYPE_8BIT
#undef BIGNUM_TYPE_32BIT
#undef BIGNUM_TYPE_64BIT
#undef BIGNUM_CODE_8BIT
#undef BIGNUM_CODE_32BIT
#undef BIGNUM_CODE_64BIT

/* 8bit debug */
#ifdef LISP_BIGNUM_DEBUG
#define BIGNUM_TYPE_32BIT
#define BIGNUM_CODE_8BIT
#define BIGNUM_INFO_TYPE    "32bit"

/* 64bit */
#elif defined LISP_64BIT
#define BIGNUM_FULLCODE
#define BIGNUM_TYPE_64BIT
#define BIGNUM_CODE_64BIT
#define BIGNUM_INFO_TYPE    "64bit"

/* 32bit */
#elif defined LISP_32BIT
#define BIGNUM_FULLCODE
#define BIGNUM_TYPE_32BIT
#define BIGNUM_CODE_32BIT
#define BIGNUM_INFO_TYPE    "32bit"
#endif

/* code */
#ifdef BIGNUM_CODE_64BIT
#define BIGNUM_INFO_CODE    "64bit-full"
#define BIGNUM_FULL         0xFFFFFFFFFFFFFFFFULL
#define BIGNUM_HALF         0xFFFFFFFFULL
#define BIGNUM_FULLBIT      64
#define BIGNUM_HALFBIT      32
#define BIGCONS_SIZE        32
#endif

#ifdef BIGNUM_CODE_32BIT
#define BIGNUM_INFO_CODE    "32bit-full"
#define BIGNUM_FULL         0xFFFFFFFFUL
#define BIGNUM_HALF         0xFFFFUL
#define BIGNUM_FULLBIT      32
#define BIGNUM_HALFBIT      16
#define BIGCONS_SIZE        32
#endif

#ifdef BIGNUM_CODE_8BIT
#define BIGNUM_INFO_CODE    "8bit-debug"
#define BIGNUM_FULL         0xFFUL
#define BIGNUM_HALF         0xFUL
#define BIGNUM_FULLBIT      8
#define BIGNUM_HALFBIT      4
#define BIGCONS_SIZE        3
#endif

/* fixed */
#define PRIxB				PRIxF
#define plussign_bignum(x)	((x)->sign == 0)
#define minussign_bignum(x)	((x)->sign != 0)

/* copy operator */
#define bigcpy(x,y,z) memcpy((x), (y), sizeoft(fixed) * (z))
#define bigmove(x,y,z) memmove((x), (y), sizeoft(fixed) * (z))
#define bigset(x,y,z) memset((x), (y), sizeoft(fixed) * (z))
#define bigcmp(x,y,z) memcmp((x), (y), sizeoft(fixed) * (z))

#ifdef BIGNUM_CODE_8BIT
#define CUTB(x)				(BIGNUM_FULL & (x))
#define SETB(x)				((x) = (BIGNUM_FULL & (x)))
#else
#define CUTB(x)				(x)
#define SETB(x)
#endif

#define HIGHVALUE(x)		CUTB(CUTB(x) >> BIGNUM_HALFBIT)
#define LOWVALUE(x)			CUTB(BIGNUM_HALF & (x))
#define HIGHLOW(high,low)	CUTB((CUTB(high) << BIGNUM_HALFBIT) | CUTB(low))

#define SignPlus			(signplus_bignum)
#define SignMinus			(signminus_bignum)
#define SignNot(x)			(!(x))
#define IsPlus(x)			((x) == SignPlus)
#define IsMinus(x)			((x) != SignPlus)
#define SignMulti(x,y)		(((x) == (y))? SignPlus: SignMinus)


/*****************************************************************************
  declaration
 *****************************************************************************/
void plusnumber_bigdata(fixed *result, fixed *carry);
void multicarry_bigdata(fixed *result, fixed value, fixed *carry);
int equal_bigdata(addr left, addr right);
int compare_bigdata(addr left, addr right);

void setplusvalue_bigdata(addr set, addr left, int sign, fixed right);
void setminusvalue_bigdata(addr set, addr left, int sign, fixed right);
void plusvalue_bigdata_alloc(LocalRoot local,
		addr left, int sign, fixed right, addr *ret);
void minusvalue_bigdata_alloc(LocalRoot local,
		addr left, int sign, fixed right, addr *ret);
void plus_bigdata_alloc(LocalRoot local, addr left, addr right, addr *ret);
void letplus_noexpand_bigdata(addr left, addr right);
void minus_bigdata_alloc(LocalRoot local, addr left, addr right, addr *ret);
int minuscheck_bigdata_alloc(LocalRoot local, addr left, addr right, addr *ret);
int letminus_noexpand_bigdata(addr left, addr right);
void multicarry_fixnum(LocalRoot local, fixnum left, fixnum right, addr *ret);
void multicarry_bignum(LocalRoot local, fixnum left, fixnum right, addr *ret);
void setmultivalue_bigdata(addr pos, addr left, fixed right);
void setmulti_bigdata(addr pos, addr left, addr right);
void multi_bigdata_alloc(LocalRoot local, addr left, addr right, addr *ret);

void letdiv_noexpand_bigdata(LocalRoot local, addr left, addr right);
void setrem_noexpand_bigdata(LocalRoot local, addr set, addr left, addr right);
void divrem_bigdata_local(LocalRoot local,
		addr *quot, addr *rem, addr left, addr right);

void power2_bigdata_alloc(LocalRoot local, addr *ret, size_t value);
void division2_bigdata_alloc(LocalRoot local, addr *ret, addr left);
void shiftup_bigdata_alloc(LocalRoot local, addr *ret, addr left, size_t value);
void shiftdown_bigdata_alloc(LocalRoot local, addr *ret, addr left, size_t value);
void shiftdown_minus_bigdata(LocalRoot local, addr *ret, addr left, size_t value);

fixed letdiv_half_bigdata(addr left, fixed right);

#endif


/************************************************************
 *  bignum.h
 ************************************************************/
#ifndef __BIGNUM_HEADER__
#define __BIGNUM_HEADER__


#define power2_bignum_alloc _n(power2_bignum_alloc)
#define power2_bignum_local _n(power2_bignum_local)
#define power2_bignum_heap _n(power2_bignum_heap)
#define shiftup_bignum_alloc _n(shiftup_bignum_alloc)
#define shiftup_bignum_local _n(shiftup_bignum_local)
#define shiftup_bignum_heap _n(shiftup_bignum_heap)
#define fixnum_cons_alloc _n(fixnum_cons_alloc)
#define fixnum_cons_local _n(fixnum_cons_local)
#define fixnum_cons_heap _n(fixnum_cons_heap)
#define integer_cons_alloc _n(integer_cons_alloc)
#define integer_cons_local _n(integer_cons_local)
#define integer_cons_heap _n(integer_cons_heap)
#define integer_fixed_alloc _n(integer_fixed_alloc)
#define integer_fixed_local _n(integer_fixed_local)
#define integer_fixed_heap _n(integer_fixed_heap)
#define integer_bignum_alloc _n(integer_bignum_alloc)
#define integer_bignum_local _n(integer_bignum_local)
#define integer_bignum_heap _n(integer_bignum_heap)
#define integer_copysign_alloc_ _n(integer_copysign_alloc_)
#define integer_copysign_local_ _n(integer_copysign_local_)
#define integer_copysign_heap_ _n(integer_copysign_heap_)
#define single_float_fixnum _n(single_float_fixnum)
#define double_float_fixnum _n(double_float_fixnum)
#define long_float_fixnum _n(long_float_fixnum)
#define single_float_bignum_ _n(single_float_bignum_)
#define double_float_bignum_ _n(double_float_bignum_)
#define long_float_bignum_ _n(long_float_bignum_)
#define single_float_fixnum_alloc _n(single_float_fixnum_alloc)
#define single_float_fixnum_local _n(single_float_fixnum_local)
#define single_float_fixnum_heap _n(single_float_fixnum_heap)
#define double_float_fixnum_alloc _n(double_float_fixnum_alloc)
#define double_float_fixnum_local _n(double_float_fixnum_local)
#define double_float_fixnum_heap _n(double_float_fixnum_heap)
#define long_float_fixnum_alloc _n(long_float_fixnum_alloc)
#define long_float_fixnum_local _n(long_float_fixnum_local)
#define long_float_fixnum_heap _n(long_float_fixnum_heap)
#define single_float_bignum_alloc_ _n(single_float_bignum_alloc_)
#define single_float_bignum_local_ _n(single_float_bignum_local_)
#define single_float_bignum_heap_ _n(single_float_bignum_heap_)
#define double_float_bignum_alloc_ _n(double_float_bignum_alloc_)
#define double_float_bignum_local_ _n(double_float_bignum_local_)
#define double_float_bignum_heap_ _n(double_float_bignum_heap_)
#define long_float_bignum_alloc_ _n(long_float_bignum_alloc_)
#define long_float_bignum_local_ _n(long_float_bignum_local_)
#define long_float_bignum_heap_ _n(long_float_bignum_heap_)
#define bignum_single_float_unsafe _n(bignum_single_float_unsafe)
#define bignum_double_float_unsafe _n(bignum_double_float_unsafe)
#define bignum_long_float_unsafe _n(bignum_long_float_unsafe)
#define bignum_single_float_local_ _n(bignum_single_float_local_)
#define bignum_single_float_heap_ _n(bignum_single_float_heap_)
#define bignum_double_float_local_ _n(bignum_double_float_local_)
#define bignum_double_float_heap_ _n(bignum_double_float_heap_)
#define bignum_long_float_local_ _n(bignum_long_float_local_)
#define bignum_long_float_heap_ _n(bignum_long_float_heap_)
#define GetFixnum_bignum _n(GetFixnum_bignum)
#define GetFixnum_signed _n(GetFixnum_signed)
#define getfixnum_signed_ _n(getfixnum_signed_)
#define GetFixnum_unsigned _n(GetFixnum_unsigned)
#define getfixnum_unsigned_ _n(getfixnum_unsigned_)
#define getfixed1_bignum _n(getfixed1_bignum)
#define getfixed1_integer _n(getfixed1_integer)
#define GetInt_signed _n(GetInt_signed)
#define getint_signed_ _n(getint_signed_)
#define GetInt_unsigned _n(GetInt_unsigned)
#define getint_unsigned_ _n(getint_unsigned_)
#define abs_fixnum_integer_local _n(abs_fixnum_integer_local)
#define abs_fixnum_integer_common _n(abs_fixnum_integer_common)
#define abs_bignum_integer_local _n(abs_bignum_integer_local)
#define abs_bignum_integer_common _n(abs_bignum_integer_common)

/* power */
void power2_bignum_alloc(LocalRoot local, addr *ret, int sign, size_t value);
void power2_bignum_local(LocalRoot local, addr *ret, int sign, size_t value);
void power2_bignum_heap(addr *ret, int sign, size_t value);
void shiftup_bignum_alloc(LocalRoot local, addr *ret, addr left, size_t value);
void shiftup_bignum_local(LocalRoot local, addr *ret, addr left, size_t value);
void shiftup_bignum_heap(addr *ret, addr left, size_t value);

/* integer */
int fixnum_cons_alloc(LocalRoot local, addr *ret, int sign, addr cons);
int fixnum_cons_local(LocalRoot local, addr *ret, int sign, addr cons);
int fixnum_cons_heap(addr *ret, int sign, addr cons);
void integer_cons_alloc(LocalRoot local, addr *ret, int sign, addr cons);
void integer_cons_local(LocalRoot local, addr *ret, int sign, addr cons);
void integer_cons_heap(addr *ret, int sign, addr cons);
void integer_fixed_alloc(LocalRoot local, addr *ret, int sign, fixed value);
void integer_fixed_local(LocalRoot local, addr *ret, int sign, fixed value);
void integer_fixed_heap(addr *ret, int sign, fixed value);
void integer_bignum_alloc(LocalRoot local, addr *ret, addr pos);
void integer_bignum_local(LocalRoot local, addr *ret, addr pos);
void integer_bignum_heap(addr *ret, addr pos);

/* integer copy */
int integer_copysign_alloc_(LocalRoot local, int sign, addr pos, addr *ret);
int integer_copysign_local_(LocalRoot local, int sign, addr pos, addr *ret);
int integer_copysign_heap_(int sign, addr pos, addr *ret);

/* float */
single_float single_float_fixnum(addr pos);
double_float double_float_fixnum(addr pos);
long_float long_float_fixnum(addr pos);
int single_float_bignum_(addr pos, single_float *ret);
int double_float_bignum_(addr pos, double_float *ret);
int long_float_bignum_(addr pos, long_float *ret);

void single_float_fixnum_alloc(LocalRoot local, addr *ret, addr pos);
void single_float_fixnum_local(LocalRoot local, addr *ret, addr pos);
void single_float_fixnum_heap(addr *ret, addr pos);
void double_float_fixnum_alloc(LocalRoot local, addr *ret, addr pos);
void double_float_fixnum_local(LocalRoot local, addr *ret, addr pos);
void double_float_fixnum_heap(addr *ret, addr pos);
void long_float_fixnum_alloc(LocalRoot local, addr *ret, addr pos);
void long_float_fixnum_local(LocalRoot local, addr *ret, addr pos);
void long_float_fixnum_heap(addr *ret, addr pos);
int single_float_bignum_alloc_(LocalRoot local, addr *ret, addr pos);
int single_float_bignum_local_(LocalRoot local, addr *ret, addr pos);
int single_float_bignum_heap_(addr *ret, addr pos);
int double_float_bignum_alloc_(LocalRoot local, addr *ret, addr pos);
int double_float_bignum_local_(LocalRoot local, addr *ret, addr pos);
int double_float_bignum_heap_(addr *ret, addr pos);
int long_float_bignum_alloc_(LocalRoot local, addr *ret, addr pos);
int long_float_bignum_local_(LocalRoot local, addr *ret, addr pos);
int long_float_bignum_heap_(addr *ret, addr pos);

void bignum_single_float_unsafe(
		LocalRoot local, single_float v, int is_heap, addr *ret);
void bignum_double_float_unsafe(
		LocalRoot local, double_float v, int is_heap, addr *ret);
void bignum_long_float_unsafe(
		LocalRoot local, long_float v, int is_heap, addr *ret);

int bignum_single_float_local_(LocalRoot local, single_float v, addr *rv, int *ret);
int bignum_single_float_heap_(LocalRoot local, single_float v, addr *rv, int *ret);
int bignum_double_float_local_(LocalRoot local, double_float v, addr *rv, int *ret);
int bignum_double_float_heap_(LocalRoot local, double_float v, addr *rv, int *ret);
int bignum_long_float_local_(LocalRoot local, long_float v, addr *rv, int *ret);
int bignum_long_float_heap_(LocalRoot local, long_float v, addr *rv, int *ret);

int GetFixnum_bignum(addr pos, fixnum *ret);
int GetFixnum_signed(addr pos, fixnum *ret);
int getfixnum_signed_(addr pos, fixnum *ret);
int GetFixnum_unsigned(addr pos, fixnum *ret);
int getfixnum_unsigned_(addr pos, fixnum *ret);
int getfixed1_bignum(addr pos, int *sign, fixed *ret);
int getfixed1_integer(addr pos, int *sign, fixed *ret);
int GetInt_signed(addr pos, int *ret);
int getint_signed_(addr pos, int *ret);
int GetInt_unsigned(addr pos, int *ret);
int getint_unsigned_(addr pos, int *ret);

void abs_fixnum_integer_local(LocalRoot local, addr left, addr *ret);
void abs_fixnum_integer_common(addr left, addr *ret);
void abs_bignum_integer_local(LocalRoot local, addr left, addr *ret);
void abs_bignum_integer_common(addr left, addr *ret);

#endif


/************************************************************
 *  sequence.h
 ************************************************************/
#ifndef __SEQUENCE_HEADER__
#define __SEQUENCE_HEADER__


#define sequencep _n(sequencep)
#define listp_sequence_ _n(listp_sequence_)
#define vectorp_sequence_ _n(vectorp_sequence_)
#define vectorp_sequence_debug _n(vectorp_sequence_debug)
#define vector_check_sequence_ _n(vector_check_sequence_)
#define simple_vector_check_sequence_ _n(simple_vector_check_sequence_)
#define array_check_sequence_ _n(array_check_sequence_)
#define make_vector_from_list_ _n(make_vector_from_list_)
#define make_vector4_from_list_ _n(make_vector4_from_list_)
#define list_start_end_sequence_ _n(list_start_end_sequence_)
#define size_start_end_sequence_ _n(size_start_end_sequence_)
#define length_sequence_ _n(length_sequence_)
#define getelt_inplace_sequence_ _n(getelt_inplace_sequence_)
#define setelt_inplace_sequence_ _n(setelt_inplace_sequence_)
#define getelt_sequence_ _n(getelt_sequence_)
#define setelt_sequence_ _n(setelt_sequence_)
#define reverse_sequence_heap_ _n(reverse_sequence_heap_)
#define nreverse_sequence_ _n(nreverse_sequence_)

int sequencep(addr pos);
int listp_sequence_(addr pos, int *ret);
int vectorp_sequence_(addr pos, int *ret);
int vectorp_sequence_debug(addr pos);
int vector_check_sequence_(addr type, size_t size);
int simple_vector_check_sequence_(addr type, size_t size);
int array_check_sequence_(addr type, size_t size);
int make_vector_from_list_(addr *ret, addr cons);
int make_vector4_from_list_(addr *ret, addr cons);
int list_start_end_sequence_(addr *list, addr *prev,
		addr start, addr end, size_t *ret1, size_t *ret2);
int size_start_end_sequence_(addr start, addr end,
		size_t size, size_t *ret1, size_t *ret2, int *ret);

/* common */
int length_sequence_(addr pos, int fill, size_t *ret);
int getelt_inplace_sequence_(addr pos, size_t index, struct array_value *str);
int setelt_inplace_sequence_(LocalRoot local,
		addr pos, size_t index, const struct array_value *str);
int getelt_sequence_(LocalRoot local, addr pos, size_t index, addr *ret);
int setelt_sequence_(addr pos, size_t index, addr value);
int reverse_sequence_heap_(addr *ret, addr pos);
int nreverse_sequence_(addr *ret, addr pos);

#endif


/************************************************************
 *  strtype.h
 ************************************************************/
#ifndef __STRTYPE_HEADER__
#define __STRTYPE_HEADER__


#define array_stringp _n(array_stringp)
#define strarrayp _n(strarrayp)
#define stringp _n(stringp)
#define string_designator_p _n(string_designator_p)
#define string_base_p_ _n(string_base_p_)
#define string_simple_p _n(string_simple_p)
#define string_character_type_ _n(string_character_type_)
#define strarray_base_p_ _n(strarray_base_p_)
#define strarray_simple_p _n(strarray_simple_p)
#define strarray_character_type_ _n(strarray_character_type_)
#define strarray_alloc_ _n(strarray_alloc_)
#define strarray_local_ _n(strarray_local_)
#define strarray_heap_ _n(strarray_heap_)
#define strarray_char_alloc_ _n(strarray_char_alloc_)
#define strarray_char_local_ _n(strarray_char_local_)
#define strarray_char_heap_ _n(strarray_char_heap_)
#define strarray_size1_alloc_ _n(strarray_size1_alloc_)
#define strarray_size1_local_ _n(strarray_size1_local_)
#define strarray_size1_heap_ _n(strarray_size1_heap_)
#define strarray_sizeu_alloc_ _n(strarray_sizeu_alloc_)
#define strarray_sizeu_local_ _n(strarray_sizeu_local_)
#define strarray_sizeu_heap_ _n(strarray_sizeu_heap_)
#define strarray_length _n(strarray_length)
#define strarray_length_buffer _n(strarray_length_buffer)
#define strarray_getc_ _n(strarray_getc_)
#define strarray_setc_ _n(strarray_setc_)
#define strarray_equal_binary_ _n(strarray_equal_binary_)
#define strarray_equalp_binary_ _n(strarray_equalp_binary_)
#define strarray_equal_char_ _n(strarray_equal_char_)
#define strarray_equalp_char_ _n(strarray_equalp_char_)
#define strarray_equal_ _n(strarray_equal_)
#define strarray_equalp_ _n(strarray_equalp_)
#define strarray_character_equal_ _n(strarray_character_equal_)
#define strarray_character_equalp_ _n(strarray_character_equalp_)
#define strarray_compare_binary_ _n(strarray_compare_binary_)
#define strarray_comparep_binary_ _n(strarray_comparep_binary_)
#define strarray_compare_char_ _n(strarray_compare_char_)
#define strarray_comparep_char_ _n(strarray_comparep_char_)
#define strarray_compare_ _n(strarray_compare_)
#define strarray_comparep_ _n(strarray_comparep_)
#define string_alloc_ _n(string_alloc_)
#define string_local_ _n(string_local_)
#define string_heap_ _n(string_heap_)
#define strvect_value_heap_ _n(strvect_value_heap_)
#define string_length _n(string_length)
#define string_getc_ _n(string_getc_)
#define string_setc_ _n(string_setc_)
#define string_equal_binary_ _n(string_equal_binary_)
#define string_equalp_binary_ _n(string_equalp_binary_)
#define string_equal_char_ _n(string_equal_char_)
#define string_equalp_char_ _n(string_equalp_char_)
#define stringp_equal_char_ _n(stringp_equal_char_)
#define stringp_equalp_char_ _n(stringp_equalp_char_)
#define string_equalp_char_va_ _n(string_equalp_char_va_)
#define string_equal_ _n(string_equal_)
#define string_equalp_ _n(string_equalp_)
#define string_character_equal_ _n(string_character_equal_)
#define string_character_equalp_ _n(string_character_equalp_)
#define string_compare_binary_ _n(string_compare_binary_)
#define string_comparep_binary_ _n(string_comparep_binary_)
#define string_compare_char_ _n(string_compare_char_)
#define string_comparep_char_ _n(string_comparep_char_)
#define string_compare_ _n(string_compare_)
#define string_comparep_ _n(string_comparep_)
#define string_designator_equal_ _n(string_designator_equal_)
#define string_designator_equal_char_ _n(string_designator_equal_char_)
#define string_designator_equalp_ _n(string_designator_equalp_)
#define string_designator_equalp_char_ _n(string_designator_equalp_char_)
#define string_designator_alloc_ _n(string_designator_alloc_)
#define string_designator_local_ _n(string_designator_local_)
#define string_designator_heap_ _n(string_designator_heap_)
#define string_designator_string _n(string_designator_string)
#define string_concat_heap_ _n(string_concat_heap_)
#define string_concat_hyphen_heap_ _n(string_concat_hyphen_heap_)
#define string_concat_char1_heap_ _n(string_concat_char1_heap_)
#define string_concat_char2_heap_ _n(string_concat_char2_heap_)
#define string_upper_p_ _n(string_upper_p_)
#define string_lower_p_ _n(string_lower_p_)
#define string_upper_alloc_ _n(string_upper_alloc_)
#define string_upper_local_ _n(string_upper_local_)
#define string_upper_heap_ _n(string_upper_heap_)
#define string_lower_alloc_ _n(string_lower_alloc_)
#define string_lower_local_ _n(string_lower_local_)
#define string_lower_heap_ _n(string_lower_heap_)

#define string_equal_char_debug _n(string_equal_char_debug)
#define string_equalp_char_debug _n(string_equalp_char_debug)
#define string_equal_debug _n(string_equal_debug)

/* string check */
int array_stringp(addr pos);
int strarrayp(addr pos);
int stringp(addr pos);
int string_designator_p(addr pos);

int string_base_p_(addr pos, int *ret);
int string_simple_p(addr pos);
int string_character_type_(addr pos, enum CHARACTER_TYPE *ret);
int strarray_base_p_(addr pos, int *ret);
int strarray_simple_p(addr pos);
int strarray_character_type_(addr pos, enum CHARACTER_TYPE *ret);

/* strarray */
int strarray_alloc_(LocalRoot local, addr *ret, size_t len);
int strarray_local_(LocalRoot local, addr *ret, size_t len);
int strarray_heap_(addr *ret, size_t len);

int strarray_char_alloc_(LocalRoot local, addr *ret, const char *arg);
int strarray_char_local_(LocalRoot local, addr *ret, const char *arg);
int strarray_char_heap_(addr *ret, const char *arg);

int strarray_size1_alloc_(LocalRoot, addr *, const char *, size_t);
int strarray_size1_local_(LocalRoot, addr *, const char *, size_t);
int strarray_size1_heap_(addr *, const char *, size_t);

int strarray_sizeu_alloc_(LocalRoot, addr *, const unicode *, size_t);
int strarray_sizeu_local_(LocalRoot, addr *, const unicode *, size_t);
int strarray_sizeu_heap_(addr *, const unicode *, size_t);

void strarray_length(addr pos, size_t *ret);
void strarray_length_buffer(addr pos, size_t *ret);
int strarray_getc_(addr pos, size_t index, unicode *u);
int strarray_setc_(addr pos, size_t index, unicode u);

int strarray_equal_binary_(addr left, const unicode *right, size_t size, int *ret);
int strarray_equalp_binary_(addr left, const unicode *right, size_t size, int *ret);
int strarray_equal_char_(addr left, const char *right, int *ret);
int strarray_equalp_char_(addr left, const char *right, int *ret);
int strarray_equal_(addr left, addr right, int *ret);
int strarray_equalp_(addr left, addr right, int *ret);
int strarray_character_equal_(addr left, addr right, int *ret);
int strarray_character_equalp_(addr left, addr right, int *ret);

int strarray_compare_binary_(addr left,
		const unicode *right, size_t size2, int *ret);
int strarray_comparep_binary_(addr left,
		const unicode *right, size_t size2, int *ret);
int strarray_compare_char_(addr left, const char *right, int *ret);
int strarray_comparep_char_(addr left, const char *right, int *ret);
int strarray_compare_(addr left, addr right, int *ret);
int strarray_comparep_(addr left, addr right, int *ret);

/* string */
int string_alloc_(LocalRoot local, addr *ret, addr pos);
int string_local_(LocalRoot local, addr *ret, addr pos);
int string_heap_(addr *ret, addr pos);

int strvect_value_heap_(addr *ret, addr pos);

void string_length(addr pos, size_t *ret);
int string_getc_(addr pos, size_t index, unicode *u);
int string_setc_(addr pos, size_t index, unicode u);

int string_equal_binary_(addr left, const unicode *right, size_t len, int *ret);
int string_equalp_binary_(addr left, const unicode *right, size_t len, int *ret);
int string_equal_char_(addr left, const char *right, int *ret);
int string_equalp_char_(addr left, const char *right, int *ret);
int stringp_equal_char_(addr left, const char *right, int *ret);
int stringp_equalp_char_(addr left, const char *right, int *ret);
int string_equalp_char_va_(addr pos, int *ret, ...);
int string_equal_(addr left, addr right, int *ret);
int string_equalp_(addr left, addr right, int *ret);
int string_character_equal_(addr left, addr right, int *ret);
int string_character_equalp_(addr left, addr right, int *ret);

int string_compare_binary_(addr left, const unicode *right, size_t size2, int *ret);
int string_comparep_binary_(addr left, const unicode *right, size_t size2, int *ret);
int string_compare_char_(addr left, const char *right, int *ret);
int string_comparep_char_(addr left, const char *right, int *ret);
int string_compare_(addr left, addr right, int *ret);
int string_comparep_(addr left, addr right, int *ret);

int string_designator_equal_(addr left, addr right, int *ret);
int string_designator_equal_char_(addr left, const char *right, int *ret);
int string_designator_equalp_(addr left, addr right, int *ret);
int string_designator_equalp_char_(addr left, const char *right, int *ret);
int string_designator_alloc_(LocalRoot local, addr *value, addr pos, int *ret);
int string_designator_local_(LocalRoot local, addr *value, addr pos, int *ret);
int string_designator_heap_(addr *value, addr pos, int *ret);
int string_designator_string(addr *value, addr pos);

int string_concat_heap_(addr *ret, addr a, addr b);
int string_concat_hyphen_heap_(addr *ret, addr a, addr b);
int string_concat_char1_heap_(addr *ret, const char *str, addr b);
int string_concat_char2_heap_(addr *ret, addr a, const char *str);

int string_upper_p_(addr pos, int *ret);
int string_lower_p_(addr pos, int *ret);
int string_upper_alloc_(LocalRoot local, addr pos, addr *ret);
int string_upper_local_(LocalRoot local, addr pos, addr *ret);
int string_upper_heap_(addr pos, addr *ret);
int string_lower_alloc_(LocalRoot local, addr pos, addr *ret);
int string_lower_local_(LocalRoot local, addr pos, addr *ret);
int string_lower_heap_(addr pos, addr *ret);

/* debug */
int string_equal_char_debug(addr left, const char *right);
int string_equalp_char_debug(addr left, const char *right);
int string_equal_debug(addr left, addr right);

#endif


/************************************************************
 *  type_object.h
 ************************************************************/
#ifndef __TYPE_OBJECT_HEADER__
#define __TYPE_OBJECT_HEADER__


#define type_object_ _n(type_object_)
#define init_type_object _n(init_type_object)

/*  function type_object
 *     input: type
 *    output: (or symbol cons)
 */
int type_object_(addr *ret, addr value);
void init_type_object(void);

#endif


/************************************************************
 *  array_adjust.h
 ************************************************************/
#ifndef __ARRAY_ADJUST_HEADER__
#define __ARRAY_ADJUST_HEADER__


#define array_adjust_array_ _n(array_adjust_array_)

int array_adjust_array_(addr *ret, addr array, addr dimension,
		addr type, addr initial, addr contents,
		addr fillpointer, addr displaced, addr offset);

#endif


/************************************************************
 *  array_vector.h
 ************************************************************/
#ifndef __ARRAY_VECTOR_HEADER__
#define __ARRAY_VECTOR_HEADER__


#define vector_type_p _n(vector_type_p)
#define vector_pop_common_ _n(vector_pop_common_)
#define vector_push_common_ _n(vector_push_common_)
#define vector_push_extend_common_ _n(vector_push_extend_common_)
#define vector_get_ _n(vector_get_)
#define vector_set_ _n(vector_set_)
#define vector_aref_ _n(vector_aref_)
#define vector_setf_aref_ _n(vector_setf_aref_)
#define vector_array_dimension_ _n(vector_array_dimension_)
#define vector_array_dimensions _n(vector_array_dimensions)
#define vector_array_in_bounds_p_ _n(vector_array_in_bounds_p_)
#define vector_array_row_major_index_ _n(vector_array_row_major_index_)
#define vector_signed_uninit_ _n(vector_signed_uninit_)
#define vector_float_uninit_ _n(vector_float_uninit_)
#define vector_signed_ _n(vector_signed_)
#define vector_float_ _n(vector_float_)
#define vector_setelt_ _n(vector_setelt_)
#define vector_reverse _n(vector_reverse)
#define vector_nreverse _n(vector_nreverse)
#define vector_copy_heap_ _n(vector_copy_heap_)

int vector_type_p(addr pos);
int vector_pop_common_(Execute ptr, addr pos, addr *ret);
int vector_push_common_(Execute ptr, addr value, addr pos, addr *ret);
int vector_push_extend_common_(Execute ptr,
		addr value, addr pos, addr extension, addr *ret);

int vector_get_(addr pos, size_t index, addr *ret);
int vector_set_(addr pos, size_t index, addr value);
int vector_aref_(addr pos, addr args, addr *ret);
int vector_setf_aref_(addr pos, addr args, addr value);
int vector_array_dimension_(addr pos, addr arg, size_t size, addr *ret);
void vector_array_dimensions(size_t size, addr *ret);
int vector_array_in_bounds_p_(addr rest, size_t size, int *ret);
int vector_array_row_major_index_(addr rest, size_t size, addr *ret);

int vector_signed_uninit_(addr *ret, size_t size, enum ARRAY_TYPE type, int bs);
int vector_float_uninit_(addr *ret, size_t size, enum ARRAY_TYPE type);
int vector_signed_(addr *ret, size_t size, enum ARRAY_TYPE type, int bs, addr value);
int vector_float_(addr *ret, size_t size, enum ARRAY_TYPE type, addr value);

int vector_setelt_(addr pos, size_t index, addr value);
void vector_reverse(LocalRoot local, addr *ret, addr pos);
void vector_nreverse(addr *ret, addr pos);
int vector_copy_heap_(addr *ret, addr pos);

#endif


/************************************************************
 *  character_check.h
 ************************************************************/
#ifndef __CHARACTER_CHECK_HEADER__
#define __CHARACTER_CHECK_HEADER__


#define isbasechar _n(isbasechar)
#define isuppercase _n(isuppercase)
#define islowercase _n(islowercase)
#define isdigitcase _n(isdigitcase)
#define isalphabetic _n(isalphabetic)
#define isalphanumeric _n(isalphanumeric)
#define isgraphunicode _n(isgraphunicode)
#define isspaceunicode _n(isspaceunicode)
#define toupperunicode _n(toupperunicode)
#define tolowerunicode _n(tolowerunicode)
#define issurrogatepair _n(issurrogatepair)
#define isbaserange _n(isbaserange)
#define isstandardtype _n(isstandardtype)
#define isbasetype _n(isbasetype)
#define isextendedtype _n(isextendedtype)

#define IntegerBaseMax		36
#define isBaseChar(x)       (2 <= (x) && (x) <= IntegerBaseMax)
#define isUpperCase(x)      ('A' <= (x) && (x) <= 'Z')
#define isLowerCase(x)      ('a' <= (x) && (x) <= 'z')
#define isDigitCase(x)      ('0' <= (x) && (x) <= '9')
#define isAlphabetic(x)     (isUpperCase(x) || isLowerCase(x))
#define isAlphanumeric(x)   (isAlphabetic(x) || isDigitCase(x))
#define _isGraphUnicode(x)	(0x21 <= (x) && (x) <= 0x7E)
#define isSpaceUnicode(x) \
	(((x) == ' ') || ((x) == '\t') || ((x) == '\n') || \
	 ((x) == '\v') || ((x) == '\f') || ((x) == '\r'))
#define toUpperUnicode(x)   (isLowerCase(x)? ((x)-'a'+'A'): (x))
#define toLowerUnicode(x)   (isUpperCase(x)? ((x)-'A'+'a'): (x))

#define UnicodeCount		((1UL + 16UL) * 0x010000UL)
#define isSurrogatePair(x)  (0xD800 <= (x) && (x) <= 0xDFFF)
#define isBaseRange(x)		((x) < UnicodeCount)
#define isStandardType(x)   (((x)==0x0A) || (0x20<=(x) && (x)<=0x7E))
#define isBaseType(x)		(isBaseRange(x) && (! isSurrogatePair(x)))
#define isExtendedType(x)	((0x00800000UL <= (x)) && ((x) <= 0x00FFFFFFUL))

/* character check */
int isbasechar(unicode x);
int isuppercase(unicode x);
int islowercase(unicode x);
int isdigitcase(unicode x);
int isalphabetic(unicode x);
int isalphanumeric(unicode x);
int isgraphunicode(unicode x);
int isspaceunicode(unicode x);
unicode toupperunicode(unicode x);
unicode tolowerunicode(unicode x);

/* character type */
int issurrogatepair(unicode x);
int isbaserange(unicode x);
int isstandardtype(unicode x);
int isbasetype(unicode x);
int isextendedtype(unicode x);

#endif


/************************************************************
 *  character.h
 ************************************************************/
#ifndef __CHARACTER_HEADER__
#define __CHARACTER_HEADER__


#define make_character_heap _n(make_character_heap)
#define character_alloc _n(character_alloc)
#define character_local _n(character_local)
#define character_heap _n(character_heap)
#define characterh _n(characterh)
#define character_unicode_heap _n(character_unicode_heap)
#define make_extended_char_heap_ _n(make_extended_char_heap_)
#define ptrcharacter _n(ptrcharacter)
#define refcharacter _n(refcharacter)
#define getcharacter _n(getcharacter)
#define setcharacter_unsafe _n(setcharacter_unsafe)
#define character_type _n(character_type)
#define ref_character_type _n(ref_character_type)
#define get_character_type _n(get_character_type)
#define isvalidunicode _n(isvalidunicode)
#define standard_char_p _n(standard_char_p)
#define base_char_p _n(base_char_p)
#define extended_char_p _n(extended_char_p)
#define characterp _n(characterp)
#define unicode_equalp _n(unicode_equalp)
#define unicode_comparep _n(unicode_comparep)
#define character_equal _n(character_equal)
#define character_equalp _n(character_equalp)
#define character_equal_char _n(character_equal_char)
#define character_equalp_char _n(character_equalp_char)
#define character_compare _n(character_compare)
#define character_comparep _n(character_comparep)
#define character_unicode_equal _n(character_unicode_equal)
#define character_unicode_equalp _n(character_unicode_equalp)
#define character_unicode_compare _n(character_unicode_compare)
#define character_unicode_comparep _n(character_unicode_comparep)
#define character_equal_unicode _n(character_equal_unicode)
#define character_equalp_unicode _n(character_equalp_unicode)
#define character2_heap _n(character2_heap)
#define refcharacter2a _n(refcharacter2a)
#define refcharacter2b _n(refcharacter2b)
#define getcharacter2a _n(getcharacter2a)
#define getcharacter2b _n(getcharacter2b)
#define setcharacter2a _n(setcharacter2a)
#define setcharacter2b _n(setcharacter2b)
#define character2_equal_unicode _n(character2_equal_unicode)
#define character2_equalp_unicode _n(character2_equalp_unicode)
#define build_character _n(build_character)

#define LISP_CHARACTER_CACHE		0x80

#define PtrCharacter_Low(x)			((const unicode *)PtrBodyB2(x))
#define RefCharacter_Low(x)			(*PtrCharacter_Low(x))
#define GetCharacter_Low(x,v)		GetvBodyB2((x),unicode,(v))
#define SetCharacter_Low(x,v)		SetvBodyB2((x),unicode,(v))

#ifdef LISP_DEBUG
#define RefCharacter(x)				(*ptrcharacter(x))
#define GetCharacter(x,v)			getcharacter((x),(v))
#define SetCharacter_unsafe(x,v)	setcharacter_unsafe((x),(v))
#else
#define RefCharacter(x)				RefCharacter_Low(x)
#define GetCharacter(x,v)			GetCharacter_Low(x,v)
#define SetCharacter_unsafe(x,v)	SetCharacter_Low(x,v)
#endif

/* character */
void make_character_heap(addr *ret, unicode value);
void character_alloc(LocalRoot root, addr *ret, unicode value);
void character_local(LocalRoot root, addr *ret, unicode value);
void character_heap(addr *ret, unicode value);
addr characterh(unicode value); /* for debug */
int character_unicode_heap(addr *ret, unicode c);
int make_extended_char_heap_(addr *ret, unicode c);

const unicode *ptrcharacter(addr pos);
unicode refcharacter(addr pos);
void getcharacter(addr pos, unicode *value);
void setcharacter_unsafe(addr pos, unicode value);
enum CHARACTER_TYPE character_type(unicode c);
enum CHARACTER_TYPE ref_character_type(addr pos);
void get_character_type(addr pos, enum CHARACTER_TYPE *ret);
int isvalidunicode(unicode c);
int standard_char_p(addr pos);
int base_char_p(addr pos);
int extended_char_p(addr pos);
int characterp(addr pos);

int unicode_equalp(unicode left, unicode right);
int unicode_comparep(unicode left, unicode right);
int character_equal(addr left, addr right);
int character_equalp(addr left, addr right);
int character_equal_char(addr left, const char *right);
int character_equalp_char(addr left, const char *right);
int character_compare(addr left, addr right);
int character_comparep(addr left, addr right);
int character_unicode_equal(addr left, unicode right);
int character_unicode_equalp(addr left, unicode right);
int character_unicode_compare(addr left, unicode right);
int character_unicode_comparep(addr left, unicode right);

int character_equal_unicode(addr left, unicode right);
int character_equalp_unicode(addr left, unicode right);

/* character2 */
void character2_heap(addr *ret, unicode a, unicode b);
unicode refcharacter2a(addr pos);
unicode refcharacter2b(addr pos);
void getcharacter2a(addr pos, unicode *ret);
void getcharacter2b(addr pos, unicode *ret);
void setcharacter2a(addr pos, unicode value);
void setcharacter2b(addr pos, unicode value);

int character2_equal_unicode(addr left, unicode a, unicode b);
int character2_equalp_unicode(addr left, unicode a, unicode b);

void build_character(void);

#endif


/************************************************************
 *  cons.h
 ************************************************************/
#ifndef __CONS_HEADER__
#define __CONS_HEADER__


#define consp_getcons _n(consp_getcons)
#define consp_getcar _n(consp_getcar)
#define consp_getcdr _n(consp_getcdr)
#define getcons_ _n(getcons_)
#define getcar_ _n(getcar_)
#define getcdr_ _n(getcdr_)
#define setcons_ _n(setcons_)
#define setcar_ _n(setcar_)
#define setcdr_ _n(setcdr_)
#define list_stdarg_alloc _n(list_stdarg_alloc)
#define list_heap _n(list_heap)
#define list_local _n(list_local)
#define list_alloc _n(list_alloc)
#define pushva_heap _n(pushva_heap)
#define lista_safe_alloc_ _n(lista_safe_alloc_)
#define lista_safe_local_ _n(lista_safe_local_)
#define lista_safe_heap_ _n(lista_safe_heap_)
#define lista_stdarg_noerror _n(lista_stdarg_noerror)
#define lista_stdarg_safe_ _n(lista_stdarg_safe_)
#define lista_stdarg_alloc _n(lista_stdarg_alloc)
#define lista_alloc _n(lista_alloc)
#define lista_local _n(lista_local)
#define lista_heap _n(lista_heap)
#define List_bind _n(List_bind)
#define list_bind_ _n(list_bind_)
#define Lista_bind _n(Lista_bind)
#define lista_bind_ _n(lista_bind_)
#define copy_tree_alloc _n(copy_tree_alloc)
#define copy_tree_local _n(copy_tree_local)
#define copy_tree_heap _n(copy_tree_heap)

#define Inline_getcons(x,y,z) { \
	if (GetType(x) != LISPTYPE_CONS) { \
		return TypeError_((x), CONS); \
	} \
	GetCons((x), (y), (z)); \
}
#define Inline_getcar(x,y) { \
	if (GetType(x) != LISPTYPE_CONS) { \
		return TypeError_((x), CONS); \
	} \
	GetCar((x), (y)); \
}
#define Inline_getcdr(x,y) { \
	if (GetType(x) != LISPTYPE_CONS) { \
		return TypeError_((x), CONS); \
	} \
	GetCdr((x), (y)); \
}

/* cons */
int consp_getcons(addr cons, addr *car, addr *cdr);
int consp_getcar(addr cons, addr *car);
int consp_getcdr(addr cons, addr *cdr);

int getcons_(addr list, addr *car, addr *cdr);
int getcar_(addr list, addr *car);
int getcdr_(addr list, addr *cdr);
int setcons_(addr cons, addr car, addr cdr);
int setcar_(addr cons, addr car);
int setcdr_(addr cons, addr cdr);
#define Return_getcons(x,y,z) Return(getcons_((x),(y),(z)))
#define Return_getcar(x,y) Return(getcar_((x),(y)))
#define Return_getcdr(x,y) Return(getcdr_((x),(y)))
#define Return_setcons(x,y,z) Return(setcons_((x),(y),(z)))
#define Return_setcar(x,y) Return(setcar_((x),(y)))
#define Return_setcdr(x,y) Return(setcdr_((x),(y)))

/* list */
void list_stdarg_alloc(LocalRoot local, addr *ret, va_list args);
void list_heap(addr *ret, ...);
void list_local(LocalRoot local, addr *ret, ...);
void list_alloc(LocalRoot local, addr *ret, ...);
void pushva_heap(addr *list, ...);

/* list* */
int lista_safe_alloc_(LocalRoot local, addr *ret, addr first, addr cons);
int lista_safe_local_(LocalRoot local, addr *ret, addr first, addr cons);
int lista_safe_heap_(addr *ret, addr first, addr cons);
void lista_stdarg_noerror(LocalRoot local, addr *ret, va_list args);
int lista_stdarg_safe_(LocalRoot local, addr *ret, va_list args);
void lista_stdarg_alloc(LocalRoot local, addr *ret, va_list args);
void lista_alloc(LocalRoot local, addr *ret, ...);
void lista_local(LocalRoot local, addr *ret, ...);
void lista_heap(addr *ret, ...);

/* bind */
void List_bind(addr list, ...);
int list_bind_(addr list, ...);
void Lista_bind(addr list, ...);
int lista_bind_(addr list, ...);

/* copy-tree */
void copy_tree_alloc(LocalRoot local, addr *ret, addr list);
void copy_tree_local(LocalRoot local, addr *ret, addr list);
void copy_tree_heap(addr *ret, addr list);

#endif


/************************************************************
 *  strvect.h
 ************************************************************/
#ifndef __STRVECT_HEADER__
#define __STRVECT_HEADER__


#define strvect_alloc _n(strvect_alloc)
#define strvect_local _n(strvect_local)
#define strvect_heap _n(strvect_heap)
#define strvect_copy_alloc _n(strvect_copy_alloc)
#define strvect_copy_local _n(strvect_copy_local)
#define strvect_copy_heap _n(strvect_copy_heap)
#define strvect_character_alloc_ _n(strvect_character_alloc_)
#define strvect_character_local_ _n(strvect_character_local_)
#define strvect_character_heap_ _n(strvect_character_heap_)
#define strvect_length _n(strvect_length)
#define strvect_posbodylen _n(strvect_posbodylen)
#define unicode_character_type _n(unicode_character_type)
#define strvect_character_type_ _n(strvect_character_type_)
#define strvectp _n(strvectp)
#define strvect_base_p_ _n(strvect_base_p_)
#define strvect_simple_p _n(strvect_simple_p)
#define strvect_char_alloc _n(strvect_char_alloc)
#define strvect_char_local _n(strvect_char_local)
#define strvect_char_heap _n(strvect_char_heap)
#define stringh _n(stringh)
#define strvect_sizeu_alloc_ _n(strvect_sizeu_alloc_)
#define strvect_sizeu_local_ _n(strvect_sizeu_local_)
#define strvect_sizeu_heap_ _n(strvect_sizeu_heap_)
#define strvect_equal_binary _n(strvect_equal_binary)
#define strvect_equalp_binary _n(strvect_equalp_binary)
#define strvect_equal_char _n(strvect_equal_char)
#define strvect_equalp_char _n(strvect_equalp_char)
#define strvect_equal _n(strvect_equal)
#define strvect_equalp _n(strvect_equalp)
#define strvect_character_equal _n(strvect_character_equal)
#define strvect_character_equalp _n(strvect_character_equalp)
#define strvect_compare_binary _n(strvect_compare_binary)
#define strvect_comparep_binary _n(strvect_comparep_binary)
#define strvect_compare_char _n(strvect_compare_char)
#define strvect_comparep_char _n(strvect_comparep_char)
#define strvect_compare _n(strvect_compare)
#define strvect_comparep _n(strvect_comparep)
#define strvect_designator_equal_char _n(strvect_designator_equal_char)
#define strvect_designator_equalp_char _n(strvect_designator_equalp_char)
#define strvect_getc _n(strvect_getc)
#define strvect_setc_unsafe _n(strvect_setc_unsafe)
#define strvect_setc_ _n(strvect_setc_)
#define strvect_setall_ _n(strvect_setall_)
#define strvect_get_ _n(strvect_get_)
#define strvect_set_ _n(strvect_set_)
#define strvect_aref_ _n(strvect_aref_)
#define strvect_setf_aref_ _n(strvect_setf_aref_)
#define strvect_fill_ _n(strvect_fill_)
#define strvect_subseq_alloc_ _n(strvect_subseq_alloc_)
#define strvect_subseq_index_ _n(strvect_subseq_index_)
#define strvect_subseq_ _n(strvect_subseq_)
#define strvect_setget_ _n(strvect_setget_)
#define strvect_reverse_ _n(strvect_reverse_)
#define strvect_nreverse_ _n(strvect_nreverse_)
#define strvect_char1_heap_ _n(strvect_char1_heap_)
#define strvect_size1_heap_ _n(strvect_size1_heap_)

#define StringBodyLength(x)			(IdxSize + sizeoft(unicode)*(x))
#define PtrStringBase(x)			posbodyr(x)
#define PtrStringSize(x)			((size_t *)PtrStringBase(x))
#define RefStringSize(x)			(*PtrStringSize(x))
#define GetStringSize(x,v)			(*(v) = RefStringSize(x))
#define SetStringSize(x,v)			(RefStringSize(x) = (v))
#define PtrStringUnicode(x)			((unicode *)(PtrStringBase(x) + IdxSize))
#define GetStringUnicode(x,v)		(*(v) = PtrStringUnicode(x))

void strvect_alloc(LocalRoot root, addr *ret, size_t len);
void strvect_local(LocalRoot root, addr *ret, size_t len);
void strvect_heap(addr *ret, size_t len);

void strvect_copy_alloc(LocalRoot root, addr *ret, addr value);
void strvect_copy_local(LocalRoot root, addr *ret, addr value);
void strvect_copy_heap(addr *ret, addr value);

int strvect_character_alloc_(LocalRoot local, addr *ret, addr pos);
int strvect_character_local_(LocalRoot local, addr *ret, addr pos);
int strvect_character_heap_(addr *ret, addr pos);

void strvect_length(addr pos, size_t *ret);
void strvect_posbodylen(addr pos, const unicode **body, size_t *len);
enum CHARACTER_TYPE unicode_character_type(enum CHARACTER_TYPE type, unicode u);
int strvect_character_type_(addr pos, enum CHARACTER_TYPE *ret);

int strvectp(addr pos);
int strvect_base_p_(addr pos, int *ret);
int strvect_simple_p(addr pos);

void strvect_char_alloc(LocalRoot local, addr *ret, const char *arg);
void strvect_char_local(LocalRoot root, addr *ret, const char *arg);
void strvect_char_heap(addr *ret, const char *arg);
addr stringh(const char *arg); /* for debug */

int strvect_sizeu_alloc_(LocalRoot, addr *, const unicode *, size_t);
int strvect_sizeu_local_(LocalRoot, addr *, const unicode *, size_t);
int strvect_sizeu_heap_(addr *, const unicode *, size_t);

int strvect_equal_binary(addr left, const unicode *right, size_t len);
int strvect_equalp_binary(addr left, const unicode *right, size_t len);
int strvect_equal_char(addr left, const char *right);
int strvect_equalp_char(addr left, const char *right);
int strvect_equal(addr left, addr right);
int strvect_equalp(addr left, addr right);
int strvect_character_equal(addr left, addr right);
int strvect_character_equalp(addr left, addr right);

int strvect_compare_binary(addr left, const unicode *right, size_t len);
int strvect_comparep_binary(addr left, const unicode *right, size_t len);
int strvect_compare_char(addr left, const char *right);
int strvect_comparep_char(addr left, const char *right);
int strvect_compare(addr left, addr right);
int strvect_comparep(addr left, addr right);

int strvect_designator_equal_char(addr left, const char *right);
int strvect_designator_equalp_char(addr left, const char *right);

void strvect_getc(addr pos, size_t len, unicode *c);
void strvect_setc_unsafe(addr pos, size_t index, unicode c);
int strvect_setc_(addr pos, size_t index, unicode c);
int strvect_setall_(addr pos, unicode c);
int strvect_get_(LocalRoot local, addr pos, size_t index, addr *ret);
int strvect_set_(addr pos, size_t index, addr value);
int strvect_aref_(LocalRoot local, addr pos, addr args, addr *ret);
int strvect_setf_aref_(addr pos, addr args, addr value);
int strvect_fill_(addr pos, addr item, addr start, addr end);
int strvect_subseq_alloc_(LocalRoot local, addr *ret, addr pos, size_t x, size_t y);
int strvect_subseq_index_(addr *ret, addr pos, size_t index1, size_t index2);
int strvect_subseq_(addr *ret, addr pos, addr start, addr end);
int strvect_setget_(addr pos1, size_t index1, addr pos2, size_t index2);
int strvect_reverse_(LocalRoot local, addr *ret, addr pos);
int strvect_nreverse_(addr *ret, addr pos);
int strvect_char1_heap_(addr *ret, const char *arg, unicode c);
int strvect_size1_heap_(addr *, const char *, size_t);

#endif


/************************************************************
 *  array_coerce.h
 ************************************************************/
#ifndef __ARRAY_COERCE_HEADER__
#define __ARRAY_COERCE_HEADER__


#define array_coerce_t_heap_ _n(array_coerce_t_heap_)
#define array_coerce_bit_heap_ _n(array_coerce_bit_heap_)
#define array_coerce_character_heap_ _n(array_coerce_character_heap_)
#define array_coerce_signed8_heap_ _n(array_coerce_signed8_heap_)
#define array_coerce_signed16_heap_ _n(array_coerce_signed16_heap_)
#define array_coerce_signed32_heap_ _n(array_coerce_signed32_heap_)
#define array_coerce_signed64_heap_ _n(array_coerce_signed64_heap_)
#define array_coerce_unsigned8_heap_ _n(array_coerce_unsigned8_heap_)
#define array_coerce_unsigned16_heap_ _n(array_coerce_unsigned16_heap_)
#define array_coerce_unsigned32_heap_ _n(array_coerce_unsigned32_heap_)
#define array_coerce_unsigned64_heap_ _n(array_coerce_unsigned64_heap_)
#define array_coerce_single_heap_ _n(array_coerce_single_heap_)
#define array_coerce_double_heap_ _n(array_coerce_double_heap_)
#define array_coerce_long_heap_ _n(array_coerce_long_heap_)
#define vector_coerce_signed8_heap_ _n(vector_coerce_signed8_heap_)
#define vector_coerce_signed16_heap_ _n(vector_coerce_signed16_heap_)
#define vector_coerce_signed32_heap_ _n(vector_coerce_signed32_heap_)
#define vector_coerce_signed64_heap_ _n(vector_coerce_signed64_heap_)
#define vector_coerce_unsigned8_heap_ _n(vector_coerce_unsigned8_heap_)
#define vector_coerce_unsigned16_heap_ _n(vector_coerce_unsigned16_heap_)
#define vector_coerce_unsigned32_heap_ _n(vector_coerce_unsigned32_heap_)
#define vector_coerce_unsigned64_heap_ _n(vector_coerce_unsigned64_heap_)
#define vector_coerce_single_heap_ _n(vector_coerce_single_heap_)
#define vector_coerce_double_heap_ _n(vector_coerce_double_heap_)
#define vector_coerce_long_heap_ _n(vector_coerce_long_heap_)
#define array_coerce_bit_t_ _n(array_coerce_bit_t_)
#define array_coerce_character_t_ _n(array_coerce_character_t_)
#define array_coerce_signed8_t_ _n(array_coerce_signed8_t_)
#define array_coerce_signed16_t_ _n(array_coerce_signed16_t_)
#define array_coerce_signed32_t_ _n(array_coerce_signed32_t_)
#define array_coerce_signed64_t_ _n(array_coerce_signed64_t_)
#define array_coerce_unsigned8_t_ _n(array_coerce_unsigned8_t_)
#define array_coerce_unsigned16_t_ _n(array_coerce_unsigned16_t_)
#define array_coerce_unsigned32_t_ _n(array_coerce_unsigned32_t_)
#define array_coerce_unsigned64_t_ _n(array_coerce_unsigned64_t_)
#define array_coerce_single_t_ _n(array_coerce_single_t_)
#define array_coerce_double_t_ _n(array_coerce_double_t_)
#define array_coerce_long_t_ _n(array_coerce_long_t_)
#define array_coerce_bit_ _n(array_coerce_bit_)
#define array_coerce_character_ _n(array_coerce_character_)
#define array_coerce_signed8_ _n(array_coerce_signed8_)
#define array_coerce_signed16_ _n(array_coerce_signed16_)
#define array_coerce_signed32_ _n(array_coerce_signed32_)
#define array_coerce_signed64_ _n(array_coerce_signed64_)
#define array_coerce_unsigned8_ _n(array_coerce_unsigned8_)
#define array_coerce_unsigned16_ _n(array_coerce_unsigned16_)
#define array_coerce_unsigned32_ _n(array_coerce_unsigned32_)
#define array_coerce_unsigned64_ _n(array_coerce_unsigned64_)
#define array_coerce_single_ _n(array_coerce_single_)
#define array_coerce_double_ _n(array_coerce_double_)
#define array_coerce_long_ _n(array_coerce_long_)
#define vector_coerce_bit_ _n(vector_coerce_bit_)
#define vector_coerce_character_ _n(vector_coerce_character_)
#define vector_coerce_signed8_ _n(vector_coerce_signed8_)
#define vector_coerce_signed16_ _n(vector_coerce_signed16_)
#define vector_coerce_signed32_ _n(vector_coerce_signed32_)
#define vector_coerce_signed64_ _n(vector_coerce_signed64_)
#define vector_coerce_unsigned8_ _n(vector_coerce_unsigned8_)
#define vector_coerce_unsigned16_ _n(vector_coerce_unsigned16_)
#define vector_coerce_unsigned32_ _n(vector_coerce_unsigned32_)
#define vector_coerce_unsigned64_ _n(vector_coerce_unsigned64_)
#define vector_coerce_single_ _n(vector_coerce_single_)
#define vector_coerce_double_ _n(vector_coerce_double_)
#define vector_coerce_long_ _n(vector_coerce_long_)

/* make */
int array_coerce_t_heap_(addr *ret, addr array);
int array_coerce_bit_heap_(addr *ret, addr array);
int array_coerce_character_heap_(addr *ret, addr array);
int array_coerce_signed8_heap_(addr *ret, addr array);
int array_coerce_signed16_heap_(addr *ret, addr array);
int array_coerce_signed32_heap_(addr *ret, addr array);
#ifdef LISP_64BIT
int array_coerce_signed64_heap_(addr *ret, addr array);
#endif
int array_coerce_unsigned8_heap_(addr *ret, addr array);
int array_coerce_unsigned16_heap_(addr *ret, addr array);
int array_coerce_unsigned32_heap_(addr *ret, addr array);
#ifdef LISP_64BIT
int array_coerce_unsigned64_heap_(addr *ret, addr array);
#endif
int array_coerce_single_heap_(addr *ret, addr array);
int array_coerce_double_heap_(addr *ret, addr array);
int array_coerce_long_heap_(addr *ret, addr array);

int vector_coerce_signed8_heap_(addr *ret, size_t size);
int vector_coerce_signed16_heap_(addr *ret, size_t size);
int vector_coerce_signed32_heap_(addr *ret, size_t size);
#ifdef LISP_64BIT
int vector_coerce_signed64_heap_(addr *ret, size_t size);
#endif
int vector_coerce_unsigned8_heap_(addr *ret, size_t size);
int vector_coerce_unsigned16_heap_(addr *ret, size_t size);
int vector_coerce_unsigned32_heap_(addr *ret, size_t size);
#ifdef LISP_64BIT
int vector_coerce_unsigned64_heap_(addr *ret, size_t size);
#endif
int vector_coerce_single_heap_(addr *ret, size_t size);
int vector_coerce_double_heap_(addr *ret, size_t size);
int vector_coerce_long_heap_(addr *ret, size_t size);

/* coerce */
int array_coerce_bit_t_(addr pos, int *rv, int *ret);
int array_coerce_character_t_(addr pos, unicode *rv, int *ret);
int array_coerce_signed8_t_(addr pos, int8_t *rv, int *ret);
int array_coerce_signed16_t_(addr pos, int16_t *rv, int *ret);
int array_coerce_signed32_t_(addr pos, int32_t *rv, int *ret);
#ifdef LISP_64BIT
int array_coerce_signed64_t_(addr pos, int64_t *rv, int *ret);
#endif
int array_coerce_unsigned8_t_(addr pos, uint8_t *rv, int *ret);
int array_coerce_unsigned16_t_(addr pos, uint16_t *rv, int *ret);
int array_coerce_unsigned32_t_(addr pos, uint32_t *rv, int *ret);
#ifdef LISP_64BIT
int array_coerce_unsigned64_t_(addr pos, uint64_t *rv, int *ret);
#endif
int array_coerce_single_t_(addr value, single_float *rv, int *ret);
int array_coerce_double_t_(addr value, double_float *rv, int *ret);
int array_coerce_long_t_(addr value, long_float *rv, int *ret);

int array_coerce_bit_(addr pos, size_t i, int *rv, int *ret);
int array_coerce_character_(addr pos, size_t i, unicode *rv, int *ret);
int array_coerce_signed8_(addr pos, size_t i, int8_t *rv, int *ret);
int array_coerce_signed16_(addr pos, size_t i, int16_t *rv, int *ret);
int array_coerce_signed32_(addr pos, size_t i, int32_t *rv, int *ret);
#ifdef LISP_64BIT
int array_coerce_signed64_(addr pos, size_t i, int64_t *rv, int *ret);
#endif
int array_coerce_unsigned8_(addr pos, size_t i, uint8_t *rv, int *ret);
int array_coerce_unsigned16_(addr pos, size_t i, uint16_t *rv, int *ret);
int array_coerce_unsigned32_(addr pos, size_t i, uint32_t *rv, int *ret);
#ifdef LISP_64BIT
int array_coerce_unsigned64_(addr pos, size_t i, uint64_t *rv, int *ret);
#endif
int array_coerce_single_(addr pos, size_t i, single_float *rv, int *ret);
int array_coerce_double_(addr pos, size_t i, double_float *rv, int *ret);
int array_coerce_long_(addr pos, size_t i, long_float *rv, int *ret);

int vector_coerce_bit_(addr pos, size_t i, int *rv, int *ret);
int vector_coerce_character_(addr pos, size_t i, unicode *rv, int *ret);
int vector_coerce_signed8_(addr pos, size_t i, int8_t *rv, int *ret);
int vector_coerce_signed16_(addr pos, size_t i, int16_t *rv, int *ret);
int vector_coerce_signed32_(addr pos, size_t i, int32_t *rv, int *ret);
#ifdef LISP_64BIT
int vector_coerce_signed64_(addr pos, size_t i, int64_t *rv, int *ret);
#endif
int vector_coerce_unsigned8_(addr pos, size_t i, uint8_t *rv, int *ret);
int vector_coerce_unsigned16_(addr pos, size_t i, uint16_t *rv, int *ret);
int vector_coerce_unsigned32_(addr pos, size_t i, uint32_t *rv, int *ret);
#ifdef LISP_64BIT
int vector_coerce_unsigned64_(addr pos, size_t i, uint64_t *rv, int *ret);
#endif
int vector_coerce_single_(addr pos, size_t i, single_float *rv, int *ret);
int vector_coerce_double_(addr pos, size_t i, double_float *rv, int *ret);
int vector_coerce_long_(addr pos, size_t i, long_float *rv, int *ret);

#endif


/************************************************************
 *  array_copy.h
 ************************************************************/
#ifndef __ARRAY_COPY_HEADER__
#define __ARRAY_COPY_HEADER__


#define array_size_copy_ _n(array_size_copy_)
#define array_copy_alloc_ _n(array_copy_alloc_)
#define array_copy_local_ _n(array_copy_local_)
#define array_copy_heap_ _n(array_copy_heap_)

int array_size_copy_(LocalRoot local, addr pos, addr array);
int array_copy_alloc_(LocalRoot local, addr *ret, addr array);
int array_copy_local_(LocalRoot local, addr *ret, addr array);
int array_copy_heap_(addr *ret, addr array);

#endif


/************************************************************
 *  bignum_equal.h
 ************************************************************/
#ifndef __BIGNUM_EQUAL_HEADER__
#define __BIGNUM_EQUAL_HEADER__


#define zerop_or_plusp_bignum _n(zerop_or_plusp_bignum)
#define plusp_bignum _n(plusp_bignum)
#define minusp_bignum _n(minusp_bignum)
#define zerop_bignum _n(zerop_bignum)
#define evenp_bignum _n(evenp_bignum)
#define oddp_bignum _n(oddp_bignum)
#define equal_bb_real _n(equal_bb_real)
#define equal_nosign_bignum _n(equal_nosign_bignum)
#define equal_fb_real _n(equal_fb_real)
#define equal_value_nosign_bignum _n(equal_value_nosign_bignum)
#define equal_value_bignum _n(equal_value_bignum)
#define equal_value2_nosign_bignum _n(equal_value2_nosign_bignum)
#define equal_value2_bignum _n(equal_value2_bignum)
#define compare_value_bignum _n(compare_value_bignum)
#define compare_bignum_value _n(compare_bignum_value)
#define compare_fb_real _n(compare_fb_real)
#define compare_bf_real _n(compare_bf_real)
#define compare_bb_real _n(compare_bb_real)
#define compare_bs_real_ _n(compare_bs_real_)
#define compare_bd_real_ _n(compare_bd_real_)
#define compare_bl_real_ _n(compare_bl_real_)
#define compare_sb_real_ _n(compare_sb_real_)
#define compare_db_real_ _n(compare_db_real_)
#define compare_lb_real_ _n(compare_lb_real_)
#define fixnum_unsigned_byte_p _n(fixnum_unsigned_byte_p)
#define bignum_unsigned_byte_p _n(bignum_unsigned_byte_p)
#define fixnum_signed_byte_p _n(fixnum_signed_byte_p)
#define bignum_signed_byte_p _n(bignum_signed_byte_p)

int zerop_or_plusp_bignum(addr pos);
int plusp_bignum(addr pos);
int minusp_bignum(addr pos);
int zerop_bignum(addr pos);
int evenp_bignum(addr pos);
int oddp_bignum(addr pos);

int equal_bb_real(addr left, addr right);
int equal_nosign_bignum(addr left, addr right);
int equal_fb_real(addr left, addr right);
#define equal_bf_real(a,b) equal_fb_real((b), (a))
int equal_value_nosign_bignum(addr left, fixed value);
int equal_value_bignum(addr left, int sign1, fixed value);
int equal_value2_nosign_bignum(addr left, fixed high, fixed low);
int equal_value2_bignum(addr left, int sign1, fixed high, fixed low);

int compare_value_bignum(fixnum left, addr right);
int compare_bignum_value(addr value, fixnum right);
int compare_fb_real(addr left, addr right);
int compare_bf_real(addr left, addr right);
int compare_bb_real(addr left, addr right);
int compare_bs_real_(addr left, addr right, int *ret);
int compare_bd_real_(addr left, addr right, int *ret);
int compare_bl_real_(addr left, addr right, int *ret);
int compare_sb_real_(addr left, addr right, int *ret);
int compare_db_real_(addr left, addr right, int *ret);
int compare_lb_real_(addr left, addr right, int *ret);

int fixnum_unsigned_byte_p(addr value, size_t size);
int bignum_unsigned_byte_p(addr value, size_t size);
int fixnum_signed_byte_p(addr value, size_t size);
int bignum_signed_byte_p(addr value, size_t size);

#endif


/************************************************************
 *  bignum_object.h
 ************************************************************/
#ifndef __BIGNUM_OBJECT_HEADER__
#define __BIGNUM_OBJECT_HEADER__


#define bignump _n(bignump)
#define struct_bignum _n(struct_bignum)
#define refalloc_bignum _n(refalloc_bignum)
#define setsize_bignum _n(setsize_bignum)
#define getsize_bignum _n(getsize_bignum)
#define refsize_bignum _n(refsize_bignum)
#define setroot_bignum _n(setroot_bignum)
#define getroot_bignum _n(getroot_bignum)
#define setsign_bignum _n(setsign_bignum)
#define getsign_bignum _n(getsign_bignum)
#define refsign_bignum _n(refsign_bignum)
#define alloc_bignum _n(alloc_bignum)
#define alloc_plus_bignum _n(alloc_plus_bignum)
#define realloc_bignum _n(realloc_bignum)
#define bignum_alloc _n(bignum_alloc)
#define bignum_cons_alloc _n(bignum_cons_alloc)
#define bignum_copy_nosign_alloc _n(bignum_copy_nosign_alloc)
#define bignum_copy_alloc _n(bignum_copy_alloc)
#define bignum_value_alloc _n(bignum_value_alloc)
#define bignum_value2_alloc _n(bignum_value2_alloc)
#define bignum_zero_alloc _n(bignum_zero_alloc)
#define bignum_fixnum_alloc _n(bignum_fixnum_alloc)
#define bignum_fixnum_value_alloc _n(bignum_fixnum_value_alloc)
#define bignum_counter_alloc_ _n(bignum_counter_alloc_)
#define bignum_result_alloc _n(bignum_result_alloc)
#define bignum_integer_alloc_ _n(bignum_integer_alloc_)
#define bignum_debug _n(bignum_debug)
#define bignum_cons_debug _n(bignum_cons_debug)
#define bignum_copy_nosign_debug _n(bignum_copy_nosign_debug)
#define bignum_copy_debug _n(bignum_copy_debug)
#define bignum_value_debug _n(bignum_value_debug)
#define bignum_value2_debug _n(bignum_value2_debug)
#define bignum_zero_debug _n(bignum_zero_debug)
#define bignum_fixnum_debug _n(bignum_fixnum_debug)
#define bignum_fixnum_value_debug _n(bignum_fixnum_value_debug)
#define bignum_counter_debug_ _n(bignum_counter_debug_)
#define bignum_result_debug _n(bignum_result_debug)
#define bignum_integer_debug_ _n(bignum_integer_debug_)
#define getfixed_bignum _n(getfixed_bignum)
#define reffixed_bignum _n(reffixed_bignum)
#define setfixed_bignum _n(setfixed_bignum)
#define diet_bignum _n(diet_bignum)
#define sizepress_bignum _n(sizepress_bignum)
#define copy_bignum _n(copy_bignum)
#define copy_noexpand_bignum _n(copy_noexpand_bignum)
#define setvalue_bignum _n(setvalue_bignum)
#define setzero_bignum _n(setzero_bignum)
#define getbit_bignum _n(getbit_bignum)
#define incf_bignum _n(incf_bignum)
#define decf_bignum _n(decf_bignum)
#define bignum_throw_heap _n(bignum_throw_heap)
#define bignum_throw_local _n(bignum_throw_local)
#define bignum_throw_alloc _n(bignum_throw_alloc)
#define fixnum_throw_heap _n(fixnum_throw_heap)
#define fixnum_throw_local _n(fixnum_throw_local)
#define fixnum_throw_alloc _n(fixnum_throw_alloc)
#define castfixed _n(castfixed)
#define castfixed_fixnum _n(castfixed_fixnum)
#define castfixed_integer _n(castfixed_integer)

struct bignuminfo {
	size_t alloc, size;
};

#define signplus_bignum     0
#define signminus_bignum    1

#define IsIntegerFloat(x) (((x) - (truncf(x))) == 0.0f)
#define IsIntegerDouble(x) (((x) - (trunc(x))) == 0.0)
#define IsIntegerLongFloat(x) (((x) - (truncl(x))) == 0.0L)

#ifdef BIGNUM_TYPE_64BIT
#define alloc_bigdata(m,p,s)    \
	alloc_body8((m), (p), LISPSYSTEM_BIGDATA, sizeofm(fixed, (s)))
#define PtrDataBignum(pos)      ((fixed *)PtrBodyB8(pos))
#endif

#ifdef BIGNUM_TYPE_32BIT
#define alloc_bigdata(m,p,s)    \
	alloc_body4((m), (p), LISPSYSTEM_BIGDATA, sizeofm(fixed, (s)))
#define PtrDataBignum(pos)  ((fixed *)PtrBodyB4(pos))
#endif

#define GetDataBignum(pos, data) { \
	addr __root; \
	GetRootBignum(pos, &__root); \
	*(data) = PtrDataBignum(__root); \
}
#define GetRootDataBignum(pos, root, data) { \
	GetRootBignum(pos, root); \
	*(data) = PtrDataBignum(*root); \
}

#define StructBignum_Low(p) ((struct bignuminfo *)PtrBodySSa((p), 1))
#define RefAllocBignum_Low(p) (StructBignum(p)->alloc)
#define SetSizeBignum_Low(p,v) (StructBignum(p)->size = (v))
#define GetSizeBignum_Low(p,v) (*(v) = StructBignum(p)->size)
#define RefSizeBignum_Low(p)   (StructBignum(p)->size)
#define SetRootBignum_Low(p,v) SetArraySS((p),0,(v))
#define GetRootBignum_Low(p,v) GetArraySS((p),0,(v))
#define SetSignBignum_Low(p,v) SetUser((p), (byte)(v))
#define GetSignBignum_Low(p,v) (*(v) = (int)GetUser(p))
#define RefSignBignum_Low(p) ((int)GetUser(p))

#ifdef LISP_DEBUG
#define StructBignum struct_bignum
#define RefAllocBignum refalloc_bignum
#define SetSizeBignum setsize_bignum
#define GetSizeBignum getsize_bignum
#define RefSizeBignum refsize_bignum
#define SetRootBignum setroot_bignum
#define GetRootBignum getroot_bignum
#define SetSignBignum setsign_bignum
#define GetSignBignum getsign_bignum
#define RefSignBignum refsign_bignum

#define bignum_local bignum_debug
#define bignum_cons_local bignum_cons_debug
#define bignum_copy_nosign_local bignum_copy_nosign_debug
#define bignum_copy_local bignum_copy_debug
#define bignum_value_local bignum_value_debug
#define bignum_value2_local bignum_value2_debug
#define bignum_zero_local bignum_zero_debug
#define bignum_fixnum_local bignum_fixnum_debug
#define bignum_fixnum_value_local bignum_fixnum_value_debug
#define bignum_counter_local_ bignum_counter_debug_
#define bignum_result_local bignum_result_debug
#define bignum_integer_local_ bignum_integer_debug_
#else
#define StructBignum StructBignum_Low
#define RefAllocBignum RefAllocBignum_Low
#define SetSizeBignum SetSizeBignum_Low
#define GetSizeBignum GetSizeBignum_Low
#define RefSizeBignum RefSizeBignum_Low
#define SetRootBignum SetRootBignum_Low
#define GetRootBignum GetRootBignum_Low
#define SetSignBignum SetSignBignum_Low
#define GetSignBignum GetSignBignum_Low
#define RefSignBignum RefSignBignum_Low

#define bignum_local bignum_alloc
#define bignum_cons_local bignum_cons_alloc
#define bignum_copy_nosign_local bignum_copy_nosign_alloc
#define bignum_copy_local bignum_copy_alloc
#define bignum_value_local bignum_value_alloc
#define bignum_value2_local bignum_value2_alloc
#define bignum_zero_local bignum_zero_alloc
#define bignum_fixnum_local bignum_fixnum_alloc
#define bignum_fixnum_value_local bignum_fixnum_value_alloc
#define bignum_counter_local_ bignum_counter_alloc_
#define bignum_result_local bignum_result_alloc
#define bignum_integer_local_ bignum_integer_alloc_
#endif

#define fixnum_result_alloc fixnum_throw_alloc
#define fixnum_result_local fixnum_throw_local
#define fixnum_result_heap fixnum_throw_heap

int bignump(addr pos);
struct bignuminfo *struct_bignum(addr pos);
size_t refalloc_bignum(addr pos);
void setsize_bignum(addr pos, size_t value);
void getsize_bignum(addr pos, size_t *ret);
size_t refsize_bignum(addr pos);
void setroot_bignum(addr pos, addr value);
void getroot_bignum(addr pos, addr *ret);
void setsign_bignum(addr pos, int sign);
void getsign_bignum(addr pos, int *ret);
int refsign_bignum(addr pos);

void alloc_bignum(LocalRoot local, addr *ret, size_t alloc);
void alloc_plus_bignum(LocalRoot local, addr *ret, size_t a, size_t b);
void realloc_bignum(LocalRoot local, addr pos, size_t alloc, int force);

void bignum_alloc(LocalRoot local, addr *ret, int sign, size_t size);
void bignum_cons_alloc(LocalRoot local, addr *ret, int sign, addr cons);
void bignum_copy_nosign_alloc(LocalRoot local, addr *ret, addr right);
void bignum_copy_alloc(LocalRoot local, addr *ret, addr right);
void bignum_value_alloc(LocalRoot local, addr *ret, int sign, fixed value);
void bignum_value2_alloc(LocalRoot local, addr *ret, int sign, fixed high, fixed low);
void bignum_zero_alloc(LocalRoot local, addr *ret);
void bignum_fixnum_alloc(LocalRoot local, addr *ret, addr value);
void bignum_fixnum_value_alloc(LocalRoot local, addr *ret, fixnum value);
int bignum_counter_alloc_(LocalRoot local, addr *ret, addr index);
void bignum_result_alloc(LocalRoot local, addr pos, addr *ret);
int bignum_integer_alloc_(LocalRoot local, addr *ret, addr pos);
#define bignum_heap(r,a,b) bignum_alloc(NULL,(r),(a),(b))
#define bignum_cons_heap(r,a,b) bignum_cons_alloc(NULL,(r),(a),(b))
#define bignum_copy_nosign_heap(r,a) bignum_copy_nosign_alloc(NULL,(r),(a))
#define bignum_copy_heap(r,a) bignum_copy_alloc(NULL,(r),(a))
#define bignum_value_heap(r,s,v) bignum_value_alloc(NULL,(r),(s),(v))
#define bignum_value2_heap(r,a,b,c) bignum_value2_alloc(NULL,(r),(a),(b),(c))
#define bignum_zero_heap(r) bignum_zero_alloc(NULL,(r))
#define bignum_fixnum_heap(r,v) bignum_fixnum_alloc(NULL,(r),(v))
#define bignum_fixnum_value_heap(r,v) bignum_fixnum_value_alloc(NULL,(r),(v))
#define bignum_counter_heap_(r,a) bignum_counter_alloc_(NULL,(r),(a))
#define bignum_result_heap(p,r) bignum_result_alloc(NULL,(p),(r))
#define bignum_integer_heap_(p,r) bignum_integer_alloc_(NULL,(p),(r))

void bignum_debug(LocalRoot local, addr *ret, int sign, size_t size);
void bignum_cons_debug(LocalRoot local, addr *ret, int sign, addr cons);
void bignum_copy_nosign_debug(LocalRoot local, addr *ret, addr right);
void bignum_copy_debug(LocalRoot local, addr *ret, addr right);
void bignum_value_debug(LocalRoot local, addr *ret, int sign, fixed value);
void bignum_value2_debug(LocalRoot local, addr *ret, int sign, fixed high, fixed low);
void bignum_zero_debug(LocalRoot local, addr *ret);
void bignum_fixnum_debug(LocalRoot local, addr *ret, addr value);
void bignum_fixnum_value_debug(LocalRoot local, addr *ret, fixnum value);
int bignum_counter_debug_(LocalRoot local, addr *ret, addr index);
void bignum_result_debug(LocalRoot local, addr pos, addr *ret);
int bignum_integer_debug_(LocalRoot local, addr *ret, addr pos);

void getfixed_bignum(addr pos, size_t index, fixed *value);
fixed reffixed_bignum(addr pos, size_t index);
void setfixed_bignum(addr pos, size_t index, fixed value);
void diet_bignum(LocalRoot local, addr pos);
void sizepress_bignum(addr left);
void copy_bignum(LocalRoot local, addr left, addr right, int force);
void copy_noexpand_bignum(addr left, addr right);
void setvalue_bignum(addr left, int sign, fixed value);
void setzero_bignum(addr left);
int getbit_bignum(addr pos, size_t index);
void incf_bignum(addr pos, fixed value);
void decf_bignum(addr pos, fixed value);

void bignum_throw_heap(addr pos, addr *ret);
void bignum_throw_local(LocalRoot local, addr pos, addr *ret);
void bignum_throw_alloc(LocalRoot local, addr pos, addr *ret);
void fixnum_throw_heap(addr pos, addr *ret);
void fixnum_throw_local(LocalRoot local, addr pos, addr *ret);
void fixnum_throw_alloc(LocalRoot local, addr pos, addr *ret);

void castfixed(fixnum value, int *sign, fixed *result);
void castfixed_fixnum(addr pos, int *sign, fixed *result);
int castfixed_integer(addr value, int *sign, fixed *result);

#endif


/************************************************************
 *  float_object.h
 ************************************************************/
#ifndef __FLOAT_OBJECT_HEADER__
#define __FLOAT_OBJECT_HEADER__


#define fltclassify _n(fltclassify)
#define float_fltclass_ _n(float_fltclass_)
#define single_float_check_alloc_ _n(single_float_check_alloc_)
#define single_float_check_local_ _n(single_float_check_local_)
#define single_float_check_heap_ _n(single_float_check_heap_)
#define double_float_check_local_ _n(double_float_check_local_)
#define double_float_check_alloc_ _n(double_float_check_alloc_)
#define double_float_check_heap_ _n(double_float_check_heap_)
#define long_float_check_alloc_ _n(long_float_check_alloc_)
#define long_float_check_local_ _n(long_float_check_local_)
#define long_float_check_heap_ _n(long_float_check_heap_)
#define single_float_throw_heap _n(single_float_throw_heap)
#define double_float_throw_heap _n(double_float_throw_heap)
#define long_float_throw_heap _n(long_float_throw_heap)
#define single_float_throw_local _n(single_float_throw_local)
#define double_float_throw_local _n(double_float_throw_local)
#define long_float_throw_local _n(long_float_throw_local)
#define single_float_throw_alloc _n(single_float_throw_alloc)
#define double_float_throw_alloc _n(double_float_throw_alloc)
#define long_float_throw_alloc _n(long_float_throw_alloc)
#define float_throw_heap_ _n(float_throw_heap_)
#define float_throw_local_ _n(float_throw_local_)
#define float_throw_alloc_ _n(float_throw_alloc_)
#define float_copy_alloc _n(float_copy_alloc)
#define float_copy_local _n(float_copy_local)
#define float_copy_heap _n(float_copy_heap)
#define check_strtof_ _n(check_strtof_)
#define check_strtod_ _n(check_strtod_)
#define check_strtold_ _n(check_strtold_)
#define check_strtof_reverse_ _n(check_strtof_reverse_)
#define check_strtod_reverse_ _n(check_strtod_reverse_)
#define check_strtold_reverse_ _n(check_strtold_reverse_)
#define abs_floats_alloc _n(abs_floats_alloc)
#define abs_floatd_alloc _n(abs_floatd_alloc)
#define abs_floatl_alloc _n(abs_floatl_alloc)
#define abs_floats_local _n(abs_floats_local)
#define abs_floatd_local _n(abs_floatd_local)
#define abs_floatl_local _n(abs_floatl_local)
#define abs_floats_heap _n(abs_floats_heap)
#define abs_floatd_heap _n(abs_floatd_heap)
#define abs_floatl_heap _n(abs_floatl_heap)
#define cast_sd_float_ _n(cast_sd_float_)
#define cast_sl_float_ _n(cast_sl_float_)
#define cast_ds_float_ _n(cast_ds_float_)
#define cast_dl_float_ _n(cast_dl_float_)
#define cast_ls_float_ _n(cast_ls_float_)
#define cast_ld_float_ _n(cast_ld_float_)
#define cast_sd_value_ _n(cast_sd_value_)
#define cast_sl_value_ _n(cast_sl_value_)
#define cast_ds_value_ _n(cast_ds_value_)
#define cast_dl_value_ _n(cast_dl_value_)
#define cast_ls_value_ _n(cast_ls_value_)
#define cast_ld_value_ _n(cast_ld_value_)
#define cast_ss_value_ _n(cast_ss_value_)
#define cast_dd_value_ _n(cast_dd_value_)
#define cast_ll_value_ _n(cast_ll_value_)
#define sqrt_float_alloc_ _n(sqrt_float_alloc_)
#define sqrt_float_local_ _n(sqrt_float_local_)
#define sqrt_float_heap_ _n(sqrt_float_heap_)
#define fpclassify_float _n(fpclassify_float)

enum fltclass {
	fltclass_normal,
	fltclass_overflow,
	fltclass_underflow,
	fltclass_nan
};
#ifdef __cplusplus
typedef int fltclasstype;
#else
typedef enum fltclass fltclasstype;
#endif

fltclasstype fltclassify(int check, int sign);
int float_fltclass_(constindex index, fltclasstype type, ...);
#define getfltclassify(v) fltclassify(fpclassify(v), signbit(v))
#define getfltclassify_reverse(v) fltclassify(fpclassify(v), (! signbit(v)))

#define Return_float_errorcheck0(index, v) { \
	fltclasstype __type = getfltclassify(v); \
	if (__type != fltclass_normal) { \
		Return(float_fltclass_((index), __type, NULL)); \
	} \
}
#define Return_float_errorcheck1(index, v, left) { \
	fltclasstype __type = getfltclassify(v); \
	if (__type != fltclass_normal) { \
		Return(float_fltclass_((index), __type, (left), NULL)); \
	} \
}
#define Return_float_errorcheck2(index, v, left, right) { \
	fltclasstype __type = getfltclassify(v); \
	if (__type != fltclass_normal) { \
		Return(float_fltclass_((index), __type, (left), (right), NULL)); \
	} \
}

int single_float_check_alloc_(LocalRoot local, addr *ret, single_float value);
int single_float_check_local_(LocalRoot local, addr *ret, single_float value);
int single_float_check_heap_(addr *ret, single_float value);
int double_float_check_local_(LocalRoot local, addr *ret, double_float value);
int double_float_check_alloc_(LocalRoot local, addr *ret, double_float value);
int double_float_check_heap_(addr *ret, double_float value);
int long_float_check_alloc_(LocalRoot local, addr *ret, long_float value);
int long_float_check_local_(LocalRoot local, addr *ret, long_float value);
int long_float_check_heap_(addr *ret, long_float value);

void single_float_throw_heap(addr pos, addr *ret);
void double_float_throw_heap(addr pos, addr *ret);
void long_float_throw_heap(addr pos, addr *ret);
void single_float_throw_local(LocalRoot local, addr pos, addr *ret);
void double_float_throw_local(LocalRoot local, addr pos, addr *ret);
void long_float_throw_local(LocalRoot local, addr pos, addr *ret);
void single_float_throw_alloc(LocalRoot local, addr pos, addr *ret);
void double_float_throw_alloc(LocalRoot local, addr pos, addr *ret);
void long_float_throw_alloc(LocalRoot local, addr pos, addr *ret);

int float_throw_heap_(addr pos, addr *ret);
int float_throw_local_(LocalRoot local, addr pos, addr *ret);
int float_throw_alloc_(LocalRoot local, addr pos, addr *ret);
#define float_result_heap_ float_throw_heap_
#define float_result_local_ float_throw_local_
#define float_result_alloc_ float_throw_alloc_
void float_copy_alloc(LocalRoot local, addr pos, addr *ret);
void float_copy_local(LocalRoot local, addr pos, addr *ret);
void float_copy_heap(addr pos, addr *ret);

int check_strtof_(const char *str, addr pos, single_float *ret);
int check_strtod_(const char *str, addr pos, double_float *ret);
int check_strtold_(const char *str, addr pos, long_float *ret);
int check_strtof_reverse_(const char *str, addr pos, single_float *ret);
int check_strtod_reverse_(const char *str, addr pos, double_float *ret);
int check_strtold_reverse_(const char *str, addr pos, long_float *ret);

void abs_floats_alloc(LocalRoot local, addr left, addr *ret);
void abs_floatd_alloc(LocalRoot local, addr left, addr *ret);
void abs_floatl_alloc(LocalRoot local, addr left, addr *ret);
void abs_floats_local(LocalRoot local, addr left, addr *ret);
void abs_floatd_local(LocalRoot local, addr left, addr *ret);
void abs_floatl_local(LocalRoot local, addr left, addr *ret);
void abs_floats_heap(addr left, addr *ret);
void abs_floatd_heap(addr left, addr *ret);
void abs_floatl_heap(addr left, addr *ret);

int cast_sd_float_(single_float v, double_float *ret);
int cast_sl_float_(single_float v, long_float *ret);
int cast_ds_float_(double_float v, single_float *ret);
int cast_dl_float_(double_float v, long_float *ret);
int cast_ls_float_(long_float v, single_float *ret);
int cast_ld_float_(long_float v, double_float *ret);
#define cast_ss_float(x,y) (*(y) = (x))
#define cast_dd_float(x,y) (*(y) = (x))
#define cast_ll_float(x,y) (*(y) = (x))

int cast_sd_value_(addr pos, double_float *ret);
int cast_sl_value_(addr pos, long_float *ret);
int cast_ds_value_(addr pos, single_float *ret);
int cast_dl_value_(addr pos, long_float *ret);
int cast_ls_value_(addr pos, single_float *ret);
int cast_ld_value_(addr pos, double_float *ret);
int cast_ss_value_(addr pos, single_float *ret);
int cast_dd_value_(addr pos, double_float *ret);
int cast_ll_value_(addr pos, long_float *ret);

int sqrt_float_alloc_(LocalRoot local, addr left, addr *ret);
int sqrt_float_local_(LocalRoot local, addr left, addr *ret);
int sqrt_float_heap_(LocalRoot local, addr left, addr *ret);

void fpclassify_float(addr var, addr *rtype, addr *rsign);

#endif


/************************************************************
 *  ratio.h
 ************************************************************/
#ifndef __RATIO_HEADER__
#define __RATIO_HEADER__


#define ratiop _n(ratiop)
#define setnumer_ratio _n(setnumer_ratio)
#define getnumer_ratio _n(getnumer_ratio)
#define setdenom_ratio _n(setdenom_ratio)
#define getdenom_ratio _n(getdenom_ratio)
#define setsign_ratio _n(setsign_ratio)
#define getsign_ratio _n(getsign_ratio)
#define refsign_ratio _n(refsign_ratio)
#define getfixnum_ratio _n(getfixnum_ratio)
#define getfixed1_ratio _n(getfixed1_ratio)
#define euclidean_bignum _n(euclidean_bignum)
#define reduction_local _n(reduction_local)
#define ratio_noreduction_heap _n(ratio_noreduction_heap)
#define ratio_noreduction_local _n(ratio_noreduction_local)
#define ratio_reduction_nocopy_local _n(ratio_reduction_nocopy_local)
#define make_ratio_reduction_heap _n(make_ratio_reduction_heap)
#define make_ratio_reduction_local _n(make_ratio_reduction_local)
#define make_ratio_heap _n(make_ratio_heap)
#define make_ratio_local _n(make_ratio_local)
#define make_ratio_alloc _n(make_ratio_alloc)
#define make_ratio_alloc_unsafe _n(make_ratio_alloc_unsafe)
#define ratio_reduction_heap _n(ratio_reduction_heap)
#define ratio_reduction_local _n(ratio_reduction_local)
#define ratio_reduction_value_local _n(ratio_reduction_value_local)
#define ratio_reduction_value_heap _n(ratio_reduction_value_heap)
#define ratio_noreduction_value_local _n(ratio_noreduction_value_local)
#define ratio_noreduction_value_heap _n(ratio_noreduction_value_heap)
#define ratio_zero_alloc _n(ratio_zero_alloc)
#define ratio_zero_local _n(ratio_zero_local)
#define ratio_zero_heap _n(ratio_zero_heap)
#define ratio_copy_nosign_alloc _n(ratio_copy_nosign_alloc)
#define ratio_copy_nosign_local _n(ratio_copy_nosign_local)
#define ratio_copy_nosign_heap _n(ratio_copy_nosign_heap)
#define ratio_copy_alloc _n(ratio_copy_alloc)
#define ratio_copy_local _n(ratio_copy_local)
#define ratio_copy_heap _n(ratio_copy_heap)
#define ratio_throw_heap _n(ratio_throw_heap)
#define ratio_throw_local _n(ratio_throw_local)
#define ratio_throw_alloc _n(ratio_throw_alloc)
#define ratio_result_noreduction_local _n(ratio_result_noreduction_local)
#define ratio_result_noreduction_heap _n(ratio_result_noreduction_heap)
#define zerop_ratio _n(zerop_ratio)
#define plusp_ratio _n(plusp_ratio)
#define minusp_ratio _n(minusp_ratio)
#define cast_fixnum_ratio_local _n(cast_fixnum_ratio_local)
#define cast_bignum_ratio_local _n(cast_bignum_ratio_local)
#define single_float_ratio_ _n(single_float_ratio_)
#define double_float_ratio_ _n(double_float_ratio_)
#define long_float_ratio_ _n(long_float_ratio_)
#define single_float_ratio_alloc_ _n(single_float_ratio_alloc_)
#define single_float_ratio_local_ _n(single_float_ratio_local_)
#define single_float_ratio_heap_ _n(single_float_ratio_heap_)
#define double_float_ratio_alloc_ _n(double_float_ratio_alloc_)
#define double_float_ratio_local_ _n(double_float_ratio_local_)
#define double_float_ratio_heap_ _n(double_float_ratio_heap_)
#define long_float_ratio_alloc_ _n(long_float_ratio_alloc_)
#define long_float_ratio_local_ _n(long_float_ratio_local_)
#define long_float_ratio_heap_ _n(long_float_ratio_heap_)
#define abs_ratio_alloc _n(abs_ratio_alloc)
#define abs_ratio_local _n(abs_ratio_local)
#define abs_ratio_heap _n(abs_ratio_heap)
#define output_nosign_ratio_ _n(output_nosign_ratio_)

#define SetNumerRatio_Low(p,v) SetArrayA2((p),0,(v))
#define GetNumerRatio_Low(p,v) GetArrayA2((p),0,(v))
#define SetDenomRatio_Low(p,v) SetArrayA2((p),1,(v))
#define GetDenomRatio_Low(p,v) GetArrayA2((p),1,(v))
#define SetSignRatio_Low(p,v) SetUser((p), (byte)(v))
#define GetSignRatio_Low(p,v) (*(v) = (int)GetUser(p))
#define RefSignRatio_Low(p)   ((int)GetUser(p))

#ifdef LISP_DEBUG
#define SetNumerRatio setnumer_ratio
#define GetNumerRatio getnumer_ratio
#define SetDenomRatio setdenom_ratio
#define GetDenomRatio getdenom_ratio
#define SetSignRatio setsign_ratio
#define GetSignRatio getsign_ratio
#define RefSignRatio refsign_ratio
#else
#define SetNumerRatio SetNumerRatio_Low
#define GetNumerRatio GetNumerRatio_Low
#define SetDenomRatio SetDenomRatio_Low
#define GetDenomRatio GetDenomRatio_Low
#define SetSignRatio SetSignRatio_Low
#define GetSignRatio GetSignRatio_Low
#define RefSignRatio RefSignRatio_Low
#endif

int ratiop(addr pos);
void setnumer_ratio(addr pos, addr value);
void getnumer_ratio(addr pos, addr *ret);
void setdenom_ratio(addr pos, addr value);
void getdenom_ratio(addr pos, addr *ret);
void setsign_ratio(addr pos, int sign);
void getsign_ratio(addr pos, int *ret);
int refsign_ratio(addr pos);
int getfixnum_ratio(addr pos, fixnum *ret);
int getfixed1_ratio(addr pos, int *sign, fixed *ret);

void euclidean_bignum(LocalRoot local, addr numer, addr denom);
void reduction_local(LocalRoot local, addr numer, addr denom);
void ratio_noreduction_heap(addr *ret, int sign, addr numer, addr denom);
void ratio_noreduction_local(LocalRoot local,
		addr *ret, int sign, addr numer, addr denom);
void ratio_reduction_nocopy_local(LocalRoot local,
		addr *ret, int sign, addr numer, addr denom);
void make_ratio_reduction_heap(LocalRoot local,
		addr *ret, int sign, addr numer, addr denom);
void make_ratio_reduction_local(LocalRoot local,
		addr *ret, int sign, addr numer, addr denom);
void make_ratio_heap(addr *ret, int sign, addr numer, addr denom);
void make_ratio_local(LocalRoot local,
		addr *ret, int sign, addr numer, addr denom);
void make_ratio_alloc(LocalRoot local,
		addr *ret, int sign, addr numer, addr denom);
void make_ratio_alloc_unsafe(LocalRoot local,
		addr *ret, int sign, addr numer, addr denom);
void ratio_reduction_heap(LocalRoot local,
		addr *ret, int sign, addr numer, addr denom);
void ratio_reduction_local(LocalRoot local,
		addr *ret, int sign, addr numer, addr denom);

void ratio_reduction_value_local(LocalRoot local, addr *ret,
		int sign, fixed numer, fixed denom);
void ratio_reduction_value_heap(LocalRoot local, addr *ret,
		int sign, fixed numer, fixed denom);
void ratio_noreduction_value_local(LocalRoot local, addr *ret,
		int sign, fixed numer, fixed denom);
void ratio_noreduction_value_heap(addr *ret,
		int sign, fixed numer, fixed denom);

void ratio_zero_alloc(LocalRoot local, addr *ret);
void ratio_zero_local(LocalRoot local, addr *ret);
void ratio_zero_heap(addr *ret);

void ratio_copy_nosign_alloc(LocalRoot local, addr *ret, addr pos);
void ratio_copy_nosign_local(LocalRoot local, addr *ret, addr pos);
void ratio_copy_nosign_heap(addr *ret, addr pos);
void ratio_copy_alloc(LocalRoot local, addr *ret, addr pos);
void ratio_copy_local(LocalRoot local, addr *ret, addr pos);
void ratio_copy_heap(addr *ret, addr pos);
void ratio_throw_heap(addr pos, addr *ret);
void ratio_throw_local(LocalRoot local, addr pos, addr *ret);
void ratio_throw_alloc(LocalRoot local, addr pos, addr *ret);
void ratio_result_noreduction_local(LocalRoot local, addr pos, addr *ret);
void ratio_result_noreduction_heap(LocalRoot local, addr pos, addr *ret);

int zerop_ratio(addr left);
int plusp_ratio(addr left);
int minusp_ratio(addr left);

void cast_fixnum_ratio_local(LocalRoot local, addr pos, addr *ret);
void cast_bignum_ratio_local(LocalRoot local, addr pos, addr *ret);

int single_float_ratio_(addr pos, single_float *ret);
int double_float_ratio_(addr pos, double_float *ret);
int long_float_ratio_(addr pos, long_float *ret);

int single_float_ratio_alloc_(LocalRoot local, addr *ret, addr pos);
int single_float_ratio_local_(LocalRoot local, addr *ret, addr pos);
int single_float_ratio_heap_(addr *ret, addr pos);
int double_float_ratio_alloc_(LocalRoot local, addr *ret, addr pos);
int double_float_ratio_local_(LocalRoot local, addr *ret, addr pos);
int double_float_ratio_heap_(addr *ret, addr pos);
int long_float_ratio_alloc_(LocalRoot local, addr *ret, addr pos);
int long_float_ratio_local_(LocalRoot local, addr *ret, addr pos);
int long_float_ratio_heap_(addr *ret, addr pos);

void abs_ratio_alloc(LocalRoot local, addr left, addr *ret);
void abs_ratio_local(LocalRoot local, addr left, addr *ret);
void abs_ratio_heap(addr left, addr *ret);

int output_nosign_ratio_(LocalRoot local,
		addr stream, addr pos, unsigned base, int upperp);

#endif


/************************************************************
 *  ratio_equal.h
 ************************************************************/
#ifndef __RATIO_EQUAL_HEADER__
#define __RATIO_EQUAL_HEADER__


#define equal_value_nosign_ratio _n(equal_value_nosign_ratio)
#define equal_value_ratio _n(equal_value_ratio)
#define equal_fr_real _n(equal_fr_real)
#define equal_br_real _n(equal_br_real)
#define equal_rr_real _n(equal_rr_real)
#define equal_rs_real_ _n(equal_rs_real_)
#define equal_rd_real_ _n(equal_rd_real_)
#define equal_rl_real_ _n(equal_rl_real_)
#define compare_fr_real _n(compare_fr_real)
#define compare_rf_real _n(compare_rf_real)
#define compare_br_real _n(compare_br_real)
#define compare_rb_real _n(compare_rb_real)
#define compare_rr_real _n(compare_rr_real)
#define compare_rs_real_ _n(compare_rs_real_)
#define compare_rd_real_ _n(compare_rd_real_)
#define compare_rl_real_ _n(compare_rl_real_)
#define compare_sr_real_ _n(compare_sr_real_)
#define compare_dr_real_ _n(compare_dr_real_)
#define compare_lr_real_ _n(compare_lr_real_)

int equal_value_nosign_ratio(addr pos, fixed numer, fixed denom);
int equal_value_ratio(addr pos, int sign, fixed numer, fixed denom);
int equal_fr_real(addr left, addr right);
int equal_br_real(addr left, addr right);
#define equal_rf_real(a,b) equal_fr_real((b),(a))
#define equal_rb_real(a,b) equal_br_real((b),(a))
int equal_rr_real(addr left, addr right);
int equal_rs_real_(LocalRoot local, addr left, addr right, int *ret);
int equal_rd_real_(LocalRoot local, addr left, addr right, int *ret);
int equal_rl_real_(LocalRoot local, addr left, addr right, int *ret);
#define equal_sr_real_(m,a,b,r) equal_rs_real_((m),(b),(a),(r))
#define equal_dr_real_(m,a,b,r) equal_rd_real_((m),(b),(a),(r))
#define equal_lr_real_(m,a,b,r) equal_rl_real_((m),(b),(a),(r))

int compare_fr_real(LocalRoot local, addr left, addr right);
int compare_rf_real(LocalRoot local, addr left, addr right);
int compare_br_real(LocalRoot local, addr left, addr right);
int compare_rb_real(LocalRoot local, addr left, addr right);
int compare_rr_real(LocalRoot local, addr left, addr right);
int compare_rs_real_(LocalRoot local, addr left, addr right, int *ret);
int compare_rd_real_(LocalRoot local, addr left, addr right, int *ret);
int compare_rl_real_(LocalRoot local, addr left, addr right, int *ret);
int compare_sr_real_(LocalRoot local, addr left, addr right, int *ret);
int compare_dr_real_(LocalRoot local, addr left, addr right, int *ret);
int compare_lr_real_(LocalRoot local, addr left, addr right, int *ret);

#endif


/************************************************************
 *  symbol.h
 ************************************************************/
#ifndef __SYMBOL_HEADER__
#define __SYMBOL_HEADER__


#define init_symbol _n(init_symbol)
#define free_symbol _n(free_symbol)
#define build_symbol _n(build_symbol)
#define symbol_heap _n(symbol_heap)
#define symbolp _n(symbolp)
#define keywordp _n(keywordp)
#define getname_symbol _n(getname_symbol)
#define setname_symbol _n(setname_symbol)
#define getvalue_symbol _n(getvalue_symbol)
#define setvalue_symbol _n(setvalue_symbol)
#define setvalue_symbol_ _n(setvalue_symbol_)
#define getfunction_symbol _n(getfunction_symbol)
#define setfunction_symbol _n(setfunction_symbol)
#define setfunction_symbol_ _n(setfunction_symbol_)
#define getpackage_symbol _n(getpackage_symbol)
#define setpackage_symbol _n(setpackage_symbol)
#define getplist_symbol _n(getplist_symbol)
#define setplist_symbol _n(setplist_symbol)
#define gettype_value_symbol _n(gettype_value_symbol)
#define settype_value_symbol _n(settype_value_symbol)
#define settype_value_symbol_ _n(settype_value_symbol_)
#define remtype_value_symbol _n(remtype_value_symbol)
#define gettype_function_symbol _n(gettype_function_symbol)
#define settype_function_symbol _n(settype_function_symbol)
#define settype_function_symbol_ _n(settype_function_symbol_)
#define remtype_function_symbol_ _n(remtype_function_symbol_)
#define gettype_setf_symbol _n(gettype_setf_symbol)
#define settype_setf_symbol _n(settype_setf_symbol)
#define settype_setf_symbol_ _n(settype_setf_symbol_)
#define remtype_setf_symbol_ _n(remtype_setf_symbol_)
#define inlinep_function_symbol _n(inlinep_function_symbol)
#define setinline_function_symbol _n(setinline_function_symbol)
#define notinlinep_function_symbol _n(notinlinep_function_symbol)
#define setnotinline_function_symbol _n(setnotinline_function_symbol)
#define reminline_function_symbol _n(reminline_function_symbol)
#define inlinep_setf_symbol _n(inlinep_setf_symbol)
#define setinline_setf_symbol _n(setinline_setf_symbol)
#define notinlinep_setf_symbol _n(notinlinep_setf_symbol)
#define setnotinline_setf_symbol _n(setnotinline_setf_symbol)
#define reminline_setf_symbol _n(reminline_setf_symbol)
#define getsetf_symbol _n(getsetf_symbol)
#define setsetf_symbol _n(setsetf_symbol)
#define setsetf_symbol_ _n(setsetf_symbol_)
#define remsetf_symbol _n(remsetf_symbol)
#define getsetfmacro_symbol _n(getsetfmacro_symbol)
#define setsetfmacro_symbol _n(setsetfmacro_symbol)
#define setsetfmacro_symbol_ _n(setsetfmacro_symbol_)
#define remsetfmacro_symbol _n(remsetfmacro_symbol)
#define getmacro_symbol _n(getmacro_symbol)
#define setmacro_symbol _n(setmacro_symbol)
#define setmacro_symbol_ _n(setmacro_symbol_)
#define remmacro_symbol _n(remmacro_symbol)
#define getsymbol_macro_symbol _n(getsymbol_macro_symbol)
#define setsymbol_macro_symbol_ _n(setsymbol_macro_symbol_)
#define remsymbol_macro_symbol _n(remsymbol_macro_symbol)
#define get_compiler_macro_symbol _n(get_compiler_macro_symbol)
#define set_compiler_macro_symbol_ _n(set_compiler_macro_symbol_)
#define rem_compiler_macro_symbol_ _n(rem_compiler_macro_symbol_)
#define get_setf_compiler_macro_symbol _n(get_setf_compiler_macro_symbol)
#define set_setf_compiler_macro_symbol_ _n(set_setf_compiler_macro_symbol_)
#define rem_setf_compiler_macro_symbol_ _n(rem_setf_compiler_macro_symbol_)
#define getscope_symbol _n(getscope_symbol)
#define setspecial_symbol _n(setspecial_symbol)
#define setspecial_symbol_ _n(setspecial_symbol_)
#define setlexical_symbol _n(setlexical_symbol)
#define specialp_symbol _n(specialp_symbol)
#define lexicalp_symbol _n(lexicalp_symbol)
#define set_special_operator _n(set_special_operator)
#define get_special_operator _n(get_special_operator)
#define getdocument_variable_symbol _n(getdocument_variable_symbol)
#define setdocument_variable_symbol _n(setdocument_variable_symbol)
#define getdocument_type_symbol _n(getdocument_type_symbol)
#define setdocument_type_symbol _n(setdocument_type_symbol)
#define getdeftype_symbol _n(getdeftype_symbol)
#define setdeftype_symbol_ _n(setdeftype_symbol_)
#define remdeftype_symbol _n(remdeftype_symbol)
#define getsymboltype_symbol _n(getsymboltype_symbol)
#define setsymboltype_symbol _n(setsymboltype_symbol)
#define getlisttype_symbol _n(getlisttype_symbol)
#define setlisttype_symbol _n(setlisttype_symbol)
#define getclass_symbol _n(getclass_symbol)
#define setclass_symbol _n(setclass_symbol)
#define remclass_symbol _n(remclass_symbol)
#define getstructure_symbol _n(getstructure_symbol)
#define setstructure_symbol _n(setstructure_symbol)
#define remstructure_symbol _n(remstructure_symbol)
#define getcombination_symbol _n(getcombination_symbol)
#define setcombination_symbol _n(setcombination_symbol)
#define getspecial_unsafe _n(getspecial_unsafe)
#define setspecial_unsafe _n(setspecial_unsafe)
#define getspecial_local _n(getspecial_local)
#define getspecialcheck_local_ _n(getspecialcheck_local_)
#define setspecial_local _n(setspecial_local)
#define getfunction_global_ _n(getfunction_global_)
#define getsetf_global_ _n(getsetf_global_)
#define alldelete_function_ _n(alldelete_function_)
#define gensymp _n(gensymp)
#define make_symbolchar _n(make_symbolchar)
#define make_gensym_ _n(make_gensym_)
#define make_gensym_prefix_ _n(make_gensym_prefix_)
#define make_gensym_integer_ _n(make_gensym_integer_)
#define make_gensym_char_ _n(make_gensym_char_)
#define setcounter_gensym _n(setcounter_gensym)

#define GetNameSymbol_Low(s,v)      GetArrayA2((s), SYMBOL_INDEX_NAME, (v))
#define SetNameSymbol_Low(s,v)      SetArrayA2((s), SYMBOL_INDEX_NAME, (v))
#define GetValueSymbol_Low(s,v)     GetArrayA2((s), SYMBOL_INDEX_VALUE, (v))
#define SetValueSymbol_Low(s,v)     SetArrayA2((s), SYMBOL_INDEX_VALUE, (v))
#define GetFunctionSymbol_Low(s,v)  GetArrayA2((s), SYMBOL_INDEX_FUNCTION, (v))
#define SetFunctionSymbol_Low(s,v)  SetArrayA2((s), SYMBOL_INDEX_FUNCTION, (v))
#define GetPackageSymbol_Low(s,v)   GetArrayA2((s), SYMBOL_INDEX_PACKAGE, (v))
#define SetPackageSymbol_Low(s,v)   SetArrayA2_force((s), SYMBOL_INDEX_PACKAGE, (v))
#define GetPlistSymbol_Low(s,v)     GetArrayA2((s), SYMBOL_INDEX_PLIST, (v))
#define SetPlistSymbol_Low(s,v)     SetArrayA2_force((s), SYMBOL_INDEX_PLIST, (v))

#define GetSpecialSymbol_Low(s,v)   GetArrayA2((s), SYMBOL_INDEX_SPECIAL, (v))
#define SetSpecialSymbol_Low(s,v)   SetArrayA2((s), SYMBOL_INDEX_SPECIAL, (v))
#define GetInfoSymbol_Low(s,v)      GetArrayA2((s), SYMBOL_INDEX_INFO, (v))
#define SetInfoSymbol_Low(s,v)      SetArrayA2_force((s), SYMBOL_INDEX_INFO, (v))

#ifdef LISP_DEBUG
#define GetNameSymbol(s,v)          getname_symbol((s), (v))
#define SetNameSymbol(s,v)          setname_symbol((s), (v))
#define GetFunctionSymbol(s,v)      getfunction_symbol((s), (v))
#define SetFunctionSymbol(s,v)      setfunction_symbol((s), (v))
#define GetPackageSymbol(s,v)       getpackage_symbol((s), (v))
#define SetPackageSymbol(s,v)       setpackage_symbol((s), (v))
#define GetPlistSymbol(s,v)         getplist_symbol((s), (v))
#define SetPlistSymbol(s,v)         setplist_symbol((s), (v))
#else
#define GetNameSymbol(s,v)          GetNameSymbol_Low(s,v)
#define SetNameSymbol(s,v)          SetNameSymbol_Low(s,v)
#define GetFunctionSymbol(s,v)      GetFunctionSymbol_Low(s,v)
#define SetFunctionSymbol(s,v)      SetFunctionSymbol_Low(s,v)
#define GetPackageSymbol(s,v)       GetPackageSymbol_Low(s,v)
#define SetPackageSymbol(s,v)       SetPackageSymbol_Low(s,v)
#define GetPlistSymbol(s,v)         GetPlistSymbol_Low(s,v)
#define SetPlistSymbol(s,v)         SetPlistSymbol_Low(s,v)
#endif

#define GetValueSymbol(s,v)         getvalue_symbol((s), (v))
#define SetValueSymbol(s,v)         setvalue_symbol((s), (v))

int init_symbol(void);
void free_symbol(void);
void build_symbol(void);

void symbol_heap(addr *ret);
int symbolp(addr pos);
int keywordp(addr pos);

void getname_symbol(addr symbol, addr *ret);
void setname_symbol(addr symbol, addr value);
void getvalue_symbol(addr symbol, addr *ret);
void setvalue_symbol(addr symbol, addr value);
int setvalue_symbol_(addr symbol, addr value);
void getfunction_symbol(addr symbol, addr *ret);
void setfunction_symbol(addr symbol, addr value);
int setfunction_symbol_(addr symbol, addr value);
void getpackage_symbol(addr symbol, addr *ret);
void setpackage_symbol(addr symbol, addr value);
void getplist_symbol(addr symbol, addr *ret);
void setplist_symbol(addr symbol, addr value);

void gettype_value_symbol(addr symbol, addr *ret);
void settype_value_symbol(addr symbol, addr value);
int settype_value_symbol_(addr symbol, addr value);
void remtype_value_symbol(addr symbol);

void gettype_function_symbol(addr symbol, addr *ret);
void settype_function_symbol(addr symbol, addr value);
int settype_function_symbol_(addr symbol, addr value);
int remtype_function_symbol_(addr symbol);

void gettype_setf_symbol(addr symbol, addr *ret);
void settype_setf_symbol(addr symbol, addr value);
int settype_setf_symbol_(addr symbol, addr value);
int remtype_setf_symbol_(addr symbol);

int inlinep_function_symbol(addr symbol);
void setinline_function_symbol(addr symbol);
int notinlinep_function_symbol(addr symbol);
void setnotinline_function_symbol(addr symbol);
void reminline_function_symbol(addr symbol);
int inlinep_setf_symbol(addr symbol);
void setinline_setf_symbol(addr symbol);
int notinlinep_setf_symbol(addr symbol);
void setnotinline_setf_symbol(addr symbol);
void reminline_setf_symbol(addr symbol);

void getsetf_symbol(addr symbol, addr *ret);
void setsetf_symbol(addr symbol, addr value);
int setsetf_symbol_(addr symbol, addr value);
void remsetf_symbol(addr symbol);

void getsetfmacro_symbol(addr symbol, addr *ret);
void setsetfmacro_symbol(addr symbol, addr value);
int setsetfmacro_symbol_(addr symbol, addr value);
void remsetfmacro_symbol(addr symbol);

void getmacro_symbol(addr symbol, addr *ret);
void setmacro_symbol(addr symbol, addr value);
int setmacro_symbol_(addr symbol, addr value);
void remmacro_symbol(addr symbol);

void getsymbol_macro_symbol(addr symbol, addr *ret);
int setsymbol_macro_symbol_(addr symbol, addr value);
void remsymbol_macro_symbol(addr symbol);

void get_compiler_macro_symbol(addr symbol, addr *ret);
int set_compiler_macro_symbol_(addr symbol, addr value);
int rem_compiler_macro_symbol_(addr symbol);
void get_setf_compiler_macro_symbol(addr symbol, addr *ret);
int set_setf_compiler_macro_symbol_(addr symbol, addr value);
int rem_setf_compiler_macro_symbol_(addr symbol);

void getscope_symbol(addr symbol, addr *ret);
void setspecial_symbol(addr symbol);
int setspecial_symbol_(addr symbol);
void setlexical_symbol(addr symbol);
int specialp_symbol(addr symbol);
int lexicalp_symbol(addr symbol);

void set_special_operator(addr symbol);
int get_special_operator(addr symbol);

void getdocument_variable_symbol(addr symbol, addr *ret);
void setdocument_variable_symbol(addr symbol, addr value);
void getdocument_type_symbol(addr symbol, addr *ret);
void setdocument_type_symbol(addr symbol, addr value);

void getdeftype_symbol(addr symbol, addr *ret);
int setdeftype_symbol_(addr symbol, addr value);
void remdeftype_symbol(addr symbol);

void getsymboltype_symbol(addr symbol, addr *ret);
void setsymboltype_symbol(addr symbol, addr value);
void getlisttype_symbol(addr symbol, addr *ret);
void setlisttype_symbol(addr symbol, addr value);

void getclass_symbol(addr symbol, addr *ret);
void setclass_symbol(addr symbol, addr value);
void remclass_symbol(addr symbol);
void getstructure_symbol(addr symbol, addr *ret);
void setstructure_symbol(addr symbol, addr value);
void remstructure_symbol(addr symbol);
void getcombination_symbol(addr symbol, addr *ret);
void setcombination_symbol(addr symbol, addr value);

/* symstack */
void getspecial_unsafe(Execute ptr, addr pos, addr *ret);
void setspecial_unsafe(Execute ptr, addr pos, addr value);
void getspecial_local(Execute ptr, addr pos, addr *ret);
int getspecialcheck_local_(Execute ptr, addr pos, addr *ret);
void setspecial_local(Execute ptr, addr pos, addr value);

int getfunction_global_(addr pos, addr *ret);
int getsetf_global_(addr pos, addr *ret);
int alldelete_function_(addr pos);

/* gensym */
int gensymp(addr pos);
void make_symbolchar(addr *ret, const char *str);
int make_gensym_(Execute ptr, addr *ret);
int make_gensym_prefix_(Execute ptr, addr prefix, addr *ret);
int make_gensym_integer_(Execute ptr, addr value, addr *ret);
int make_gensym_char_(Execute ptr, const char *str, addr value, addr *ret);
void setcounter_gensym(Execute ptr, fixnum value);

#endif


/************************************************************
 *  control.h
 ************************************************************/
#ifndef __CONTROL_HEADER__
#define __CONTROL_HEADER__


#define init_control _n(init_control)
void init_control(void);

#endif


/************************************************************
 *  cons_list.h
 ************************************************************/
#ifndef __CONS_LIST_HEADER__
#define __CONS_LIST_HEADER__


#define getnth_abort _n(getnth_abort)
#define getnth_ _n(getnth_)
#define getnth_large_ _n(getnth_large_)
#define getnth_unsafe _n(getnth_unsafe)
#define getnth_unbound_unsafe _n(getnth_unbound_unsafe)
#define getnthcdr_ _n(getnthcdr_)
#define getnthcdr_large_ _n(getnthcdr_large_)
#define getnthcdr_unsafe _n(getnthcdr_unsafe)
#define setnth_ _n(setnth_)
#define setnth_unsafe _n(setnth_unsafe)
#define length_list_unsafe _n(length_list_unsafe)
#define length_list_safe_ _n(length_list_safe_)
#define length_list_p _n(length_list_p)
#define nconc2_safe_ _n(nconc2_safe_)
#define nconc2_unsafe _n(nconc2_unsafe)
#define append2_safe_ _n(append2_safe_)
#define append2_heap_unsafe _n(append2_heap_unsafe)
#define append2_local_unsafe _n(append2_local_unsafe)
#define append2_alloc_unsafe _n(append2_alloc_unsafe)
#define butandlast_safe _n(butandlast_safe)
#define setlastcdr_safe_ _n(setlastcdr_safe_)
#define find_list_eq_unsafe _n(find_list_eq_unsafe)
#define find_list_eq_safe_ _n(find_list_eq_safe_)
#define find_list_eql_unsafe _n(find_list_eql_unsafe)
#define find_list_equal_safe_ _n(find_list_equal_safe_)
#define find_list_equal_safe _n(find_list_equal_safe)
#define position_list_eq_unsafe _n(position_list_eq_unsafe)
#define find_assoc_eq_unsafe _n(find_assoc_eq_unsafe)
#define pushnew_alloc _n(pushnew_alloc)
#define pushnew_local _n(pushnew_local)
#define pushnew_heap _n(pushnew_heap)
#define pushnew_equal_heap_ _n(pushnew_equal_heap_)
#define nreconc_unsafe _n(nreconc_unsafe)
#define nreconc_safe_ _n(nreconc_safe_)
#define nreverse_list_unsafe _n(nreverse_list_unsafe)
#define nreverse_list_safe_ _n(nreverse_list_safe_)
#define reverse_list_heap_unsafe _n(reverse_list_heap_unsafe)
#define reverse_list_local_unsafe _n(reverse_list_local_unsafe)
#define reverse_list_alloc_unsafe _n(reverse_list_alloc_unsafe)
#define reverse_list_heap_safe_ _n(reverse_list_heap_safe_)
#define pushnewlist_callname_alloc _n(pushnewlist_callname_alloc)
#define pushnewlist_callname_heap _n(pushnewlist_callname_heap)
#define find_list_callname_unsafe _n(find_list_callname_unsafe)
#define copy_list_heap_unsafe _n(copy_list_heap_unsafe)
#define copy_list_local_unsafe _n(copy_list_local_unsafe)
#define copy_list_alloc_unsafe _n(copy_list_alloc_unsafe)
#define copy_list_heap_safe _n(copy_list_heap_safe)
#define copy_list_local_safe _n(copy_list_local_safe)
#define copy_list_alloc_safe _n(copy_list_alloc_safe)
#define delete_list_eq_unsafe _n(delete_list_eq_unsafe)
#define delete_list_eq_safe _n(delete_list_eq_safe)
#define delete_list_equal_unsafe_ _n(delete_list_equal_unsafe_)
#define delete1_list_eq_unsafe _n(delete1_list_eq_unsafe)
#define remove_list_eq_unsafe_heap _n(remove_list_eq_unsafe_heap)
#define remove_list_eq_unsafe_local _n(remove_list_eq_unsafe_local)
#define remove_list_eq_unsafe_alloc _n(remove_list_eq_unsafe_alloc)
#define remove_list_equal_safe_heap_ _n(remove_list_equal_safe_heap_)

/* nth */
void getnth_abort(addr cons, size_t index, addr *ret);
int getnth_(addr cons, size_t index, addr *ret);
int getnth_large_(addr cons, addr index, addr *ret);
void getnth_unsafe(addr cons, size_t index, addr *ret);
void getnth_unbound_unsafe(addr cons, size_t index, addr *ret);
int getnthcdr_(addr cons, size_t index, addr *ret);
int getnthcdr_large_(addr cons, addr index, addr *ret);
void getnthcdr_unsafe(addr cons, size_t index, addr *ret);
int setnth_(addr cons, size_t index, addr value);
void setnth_unsafe(addr cons, size_t index, addr value);

/* length */
size_t length_list_unsafe(addr list);
int length_list_safe_(addr list, size_t *ret);
int length_list_p(addr list, size_t *ret);

/* list */
int nconc2_safe_(addr left, addr right, addr *ret);
void nconc2_unsafe(addr left, addr right, addr *ret);
int append2_safe_(addr left, addr right, addr *ret);
void append2_heap_unsafe(addr list1, addr list2, addr *ret);
void append2_local_unsafe(LocalRoot local, addr list1, addr list2, addr *ret);
void append2_alloc_unsafe(LocalRoot local, addr list1, addr list2, addr *ret);
void butandlast_safe(addr *but, addr *last, addr list, size_t index);
int setlastcdr_safe_(addr list, addr cdr);

/* find */
int find_list_eq_unsafe(addr key, addr cons);
int find_list_eq_safe_(addr key, addr cons, int *ret);
int find_list_eql_unsafe(addr key, addr cons);
int find_list_equal_safe_(addr key, addr cons, int *ret);
int position_list_eq_unsafe(addr key, addr cons, size_t *ret);
int find_assoc_eq_unsafe(addr key, addr list, addr *ret);

/* pushnew */
int pushnew_alloc(LocalRoot local, addr list, addr value, addr *ret);
int pushnew_local(LocalRoot local, addr list, addr value, addr *ret);
int pushnew_heap(addr list, addr value, addr *ret);
int pushnew_equal_heap_(addr list, addr value, addr *ret);

/* nreverse */
void nreconc_unsafe(addr *ret, addr cons, addr tail);
int nreconc_safe_(addr *ret, addr cons, addr tail);
void nreverse_list_unsafe(addr *ret, addr pos);
int nreverse_list_safe_(addr *ret, addr pos);
#define nreconc nreconc_unsafe
#define nreverse nreverse_list_unsafe

/* reverse */
void reverse_list_heap_unsafe(addr *ret, addr cons);
void reverse_list_local_unsafe(LocalRoot local, addr *ret, addr cons);
void reverse_list_alloc_unsafe(LocalRoot local, addr *ret, addr cons);
int reverse_list_heap_safe_(addr *ret, addr cons);

/* callname */
int pushnewlist_callname_alloc(LocalRoot local, addr list, addr callname, addr *ret);
int pushnewlist_callname_heap(addr list, addr callname, addr *ret);
int find_list_callname_unsafe(addr callname, addr list);

/* copy-list */
void copy_list_heap_unsafe(addr *ret, addr cons);
void copy_list_local_unsafe(LocalRoot local, addr *ret, addr cons);
void copy_list_alloc_unsafe(LocalRoot local, addr *ret, addr cons);
void copy_list_heap_safe(addr *ret, addr cons);
void copy_list_local_safe(LocalRoot local, addr *ret, addr cons);
void copy_list_alloc_safe(LocalRoot local, addr *ret, addr cons);

/* delete / remove */
int delete_list_eq_unsafe(addr key, addr cons, addr *ret);
int delete_list_eq_safe(addr key, addr cons, addr *ret);
int delete_list_equal_unsafe_(addr key, addr cons, addr *root, int *ret);
int delete1_list_eq_unsafe(addr key, addr cons, addr *ret);
void remove_list_eq_unsafe_heap(addr key, addr cons, addr *ret);
void remove_list_eq_unsafe_local(LocalRoot local,
		addr key, addr cons, addr *ret);
void remove_list_eq_unsafe_alloc(LocalRoot local,
		addr key, addr cons, addr *ret);
int remove_list_equal_safe_heap_(addr key, addr cons, addr *ret);

#endif


/************************************************************
 *  array_sequence.h
 ************************************************************/
#ifndef __ARRAY_SEQUENCE_HEADER__
#define __ARRAY_SEQUENCE_HEADER__


#define array_bitcalc_ _n(array_bitcalc_)
#define array_bitnot_ _n(array_bitnot_)
#define array_fill_ _n(array_fill_)
#define array_subseq_ _n(array_subseq_)
#define array_reverse_ _n(array_reverse_)
#define array_nreverse_ _n(array_nreverse_)

int array_bitcalc_(addr *ret, addr pos1, addr pos2, addr opt, bitcalc_call call);
int array_bitnot_(addr *ret, addr pos, addr opt);
int array_fill_(addr pos, addr item, addr start, addr end);
int array_subseq_(addr *ret, addr pos, addr start, addr end);
int array_reverse_(addr *ret, addr pos);
int array_nreverse_(addr *ret, addr pos);

#endif


/************************************************************
 *  copy.h
 ************************************************************/
#ifndef __COPY_HEADER__
#define __COPY_HEADER__


#define copyhard_object _n(copyhard_object)
#define copylocal_object _n(copylocal_object)
#define copylocal_list_stdarg _n(copylocal_list_stdarg)
#define copyheap _n(copyheap)
#define copyheapr _n(copyheapr)
#define init_copy _n(init_copy)

void copyhard_object(LocalRoot local, addr *ret, addr pos);
int copylocal_object(LocalRoot local, addr *ret, addr pos);
void copylocal_list_stdarg(LocalRoot local, addr *ret, va_list args);
int copyheap(addr *ret, addr pos);
addr copyheapr(addr pos);

void init_copy(void);

#endif


/************************************************************
 *  bignum_cons.h
 ************************************************************/
#ifndef __BIGNUM_CONS_HEADER__
#define __BIGNUM_CONS_HEADER__


#define bigcons_local _n(bigcons_local)
#define clear_bigcons _n(clear_bigcons)
#define push_bigcons _n(push_bigcons)
#define setchar_bigcons_ _n(setchar_bigcons_)
#define bigcons_char_local_ _n(bigcons_char_local_)
#define bigcons_char_unsafe _n(bigcons_char_unsafe)
#define bigcons_empty_p _n(bigcons_empty_p)

#define PtrBigbuffer(x) PtrBodyABa(x, 1)
#define StructBigbuffer(x) ((struct bigbuffer *)PtrBigbuffer(x))
#define SetNextBigbuffer(x,v) SetArrayAB(x,0,v)
#define GetNextBigbuffer(x,v) GetArrayAB(x,0,v)

#define PtrBigcons(x)		PtrBodySSa(x, 1)
#define StructBigcons(x)	((struct bigcons_struct *)PtrBigcons(x))
#define SetCountBigcons(x,v) (StructBigcons(x)->size = (v))
#define GetCountBigcons(x,v) (*(v) = StructBigcons(x)->size)
#define IncCountBigcons(x,v) (StructBigcons(x)->size += (v))
#define SetRootBigcons(x,v) SetArraySS(x,0,v)
#define GetRootBigcons(x,v) GetArraySS(x,0,v)

struct bigbuffer {
	size_t count;
	fixed buffer[BIGCONS_SIZE];
};

struct bigcons_struct {
	size_t size;
};

void bigcons_local(LocalRoot local, addr *ret);
void clear_bigcons(addr pos);
void push_bigcons(LocalRoot local, addr pos, unsigned base, unsigned number);
int setchar_bigcons_(LocalRoot local, addr pos, unsigned base, const char *value);
int bigcons_char_local_(LocalRoot local, addr *ret, unsigned base, const char *value);
void bigcons_char_unsafe(LocalRoot local, addr *ret, unsigned base, const char *value);
int bigcons_empty_p(addr pos);

#endif


/************************************************************
 *  heap.h
 ************************************************************/
#ifndef __HEAP_HEADER__
#define __HEAP_HEADER__


#define heap_cons _n(heap_cons)
#define heap_symbol _n(heap_symbol)
#define heap_array2_memory _n(heap_array2_memory)
#define heap_array4_memory _n(heap_array4_memory)
#define heap_body2_memory _n(heap_body2_memory)
#define heap_body4_memory _n(heap_body4_memory)
#define heap_smallsize_memory _n(heap_smallsize_memory)
#define heap_arraybody_memory _n(heap_arraybody_memory)
#define heap_array _n(heap_array)
#define heap_body _n(heap_body)
#define heap_array8 _n(heap_array8)
#define heap_body8 _n(heap_body8)
#define heap_array2_debug _n(heap_array2_debug)
#define heap_array4_debug _n(heap_array4_debug)
#define heap_body2_debug _n(heap_body2_debug)
#define heap_body4_debug _n(heap_body4_debug)
#define heap_smallsize_debug _n(heap_smallsize_debug)
#define heap_arraybody_debug _n(heap_arraybody_debug)
#define init_heap _n(init_heap)

void heap_cons(addr *ret);
void heap_symbol(addr *ret);
void heap_array2_memory(addr *ret, enum LISPTYPE type, byte16 array);
void heap_array4_memory(addr *ret, enum LISPTYPE type, byte32 array);
void heap_body2_memory(addr *ret, enum LISPTYPE type, byte16 body);
void heap_body4_memory(addr *ret, enum LISPTYPE type, byte32 body);
void heap_smallsize_memory(addr *ret, enum LISPTYPE type, byte array, byte body);
void heap_arraybody_memory(addr *ret, enum LISPTYPE type, byte16 array, byte16 body);
void heap_array(addr *ret, enum LISPTYPE type, size_t array);
void heap_body(addr *ret, enum LISPTYPE type, size_t body);
#ifdef LISP_ARCH_64BIT
void heap_array8(addr *ret, enum LISPTYPE type, size_t array);
void heap_body8(addr *ret, enum LISPTYPE type, size_t body);
#endif

#ifdef LISP_DEBUG
void heap_array2_debug(addr *ret, enum LISPTYPE type, size_t array);
void heap_array4_debug(addr *ret, enum LISPTYPE type, size_t array);
void heap_body2_debug(addr *ret, enum LISPTYPE type, size_t body);
void heap_body4_debug(addr *ret, enum LISPTYPE type, size_t body);
void heap_smallsize_debug(addr *ret, enum LISPTYPE type, size_t array, size_t body);
void heap_arraybody_debug(addr *ret, enum LISPTYPE type, size_t array, size_t body);
#define heap_array2 heap_array2_debug
#define heap_array4 heap_array4_debug
#define heap_body2 heap_body2_debug
#define heap_body4 heap_body4_debug
#define heap_smallsize heap_smallsize_debug
#define heap_arraybody heap_arraybody_debug
#else
#define heap_array2(r,t,a) heap_array2_memory((r),(t),(byte16)(a))
#define heap_array4(r,t,a) heap_array4_memory((r),(t),(byte32)(a))
#define heap_body2(r,t,a) heap_body2_memory((r),(t),(byte16)(a))
#define heap_body4(r,t,a) heap_body4_memory((r),(t),(byte32)(a))
#define heap_smallsize(r,t,a,b) heap_smallsize_memory((r),(t),(byte)(a),(byte)(b))
#define heap_arraybody(r,t,a,b) heap_arraybody_memory((r),(t),(byte16)(a),(byte16)(b))
#endif

void init_heap(void);

#endif


/************************************************************
 *  bignum_plus.h
 ************************************************************/
#ifndef __BIGNUM_PLUS_HEADER__
#define __BIGNUM_PLUS_HEADER__


#define plus_fv_bignum_local _n(plus_fv_bignum_local)
#define plus_fv_real_local _n(plus_fv_real_local)
#define plus_fv_real_common _n(plus_fv_real_common)
#define plus_ff_bignum_local _n(plus_ff_bignum_local)
#define plus_ff_real_local _n(plus_ff_real_local)
#define plus_ff_real_common _n(plus_ff_real_common)
#define plus_bv_bignum_local _n(plus_bv_bignum_local)
#define plus_bv_real_local _n(plus_bv_real_local)
#define plus_bv_real_common _n(plus_bv_real_common)
#define plus_bf_bignum_local _n(plus_bf_bignum_local)
#define plus_bf_real_local _n(plus_bf_real_local)
#define plus_bf_real_common _n(plus_bf_real_common)
#define plus_bb_bignum_local _n(plus_bb_bignum_local)
#define plus_bb_real_local _n(plus_bb_real_local)
#define plus_bb_real_common _n(plus_bb_real_common)
#define sigrev_bignum_inplace _n(sigrev_bignum_inplace)
#define sigrev_fixnum_bignum_local _n(sigrev_fixnum_bignum_local)
#define sigrev_fixnum_integer_alloc _n(sigrev_fixnum_integer_alloc)
#define sigrev_fixnum_integer_local _n(sigrev_fixnum_integer_local)
#define sigrev_fixnum_integer_common _n(sigrev_fixnum_integer_common)
#define sigrev_bignum_bignum_local _n(sigrev_bignum_bignum_local)
#define sigrev_bignum_integer_local _n(sigrev_bignum_integer_local)
#define sigrev_bignum_integer_common _n(sigrev_bignum_integer_common)
#define minus_ff_bignum_local _n(minus_ff_bignum_local)
#define minus_ff_real_local _n(minus_ff_real_local)
#define minus_ff_real_common _n(minus_ff_real_common)
#define minus_bf_bignum_local _n(minus_bf_bignum_local)
#define minus_bf_real_local _n(minus_bf_real_local)
#define minus_bf_real_common _n(minus_bf_real_common)
#define minus_fb_bignum_local _n(minus_fb_bignum_local)
#define minus_fb_real_local _n(minus_fb_real_local)
#define minus_fb_real_common _n(minus_fb_real_common)
#define minus_bb_bignum_local _n(minus_bb_bignum_local)
#define minus_bb_real_local _n(minus_bb_real_local)
#define minus_bb_real_common _n(minus_bb_real_common)

void plus_fv_bignum_local(LocalRoot local, addr left, fixnum value2, addr *ret);
void plus_fv_real_local(LocalRoot local, addr left, fixnum value2, addr *ret);
void plus_fv_real_common(addr left, fixnum value2, addr *ret);
void plus_ff_bignum_local(LocalRoot local, addr left, addr right, addr *ret);
void plus_ff_real_local(LocalRoot local, addr left, addr right, addr *ret);
void plus_ff_real_common(addr left, addr right, addr *ret);
void plus_bv_bignum_local(LocalRoot local, addr left, fixnum right, addr *ret);
void plus_bv_real_local(LocalRoot local, addr left, fixnum right, addr *ret);
void plus_bv_real_common(LocalRoot local, addr left, fixnum right, addr *ret);
void plus_bf_bignum_local(LocalRoot local, addr left, addr right, addr *ret);
void plus_bf_real_local(LocalRoot local, addr left, addr right, addr *ret);
void plus_bf_real_common(LocalRoot local, addr left, addr right, addr *ret);
#define plus_fb_bignum_local(m,a,b,r) plus_bf_bignum_local((m),(b),(a),(r))
#define plus_fb_real_local(m,a,b,r) plus_bf_real_local((m),(b),(a),(r))
#define plus_fb_real_common(m,a,b,r) plus_bf_real_common((m),(b),(a),(r))
void plus_bb_bignum_local(LocalRoot local, addr left, addr right, addr *ret);
void plus_bb_real_local(LocalRoot local, addr left, addr right, addr *ret);
void plus_bb_real_common(LocalRoot local, addr left, addr right, addr *ret);

void sigrev_bignum_inplace(addr pos);
void sigrev_fixnum_bignum_local(LocalRoot local, addr left, addr *ret);
void sigrev_fixnum_integer_alloc(LocalRoot local, addr left, addr *ret);
void sigrev_fixnum_integer_local(LocalRoot local, addr left, addr *ret);
void sigrev_fixnum_integer_common(addr left, addr *ret);
void sigrev_bignum_bignum_local(LocalRoot local, addr left, addr *ret);
void sigrev_bignum_integer_local(LocalRoot local, addr left, addr *ret);
void sigrev_bignum_integer_common(addr left, addr *ret);

void minus_ff_bignum_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_ff_real_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_ff_real_common(addr left, addr right, addr *ret);
void minus_bf_bignum_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_bf_real_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_bf_real_common(LocalRoot local, addr left, addr right, addr *ret);
void minus_fb_bignum_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_fb_real_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_fb_real_common(LocalRoot local, addr left, addr right, addr *ret);
void minus_bb_bignum_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_bb_real_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_bb_real_common(LocalRoot local, addr left, addr right, addr *ret);

#endif


/************************************************************
 *  bignum_multi.h
 ************************************************************/
#ifndef __BIGNUM_MULTI_HEADER__
#define __BIGNUM_MULTI_HEADER__


#define multi_ff_bignum_local _n(multi_ff_bignum_local)
#define multi_ff_real_local _n(multi_ff_real_local)
#define multi_ff_real_common _n(multi_ff_real_common)
#define multi_bf_bignum_local _n(multi_bf_bignum_local)
#define multi_bf_real_local _n(multi_bf_real_local)
#define multi_bf_real_common _n(multi_bf_real_common)
#define multi_bb_bignum_local _n(multi_bb_bignum_local)
#define multi_bb_real_local _n(multi_bb_real_local)
#define multi_bb_real_common _n(multi_bb_real_common)
#define multi_bb_nosign_bignum_local _n(multi_bb_nosign_bignum_local)
#define multi_bb_nosign_real_local _n(multi_bb_nosign_real_local)
#define multi_bb_nosign_real_common _n(multi_bb_nosign_real_common)

void multi_ff_bignum_local(LocalRoot local, addr left, addr right, addr *ret);
void multi_ff_real_local(LocalRoot local, addr left, addr right, addr *ret);
void multi_ff_real_common(addr left, addr right, addr *ret);
void multi_bf_bignum_local(LocalRoot local, addr left, addr right, addr *ret);
void multi_bf_real_local(LocalRoot local, addr left, addr right, addr *ret);
void multi_bf_real_common(LocalRoot local, addr left, addr right, addr *ret);
#define multi_fb_bignum_local(a,b,c,d) multi_bf_bignum_local((a),(c),(b),(d))
#define multi_fb_real_local(a,b,c,d) multi_bf_real_local((a),(c),(b),(d))
#define multi_fb_real_common(a,b,c,d) multi_bf_real_common((a),(c),(b),(d))
void multi_bb_bignum_local(LocalRoot local, addr left, addr right, addr *ret);
void multi_bb_real_local(LocalRoot local, addr left, addr right, addr *ret);
void multi_bb_real_common(LocalRoot local, addr left, addr right, addr *ret);
void multi_bb_nosign_bignum_local(LocalRoot local, addr left, addr right, addr *ret);
void multi_bb_nosign_real_local(LocalRoot local, addr left, addr right, addr *ret);
void multi_bb_nosign_real_common(LocalRoot local, addr left, addr right, addr *ret);

#endif


/************************************************************
 *  character_queue.h
 ************************************************************/
#ifndef __CHARACTER_QUEUE_HEADER__
#define __CHARACTER_QUEUE_HEADER__


#define charqueue_alloc _n(charqueue_alloc)
#define charqueue_local _n(charqueue_local)
#define charqueue_heap _n(charqueue_heap)
#define getsize_charqueue _n(getsize_charqueue)
#define getchar_charqueue _n(getchar_charqueue)
#define push_charqueue_alloc_ _n(push_charqueue_alloc_)
#define push_charqueue_local_ _n(push_charqueue_local_)
#define push_charqueue_heap_ _n(push_charqueue_heap_)
#define make_charqueue_alloc _n(make_charqueue_alloc)
#define make_charqueue_local _n(make_charqueue_local)
#define make_charqueue_heap _n(make_charqueue_heap)
#define clear_charqueue _n(clear_charqueue)
#define free_charqueue _n(free_charqueue)
#define position_charqueue _n(position_charqueue)
#define pushstring_charqueue_alloc_ _n(pushstring_charqueue_alloc_)
#define pushstring_charqueue_local_ _n(pushstring_charqueue_local_)
#define pushstring_charqueue_heap_ _n(pushstring_charqueue_heap_)
#define pushchar_charqueue_alloc_ _n(pushchar_charqueue_alloc_)
#define pushchar_charqueue_local_ _n(pushchar_charqueue_local_)
#define pushchar_charqueue_heap_ _n(pushchar_charqueue_heap_)

struct charqueue_struct {
	size_t size, max;
};

#define GetCharBitNext(x,y)		GetArrayAB((x), 0, (y))
#define SetCharBitNext(x,y)		SetArrayAB((x), 0, (y))
#define PtrCharBitBody(x)		PtrBodyABa((x), 1)
#define PtrCharBitChar(x)		((unicode *)(PtrCharBitBody(x) + IdxSize))
#define GetCharBitSize(x,y)		(*(y) = *(size_t *)PtrCharBitBody(x))
#define SetCharBitSize(x,y)		(*(size_t *)PtrCharBitBody(x) = (y))
#define GetCharBitChar(x,i,y)	(*(y) = PtrCharBitChar(x)[i])
#define SetCharBitChar(x,i,y)	(PtrCharBitChar(x)[i] = (y))

#define StructCharQueue(x)		((struct charqueue_struct *)PtrBodySSa((x), 2))
#define GetCharQueueRoot(x,y)	GetArraySS((x), 0, (y))
#define GetCharQueueTail(x,y)	GetArraySS((x), 1, (y))
#define SetCharQueueRoot(x,y)	SetArraySS((x), 0, (y))
#define SetCharQueueTail(x,y)	SetArraySS((x), 1, (y))
#define GetCharQueueSize(x,y)	(*(y) = StructCharQueue(x)->size)
#define GetCharQueueMax(x,y)	(*(y) = StructCharQueue(x)->max)
#define SetCharQueueSize(x,y)	(StructCharQueue(x)->size = (y))
#define SetCharQueueMax(x,y)	(StructCharQueue(x)->max = (y))
#define IncCharQueueSize(x)		(StructCharQueue(x)->size++)

void charqueue_alloc(LocalRoot local, addr *ret, size_t size);
void charqueue_local(LocalRoot local, addr *ret, size_t size);
void charqueue_heap(addr *ret, size_t size);

void getsize_charqueue(addr pos, size_t *ret);
void getchar_charqueue(addr pos, size_t index, unicode *ret);

int push_charqueue_alloc_(LocalRoot local, addr pos, unicode c);
int push_charqueue_local_(LocalRoot local, addr pos, unicode c);
int push_charqueue_heap_(addr pos, unicode c);

void make_charqueue_alloc(LocalRoot local, addr pos, addr *ret);
void make_charqueue_local(LocalRoot local, addr pos, addr *ret);
void make_charqueue_heap(addr pos, addr *ret);

void clear_charqueue(addr pos);
void free_charqueue(addr pos);
int position_charqueue(addr pos, size_t size);

int pushstring_charqueue_alloc_(LocalRoot local, addr pos, addr push);
int pushstring_charqueue_local_(LocalRoot local, addr pos, addr push);
int pushstring_charqueue_heap_(addr pos, addr push);
int pushchar_charqueue_alloc_(LocalRoot local, addr pos, const char *str);
int pushchar_charqueue_local_(LocalRoot local, addr pos, const char *str);
int pushchar_charqueue_heap_(addr pos, const char *str);

#endif


/************************************************************
 *  bignum_output.h
 ************************************************************/
#ifndef __BIGNUM_OUTPUT_HEADER__
#define __BIGNUM_OUTPUT_HEADER__


#define decimal_charqueue_fixnum_local_ _n(decimal_charqueue_fixnum_local_)
#define decimal_charqueue_bignum_local_ _n(decimal_charqueue_bignum_local_)
#define decimal_charqueue_integer_local_ _n(decimal_charqueue_integer_local_)
#define output_nosign_index_ _n(output_nosign_index_)
#define output_nosign_fixnum_ _n(output_nosign_fixnum_)
#define output_nosign_bignum_ _n(output_nosign_bignum_)
#define output_nosign_comma_fixnum_ _n(output_nosign_comma_fixnum_)
#define output_nosign_comma_bignum_ _n(output_nosign_comma_bignum_)

int decimal_charqueue_fixnum_local_(LocalRoot local, addr pos, addr queue);
int decimal_charqueue_bignum_local_(LocalRoot local, addr pos, addr queue);
int decimal_charqueue_integer_local_(LocalRoot local, addr pos, addr queue);

int output_nosign_index_(addr stream, size_t value, unsigned base, int upperp);
int output_nosign_fixnum_(addr stream, fixnum value, unsigned base, int upperp);
int output_nosign_bignum_(LocalRoot local, addr stream,
		addr pos, unsigned base, int upperp);
int output_nosign_comma_fixnum_(LocalRoot local, addr stream,
		fixnum value, unsigned base, int upperp, size_t range, unicode comma);
int output_nosign_comma_bignum_(LocalRoot local, addr stream,
		addr pos, unsigned base, int upperp, size_t range, unicode comma);

#endif


/************************************************************
 *  token.h
 ************************************************************/
#ifndef __TOKEN_HEADER__
#define __TOKEN_HEADER__


#define getchar_digit _n(getchar_digit)
#define getvalue_digit _n(getvalue_digit)
#define checkchar_digit _n(checkchar_digit)
#define checkvalue_digit _n(checkvalue_digit)
#define maketoken_integer _n(maketoken_integer)
#define maketoken_float_ _n(maketoken_float_)
#define maketoken_ratio _n(maketoken_ratio)

int getchar_digit(unsigned v, int upperp, unicode *ret);
int getvalue_digit(unsigned base, unicode c, unsigned *ret);
unicode checkchar_digit(unsigned v, int upperp);
unsigned checkvalue_digit(unsigned base, unicode c);

void maketoken_integer(LocalRoot local, addr queue, unsigned base, addr *ret);
int maketoken_float_(Execute ptr, addr queue, addr *ret);
void maketoken_ratio(LocalRoot local, addr queue, unsigned base, addr *ret);

#endif


/************************************************************
 *  file_memory.h
 ************************************************************/
#ifndef __FILE_MEMORY_HEADER__
#define __FILE_MEMORY_HEADER__


#define input_unicode_filememory _n(input_unicode_filememory)
#define update_standard_input_filememory _n(update_standard_input_filememory)
#define update_standard_output_filememory _n(update_standard_output_filememory)
#define update_standard_error_filememory _n(update_standard_error_filememory)
#define standard_input_filememory _n(standard_input_filememory)
#define standard_output_filememory _n(standard_output_filememory)
#define standard_error_filememory _n(standard_error_filememory)
#define open_input_filememory_ _n(open_input_filememory_)
#define open_output_filememory_ _n(open_output_filememory_)
#define open_io_filememory_ _n(open_io_filememory_)
#define open_input_redirect_filememory_ _n(open_input_redirect_filememory_)
#define open_output_redirect_filememory_ _n(open_output_redirect_filememory_)
#define open_io_redirect_filememory_ _n(open_io_redirect_filememory_)
#define close_filememory _n(close_filememory)
#define read_filememory _n(read_filememory)
#define readf_filememory _n(readf_filememory)
#define read_nonblock_filememory _n(read_nonblock_filememory)
#define getc_filememory _n(getc_filememory)
#define getc_nonblock_filememory _n(getc_nonblock_filememory)
#define ungetc_filememory _n(ungetc_filememory)
#define putc_filememory _n(putc_filememory)
#define write_filememory _n(write_filememory)

#define read_s16_filememory _n(read_s16_filememory)
#define read_s32_filememory _n(read_s32_filememory)
#define read_u16_filememory _n(read_u16_filememory)
#define read_u32_filememory _n(read_u32_filememory)
#define write_s16_filememory _n(write_s16_filememory)
#define write_s32_filememory _n(write_s32_filememory)
#define write_u16_filememory _n(write_u16_filememory)
#define write_u32_filememory _n(write_u32_filememory)
#ifdef LISP_ARCH_64BIT
#define read_s64_filememory _n(read_s64_filememory)
#define read_u64_filememory _n(read_u64_filememory)
#define write_s64_filememory _n(write_s64_filememory)
#define write_u64_filememory _n(write_u64_filememory)
#endif

#define flush_filememory _n(flush_filememory)
#define exitpoint_filememory _n(exitpoint_filememory)
#define end_filememory _n(end_filememory)
#define error_filememory _n(error_filememory)
#define listen_filememory _n(listen_filememory)
#define clear_input_filememory _n(clear_input_filememory)
#define clear_output_filememory _n(clear_output_filememory)
#define file_length_filememory _n(file_length_filememory)
#define file_position_filememory _n(file_position_filememory)
#define file_position_start_filememory _n(file_position_start_filememory)
#define file_position_end_filememory _n(file_position_end_filememory)
#define file_position_set_filememory _n(file_position_set_filememory)
#define readcheck_filememory _n(readcheck_filememory)
#define writecheck_filememory _n(writecheck_filememory)
#define readptr_filememory _n(readptr_filememory)
#define writeptr_filememory _n(writeptr_filememory)
#define readaddr_filememory _n(readaddr_filememory)
#define writeaddr_filememory _n(writeaddr_filememory)
#define readsize_filememory _n(readsize_filememory)
#define writesize_filememory _n(writesize_filememory)

int input_unicode_filememory(filestream fm, const unicode *name, size_t size);
int update_standard_input_filememory(filestream fm);
int update_standard_output_filememory(filestream fm);
int update_standard_error_filememory(filestream fm);
int standard_input_filememory(filestream fm);
int standard_output_filememory(filestream fm);
int standard_error_filememory(filestream fm);
int open_input_filememory_(LocalRoot local,
		filestream fm, addr name, int *ret);
int open_output_filememory_(LocalRoot local,
		filestream fm, addr name, enum FileOutput mode, int *ret);
int open_io_filememory_(LocalRoot local,
		filestream fm, addr name, enum FileOutput mode, int *ret);
void open_input_redirect_filememory_(filestream fm, addr pos);
void open_output_redirect_filememory_(filestream fm, addr pos);
void open_io_redirect_filememory_(filestream fm, addr pos);

int close_filememory(filestream fm);
int read_filememory(filestream fm, void *dst, size_t size, size_t *ret);
int readf_filememory(filestream fm, void *dst, size_t size, size_t *ret);
int read_nonblock_filememory(filestream fm,
		void *dst, size_t size, size_t *ret);
int getc_filememory(filestream fm, byte *pos);
int getc_nonblock_filememory(filestream fm, byte *pos, size_t *ret);
int ungetc_filememory(filestream fm, byte c);
int putc_filememory(filestream fm, byte c);
int write_filememory(filestream fm,
		const void *dst, size_t size, size_t *ret);

int read_s16_filememory(filestream fm, int16_t *ret);
int read_s32_filememory(filestream fm, int32_t *ret);
int read_u16_filememory(filestream fm, uint16_t *ret);
int read_u32_filememory(filestream fm, uint32_t *ret);
int write_s16_filememory(filestream fm, int16_t c);
int write_s32_filememory(filestream fm, int32_t c);
int write_u16_filememory(filestream fm, uint16_t c);
int write_u32_filememory(filestream fm, uint32_t c);
#ifdef LISP_ARCH_64BIT
int read_s64_filememory(filestream fm, int64_t *ret);
int read_u64_filememory(filestream fm, uint64_t *ret);
int write_s64_filememory(filestream fm, int64_t c);
int write_u64_filememory(filestream fm, uint64_t c);
#endif

int flush_filememory(filestream fm);
void exitpoint_filememory(filestream fm);
int end_filememory(filestream fm);
int error_filememory(filestream fm);
int listen_filememory(filestream fm);
int clear_input_filememory(filestream fm);
int clear_output_filememory(filestream fm);
int file_length_filememory(filestream fm, size_t *ret);
int file_position_filememory(filestream fm, size_t *ret);
int file_position_start_filememory(filestream fm);
int file_position_end_filememory(filestream fm);
int file_position_set_filememory(filestream fm, size_t pos);

/* core */
int readcheck_filememory(filestream fm, void *dst, size_t size);
int writecheck_filememory(filestream fm, const void *dst, size_t size);
int readptr_filememory(filestream fm, void **pos);
int writeptr_filememory(filestream fm, const void *pos);
int readaddr_filememory(filestream fm, addr *ret);
int writeaddr_filememory(filestream fm, addr pos);
int readsize_filememory(filestream fm, size_t *ret);
int writesize_filememory(filestream fm, size_t pos);

#endif


/************************************************************
 *  stream_init.h
 ************************************************************/
#ifndef __STREAM_INIT_HEADER__
#define __STREAM_INIT_HEADER__


#define init_stream _n(init_stream)
#define build_stream _n(build_stream)

void init_stream(void);
void build_stream(void);

#endif


/************************************************************
 *  stream_object.h
 ************************************************************/
#ifndef __STREAM_OBJECT_HEADER__
#define __STREAM_OBJECT_HEADER__


#define ptrbody_stream _n(ptrbody_stream)
#define ptrstruct_stream _n(ptrstruct_stream)
#define ptrdata_stream _n(ptrdata_stream)
#define gettype_stream _n(gettype_stream)
#define getindex_stream _n(getindex_stream)
#define getpathname_stream _n(getpathname_stream)
#define setpathname_stream _n(setpathname_stream)
#define getinfo_stream _n(getinfo_stream)
#define setinfo_stream _n(setinfo_stream)
#define getinput_stream _n(getinput_stream)
#define setinput_stream _n(setinput_stream)
#define getoutput_stream _n(getoutput_stream)
#define setoutput_stream _n(setoutput_stream)
#define stream_heap _n(stream_heap)
#define getstreamtype _n(getstreamtype)
#define streamp _n(streamp)
#define file_stream_p _n(file_stream_p)
#define broadcast_stream_p _n(broadcast_stream_p)
#define concatenated_stream_p _n(concatenated_stream_p)
#define echo_stream_p _n(echo_stream_p)
#define synonym_stream_p _n(synonym_stream_p)
#define twoway_stream_p _n(twoway_stream_p)
#define input_string_stream_p _n(input_string_stream_p)
#define output_string_stream_p _n(output_string_stream_p)
#define string_stream_p _n(string_stream_p)
#define prompt_stream_p _n(prompt_stream_p)
#define pretty_stream_p _n(pretty_stream_p)
#define input_memory_stream_p _n(input_memory_stream_p)
#define output_memory_stream_p _n(output_memory_stream_p)
#define io_memory_stream_p _n(io_memory_stream_p)
#define read_memory_stream_p _n(read_memory_stream_p)
#define write_memory_stream_p _n(write_memory_stream_p)
#define memory_stream_p _n(memory_stream_p)
#define pipe_stream_p _n(pipe_stream_p)
#define extend_stream_p _n(extend_stream_p)
#define extend_type_stream_p _n(extend_type_stream_p)

#define force_open_stream _n(force_open_stream)
#define force_close_stream _n(force_close_stream)
#define use_prompt_stream _n(use_prompt_stream)

enum STREAM_INDEX {
	STREAM_INDEX_PATHNAME = 0,
	STREAM_INDEX_INFO,
	STREAM_INDEX_INPUT,
	STREAM_INDEX_OUTPUT,
	STREAM_INDEX_SIZE
};

enum StreamType {
	StreamType_BinaryInput = 0,
	StreamType_BinaryOutput,
	StreamType_BinaryIO,
	StreamType_CharacterInput,
	StreamType_CharacterOutput,
	StreamType_CharacterIO,
	StreamType_BincharInput,
	StreamType_BincharOutput,
	StreamType_BincharIO,
	StreamType_Probe,
	/* stream object */
	StreamType_StringInput,
	StreamType_StringOutput,
	StreamType_Synonym,
	StreamType_BroadCast,
	StreamType_Concatenated,
	StreamType_TwoWay,
	StreamType_Echo,
	/* system object */
	StreamType_Prompt,
	StreamType_Pretty,
	StreamType_MemoryInput,
	StreamType_MemoryOutput,
	StreamType_MemoryIO,
	StreamType_Pipe,
	StreamType_Size
};

enum StreamPipe {
	StreamPipe_Input,
	StreamPipe_Output,
	StreamPipe_Error,
	StreamPipe_Size
};

#define Stream_Size  (StreamType_Size + StreamPipe_Size + LISP_STREAM_EXTEND)
#define StreamPipe_Index(x)  (StreamType_Size + (x))
#define StreamExtend_Index(x)  (StreamType_Size + StreamPipe_Size + (x))

struct StructStream {
	unsigned unread_check : 1;
	unsigned closed : 1;
	enum StreamType type;
	unicode unread;
	size_t terpri;
#ifdef __cplusplus
	byte64 data[1];
#else
	byte64 data[0];
#endif
};

#define PtrBodyStream_Low(x)		((void *)PtrBodyABa(x, STREAM_INDEX_SIZE))
#define PtrStructStream_Low(s)		((struct StructStream *)PtrBodyStream(s))
#define PtrDataStream_Low(s)		((void *)(PtrStructStream(s)->data))
#define GetTypeStream_Low(s,v)		(*(v) = PtrStructStream(s)->type)
#define GetIndexStream_Low(s)		((size_t)PtrStructStream(s)->type)

#define GetPathnameStream_Low(s,v)	GetArrayAB((s), STREAM_INDEX_PATHNAME, (v))
#define SetPathnameStream_Low(s,v)	SetArrayAB((s), STREAM_INDEX_PATHNAME, (v))
#define GetInfoStream_Low(s,v)		GetArrayAB((s), STREAM_INDEX_INFO, (v))
#define SetInfoStream_Low(s,v)		SetArrayAB((s), STREAM_INDEX_INFO, (v))
#define GetInputStream_Low(s,v)		GetArrayAB((s), STREAM_INDEX_INPUT, (v))
#define SetInputStream_Low(s,v)		SetArrayAB((s), STREAM_INDEX_INPUT, (v))
#define GetOutputStream_Low(s,v)	GetArrayAB((s), STREAM_INDEX_OUTPUT, (v))
#define SetOutputStream_Low(s,v)	SetArrayAB((s), STREAM_INDEX_OUTPUT, (v))

#ifdef LISP_DEBUG
#define PtrBodyStream(x)			ptrbody_stream(x)
#define PtrStructStream(s)			ptrstruct_stream(s)
#define PtrDataStream(s)			ptrdata_stream(s)
#define GetTypeStream(s,v)			gettype_stream((s), (v))
#define GetIndexStream(s)			getindex_stream(s)
#define GetPathnameStream(s,v)		getpathname_stream((s), (v))
#define SetPathnameStream(s,v)		setpathname_stream((s), (v))
#define GetInfoStream(s,v)			getinfo_stream((s), (v))
#define SetInfoStream(s,v)			setinfo_stream((s), (v))
#define GetInputStream(s,v)			getinput_stream((s), (v))
#define SetInputStream(s,v)			setinput_stream((s), (v))
#define GetOutputStream(s,v)		getoutput_stream((s), (v))
#define SetOutputStream(s,v)		setoutput_stream((s), (v))
#else
#define PtrBodyStream(x)			PtrBodyStream_Low(x)
#define PtrStructStream(s)			PtrStructStream_Low(s)
#define PtrDataStream(s)			PtrDataStream_Low(s)
#define GetTypeStream(s,v)			GetTypeStream_Low((s), (v))
#define GetIndexStream(s)			GetIndexStream_Low(s)
#define GetPathnameStream(s,v)		GetPathnameStream_Low(s,v)
#define SetPathnameStream(s,v)		SetPathnameStream_Low(s,v)
#define GetInfoStream(s,v)			GetInfoStream_Low(s,v)
#define SetInfoStream(s,v)			SetInfoStream_Low(s,v)
#define GetInputStream(s,v)			GetInputStream_Low(s,v)
#define SetInputStream(s,v)			SetInputStream_Low(s,v)
#define GetOutputStream(s,v)		GetOutputStream_Low(s,v)
#define SetOutputStream(s,v)		SetOutputStream_Low(s,v)
#endif

void *ptrbody_stream(addr stream);
struct StructStream *ptrstruct_stream(addr stream);
void *ptrdata_stream(addr stream);
void gettype_stream(addr stream, enum StreamType *ret);
size_t getindex_stream(addr stream);
void getpathname_stream(addr stream, addr *ret);
void setpathname_stream(addr stream, addr value);
void getinfo_stream(addr stream, addr *ret);
void setinfo_stream(addr stream, addr value);
void getinput_stream(addr stream, addr *ret);
void setinput_stream(addr stream, addr value);
void getoutput_stream(addr stream, addr *ret);
void setoutput_stream(addr stream, addr value);

void stream_heap(addr *ret, enum StreamType type, size_t size);
enum StreamType getstreamtype(addr stream);
int streamp(addr stream);
int file_stream_p(addr stream);
int broadcast_stream_p(addr stream);
int concatenated_stream_p(addr stream);
int echo_stream_p(addr stream);
int synonym_stream_p(addr stream);
int twoway_stream_p(addr stream);
int input_string_stream_p(addr stream);
int output_string_stream_p(addr stream);
int string_stream_p(addr stream);
int prompt_stream_p(addr stream);
int pretty_stream_p(addr stream);
int input_memory_stream_p(addr stream);
int output_memory_stream_p(addr stream);
int io_memory_stream_p(addr stream);
int read_memory_stream_p(addr stream);
int write_memory_stream_p(addr stream);
int memory_stream_p(addr stream);
int pipe_stream_p(addr stream);
int extend_stream_p(addr stream);
int extend_type_stream_p(addr stream, int type);

void force_open_stream(addr stream);
void force_close_stream(addr stream);
int use_prompt_stream(Execute ptr, addr stream);

#endif


/************************************************************
 *  stream_open.h
 ************************************************************/
#ifndef __STREAM_OPEN_HEADER__
#define __STREAM_OPEN_HEADER__


#define upgrade_open_element_type_stream_ _n(upgrade_open_element_type_stream_)
#define open_element_stream_ _n(open_element_stream_)
#define open_stream_ _n(open_stream_)

enum Stream_Open_Direction {
	Stream_Open_Direction_Input,
	Stream_Open_Direction_Output,
	Stream_Open_Direction_Io,
	Stream_Open_Direction_Probe
};

enum Stream_Open_Element {
	Stream_Open_Element_Character,
	Stream_Open_Element_Bit,
	Stream_Open_Element_Unsigned8,
	Stream_Open_Element_Unsigned16,
	Stream_Open_Element_Unsigned32,
	Stream_Open_Element_Unsigned64,
	Stream_Open_Element_Signed8,
	Stream_Open_Element_Signed16,
	Stream_Open_Element_Signed32,
	Stream_Open_Element_Signed64
};

enum Stream_Open_IfExists {
	Stream_Open_IfExists_Error,
	Stream_Open_IfExists_NewVersion,
	Stream_Open_IfExists_Rename,
	Stream_Open_IfExists_RenameAndDelete,
	Stream_Open_IfExists_Overwrite,
	Stream_Open_IfExists_Append,
	Stream_Open_IfExists_Supersede,
	Stream_Open_IfExists_Nil
};

enum Stream_Open_IfDoesNot {
	Stream_Open_IfDoesNot_Create,
	Stream_Open_IfDoesNot_Error,
	Stream_Open_IfDoesNot_Nil
};

enum Stream_Open_External {
	Stream_Open_External_Default,
	Stream_Open_External_Ascii,
	Stream_Open_External_Utf8,
	Stream_Open_External_Utf8Bom,
	Stream_Open_External_Utf16,
	Stream_Open_External_Utf16Le,
	Stream_Open_External_Utf16Be,
	Stream_Open_External_Utf16LeBom,
	Stream_Open_External_Utf16BeBom,
	Stream_Open_External_Utf32,
	Stream_Open_External_Utf32Le,
	Stream_Open_External_Utf32Be,
	Stream_Open_External_Utf32LeBom,
	Stream_Open_External_Utf32BeBom,
	Stream_Open_External_Error
};

int upgrade_open_element_type_stream_(addr var, addr *ret);
int open_element_stream_(Execute ptr, addr value, enum Stream_Open_Element *ret);
int open_stream_(Execute ptr, addr *ret, addr pos,
		enum Stream_Open_Direction direction,
		enum Stream_Open_Element element,
		enum Stream_Open_IfExists exist,
		enum Stream_Open_IfDoesNot doesnot,
		enum Stream_Open_External external);

#endif


/************************************************************
 *  typedef_stream.h
 ************************************************************/
#ifndef __LISP_TYPEDEF_STREAM_HEADER__
#define __LISP_TYPEDEF_STREAM_HEADER__


typedef int (*lisp_streamtype_close)(addr, addr *);
typedef int (*lisp_streamtype_read_byte)(addr, addr *, int *);
typedef int (*lisp_streamtype_unread_byte)(addr, byte);
typedef int (*lisp_streamtype_write_byte)(addr, addr);
typedef int (*lisp_streamtype_read_char)(addr, unicode *, int *);
typedef int (*lisp_streamtype_read_hang)(addr, unicode *, int *, int *);
typedef int (*lisp_streamtype_unread_char)(addr, unicode);
typedef int (*lisp_streamtype_write_char)(addr, unicode);
typedef int (*lisp_streamtype_getleft)(addr, size_t *);
typedef int (*lisp_streamtype_setleft)(addr, size_t);
typedef int (*lisp_streamtype_inputp)(addr, int *);
typedef int (*lisp_streamtype_outputp)(addr, int *);
typedef int (*lisp_streamtype_interactivep)(addr, int *);
typedef int (*lisp_streamtype_characterp)(addr, int *);
typedef int (*lisp_streamtype_binaryp)(addr, int *);
typedef int (*lisp_streamtype_element_type)(addr, addr *);
typedef int (*lisp_streamtype_external_format)(addr, addr *);
typedef int (*lisp_streamtype_file_length)(addr, addr *);
typedef int (*lisp_streamtype_file_position)(addr, size_t *, int *);
typedef int (*lisp_streamtype_file_position_start)(addr, int *);
typedef int (*lisp_streamtype_file_position_end)(addr, int *);
typedef int (*lisp_streamtype_file_position_set)(addr, size_t, int *);
typedef int (*lisp_streamtype_file_charlen)(addr, unicode, size_t *, int *);
typedef int (*lisp_streamtype_file_strlen)(addr, addr, size_t *, int *);
typedef int (*lisp_streamtype_listen)(addr, int *);
typedef int (*lisp_streamtype_clear_input)(addr);
typedef int (*lisp_streamtype_finish_output)(addr);
typedef int (*lisp_streamtype_force_output)(addr);
typedef int (*lisp_streamtype_clear_output)(addr);
typedef int (*lisp_streamtype_exitpoint)(addr);
typedef int (*lisp_streamtype_termsize)(addr, size_t *, int *);

#endif


/************************************************************
 *  stream.h
 ************************************************************/
#ifndef __STREAM_HEADER__
#define __STREAM_HEADER__


#define open_stream_p _n(open_stream_p)
#define copyleft_stream_ _n(copyleft_stream_)
#define pageout_stream_ _n(pageout_stream_)
#define print_ascii_stream_ _n(print_ascii_stream_)
#define print_unicode_stream_ _n(print_unicode_stream_)
#define print_string_stream_ _n(print_string_stream_)
#define input_stream_designator_ _n(input_stream_designator_)
#define output_stream_designator_ _n(output_stream_designator_)
#define open_external_format_ _n(open_external_format_)

#define standard_input_stream_ _n(standard_input_stream_)
#define standard_output_stream_ _n(standard_output_stream_)
#define error_output_stream_ _n(error_output_stream_)
#define trace_output_stream_ _n(trace_output_stream_)
#define terminal_io_stream_ _n(terminal_io_stream_)
#define debug_io_stream_ _n(debug_io_stream_)
#define query_io_stream_ _n(query_io_stream_)
#define read_unsigned8_stream_ _n(read_unsigned8_stream_)
#define write_unsigned8_stream_ _n(write_unsigned8_stream_)
#define redirect_unsigned8_stream_ _n(redirect_unsigned8_stream_)
#define close_stream_unwind_protect_ _n(close_stream_unwind_protect_)

#define update_standard_stream _n(update_standard_stream)
#define save_stream _n(save_stream)

int open_stream_p(addr stream);
int copyleft_stream_(addr stream, addr src);
int pageout_stream_(addr stream);
int print_ascii_stream_(addr stream, const char *data);
int print_unicode_stream_(addr stream, const unicode *data);
int print_string_stream_(addr stream, addr pos);
int input_stream_designator_(Execute ptr, addr stream, addr *ret);
int output_stream_designator_(Execute ptr, addr stream, addr *ret);
int open_external_format_(Execute ptr, addr x, enum Stream_Open_External *ret);

/* special variable */
int standard_input_stream_(Execute ptr, addr *ret);
int standard_output_stream_(Execute ptr, addr *ret);
int error_output_stream_(Execute ptr, addr *ret);
int trace_output_stream_(Execute ptr, addr *ret);
int terminal_io_stream_(Execute ptr, addr *ret);
int debug_io_stream_(Execute ptr, addr *ret);
int query_io_stream_(Execute ptr, addr *ret);

/* wrapper */
int read_unsigned8_stream_(addr stream, byte *value, int *ret);
int write_unsigned8_stream_(addr stream, byte value);
int redirect_unsigned8_stream_(Execute ptr, addr src, addr dst);
int close_stream_unwind_protect_(Execute ptr, addr stream);

/* core */
int update_standard_stream(void);
int save_stream(addr pos);

#endif


/************************************************************
 *  stream_function.h
 ************************************************************/
#ifndef __STREAM_FUNCTION_HEADER__
#define __STREAM_FUNCTION_HEADER__


#define close_stream_ _n(close_stream_)
#define read_byte_stream_ _n(read_byte_stream_)
#define unread_byte_stream_ _n(unread_byte_stream_)
#define write_byte_stream_ _n(write_byte_stream_)
#define read_char_stream_ _n(read_char_stream_)
#define read_hang_stream_ _n(read_hang_stream_)
#define unread_char_stream_ _n(unread_char_stream_)
#define write_char_stream_ _n(write_char_stream_)
#define getleft_stream_ _n(getleft_stream_)
#define setleft_stream_ _n(setleft_stream_)
#define inputp_stream_ _n(inputp_stream_)
#define outputp_stream_ _n(outputp_stream_)
#define interactivep_stream_ _n(interactivep_stream_)
#define characterp_stream_ _n(characterp_stream_)
#define binaryp_stream_ _n(binaryp_stream_)
#define element_type_stream_ _n(element_type_stream_)
#define external_format_stream_ _n(external_format_stream_)
#define file_length_stream_ _n(file_length_stream_)
#define file_position_stream_ _n(file_position_stream_)
#define file_position_start_stream_ _n(file_position_start_stream_)
#define file_position_end_stream_ _n(file_position_end_stream_)
#define file_position_set_stream_ _n(file_position_set_stream_)
#define file_charlen_stream_ _n(file_charlen_stream_)
#define file_strlen_stream_ _n(file_strlen_stream_)
#define listen_stream_ _n(listen_stream_)
#define clear_input_stream_ _n(clear_input_stream_)
#define finish_output_stream_ _n(finish_output_stream_)
#define force_output_stream_ _n(force_output_stream_)
#define clear_output_stream_ _n(clear_output_stream_)
#define exitpoint_stream_ _n(exitpoint_stream_)
#define termsize_stream_ _n(termsize_stream_)

int close_stream_(addr stream, addr *ret);
int read_byte_stream_(addr stream, addr *pos, int *ret);
int unread_byte_stream_(addr stream, byte c);
int write_byte_stream_(addr stream, addr pos);
int read_char_stream_(addr stream, unicode *c, int *ret);
int read_hang_stream_(addr stream, unicode *c, int *hang, int *ret);
int unread_char_stream_(addr stream, unicode c);
int write_char_stream_(addr stream, unicode c);
int getleft_stream_(addr stream, size_t *ret);
int setleft_stream_(addr stream, size_t value);
int inputp_stream_(addr stream, int *ret);
int outputp_stream_(addr stream, int *ret);
int interactivep_stream_(addr stream, int *ret);
int characterp_stream_(addr stream, int *ret);
int binaryp_stream_(addr stream, int *ret);
int element_type_stream_(addr stream, addr *ret);
int external_format_stream_(addr stream, addr *ret);
int file_length_stream_(addr stream, addr *ret);
int file_position_stream_(addr stream, size_t *value, int *ret);
int file_position_start_stream_(addr stream, int *ret);
int file_position_end_stream_(addr stream, int *ret);
int file_position_set_stream_(addr stream, size_t value, int *ret);
int file_charlen_stream_(addr stream, unicode u, size_t *value, int *ret);
int file_strlen_stream_(addr stream, addr pos, size_t *value, int *ret);
int listen_stream_(addr stream, int *ret);
int clear_input_stream_(addr stream);
int finish_output_stream_(addr stream);
int force_output_stream_(addr stream);
int clear_output_stream_(addr stream);
int exitpoint_stream_(addr stream);
int termsize_stream_(addr stream, size_t *value, int *ret);

#endif


/************************************************************
 *  stream_string.h
 ************************************************************/
#ifndef __STREAM_STRING_HEADER__
#define __STREAM_STRING_HEADER__


#define open_input_string_stream_ _n(open_input_string_stream_)
#define open_input_string_stream1_ _n(open_input_string_stream1_)
#define open_input_string_stream2_ _n(open_input_string_stream2_)
#define open_input_char_stream _n(open_input_char_stream)
#define null_input_string_stream _n(null_input_string_stream)
#define getindex_input_stream _n(getindex_input_stream)
#define setvalue_input_string_stream _n(setvalue_input_string_stream)
#define clear_input_string_stream _n(clear_input_string_stream)
#define close_input_string_stream _n(close_input_string_stream)
#define open_output_string_stream _n(open_output_string_stream)
#define copy_termsize_string_stream_ _n(copy_termsize_string_stream_)
#define string_stream_alloc_ _n(string_stream_alloc_)
#define string_stream_local_ _n(string_stream_local_)
#define string_stream_heap_ _n(string_stream_heap_)
#define clear_output_string_stream _n(clear_output_string_stream)
#define set_pretty_output_string_stream _n(set_pretty_output_string_stream)
#define get_pretty_output_string_stream _n(get_pretty_output_string_stream)
#define open_extend_output_stream _n(open_extend_output_stream)
#define close_output_string_stream _n(close_output_string_stream)
#define init_stream_string_input _n(init_stream_string_input)
#define init_stream_string_output _n(init_stream_string_output)

int open_input_string_stream_(addr *stream, addr string);
int open_input_string_stream1_(addr *stream, addr string, size_t start);
int open_input_string_stream2_(addr *stream, addr string, size_t start, size_t end);
void open_input_char_stream(addr *stream, const char *str);
void null_input_string_stream(addr *stream);
void getindex_input_stream(addr stream, size_t *ret);
void setvalue_input_string_stream(addr stream, addr value);
void clear_input_string_stream(addr stream);
void close_input_string_stream(addr stream);

void open_output_string_stream(addr *stream, size_t size);
int copy_termsize_string_stream_(addr stream, addr src);
int string_stream_alloc_(LocalRoot local, addr stream, addr *string);
int string_stream_local_(LocalRoot local, addr stream, addr *string);
int string_stream_heap_(addr stream, addr *string);
void clear_output_string_stream(addr stream);
void set_pretty_output_string_stream(addr stream);
int get_pretty_output_string_stream(addr stream);
void open_extend_output_stream(addr *stream, addr array);
void close_output_string_stream(addr stream);

void init_stream_string_input(void);
void init_stream_string_output(void);

#endif


/************************************************************
 *  format.h
 ************************************************************/
#ifndef __FORMAT_HEADER__
#define __FORMAT_HEADER__


#define format_stream_lisp_ _n(format_stream_lisp_)
#define format_string_lisp_ _n(format_string_lisp_)
#define format_lisp_ _n(format_lisp_)
#define format_stream_ _n(format_stream_)
#define format_string_ _n(format_string_)
#define format_stdout_ _n(format_stdout_)
#define formatf _n(formatf)
#define init_format _n(init_format)

int format_stream_lisp_(Execute ptr, addr stream, addr format, addr args);
int format_string_lisp_(Execute ptr, addr format, addr args, addr *ret);
int format_lisp_(Execute ptr, addr stream, addr format, addr args, addr *ret);

int format_stream_(Execute ptr, addr stream, const char *str, ...);
int format_string_(Execute ptr, addr *ret, const char *str, ...);
int format_stdout_(Execute ptr, const char *str, ...);

void formatf(const char *str, ...);

void init_format(void);

#endif


/************************************************************
 *  real.h
 ************************************************************/
#ifndef __REAL_HEADER__
#define __REAL_HEADER__


#define floatp _n(floatp)
#define realp _n(realp)
#define real_result_local_ _n(real_result_local_)
#define real_result_heap_ _n(real_result_heap_)
#define real_throw_alloc_ _n(real_throw_alloc_)
#define real_throw_local_ _n(real_throw_local_)
#define real_throw_heap_ _n(real_throw_heap_)
#define real_copy_alloc_ _n(real_copy_alloc_)
#define real_copy_local_ _n(real_copy_local_)
#define real_copy_heap_ _n(real_copy_heap_)
#define cast_double_float_unsafe_ _n(cast_double_float_unsafe_)
#define build_real _n(build_real)

int floatp(addr pos);
int realp(addr pos);

int real_result_local_(LocalRoot local, addr pos, addr *ret);
int real_result_heap_(LocalRoot local, addr pos, addr *ret);
int real_throw_alloc_(LocalRoot local, addr pos, addr *ret);
int real_throw_local_(LocalRoot local, addr pos, addr *ret);
int real_throw_heap_(addr pos, addr *ret);
int real_copy_alloc_(LocalRoot local, addr pos, addr *ret);
int real_copy_local_(LocalRoot local, addr pos, addr *ret);
int real_copy_heap_(addr pos, addr *ret);
int cast_double_float_unsafe_(addr value, double_float *ret);

void build_real(void);

#endif


/************************************************************
 *  number.h
 ************************************************************/
#ifndef __NUMBER_HEADER__
#define __NUMBER_HEADER__


#define numberp _n(numberp)
#define number_result_local_ _n(number_result_local_)
#define number_result_heap_ _n(number_result_heap_)
#define number_throw_alloc_ _n(number_throw_alloc_)
#define number_throw_local_ _n(number_throw_local_)
#define number_throw_heap_ _n(number_throw_heap_)
#define number_copy_alloc_ _n(number_copy_alloc_)
#define number_copy_local_ _n(number_copy_local_)
#define number_copy_heap_ _n(number_copy_heap_)
#define abs_number_common_ _n(abs_number_common_)
#define signum_number_common_ _n(signum_number_common_)
#define sqrt_number_common_ _n(sqrt_number_common_)

int numberp(addr pos);

int number_result_local_(LocalRoot local, addr pos, addr *ret);
int number_result_heap_(LocalRoot local, addr pos, addr *ret);
int number_throw_alloc_(LocalRoot local, addr pos, addr *ret);
int number_throw_local_(LocalRoot local, addr pos, addr *ret);
int number_throw_heap_(addr pos, addr *ret);
int number_copy_alloc_(LocalRoot local, addr pos, addr *ret);
int number_copy_local_(LocalRoot local, addr pos, addr *ret);
int number_copy_heap_(addr pos, addr *ret);

int abs_number_common_(addr left, addr *ret);
int signum_number_common_(addr pos, addr *ret);
int sqrt_number_common_(addr pos, addr *ret);

#endif


/************************************************************
 *  boole.h
 ************************************************************/
#ifndef __BOOLE_HEADER__
#define __BOOLE_HEADER__


#define logand_common_ _n(logand_common_)
#define logandc1_common_ _n(logandc1_common_)
#define logandc2_common_ _n(logandc2_common_)
#define logeqv_common_ _n(logeqv_common_)
#define logior_common_ _n(logior_common_)
#define lognand_common_ _n(lognand_common_)
#define lognor_common_ _n(lognor_common_)
#define lognot_common_ _n(lognot_common_)
#define logorc1_common_ _n(logorc1_common_)
#define logorc2_common_ _n(logorc2_common_)
#define logxor_common_ _n(logxor_common_)
#define boole_common_ _n(boole_common_)
#define logbitp_common_ _n(logbitp_common_)
#define logcount_common_ _n(logcount_common_)
#define logtest_common_ _n(logtest_common_)
#define init_boole _n(init_boole)
#define deposit_field_common_ _n(deposit_field_common_)
#define dpb_common_ _n(dpb_common_)
#define ldb_common_ _n(ldb_common_)
#define function_setf_ldb _n(function_setf_ldb)
#define ldb_test_common_ _n(ldb_test_common_)
#define mask_field_common_ _n(mask_field_common_)
#define function_setf_mask_field _n(function_setf_mask_field)

enum Boole_Index {
	Boole_1,
	Boole_2,
	Boole_And,
	Boole_AndC1,
	Boole_AndC2,
	Boole_C1,
	Boole_C2,
	Boole_Clr,
	Boole_Eqv,
	Boole_Ior,
	Boole_Nand,
	Boole_Nor,
	Boole_Orc1,
	Boole_Orc2,
	Boole_Set,
	Boole_Xor,
	Boole_Size
};

int logand_common_(LocalRoot local, addr args, addr *ret);
int logandc1_common_(LocalRoot local, addr a, addr b, addr *ret);
int logandc2_common_(LocalRoot local, addr a, addr b, addr *ret);
int logeqv_common_(LocalRoot local, addr args, addr *ret);
int logior_common_(LocalRoot local, addr args, addr *ret);
int lognand_common_(LocalRoot local, addr a, addr b, addr *ret);
int lognor_common_(LocalRoot local, addr a, addr b, addr *ret);
int lognot_common_(LocalRoot local, addr a, addr *ret);
int logorc1_common_(LocalRoot local, addr a, addr b, addr *ret);
int logorc2_common_(LocalRoot local, addr a, addr b, addr *ret);
int logxor_common_(LocalRoot local, addr args, addr *ret);
int boole_common_(LocalRoot local, addr op, addr a, addr b, addr *ret);
int logbitp_common_(addr index, addr pos, int *ret);
int logcount_common_(addr pos, size_t *ret);
int logtest_common_(LocalRoot local, addr a, addr b, int *ret);
void init_boole(void);

int deposit_field_common_(LocalRoot local, addr *ret, addr a, addr spec, addr b);
int dpb_common_(LocalRoot local, addr *ret, addr a, addr spec, addr b);
int ldb_common_(LocalRoot local, addr *ret, addr spec, addr pos);
int function_setf_ldb(Execute ptr, addr args, addr env);
int ldb_test_common_(addr spec, addr pos, int *ret);
int mask_field_common_(LocalRoot local, addr *ret, addr spec, addr pos);
int function_setf_mask_field(Execute ptr, addr args, addr env);

#endif


/************************************************************
 *  bytespec.h
 ************************************************************/
#ifndef __BYTESPEC_HEADER__
#define __BYTESPEC_HEADER__


#define bytespec_alloc _n(bytespec_alloc)
#define bytespec_local _n(bytespec_local)
#define bytespec_heap _n(bytespec_heap)
#define byte_common_ _n(byte_common_)
#define byte_size_common _n(byte_size_common)
#define byte_position_common _n(byte_position_common)
#define bytespec_mask_init _n(bytespec_mask_init)
#define bytespec_mask_get _n(bytespec_mask_get)
#define bytespec_mask_getsize _n(bytespec_mask_getsize)

struct bytespec_struct {
	size_t size, position;
};

#define PtrByteSpec			PtrBodyB2
#define ByteSpecStruct(x)	((struct bytespec_struct *)PtrByteSpec(x))

void bytespec_alloc(LocalRoot local, addr *ret, size_t size, size_t posi);
void bytespec_local(LocalRoot local, addr *ret, size_t size, size_t posi);
void bytespec_heap(addr *ret, size_t size, size_t posi);

int byte_common_(addr size, addr posi, addr *ret);
void byte_size_common(addr pos, addr *ret);
void byte_position_common(addr pos, addr *ret);

/* mask */
struct bytespec_mask {
	size_t size, position, posend, index;
	size_t start, end;
};
void bytespec_mask_init(struct bytespec_mask *ptr, addr pos);
fixed bytespec_mask_get(struct bytespec_mask *ptr);
size_t bytespec_mask_getsize(struct bytespec_mask *ptr);

#endif


/************************************************************
 *  execute_values.h
 ************************************************************/
#ifndef __EXECUTE_VALUES_HEADER__
#define __EXECUTE_VALUES_HEADER__


#define clear_values_execute _n(clear_values_execute)
#define setresult_control _n(setresult_control)
#define setbool_control _n(setbool_control)
#define setvalues_control _n(setvalues_control)
#define setvalues_nil_control _n(setvalues_nil_control)
#define setvalues_list_control _n(setvalues_list_control)
#define getresult_control _n(getresult_control)
#define getvalues_control _n(getvalues_control)
#define getvalues_list_control_local _n(getvalues_list_control_local)
#define getvalues_list_control_heap _n(getvalues_list_control_heap)
#define lengthvalues_control _n(lengthvalues_control)
#define getvalues_root_control _n(getvalues_root_control)
#define getvalues_pop_control _n(getvalues_pop_control)

void clear_values_execute(Execute ptr);
void setresult_control(Execute ptr, addr value);
void setbool_control(Execute ptr, int value);
void setvalues_control(Execute ptr, ...);
void setvalues_nil_control(Execute ptr);
void setvalues_list_control(Execute ptr, addr list);
void getresult_control(Execute ptr, addr *ret);
void getvalues_control(Execute ptr, size_t index, addr *ret);
void getvalues_list_control_local(Execute ptr, addr *ret);
void getvalues_list_control_heap(Execute ptr, addr *ret);
size_t lengthvalues_control(Execute ptr);

void getvalues_root_control(Execute ptr, addr *ret);
void getvalues_pop_control(Execute ptr, addr *ret);

#endif


/************************************************************
 *  pointer_table.h
 ************************************************************/
#ifndef __POINTER_TABLE_HEADER__
#define __POINTER_TABLE_HEADER__


enum pointer_index {
	p_empty,
#ifdef LISP_DEGRADE
	/* debug */
	p_debug1,
	p_debug2,
	p_debug3,
#endif
	/* code_function */
	p_nop_code,
	p_begin_code,
	p_begin_call_code,
	p_end_code,
	p_escape_code,
	p_escape_not_code,
	p_save_code,
	p_restore_code,
	p_normal_code,
	p_revert_code,
	p_revert_goto_code,

	p_set_code,
	p_push_code,
	p_push_result_code,
	p_push_values_code,
	p_nil_set_code,
	p_nil_push_code,
	p_t_set_code,
	p_t_push_code,

	p_lexical_code,
	p_lexical_set_code,
	p_lexical_push_code,
	p_lexical_rem_code,
	p_special_set_code,
	p_special_push_code,
	p_special_rem_code,

	p_declaim_special_code,
	p_declaim_type_value_code,
	p_declaim_type_function_code,
	p_declaim_inline_code,
	p_declaim_notinline_code,
	p_declaim_compilation_code,
	p_declaim_debug_code,
	p_declaim_safety_code,
	p_declaim_space_code,
	p_declaim_speed_code,
	p_declaim_declaration_code,

	p_type_result_code,
	p_type_lexical_code,
	p_type_special_code,
	p_type_global_code,
	p_type_function_code,
	p_type_setf_code,
	p_let_lexical_code,
	p_let_special_code,
	p_leta_special_code,

	p_setq_lexical_code,
	p_setq_special_code,
	p_setq_global_code,

	p_function_set_code,
	p_function_push_code,
	p_setf_set_code,
	p_setf_push_code,

	p_defmacro_code,
	p_deftype_code,
	p_define_compiler_macro_code,
	p_defun_code,

	p_call_name_code,
	p_call_result_code,
	p_call_type_code,
	p_call_key_code,
	p_call_function_code,
	p_call_setf_code,
	p_call_lexical_code,

	p_values_nil_code,
	p_values_set_code,
	p_the_set_code,
	p_the_push_code,

	p_if_unbound_code,
	p_if_nil_code,
	p_if_t_code,
	p_goto_code,
	p_go_code,
	p_return_from_code,
	p_catch_code,
	p_throw_operator_code,
	p_taginfo_code,
	p_blockinfo_code,

	p_handler_bind_code,
	p_handler_case_code,
	p_restart_bind_code,
	p_restart_case_code,
	p_restart_progn_code,

	p_funcall_code,
	p_nth_value_code,
	p_progv_code,

	/* code_lambda */
	p_pop_code,
	p_pop_unbound_code,
	p_getf_code,
	p_rest_copy_code,
	p_rest_bind_code,
	p_allow_other_keys_code,
	p_rest_null_code,
	p_whole_code,

	p_lambda_code,
	p_lambda_name_code,
	p_lambda_type_code,
	p_lambda_doc_code,
	p_lambda_form_code,
	p_lambda_defun_code,
	p_lambda_closure_code,
	p_lambda_lexical_code,
	p_lambda_cache_code,
	p_lambda_cache_set_code,
	p_macro_code,
	p_macro_special_code,
	p_macro_env_code,
	p_macro_whole_code,

	p_labels_make_code,
	p_labels_lambda_code,

	p_bind1_type_code,
	p_bind1_special_code,
	p_bind1_lexical_code,
	p_bind2_type_code,
	p_bind2_special_code,
	p_bind2_lexical_code,

	p_load_alloc_code,
	p_load_gensym_code,
	p_load_set_code,
	p_reference_set_code,
	p_reference_push_code,

	p_step_code,
	p_step_off_code,
	p_step_begin_code,
	p_step_end_code,

	/* optimize */
	p_optcode_result_type_code,
	p_optcode_car0_set_code,
	p_optcode_car0_push_code,
	p_optcode_car1_set_code,
	p_optcode_car1_push_code,
	p_optcode_cdr0_set_code,
	p_optcode_cdr0_push_code,
	p_optcode_cdr1_set_code,
	p_optcode_cdr1_push_code,
	p_optcode_cons_code,

	/* end of code */
	p_size_code,

	/* common-eval */
	p_defmacro_lambda,
	p_defun_compile,
	p_defun_eval,
	p_defun_compiler_macro_function,
	p_defun_setf_compiler_macro_function,
	p_defmacro_define_compiler_macro,
	p_defmacro_defmacro,
	p_defun_macro_function,
	p_defun_setf_macro_function,
	p_defun_macroexpand,
	p_defun_macroexpand_1,
	p_defmacro_define_symbol_macro,
	p_defun_proclaim,
	p_defmacro_declaim,
	p_defmacro_setf_the,
	p_defun_special_operator_p,
	p_defun_constantp,
	/* common-types */
	p_defun_coerce,
	p_defmacro_deftype,
	p_defun_subtypep,
	p_defun_type_of,
	p_defun_typep,
	p_defun_type_error_datum,
	p_defun_type_error_expected_type,
	/* common-data */
	p_defun_apply,
	p_defmacro_setf_apply,
	p_defmacro_defun,
	p_defun_fdefinition,
	p_defun_setf_fdefinition,
	p_defun_fboundp,
	p_defun_fmakunbound,
	p_defun_funcall,
	p_defun_function_lambda_expression,
	p_defun_functionp,
	p_defun_compiled_function_p,
	p_defmacro_defconstant,
	p_defmacro_defparameter,
	p_defmacro_defvar,
	p_defmacro_destructuring_bind,
	p_defmacro_psetq,
	p_defmacro_return,
	p_defun_not,
	p_defun_eq,
	p_defun_eql,
	p_defun_equal,
	p_defun_equalp,
	p_defun_identity,
	p_defun_lambda_complement,
	p_defun_complement,
	p_defun_lambda_constantly,
	p_defun_constantly,
	p_defun_every,
	p_defun_some,
	p_defun_notany,
	p_defun_notevery,
	p_defmacro_and,
	p_defmacro_cond,
	p_defmacro_or,
	p_defmacro_when,
	p_defmacro_unless,
	p_defmacro_case,
	p_defmacro_ecase,
	p_defmacro_ccase,
	p_defmacro_typecase,
	p_defmacro_etypecase,
	p_defmacro_ctypecase,
	p_defmacro_multiple_value_bind,
	p_defmacro_multiple_value_list,
	p_defmacro_multiple_value_setq,
	p_defun_values,
	p_defmacro_setf_values,
	p_defun_values_list,
	p_defmacro_nth_value,
	p_defmacro_prog,
	p_defmacro_proga,
	p_defmacro_prog1,
	p_defmacro_prog2,
	p_defmacro_define_modify_macro,
	p_defmacro_defsetf,
	p_defmacro_define_setf_expander,
	p_defun_get_setf_expansion,
	p_defmacro_setf,
	p_defmacro_psetf,
	p_defmacro_shiftf,
	p_defmacro_rotatef,
	/* common-iteration */
	p_defmacro_do,
	p_defmacro_doa,
	p_defmacro_dotimes,
	p_defmacro_dolist,
	p_defmacro_loop,
	/* common-objects */
	p_defun_ensure_generic_function,
	p_defun_slot_boundp,
	p_defun_slot_exists_p,
	p_defun_slot_makunbound,
	p_defun_slot_value,
	p_defun_setf_slot_value,
	p_defmacro_with_accessors,
	p_defmacro_with_slots,
	p_defmacro_defclass,
	p_defmacro_defgeneric,
	p_defmacro_defmethod,
	p_defun_find_class,
	p_defun_setf_find_class,
	p_defmacro_define_method_combination,
	p_defun_class_of,
	p_defun_unbound_slot_instance,
	/* Metaobject Protocol class */
	p_defun_referenced_class,
	p_defun_ensure_class,
	p_method_ensure_class_using_class_null,
	p_method_ensure_class_using_class_class,
	p_method_allocate_instance_standard,
	p_method_allocate_instance_structure,
	p_method_initialize_instance_stdobject,
	p_method_reinitialize_instance_stdobject,
	p_method_shared_initialize_stdobject,
	p_method_make_instance_symbol,
	p_method_make_instance_stdclass,
	p_method_make_instance_structure,
	p_method_make_instances_obsolete_symbol,
	p_method_make_instances_obsolete_stdclass,
	p_method_make_load_form_object,
	p_method_make_load_form_class,
	p_defun_make_load_form_saving_slots,
	p_method_slot_missing,
	p_method_slot_unbound,
	p_method_update_instance_for_different_class,
	p_method_update_instance_for_redefined_class,
	p_method_slot_boundp_using_class_standard,
	p_method_slot_boundp_using_class_structure,
	p_method_slot_exists_p_using_class_standard,
	p_method_slot_exists_p_using_class_structure,
	p_method_slot_makunbound_using_class_standard,
	p_method_slot_makunbound_using_class_structure,
	p_method_slot_value_using_class_standard,
	p_method_slot_value_using_class_structure,
	p_method_setf_slot_value_using_class_standard,
	p_method_setf_slot_value_using_class_structure,
	p_method_change_class_stdclass,
	p_method_change_class_symbol,
	/* Metaobject Protocol reader */
	p_method_class_name,
	p_method_setf_class_name,
	p_make_slot_definition_call,
	p_method_class_slots,
	p_method_class_direct_slots,
	p_method_class_default_initargs,
	p_method_class_direct_default_initargs,
	p_method_class_precedence_list,
	p_method_class_direct_superclasses,
	p_method_class_direct_subclasses,
	p_method_class_finalized_p,
	p_method_class_prototype,
	p_method_slot_definition_name,
	p_method_slot_definition_type,
	p_method_slot_definition_allocation,
	p_method_slot_definition_initargs,
	p_method_slot_definition_initform,
	p_method_slot_definition_initfunction,
	p_method_generic_function_name,
	p_method_setf_generic_function_name,
	p_method_generic_function_methods,
	p_method_generic_function_lambda_list,
	p_method_generic_function_argument_precedence_order,
	p_method_generic_function_declarations,
	p_method_generic_function_method_class,
	p_method_generic_function_method_combination,
	p_method_method_function,
	p_method_method_generic_function,
	p_method_method_lambda_list,
	p_method_method_specializers,
	p_method_method_qualifiers,
	p_method_accessor_method_slot_definition,

	/* Metaobject Protocol generic */
	p_method_no_applicable_method,
	p_method_no_next_method,
	p_method_ensure_generic_function_class,
	p_method_ensure_generic_function_null,
	p_method_find_method_combination,
	p_function_ensure_method,
	p_method_function_keywords,
	p_defun_flet_method_p,
	p_defun_flet_next_method,
	p_defun_method_combination_instance,
	p_defun_ensure_method_combination_short,
	p_defun_ensure_method_combination_long,
	p_defun_qualifiers_elt,
	p_defun_combination_binding,
	p_defun_macro_make_method,
	p_defun_macro_call_method,
	p_defun_macro_method_lambda,
	p_method_compute_applicable_methods_std,
	p_method_find_method_std,
	p_method_add_method_std,
	p_method_remove_method_std,
	/* Metaobject Protocol protocols */
	p_method_make_method_lambda_std,
	/* common-structures */
	p_defmacro_defstruct,
	p_defun_copy_structure,
	/* common-condition */
	p_defun_cell_error_name,
	p_defmacro_assert,
	p_defun_error,
	p_defun_cerror,
	p_defmacro_check_type,
	p_defun_invalid_method_error,
	p_defun_method_combination_error,
	p_defun_signal,
	p_defun_simple_condition_format_control,
	p_defun_simple_condition_format_arguments,
	p_defun_warn,
	p_defun_warn_restart,
	p_defun_invoke_debugger,
	p_defun_break,
	p_defmacro_handler_bind,
	p_defmacro_handler_case,
	p_defmacro_ignore_errors,
	p_defmacro_define_condition,
	p_defun_make_condition,
	p_defun_compute_restarts,
	p_defun_find_restart,
	p_defun_invoke_restart,
	p_defun_invoke_restart_interactively,
	p_defmacro_restart_bind,
	p_defmacro_restart_case,
	p_defun_restart_name,
	p_defmacro_with_condition_restarts,
	p_defmacro_with_simple_restart,
	p_defun_abort,
	p_defun_continue,
	p_defun_muffle_warning,
	p_defun_store_value,
	p_defun_use_value,
	/* common-symbols */
	p_defun_symbolp,
	p_defun_keywordp,
	p_defun_make_symbol,
	p_defun_copy_symbol,
	p_defun_gensym,
	p_defun_gentemp,
	p_defun_symbol_function,
	p_defun_setf_symbol_function,
	p_defun_symbol_value,
	p_defun_setf_symbol_value,
	p_defun_symbol_plist,
	p_defun_setf_symbol_plist,
	p_defun_symbol_name,
	p_defun_symbol_package,
	p_defun_get,
	p_defun_setf_get,
	p_defun_remprop,
	p_defun_boundp,
	p_defun_makunbound,
	p_defun_set,
	/* common-packages */
	p_defun_export,
	p_defun_find_symbol,
	p_defun_find_package,
	p_defun_find_all_symbols,
	p_defun_import,
	p_defun_list_all_packages,
	p_defun_rename_package,
	p_defun_shadow,
	p_defun_shadowing_import,
	p_defun_delete_package,
	p_defun_make_package,
	p_defmacro_with_package_iterator,
	p_defun_unexport,
	p_defun_unintern,
	p_defmacro_in_package,
	p_defun_unuse_package,
	p_defun_use_package,
	p_defmacro_defpackage,
	p_defmacro_do_symbols,
	p_defmacro_do_external_symbols,
	p_defmacro_do_all_symbols,
	p_defun_intern,
	p_defun_package_name,
	p_defun_package_nicknames,
	p_defun_package_shadowing_symbols,
	p_defun_package_use_list,
	p_defun_package_used_by_list,
	p_defun_packagep,
	p_defun_package_error_package,
	/* common-numbers */
	p_defun_number_equal,
	p_defun_number_not_equal,
	p_defun_number_less,
	p_defun_number_greater,
	p_defun_number_less_equal,
	p_defun_number_greater_equal,
	p_defun_max,
	p_defun_min,
	p_defun_minusp,
	p_defun_plusp,
	p_defun_zerop,
	p_defun_floor,
	p_defun_ffloor,
	p_defun_ceiling,
	p_defun_fceiling,
	p_defun_truncate,
	p_defun_ftruncate,
	p_defun_round,
	p_defun_fround,
	p_defun_cis,
	p_defun_sin,
	p_defun_cos,
	p_defun_tan,
	p_defun_sinh,
	p_defun_cosh,
	p_defun_tanh,
	p_defun_asin,
	p_defun_acos,
	p_defun_atan,
	p_defun_asinh,
	p_defun_acosh,
	p_defun_atanh,
	p_defun_exp,
	p_defun_expt,
	p_defun_plus,
	p_defun_minus,
	p_defun_asterisk,
	p_defun_slash,
	p_defun_oneplus,
	p_defun_oneminus,
	p_defun_abs,
	p_defun_evenp,
	p_defun_oddp,
	p_defun_gcd,
	p_defun_lcm,
	p_defmacro_incf,
	p_defmacro_decf,
	p_defun_log,
	p_defun_mod,
	p_defun_rem,
	p_defun_signum,
	p_defun_sqrt,
	p_defun_isqrt,
	p_defun_make_random_state,
	p_defun_random,
	p_defun_random_state_p,
	p_defun_numberp,
	p_defun_complex,
	p_defun_complexp,
	p_defun_conjugate,
	p_defun_phase,
	p_defun_realpart,
	p_defun_imagpart,
	p_defun_upgraded_complex_part_type,
	p_defun_realp,
	p_defun_numerator,
	p_defun_denominator,
	p_defun_rational,
	p_defun_rationalize,
	p_defun_rationalp,
	p_defun_ash,
	p_defun_integer_length,
	p_defun_integerp,
	p_defun_parse_integer,
	p_defun_boole,
	p_defun_logand,
	p_defun_logandc1,
	p_defun_logandc2,
	p_defun_logeqv,
	p_defun_logior,
	p_defun_lognand,
	p_defun_lognor,
	p_defun_lognot,
	p_defun_logorc1,
	p_defun_logorc2,
	p_defun_logxor,
	p_defun_logbitp,
	p_defun_logcount,
	p_defun_logtest,
	p_defun_byte,
	p_defun_byte_size,
	p_defun_byte_position,
	p_defun_deposit_field,
	p_defun_dpb,
	p_defun_ldb,
	p_defmacro_setf_ldb,
	p_defun_ldb_test,
	p_defun_mask_field,
	p_defmacro_setf_mask_field,
	p_defun_decode_float,
	p_defun_scale_float,
	p_defun_float_radix,
	p_defun_float_sign,
	p_defun_float_digits,
	p_defun_float_precision,
	p_defun_integer_decode_float,
	p_defun_float,
	p_defun_floatp,
	p_defun_arithmetic_error_operands,
	p_defun_arithmetic_error_operation,
	/* common-characters */
	p_defun_char_eql,
	p_defun_char_less,
	p_defun_char_greater,
	p_defun_char_less_equal,
	p_defun_char_greater_equal,
	p_defun_char_equal,
	p_defun_char_lessp,
	p_defun_char_greaterp,
	p_defun_char_not_lessp,
	p_defun_char_not_greaterp,
	p_defun_char_not_eql,
	p_defun_char_not_equal,
	p_defun_character,
	p_defun_characterp,
	p_defun_alpha_char_p,
	p_defun_alphanumericp,
	p_defun_digit_char,
	p_defun_digit_char_p,
	p_defun_graphic_char_p,
	p_defun_standard_char_p,
	p_defun_char_upcase,
	p_defun_char_downcase,
	p_defun_upper_case_p,
	p_defun_lower_case_p,
	p_defun_both_case_p,
	p_defun_char_code,
	p_defun_code_char,
	p_defun_char_name,
	p_defun_name_char,
	/* common-conses */
	p_defun_car,
	p_defun_cdr,
	p_defun_caar,
	p_defun_cadr,
	p_defun_cdar,
	p_defun_cddr,
	p_defun_caaar,
	p_defun_caadr,
	p_defun_cadar,
	p_defun_caddr,
	p_defun_cdaar,
	p_defun_cdadr,
	p_defun_cddar,
	p_defun_cdddr,
	p_defun_caaaar,
	p_defun_caaadr,
	p_defun_caadar,
	p_defun_caaddr,
	p_defun_cadaar,
	p_defun_cadadr,
	p_defun_caddar,
	p_defun_cadddr,
	p_defun_cdaaar,
	p_defun_cdaadr,
	p_defun_cdadar,
	p_defun_cdaddr,
	p_defun_cddaar,
	p_defun_cddadr,
	p_defun_cdddar,
	p_defun_cddddr,
	p_defun_fifth,
	p_defun_sixth,
	p_defun_seventh,
	p_defun_eighth,
	p_defun_ninth,
	p_defun_tenth,

	p_defun_setf_car,
	p_defun_setf_cdr,
	p_defun_setf_caar,
	p_defun_setf_cadr,
	p_defun_setf_cdar,
	p_defun_setf_cddr,
	p_defun_setf_caaar,
	p_defun_setf_caadr,
	p_defun_setf_cadar,
	p_defun_setf_caddr,
	p_defun_setf_cdaar,
	p_defun_setf_cdadr,
	p_defun_setf_cddar,
	p_defun_setf_cdddr,
	p_defun_setf_caaaar,
	p_defun_setf_caaadr,
	p_defun_setf_caadar,
	p_defun_setf_caaddr,
	p_defun_setf_cadaar,
	p_defun_setf_cadadr,
	p_defun_setf_caddar,
	p_defun_setf_cadddr,
	p_defun_setf_cdaaar,
	p_defun_setf_cdaadr,
	p_defun_setf_cdadar,
	p_defun_setf_cdaddr,
	p_defun_setf_cddaar,
	p_defun_setf_cddadr,
	p_defun_setf_cdddar,
	p_defun_setf_cddddr,
	p_defun_setf_fifth,
	p_defun_setf_sixth,
	p_defun_setf_seventh,
	p_defun_setf_eighth,
	p_defun_setf_ninth,
	p_defun_setf_tenth,

	p_defun_cons,
	p_defun_consp,
	p_defun_atom,
	p_defun_rplaca,
	p_defun_rplacd,
	p_defun_copy_list,
	p_defun_copy_tree,
	p_defun_sublis,
	p_defun_nsublis,
	p_defun_subst,
	p_defun_nsubst,
	p_defun_subst_if,
	p_defun_nsubst_if,
	p_defun_subst_if_not,
	p_defun_nsubst_if_not,
	p_defun_tree_equal,
	p_defun_list,
	p_defun_lista,
	p_defun_list_length,
	p_defun_listp,
	p_defun_make_list,
	p_defmacro_push,
	p_defmacro_pop,
	p_defun_nth,
	p_defun_setf_nth,
	p_defun_nthcdr,
	p_defun_member,
	p_defun_member_if,
	p_defun_member_if_not,
	p_defun_mapc,
	p_defun_mapcar,
	p_defun_mapcan,
	p_defun_mapl,
	p_defun_maplist,
	p_defun_mapcon,
	p_defun_endp,
	p_defun_null,
	p_defun_nconc,
	p_defun_append,
	p_defun_revappend,
	p_defun_nreconc,
	p_defun_butlast,
	p_defun_nbutlast,
	p_defun_last,
	p_defun_ldiff,
	p_defun_tailp,
	p_defun_acons,
	p_defun_assoc,
	p_defun_assoc_if,
	p_defun_assoc_if_not,
	p_defun_copy_alist,
	p_defun_pairlis,
	p_defun_rassoc,
	p_defun_rassoc_if,
	p_defun_rassoc_if_not,
	p_defun_get_properties,
	p_defun_getf,
	p_defmacro_setf_getf,
	p_defmacro_remf,
	p_defun_intersection,
	p_defun_nintersection,
	p_defun_adjoin,
	p_defmacro_pushnew,
	p_defun_set_difference,
	p_defun_nset_difference,
	p_defun_set_exclusive_or,
	p_defun_nset_exclusive_or,
	p_defun_subsetp,
	p_defun_union,
	p_defun_nunion,
	/* common-array */
	p_defun_make_array,
	p_defun_adjust_array,
	p_defun_adjustable_array_p,
	p_defun_aref,
	p_defun_setf_aref,
	p_defun_array_dimension,
	p_defun_array_dimensions,
	p_defun_array_element_type,
	p_defun_array_has_fill_pointer_p,
	p_defun_array_displacement,
	p_defun_array_in_bounds_p,
	p_defun_array_rank,
	p_defun_array_row_major_index,
	p_defun_array_total_size,
	p_defun_arrayp,
	p_defun_fill_pointer,
	p_defun_setf_fill_pointer,
	p_defun_row_major_aref,
	p_defun_setf_row_major_aref,
	p_defun_upgraded_array_element_type,
	p_defun_simple_vector_p,
	p_defun_svref,
	p_defun_setf_svref,
	p_defun_vector,
	p_defun_vector_pop,
	p_defun_vector_push,
	p_defun_vector_push_extend,
	p_defun_vectorp,
	p_defun_bit,
	p_defun_setf_bit,
	p_defun_bit_vector_p,
	p_defun_simple_bit_vector_p,
	p_defun_bit_and,
	p_defun_bit_andc1,
	p_defun_bit_andc2,
	p_defun_bit_eqv,
	p_defun_bit_ior,
	p_defun_bit_nand,
	p_defun_bit_nor,
	p_defun_bit_orc1,
	p_defun_bit_orc2,
	p_defun_bit_xor,
	p_defun_bit_not,
	/* common-strings */
	p_defun_stringp,
	p_defun_simple_string_p,
	p_defun_char,
	p_defun_setf_char,
	p_defun_string,
	p_defun_string_upcase,
	p_defun_string_downcase,
	p_defun_string_capitalize,
	p_defun_nstring_upcase,
	p_defun_nstring_downcase,
	p_defun_nstring_capitalize,
	p_defun_string_trim,
	p_defun_string_left_trim,
	p_defun_string_right_trim,
	p_defun_string_eql,
	p_defun_string_not_eql,
	p_defun_string_less,
	p_defun_string_greater,
	p_defun_string_less_equal,
	p_defun_string_greater_equal,
	p_defun_string_equal,
	p_defun_string_not_equal,
	p_defun_string_lessp,
	p_defun_string_greaterp,
	p_defun_string_not_greaterp,
	p_defun_string_not_lessp,
	p_defun_make_string,
	/* common-sequences */
	p_defun_copy_seq,
	p_defun_elt,
	p_defun_setf_elt,
	p_defun_fill,
	p_defun_make_sequence,
	p_defun_subseq,
	p_defun_setf_subseq,
	p_defun_map,
	p_defun_map_into,
	p_defun_reduce,
	p_defun_count,
	p_defun_count_if,
	p_defun_count_if_not,
	p_defun_length,
	p_defun_reverse,
	p_defun_nreverse,
	p_defun_merge,
	p_defun_sort,
	p_defun_stable_sort,
	p_defun_find,
	p_defun_find_if,
	p_defun_find_if_not,
	p_defun_position,
	p_defun_position_if,
	p_defun_position_if_not,
	p_defun_search,
	p_defun_mismatch,
	p_defun_replace,
	p_defun_substitute,
	p_defun_substitute_if,
	p_defun_substitute_if_not,
	p_defun_nsubstitute,
	p_defun_nsubstitute_if,
	p_defun_nsubstitute_if_not,
	p_defun_concatenate,
	p_defun_remove,
	p_defun_remove_if,
	p_defun_remove_if_not,
	p_defun_delete,
	p_defun_delete_if,
	p_defun_delete_if_not,
	p_defun_remove_duplicates,
	p_defun_delete_duplicates,
	/* common-hashtables */
	p_defun_make_hash_table,
	p_defun_hash_table_p,
	p_defun_hash_table_count,
	p_defun_hash_table_rehash_size,
	p_defun_hash_table_rehash_threshold,
	p_defun_hash_table_size,
	p_defun_hash_table_test,
	p_defun_gethash,
	p_defun_setf_gethash,
	p_defun_remhash,
	p_defun_maphash,
	p_defmacro_with_hash_table_iterator,
	p_defun_clrhash,
	p_defun_sxhash,
	/* common-filenames */
	p_defun_pathname,
	p_defun_make_pathname,
	p_defun_pathnamep,
	p_defun_pathname_host,
	p_defun_pathname_device,
	p_defun_pathname_directory,
	p_defun_pathname_name,
	p_defun_pathname_type,
	p_defun_pathname_version,
	p_defun_load_logical_pathname_translations,
	p_defun_logical_pathname_translations,
	p_defun_setf_logical_pathname_translations,
	p_defun_logical_pathname,
	p_defun_namestring,
	p_defun_file_namestring,
	p_defun_directory_namestring,
	p_defun_host_namestring,
	p_defun_enough_namestring,
	p_defun_parse_namestring,
	p_defun_wild_pathname_p,
	p_defun_pathname_match_p,
	p_defun_translate_pathname,
	p_defun_translate_logical_pathname,
	p_defun_merge_pathnames,
	/* common-files */
	p_defun_directory,
	p_defun_probe_file,
	p_defun_ensure_directories_exist,
	p_defun_truename,
	p_defun_file_author,
	p_defun_file_write_date,
	p_defun_rename_file,
	p_defun_delete_file,
	p_defun_file_error_pathname,
	/* common-streams */
	p_defun_input_stream_p,
	p_defun_output_stream_p,
	p_defun_interactive_stream_p,
	p_defun_open_stream_p,
	p_defun_streamp,
	p_defun_stream_element_type,
	p_defun_read_byte,
	p_defun_write_byte,
	p_defun_peek_char,
	p_defun_read_char,
	p_defun_read_char_no_hang,
	p_defun_terpri,
	p_defun_fresh_line,
	p_defun_unread_char,
	p_defun_write_char,
	p_defun_read_line,
	p_defun_write_string,
	p_defun_write_line,
	p_defun_read_sequence,
	p_defun_write_sequence,
	p_defun_file_length,
	p_defun_file_position,
	p_defun_file_string_length,
	p_defun_open,
	p_defun_stream_external_format,
	p_defmacro_with_open_file,
	p_defun_close,
	p_defmacro_with_open_stream,
	p_defun_listen,
	p_defun_clear_input,
	p_defun_finish_output,
	p_defun_force_output,
	p_defun_clear_output,
	p_defun_y_or_n_p,
	p_defun_yes_or_no_p,
	p_defun_make_synonym_stream,
	p_defun_synonym_stream_symbol,
	p_defun_make_broadcast_stream,
	p_defun_broadcast_stream_streams,
	p_defun_make_two_way_stream,
	p_defun_two_way_stream_input_stream,
	p_defun_two_way_stream_output_stream,
	p_defun_make_echo_stream,
	p_defun_echo_stream_input_stream,
	p_defun_echo_stream_output_stream,
	p_defun_make_concatenated_stream,
	p_defun_concatenated_stream_streams,
	p_defun_make_string_input_stream,
	p_defun_make_string_output_stream,
	p_defun_get_output_stream_string,
	p_defmacro_with_input_from_string,
	p_defmacro_with_output_to_string,
	p_defun_stream_error_stream,
	/* common-printer */
	p_defun_copy_pprint_dispatch,
	p_defmacro_formatter,
	p_defun_pprint_dispatch,
	p_defun_pprint_fill,
	p_defun_pprint_linear,
	p_defun_pprint_tabular,
	p_defun_pprint_indent,
	p_defmacro_pprint_logical_block,
	p_defun_pprint_newline,
	p_defun_pprint_tab,
	p_defmacro_print_unreadable_object,
	p_defun_set_pprint_dispatch,
	p_defun_write,
	p_defun_prin1,
	p_defun_princ,
	p_defun_print,
	p_defun_pprint,
	p_defun_write_to_string,
	p_defun_prin1_to_string,
	p_defun_princ_to_string,
	p_defun_print_not_readable_object,
	p_defun_format,
	p_format_logicalblock2,
	p_format_logicalblock1,
	p_method_print_object_t,
	p_method_print_object_class,
	p_method_print_object_structure_object,
	p_method_print_object_generic_function,
	p_method_print_object_simple_condition,
	p_formatter_call_common,
	/* common-reader */
	p_defun_copy_readtable,
	p_defun_make_dispatch_macro_character,
	p_defun_read,
	p_defun_read_preserving_whitespace,
	p_defun_read_delimited_list,
	p_defun_read_from_string,
	p_defun_readtable_case,
	p_defun_setf_readtable_case,
	p_defun_readtablep,
	p_defun_get_dispatch_macro_character,
	p_defun_set_dispatch_macro_character,
	p_defun_get_macro_character,
	p_defun_set_macro_character,
	p_defun_set_syntax_from_char,
	p_defmacro_with_standard_io_syntax,
	/* common-system */
	p_defun_compile_file,
	p_defun_compile_file_pathname,
	p_defun_load,
	p_defmacro_with_compilation_unit,
	p_defun_handler_delay_warning,
	p_defun_provide,
	p_defun_require,
	/* common-environment */
	p_defun_decode_universal_time,
	p_defun_encode_universal_time,
	p_defun_get_universal_time,
	p_defun_get_decoded_time,
	p_defun_sleep,
	p_defun_apropos,
	p_defun_apropos_list,
	p_defun_describe,
	p_method_describe_object_t,
	p_method_describe_object_class,
	p_method_describe_object_standard_object,
	p_method_describe_object_structure_object,
	p_defmacro_trace,
	p_defmacro_untrace,
	p_defun_trace,
	p_defun_trace_function,
	p_defun_untrace,
	p_defmacro_step,
	p_defmacro_time,
	p_defun_get_internal_real_time,
	p_defun_get_internal_run_time,
	p_defun_disassemble,
	p_defun_room,
	p_defun_ed,
	p_defun_inspect,
	p_defun_dribble,
	p_defun_lisp_implementation_type,
	p_defun_lisp_implementation_version,
	p_defun_short_site_name,
	p_defun_long_site_name,
	p_defun_machine_instance,
	p_defun_machine_type,
	p_defun_machine_version,
	p_defun_software_type,
	p_defun_software_version,
	p_defun_user_homedir_pathname,
	/* documentation */
	p_method_documentation_function_t,
	p_method_documentation_list_function,
	p_method_documentation_list_compiler_macro,
	p_method_documentation_symbol_function,
	p_method_documentation_symbol_compiler_macro,
	p_method_documentation_symbol_setf,
	p_method_documentation_method_combination_t,
	p_method_documentation_method_combination_method_combination,
	p_method_documentation_symbol_method_combination,
	p_method_documentation_standard_method_t,
	p_method_documentation_package_t,
	p_method_documentation_standard_class_t,
	p_method_documentation_structure_class_t,
	p_method_documentation_symbol_type,
	p_method_documentation_symbol_structure,
	p_method_documentation_symbol_variable,
	p_method_setf_documentation_function_t,
	p_method_setf_documentation_list_function,
	p_method_setf_documentation_list_compiler_macro,
	p_method_setf_documentation_symbol_function,
	p_method_setf_documentation_symbol_compiler_macro,
	p_method_setf_documentation_symbol_setf,
	p_method_setf_documentation_method_combination_t,
	p_method_setf_documentation_method_combination_method_combination,
	p_method_setf_documentation_symbol_method_combination,
	p_method_setf_documentation_standard_method_t,
	p_method_setf_documentation_package_t,
	p_method_setf_documentation_standard_class_t,
	p_method_setf_documentation_structure_class_t,
	p_method_setf_documentation_symbol_type,
	p_method_setf_documentation_symbol_structure,
	p_method_setf_documentation_symbol_variable,
	/* clos */
	p_defun_standard_lambda,
	p_defun_clos_ensure_reader,
	p_defun_clos_ensure_writer_instance,
	/* readtable */
	p_defun_reader_double_quote,
	p_defun_reader_single_quote,
	p_defun_reader_parensis_open,
	p_defun_reader_parensis_close,
	p_defun_reader_semicolon,
	p_defun_reader_backquote,
	p_defun_reader_comma,
	p_defun_reader_sharp,
	p_defun_dispatch_error,
	p_defun_dispatch_equal,
	p_defun_dispatch_sharp,
	p_defun_dispatch_single_quote,
	p_defun_dispatch_parensis_open,
	p_defun_dispatch_parensis_close,
	p_defun_dispatch_asterisk,
	p_defun_dispatch_colon,
	p_defun_dispatch_less,
	p_defun_dispatch_backslash,
	p_defun_dispatch_or,
	p_defun_dispatch_plus,
	p_defun_dispatch_minus,
	p_defun_dispatch_dot,
	p_defun_dispatch_radix,
	p_defun_dispatch_binary,
	p_defun_dispatch_octal,
	p_defun_dispatch_hexadecimal,
	p_defun_dispatch_complex,
	p_defun_dispatch_array,
	p_defun_dispatch_pathname,
	p_defun_dispatch_structure,
	/* function */
	p_defun_constantly_nil,
	p_defun_constantly_t,
	p_defun_constantly_values,
	/* package */
	p_defun_package_designator_interactive,
	p_defun_make_package_input,
	p_defun_unintern_call,
	p_defun_unintern_input,
	/* condition */
	p_defun_handler_warning,
	p_defun_handler_empty,
	/* eval */
	p_defun_handler_compile,
	/* rt */
	p_defun_push_entries,
	p_defun_rem_all_tests,
	p_defmacro_deftest,
	p_defmacro_deftest_error,
	p_defmacro_deftest_error_,
	p_defun_do_tests,
	p_defun_equalrt,
	/* structure */
	p_defun_structure_reader1,
	p_defun_structure_reader2,
	p_defun_structure_reader3,
	p_defun_structure_writer1,
	p_defun_structure_writer2,
	p_defun_structure_writer3,
	p_defun_structure_constructor1,
	p_defun_structure_constructor2,
	p_defun_structure_constructor3,
	p_defun_structure_copier1,
	p_defun_structure_copier2,
	p_defun_structure_copier3,
	p_defun_structure_predicate1,
	p_defun_structure_predicate2,
	p_defun_structure_predicate3,
	p_method_defstruct_default,
	p_method_defstruct_object,
	p_method_defstruct_function,
	/* pprint */
	p_pprint_logical_block_fill_form,
	p_pprint_logical_block_fill,
	p_pprint_logical_block_linear_form,
	p_pprint_logical_block_linear,
	p_pprint_logical_block_tabular_form,
	p_pprint_logical_block_tabular,
	p_pprint_dispatch_vector2,
	p_pprint_dispatch_vector1,
	p_pprint_dispatch_vector,
	p_pprint_dispatch_quote2,
	p_pprint_dispatch_quote1,
	p_pprint_dispatch_quote,
	p_pprint_dispatch_call2,
	p_pprint_dispatch_call1,
	p_pprint_dispatch_call,
	p_pprint_dispatch_defun6,
	p_pprint_dispatch_defun5,
	p_pprint_dispatch_defun4,
	p_pprint_dispatch_defun3,
	p_pprint_dispatch_defun2,
	p_pprint_dispatch_defun1,
	p_pprint_dispatch_defun,
	p_pprint_dispatch_let2,
	p_pprint_dispatch_let1,
	p_pprint_dispatch_let,
	/* restart */
	p_restart_symbol_use_function,
	p_restart_symbol_use_interactive,
	p_restart_symbol_use_test,
	p_restart_symbol_store_special,
	p_restart_symbol_store_interactive,
	p_restart_function_use_function,
	p_restart_function_use_interactive,
	p_restart_function_store_function,
	p_restart_function_store_interactive,
	p_restart_fdefinition_use_function,
	p_restart_fdefinition_use_interactive,
	p_restart_fdefinition_store_function,
	p_restart_fdefinition_store_interactive,
	/* require */
	p_function_require_default,

	/* syscall common */
	p_defun_syscall_define_symbol_macro,
	p_defmacro_syscall_symbol_macro_expander,
	p_defun_syscall_defconstant,
	p_defun_syscall_in_package,
	p_defun_syscall_setplist,
	p_defun_syscall_remplist,
	p_defun_syscall_make_hash_iterator,
	p_defun_syscall_next_hash_iterator,
	p_defun_syscall_make_package_iterator,
	p_defun_syscall_next_package_iterator,
	p_defun_syscall_defpackage,
	p_defun_syscall_do_symbols,
	p_defun_syscall_do_external_symbols,
	p_defun_syscall_do_all_symbols,
	p_defun_syscall_getdoc_variable,
	p_defun_syscall_setdoc_variable,
	p_defun_syscall_ecase_error,
	p_defun_syscall_etypecase_error,
	p_defun_syscall_define_setf_expander,
	p_defun_syscall_end_input_stream,
	p_defun_syscall_make_extend_output_stream,
	p_defun_syscall_prompt_for,
	p_defun_syscall_print_unreadable_call,
	p_defun_syscall_write_default,
	p_defun_syscall_symbol_deftype,
	p_defun_syscall_delete_deftype,
	p_defun_syscall_ensure_structure,
	p_defun_syscall_structure_constructor,
	p_defun_syscall_loop_bind,
	p_defun_syscall_make_pprint_stream,
	p_defun_syscall_pprint_gensym,
	p_defun_syscall_pprint_exit,
	p_defun_syscall_pprint_pop,
	p_defun_syscall_pprint_close,
	p_defun_syscall_pprint_check,
	p_defun_syscall_pprint_pretty,
	p_defun_syscall_timeinfo,
	p_defun_syscall_ed_function,
	p_defun_syscall_trace_add,
	p_defun_syscall_trace_del,
	p_defun_syscall_with_compilation_unit,
	p_defun_syscall_set_slots,
	p_defun_syscall_intern_eql_specializer,
	p_defun_syscall_defgeneric_define,
	p_defun_syscall_defgeneric_method,
	p_defun_syscall_condition_restarts_push,
	p_defun_syscall_condition_restarts_pop,
	p_defun_syscall_condition_restarts_make,
	p_defun_syscall_make_restart,
	/* syscall function */
	p_defun_syscall_abort_lisp,
	p_defun_syscall_hello,
	p_defun_syscall_infobit,
	p_defun_syscall_infoprint,
	p_defun_syscall_gc,
	p_defun_syscall_savecore,
	p_defun_syscall_loadcore,
	p_defun_syscall_package_export_list,
	p_defun_syscall_specialp,
	p_defun_syscall_array_general_p,
	p_defun_syscall_array_specialized_p,
	p_defun_syscall_simple_sort,
	p_defun_syscall_bubble_sort,
	p_defun_syscall_quick_sort,
	p_defun_syscall_merge_sort,
	p_defun_syscall_exit,
	p_defun_syscall_closp,
	p_defun_syscall_fixnump,
	p_defun_syscall_bignump,
	p_defun_syscall_ratiop,
	p_defun_syscall_short_float_p,
	p_defun_syscall_single_float_p,
	p_defun_syscall_double_float_p,
	p_defun_syscall_long_float_p,
	p_defun_syscall_callnamep,
	p_defun_syscall_large_number,
	p_defun_syscall_make_character,
	p_defun_syscall_make_fixnum,
	p_defun_syscall_make_bignum,
	p_defun_syscall_make_ratio,
	p_defun_syscall_make_complex,
	p_defun_syscall_equal_random_state,
	p_defun_syscall_subtypep_extend,
	p_defun_syscall_subtypep_number,
	p_defun_syscall_eastasian_set,
	p_defun_syscall_eastasian_get,
	p_defun_syscall_eastasian_width,
	p_defun_syscall_run_program,
	p_defun_syscall_make_callname,
	p_defun_syscall_remove_file,
	p_defun_syscall_remove_directory,
	p_defmacro_syscall_declare_parse,
	p_defun_syscall_parse_type,
	p_defun_syscall_upgraded_open_element_type,
	p_defun_syscall_make_memory_input_stream,
	p_defun_syscall_make_memory_output_stream,
	p_defun_syscall_make_memory_io_stream,
	p_defmacro_syscall_with_input_from_memory,
	p_defmacro_syscall_with_output_to_memory,
	p_defun_syscall_get_output_stream_memory,
	p_defun_syscall_memory_stream_p,
	p_defun_syscall_setf_memory_stream_p,
	p_defun_syscall_byte_integer,
	p_defun_syscall_sysctl,
	p_defun_syscall_terme,
	p_defun_syscall_fpclassify,
	p_defun_syscall_make_paper,
	p_defun_syscall_info_paper,
	p_defun_syscall_array_paper,
	p_defun_syscall_body_paper,
	p_defun_syscall_dlfile,
	p_defun_syscall_dlcall,
	/* size */
	p_size
};

typedef enum pointer_index pointer;

#endif


/************************************************************
 *  pointer_type.h
 ************************************************************/
#ifndef __POINTER_TYPE_HEADER__
#define __POINTER_TYPE_HEADER__


typedef void *callbind_error;
typedef int (*callbind_code)(Execute, CodeValue);
typedef int (*callbind_macro)(Execute, addr, addr);
typedef int (*callbind_none)(void);
typedef int (*callbind_any)(Execute);
typedef int (*callbind_empty)(Execute);
typedef int (*callbind_rest)(Execute, addr);
typedef int (*callbind_dynamic)(Execute, addr);
typedef int (*callbind_var1)(Execute, addr);
typedef int (*callbind_var2)(Execute, addr, addr);
typedef int (*callbind_var3)(Execute, addr, addr, addr);
typedef int (*callbind_var4)(Execute, addr, addr, addr, addr);
typedef int (*callbind_var5)(Execute, addr, addr, addr, addr, addr);
typedef int (*callbind_var6)(Execute, addr, addr, addr, addr, addr, addr);
typedef int (*callbind_opt1)(Execute, addr);
typedef int (*callbind_opt2)(Execute, addr, addr);
typedef int (*callbind_opt3)(Execute, addr, addr, addr);
typedef int (*callbind_opt4)(Execute, addr, addr, addr, addr);
typedef int (*callbind_opt5)(Execute, addr, addr, addr, addr, addr);
typedef int (*callbind_var1opt1)(Execute, addr, addr);
typedef int (*callbind_var2opt1)(Execute, addr, addr, addr);
typedef int (*callbind_var3opt1)(Execute, addr, addr, addr, addr);
typedef int (*callbind_var4opt1)(Execute, addr, addr, addr, addr, addr);
typedef int (*callbind_var5opt1)(Execute, addr, addr, addr, addr, addr, addr);
typedef int (*callbind_var1opt2)(Execute, addr, addr, addr);
typedef int (*callbind_var2opt2)(Execute, addr, addr, addr, addr);
typedef int (*callbind_var2opt3)(Execute, addr, addr, addr, addr, addr);
typedef int (*callbind_var1rest)(Execute, addr, addr);
typedef int (*callbind_var2rest)(Execute, addr, addr, addr);
typedef int (*callbind_var3rest)(Execute, addr, addr, addr, addr);
typedef int (*callbind_var4rest)(Execute, addr, addr, addr, addr, addr);
typedef int (*callbind_opt1rest)(Execute, addr, addr);
typedef int (*callbind_var1dynamic)(Execute, addr, addr);
typedef int (*callbind_var2dynamic)(Execute, addr, addr, addr);
typedef int (*callbind_var3dynamic)(Execute, addr, addr, addr, addr);
typedef int (*callbind_var4dynamic)(Execute, addr, addr, addr, addr, addr);
typedef int (*callbind_opt1dynamic)(Execute, addr, addr);

typedef int (*callbind_extend_macro)(addr, addr);
typedef int (*callbind_extend_rest)(addr);
typedef int (*callbind_extend_dynamic)(addr);
typedef int (*callbind_extend_any)();
typedef int (*callbind_extend_empty)();
typedef int (*callbind_extend_var1)(addr);
typedef int (*callbind_extend_var2)(addr, addr);
typedef int (*callbind_extend_var3)(addr, addr, addr);
typedef int (*callbind_extend_var4)(addr, addr, addr, addr);
typedef int (*callbind_extend_var5)(addr, addr, addr, addr, addr);
typedef int (*callbind_extend_var6)(addr, addr, addr, addr, addr, addr);
typedef int (*callbind_extend_opt1)(addr);
typedef int (*callbind_extend_opt2)(addr, addr);
typedef int (*callbind_extend_opt3)(addr, addr, addr);
typedef int (*callbind_extend_var1opt1)(addr, addr);
typedef int (*callbind_extend_var1opt2)(addr, addr, addr);
typedef int (*callbind_extend_var1opt3)(addr, addr, addr, addr);
typedef int (*callbind_extend_var2opt1)(addr, addr, addr);
typedef int (*callbind_extend_var2opt2)(addr, addr, addr, addr);
typedef int (*callbind_extend_var2opt3)(addr, addr, addr, addr, addr);
typedef int (*callbind_extend_var3opt1)(addr, addr, addr, addr);
typedef int (*callbind_extend_var3opt2)(addr, addr, addr, addr, addr);
typedef int (*callbind_extend_var3opt3)(addr, addr, addr, addr, addr, addr);
typedef int (*callbind_extend_var1rest)(addr, addr);
typedef int (*callbind_extend_var2rest)(addr, addr, addr);
typedef int (*callbind_extend_var3rest)(addr, addr, addr, addr);
typedef int (*callbind_extend_var1dynamic)(addr, addr);
typedef int (*callbind_extend_var2dynamic)(addr, addr, addr);
typedef int (*callbind_extend_var3dynamic)(addr, addr, addr, addr);

enum CallBind_index {
	CallBind_error,
	CallBind_code,
	CallBind_macro,
	CallBind_none,
	CallBind_any,
	CallBind_empty,
	CallBind_rest,
	CallBind_dynamic,
	CallBind_var1,
	CallBind_var2,
	CallBind_var3,
	CallBind_var4,
	CallBind_var5,
	CallBind_var6,
	CallBind_opt1,
	CallBind_opt2,
	CallBind_opt3,
	CallBind_opt4,
	CallBind_opt5,
	CallBind_var1opt1,
	CallBind_var2opt1,
	CallBind_var3opt1,
	CallBind_var4opt1,
	CallBind_var5opt1,
	CallBind_var1opt2,
	CallBind_var2opt2,
	CallBind_var2opt3,
	CallBind_var1rest,
	CallBind_var2rest,
	CallBind_var3rest,
	CallBind_var4rest,
	CallBind_opt1rest,
	CallBind_var1dynamic,
	CallBind_var2dynamic,
	CallBind_var3dynamic,
	CallBind_var4dynamic,
	CallBind_opt1dynamic,

	CallBind_extend_macro,
	CallBind_extend_rest,
	CallBind_extend_dynamic,
	CallBind_extend_any,
	CallBind_extend_empty,
	CallBind_extend_var1,
	CallBind_extend_var2,
	CallBind_extend_var3,
	CallBind_extend_var4,
	CallBind_extend_var5,
	CallBind_extend_var6,
	CallBind_extend_opt1,
	CallBind_extend_opt2,
	CallBind_extend_opt3,
	CallBind_extend_var1opt1,
	CallBind_extend_var1opt2,
	CallBind_extend_var1opt3,
	CallBind_extend_var2opt1,
	CallBind_extend_var2opt2,
	CallBind_extend_var2opt3,
	CallBind_extend_var3opt1,
	CallBind_extend_var3opt2,
	CallBind_extend_var3opt3,
	CallBind_extend_var1rest,
	CallBind_extend_var2rest,
	CallBind_extend_var3rest,
	CallBind_extend_var1dynamic,
	CallBind_extend_var2dynamic,
	CallBind_extend_var3dynamic,

	CallBind_size
};

struct callbind_struct {
	enum CallBind_index type;
	union {
		callbind_error error;
		callbind_code code;
		callbind_macro macro;
		callbind_none none;
		callbind_any any;
		callbind_empty empty;
		callbind_rest rest;
		callbind_dynamic dynamic;
		callbind_var1 var1;
		callbind_var2 var2;
		callbind_var3 var3;
		callbind_var4 var4;
		callbind_var5 var5;
		callbind_var6 var6;
		callbind_opt1 opt1;
		callbind_opt2 opt2;
		callbind_opt3 opt3;
		callbind_opt4 opt4;
		callbind_opt5 opt5;
		callbind_var1opt1 var1opt1;
		callbind_var2opt1 var2opt1;
		callbind_var3opt1 var3opt1;
		callbind_var4opt1 var4opt1;
		callbind_var5opt1 var5opt1;
		callbind_var1opt2 var1opt2;
		callbind_var2opt2 var2opt2;
		callbind_var2opt3 var2opt3;
		callbind_var1rest var1rest;
		callbind_var2rest var2rest;
		callbind_var3rest var3rest;
		callbind_var4rest var4rest;
		callbind_opt1rest opt1rest;
		callbind_var1dynamic var1dynamic;
		callbind_var2dynamic var2dynamic;
		callbind_var3dynamic var3dynamic;
		callbind_var4dynamic var4dynamic;
		callbind_opt1dynamic opt1dynamic;

		callbind_extend_macro extend_macro;
		callbind_extend_rest extend_rest;
		callbind_extend_dynamic extend_dynamic;
		callbind_extend_any extend_any;
		callbind_extend_empty extend_empty;
		callbind_extend_var1 extend_var1;
		callbind_extend_var2 extend_var2;
		callbind_extend_var3 extend_var3;
		callbind_extend_var4 extend_var4;
		callbind_extend_var5 extend_var5;
		callbind_extend_var6 extend_var6;
		callbind_extend_opt1 extend_opt1;
		callbind_extend_opt2 extend_opt2;
		callbind_extend_opt3 extend_opt3;
		callbind_extend_var1opt1 extend_var1opt1;
		callbind_extend_var1opt2 extend_var1opt2;
		callbind_extend_var1opt3 extend_var1opt3;
		callbind_extend_var2opt1 extend_var2opt1;
		callbind_extend_var2opt2 extend_var2opt2;
		callbind_extend_var2opt3 extend_var2opt3;
		callbind_extend_var3opt1 extend_var3opt1;
		callbind_extend_var3opt2 extend_var3opt2;
		callbind_extend_var3opt3 extend_var3opt3;
		callbind_extend_var1rest extend_var1rest;
		callbind_extend_var2rest extend_var2rest;
		callbind_extend_var3rest extend_var3rest;
		callbind_extend_var1dynamic extend_var1dynamic;
		callbind_extend_var2dynamic extend_var2dynamic;
		callbind_extend_var3dynamic extend_var3dynamic;
		void *pvoid;
	} call;
};

#endif


/************************************************************
 *  pointer.h
 ************************************************************/
#ifndef __POINTER_HEADER__
#define __POINTER_HEADER__


#define pointer_table _n(pointer_table)
#define clear_pointer _n(clear_pointer)

#define SizePointer (p_size + LISP_POINTER_EXTEND)

extern struct callbind_struct pointer_table[SizePointer];

#define ExecPointer(x, y) (pointer_table[x].call.y)

#define SetPointer(p, y, z) { \
	struct callbind_struct *__callbind = &(pointer_table[p]); \
	__callbind->type = CallBind_##y; \
	__callbind->call.y = z; \
}

#define GetPointer(p, y, z) { \
	struct callbind_struct *__callbind = &(pointer_table[p]); \
	Check(__callbind->type != CallBind_##y, "type error"); \
	(*z) = __callbind->call.y; \
}

#define SetPointerType(x, y)          SetPointer(p_##y, x, y)
#define SetPointerCall(x,y,z)         SetPointer_##y(p_##x##_##z, function_##z)
#define SetPointerSysCall(x,y,z)      SetPointer_##y(p_##x##_syscall_##z, syscall_##z)

#define SetPointerType_(x, y)         SetPointer(p_##y, x, y##_)

#define SetPointer_code(p, x)         SetPointer(p, code, x)
#define GetPointer_code(p, x)         GetPointer(p, code, x)
#define SetPointer_macro(p, x)        SetPointer(p, macro, x)
#define GetPointer_macro(p, x)        GetPointer(p, macro, x)
#define SetPointer_none(p, x)         SetPointer(p, none, x)
#define GetPointer_none(p, x)         GetPointer(p, none, x)
#define SetPointer_any(p, x)          SetPointer(p, any, x)
#define GetPointer_any(p, x)          GetPointer(p, any, x)
#define SetPointer_empty(p, x)        SetPointer(p, empty, x)
#define GetPointer_empty(p, x)        GetPointer(p, empty, x)
#define SetPointer_rest(p, x)         SetPointer(p, rest, x)
#define GetPointer_rest(p, x)         GetPointer(p, rest, x)
#define SetPointer_dynamic(p, x)      SetPointer(p, dynamic, x)
#define GetPointer_dynamic(p, x)      GetPointer(p, dynamic, x)
#define SetPointer_var1(p, x)         SetPointer(p, var1, x)
#define GetPointer_var1(p, x)         GetPointer(p, var1, x)
#define SetPointer_var2(p, x)         SetPointer(p, var2, x)
#define GetPointer_var2(p, x)         GetPointer(p, var2, x)
#define SetPointer_var3(p, x)         SetPointer(p, var3, x)
#define GetPointer_var3(p, x)         GetPointer(p, var3, x)
#define SetPointer_var4(p, x)         SetPointer(p, var4, x)
#define GetPointer_var4(p, x)         GetPointer(p, var4, x)
#define SetPointer_var5(p, x)         SetPointer(p, var5, x)
#define GetPointer_var5(p, x)         GetPointer(p, var5, x)
#define SetPointer_var6(p, x)         SetPointer(p, var6, x)
#define GetPointer_var6(p, x)         GetPointer(p, var6, x)
#define SetPointer_opt1(p, x)         SetPointer(p, opt1, x)
#define GetPointer_opt1(p, x)         GetPointer(p, opt1, x)
#define SetPointer_opt2(p, x)         SetPointer(p, opt2, x)
#define GetPointer_opt2(p, x)         GetPointer(p, opt2, x)
#define SetPointer_opt3(p, x)         SetPointer(p, opt3, x)
#define GetPointer_opt3(p, x)         GetPointer(p, opt3, x)
#define SetPointer_opt4(p, x)         SetPointer(p, opt4, x)
#define GetPointer_opt4(p, x)         GetPointer(p, opt4, x)
#define SetPointer_opt5(p, x)         SetPointer(p, opt5, x)
#define GetPointer_opt5(p, x)         GetPointer(p, opt5, x)
#define SetPointer_var1opt1(p, x)     SetPointer(p, var1opt1, x)
#define GetPointer_var1opt1(p, x)     GetPointer(p, var1opt1, x)
#define SetPointer_var2opt1(p, x)     SetPointer(p, var2opt1, x)
#define GetPointer_var2opt1(p, x)     GetPointer(p, var2opt1, x)
#define SetPointer_var3opt1(p, x)     SetPointer(p, var3opt1, x)
#define GetPointer_var3opt1(p, x)     GetPointer(p, var3opt1, x)
#define SetPointer_var4opt1(p, x)     SetPointer(p, var4opt1, x)
#define GetPointer_var4opt1(p, x)     GetPointer(p, var4opt1, x)
#define SetPointer_var5opt1(p, x)     SetPointer(p, var5opt1, x)
#define GetPointer_var5opt1(p, x)     GetPointer(p, var5opt1, x)
#define SetPointer_var1opt2(p, x)     SetPointer(p, var1opt2, x)
#define GetPointer_var1opt2(p, x)     GetPointer(p, var1opt2, x)
#define SetPointer_var2opt2(p, x)     SetPointer(p, var2opt2, x)
#define GetPointer_var2opt2(p, x)     GetPointer(p, var2opt2, x)
#define SetPointer_var2opt3(p, x)     SetPointer(p, var2opt3, x)
#define GetPointer_var2opt3(p, x)     GetPointer(p, var2opt3, x)
#define SetPointer_var1rest(p, x)     SetPointer(p, var1rest, x)
#define GetPointer_var1rest(p, x)     GetPointer(p, var1rest, x)
#define SetPointer_var2rest(p, x)     SetPointer(p, var2rest, x)
#define GetPointer_var2rest(p, x)     GetPointer(p, var2rest, x)
#define SetPointer_var3rest(p, x)     SetPointer(p, var3rest, x)
#define GetPointer_var3rest(p, x)     GetPointer(p, var3rest, x)
#define SetPointer_var4rest(p, x)     SetPointer(p, var4rest, x)
#define GetPointer_var4rest(p, x)     GetPointer(p, var4rest, x)
#define SetPointer_opt1rest(p, x)     SetPointer(p, opt1rest, x)
#define GetPointer_opt1rest(p, x)     GetPointer(p, opt1rest, x)
#define SetPointer_var1dynamic(p, x)  SetPointer(p, var1dynamic, x)
#define GetPointer_var1dynamic(p, x)  GetPointer(p, var1dynamic, x)
#define SetPointer_var2dynamic(p, x)  SetPointer(p, var2dynamic, x)
#define GetPointer_var2dynamic(p, x)  GetPointer(p, var2dynamic, x)
#define SetPointer_var3dynamic(p, x)  SetPointer(p, var3dynamic, x)
#define GetPointer_var3dynamic(p, x)  GetPointer(p, var3dynamic, x)
#define SetPointer_var4dynamic(p, x)  SetPointer(p, var4dynamic, x)
#define GetPointer_var4dynamic(p, x)  GetPointer(p, var4dynamic, x)
#define SetPointer_opt1dynamic(p, x)  SetPointer(p, opt1dynamic, x)
#define GetPointer_opt1dynamic(p, x)  GetPointer(p, opt1dynamic, x)

#define SetPointer_extend_macro(p, x)        SetPointer(p, extend_macro, x)
#define GetPointer_extend_macro(p, x)        GetPointer(p, extend_macro, x)
#define SetPointer_extend_rest(p, x)         SetPointer(p, extend_rest, x)
#define GetPointer_extend_rest(p, x)         GetPointer(p, extend_rest, x)
#define SetPointer_extend_dynamic(p, x)      SetPointer(p, extend_dynamic, x)
#define GetPointer_extend_dynamic(p, x)      GetPointer(p, extend_dynamic, x)
#define SetPointer_extend_any(p, x)          SetPointer(p, extend_any, x)
#define GetPointer_extend_any(p, x)          GetPointer(p, extend_any, x)
#define SetPointer_extend_empty(p, x)        SetPointer(p, extend_empty, x)
#define GetPointer_extend_empty(p, x)        GetPointer(p, extend_empty, x)
#define SetPointer_extend_var1(p, x)         SetPointer(p, extend_var1, x)
#define GetPointer_extend_var1(p, x)         GetPointer(p, extend_var1, x)
#define SetPointer_extend_var2(p, x)         SetPointer(p, extend_var2, x)
#define GetPointer_extend_var2(p, x)         GetPointer(p, extend_var2, x)
#define SetPointer_extend_var3(p, x)         SetPointer(p, extend_var3, x)
#define GetPointer_extend_var3(p, x)         GetPointer(p, extend_var3, x)
#define SetPointer_extend_var4(p, x)         SetPointer(p, extend_var4, x)
#define GetPointer_extend_var4(p, x)         GetPointer(p, extend_var4, x)
#define SetPointer_extend_var5(p, x)         SetPointer(p, extend_var5, x)
#define GetPointer_extend_var5(p, x)         GetPointer(p, extend_var5, x)
#define SetPointer_extend_var6(p, x)         SetPointer(p, extend_var6, x)
#define GetPointer_extend_var6(p, x)         GetPointer(p, extend_var6, x)
#define SetPointer_extend_opt1(p, x)         SetPointer(p, extend_opt1, x)
#define GetPointer_extend_opt1(p, x)         GetPointer(p, extend_opt1, x)
#define SetPointer_extend_opt2(p, x)         SetPointer(p, extend_opt2, x)
#define GetPointer_extend_opt2(p, x)         GetPointer(p, extend_opt2, x)
#define SetPointer_extend_opt3(p, x)         SetPointer(p, extend_opt3, x)
#define GetPointer_extend_opt3(p, x)         GetPointer(p, extend_opt3, x)
#define SetPointer_extend_var1opt1(p, x)     SetPointer(p, extend_var1opt1, x)
#define GetPointer_extend_var1opt1(p, x)     GetPointer(p, extend_var1opt1, x)
#define SetPointer_extend_var1opt2(p, x)     SetPointer(p, extend_var1opt2, x)
#define GetPointer_extend_var1opt2(p, x)     GetPointer(p, extend_var1opt2, x)
#define SetPointer_extend_var1opt3(p, x)     SetPointer(p, extend_var1opt3, x)
#define GetPointer_extend_var1opt3(p, x)     GetPointer(p, extend_var1opt3, x)
#define SetPointer_extend_var2opt1(p, x)     SetPointer(p, extend_var2opt1, x)
#define GetPointer_extend_var2opt1(p, x)     GetPointer(p, extend_var2opt1, x)
#define SetPointer_extend_var2opt2(p, x)     SetPointer(p, extend_var2opt2, x)
#define GetPointer_extend_var2opt2(p, x)     GetPointer(p, extend_var2opt2, x)
#define SetPointer_extend_var2opt3(p, x)     SetPointer(p, extend_var2opt3, x)
#define GetPointer_extend_var2opt3(p, x)     GetPointer(p, extend_var2opt3, x)
#define SetPointer_extend_var3opt1(p, x)     SetPointer(p, extend_var3opt1, x)
#define GetPointer_extend_var3opt1(p, x)     GetPointer(p, extend_var3opt1, x)
#define SetPointer_extend_var3opt2(p, x)     SetPointer(p, extend_var3opt2, x)
#define GetPointer_extend_var3opt2(p, x)     GetPointer(p, extend_var3opt2, x)
#define SetPointer_extend_var3opt3(p, x)     SetPointer(p, extend_var3opt3, x)
#define GetPointer_extend_var3opt3(p, x)     GetPointer(p, extend_var3opt3, x)
#define SetPointer_extend_var1rest(p, x)     SetPointer(p, extend_var1rest, x)
#define GetPointer_extend_var1rest(p, x)     GetPointer(p, extend_var1rest, x)
#define SetPointer_extend_var2rest(p, x)     SetPointer(p, extend_var2rest, x)
#define GetPointer_extend_var2rest(p, x)     GetPointer(p, extend_var2rest, x)
#define SetPointer_extend_var3rest(p, x)     SetPointer(p, extend_var3rest, x)
#define GetPointer_extend_var3rest(p, x)     GetPointer(p, extend_var3rest, x)
#define SetPointer_extend_var1dynamic(p, x)  SetPointer(p, extend_var1dynamic, x)
#define GetPointer_extend_var1dynamic(p, x)  GetPointer(p, extend_var1dynamic, x)
#define SetPointer_extend_var2dynamic(p, x)  SetPointer(p, extend_var2dynamic, x)
#define GetPointer_extend_var2dynamic(p, x)  GetPointer(p, extend_var2dynamic, x)
#define SetPointer_extend_var3dynamic(p, x)  SetPointer(p, extend_var3dynamic, x)
#define GetPointer_extend_var3dynamic(p, x)  GetPointer(p, extend_var3dynamic, x)

void clear_pointer(void);

#endif


/************************************************************
 *  control_operator.h
 ************************************************************/
#ifndef __CONTROL_OPERATOR_HEADER__
#define __CONTROL_OPERATOR_HEADER__


#define setargs_va_control _n(setargs_va_control)
#define setargs_nil_control _n(setargs_nil_control)
#define setargs_list_control _n(setargs_list_control)
#define pushargs_control _n(pushargs_control)
#define popargs_control_ _n(popargs_control_)
#define getargs_control _n(getargs_control)
#define getargs_tail_control _n(getargs_tail_control)
#define getargs_list_control_unsafe _n(getargs_list_control_unsafe)
#define getargs_list_control_heap _n(getargs_list_control_heap)
#define pushargs_allvalues _n(pushargs_allvalues)
#define goto_control_ _n(goto_control_)
#define go_control_ _n(go_control_)
#define return_from_control_ _n(return_from_control_)
#define catch_control _n(catch_control)
#define throw_control_ _n(throw_control_)
#define pushhandler_common_ _n(pushhandler_common_)
#define reverse_handler_control _n(reverse_handler_control)
#define pushbind_restart_control _n(pushbind_restart_control)
#define reverse_restart_control _n(reverse_restart_control)
#define find_condition_control_ _n(find_condition_control_)
#define invoke_handler_control_ _n(invoke_handler_control_)
#define invoke_restart_control_ _n(invoke_restart_control_)
#define invoke_restart_interactively_control_ _n(invoke_restart_interactively_control_)
#define find_restart_control_ _n(find_restart_control_)
#define find_restart_control_error_ _n(find_restart_control_error_)
#define compute_restarts_control_ _n(compute_restarts_control_)
#define restart_control_ _n(restart_control_)
#define restart0_control_ _n(restart0_control_)
#define restart1_control_ _n(restart1_control_)
#define restart1r_control_ _n(restart1r_control_)
#define restart2_control_ _n(restart2_control_)
#define set_taginfo_control _n(set_taginfo_control)
#define set_blockinfo_control _n(set_blockinfo_control)
#define catch_clang_ _n(catch_clang_)
#define stack_frame_stream_ _n(stack_frame_stream_)
#define stack_frame_output_ _n(stack_frame_output_)

/* arguments */
void setargs_va_control(Execute ptr, ...);
void setargs_nil_control(Execute ptr);
void setargs_list_control(Execute ptr, addr list);
void pushargs_control(Execute ptr, addr value);
int popargs_control_(Execute ptr, addr *ret);
void getargs_control(Execute ptr, size_t index, addr *ret);
void getargs_tail_control(Execute ptr, addr *ret);
#define GetArgsControl(ptr, ret) GetControl((ptr)->control, Control_Cons, (ret))
void getargs_list_control_unsafe(Execute ptr, size_t index, addr *ret);
void getargs_list_control_heap(Execute ptr, size_t index, addr *ret);
void pushargs_allvalues(Execute ptr);

/* flow control */
int goto_control_(Execute ptr, size_t point);
int go_control_(Execute ptr, addr tag);
int return_from_control_(Execute ptr, addr name);
void catch_control(Execute ptr, addr name);
int throw_control_(Execute ptr, addr name);

int pushhandler_common_(Execute ptr, addr name, addr call, int escape);
void reverse_handler_control(Execute ptr);
void pushbind_restart_control(Execute ptr, addr list, int escape);
void reverse_restart_control(Execute ptr);

int find_condition_control_(Execute ptr, addr instance, int *ret);
int invoke_handler_control_(Execute ptr, addr pos);
int invoke_restart_control_(Execute ptr, addr restart, addr args);
int invoke_restart_interactively_control_(Execute ptr, addr restart);

int find_restart_control_(Execute ptr,
		addr name, addr condition, addr *value, int *ret);
int find_restart_control_error_(Execute ptr, addr name, addr condition, addr *ret);
int compute_restarts_control_(Execute ptr, addr condition, addr *ret);

int restart_control_(Execute ptr, int (*call)(Execute, void *), void *voidp);
int restart0_control_(Execute ptr, addr restart,
		int (*call)(Execute, void *), void *voidp);
int restart1_control_(Execute ptr, addr restart,
		int (*call)(Execute, addr), addr v1);
int restart1r_control_(Execute ptr, addr restart,
		int (*call)(Execute, addr, addr *), addr v1, addr *ret);
int restart2_control_(Execute ptr, addr restart,
		int (*call)(Execute, addr, addr), addr v1, addr v2);

void set_taginfo_control(Execute ptr, addr list);
void set_blockinfo_control(Execute ptr, addr pos);
int catch_clang_(Execute ptr, pointer call, addr tag, addr value);

int stack_frame_stream_(Execute ptr, addr stream);
int stack_frame_output_(Execute ptr);

#endif


/************************************************************
 *  setf.h
 ************************************************************/
#ifndef __SETF_HEADER__
#define __SETF_HEADER__


#define function_setf_the _n(function_setf_the)
#define function_setf_values _n(function_setf_values)
#define function_setf_getf _n(function_setf_getf)
#define function_setf_apply _n(function_setf_apply)
#define get_setf_expansion_ _n(get_setf_expansion_)

/* common-lisp setf-expansion */
int function_setf_the(Execute ptr, addr args, addr env);
int function_setf_values(Execute ptr, addr args, addr env);
int function_setf_getf(Execute ptr, addr args, addr env);
int function_setf_apply(Execute ptr, addr args, addr env);

/* get-setf-expander */
int get_setf_expansion_(Execute ptr, addr form, addr env,
		addr *vars, addr *vals, addr *store, addr *writer, addr *reader);

#endif


/************************************************************
 *  buffering.h
 ************************************************************/
#ifndef __BUFFERING_HEADER__
#define __BUFFERING_HEADER__


#define bufferingp _n(bufferingp)
#define buffering_heap _n(buffering_heap)
#define clear_buffering _n(clear_buffering)
#define end_buffering _n(end_buffering)
#define getcell_buffering _n(getcell_buffering)
#define getwidth_buffering _n(getwidth_buffering)
#define putc_buffering _n(putc_buffering)
#define getc_buffering _n(getc_buffering)
#define position_get_buffering _n(position_get_buffering)
#define position_set_buffering _n(position_set_buffering)
#define position_start_buffering _n(position_start_buffering)
#define position_end_buffering _n(position_end_buffering)
#define length_buffering _n(length_buffering)
#define make_vector_buffering_heap_ _n(make_vector_buffering_heap_)
#define read_buffering_ _n(read_buffering_)

int bufferingp(addr pos);
void buffering_heap(addr *ret, size_t cell, size_t array);
void clear_buffering(addr pos);
int end_buffering(addr pos);
void getcell_buffering(addr pos, size_t *ret);
void getwidth_buffering(addr pos, size_t *ret);

int putc_buffering(addr pos, byte c);
int getc_buffering(addr pos, byte *ret);
void position_get_buffering(addr pos, size_t *ret);
void position_set_buffering(addr pos, size_t value);
void position_start_buffering(addr pos);
void position_end_buffering(addr pos);
void length_buffering(addr pos, size_t *ret);
int make_vector_buffering_heap_(addr pos, addr *ret);
int read_buffering_(addr pos, addr vector);

#endif


/************************************************************
 *  call.h
 ************************************************************/
#ifndef __CALL_HEADER__
#define __CALL_HEADER__


#define init_call _n(init_call)
void init_call(void);

#endif


/************************************************************
 *  clos_define.h
 ************************************************************/
#ifndef __CLOS_DEFINE_HEADER__
#define __CLOS_DEFINE_HEADER__

#define CLOS_TABLE_SPECIALIZER_SIZE      32

enum SLOT_INDEX {
	SLOT_INDEX_NAME,
	SLOT_INDEX_TYPE,
	SLOT_INDEX_INITARGS,
	SLOT_INDEX_INITFORM,
	SLOT_INDEX_INITFUNCTION,
	SLOT_INDEX_READERS,
	SLOT_INDEX_WRITERS,
	SLOT_INDEX_DOCUMENT,
	SLOT_INDEX_CLASS,
	SLOT_INDEX_READONLY,
	SLOT_INDEX_SIZE
};

enum CLOS_INDEX {
	CLOS_INDEX_CLASS_OF,
	CLOS_INDEX_SLOT,
	CLOS_INDEX_VALUE,
	CLOS_INDEX_SIZE
};

enum Clos_class_Index {
	Clos_class_name,
	Clos_class_direct_slots,
	Clos_class_direct_subclasses,
	Clos_class_direct_superclasses,
	Clos_class_precedence_list,
	Clos_class_slots,
	Clos_class_finalized_p,
	Clos_class_prototype,
	Clos_class_default_initargs,
	Clos_class_direct_default_initargs,
	Clos_class_version,
	Clos_class_document,
	Clos_class_redefined_class,
	Clos_class_size
};

enum Clos_generic_Index {
	Clos_generic_name,
	Clos_generic_methods,
	Clos_generic_lambda_list,
	Clos_generic_argument_precedence_order,
	Clos_generic_declarations,
	Clos_generic_method_class,
	Clos_generic_method_combination,

	Clos_generic_vector,
	Clos_generic_remove,
	Clos_generic_argument,
	Clos_generic_documentation,
	Clos_generic_eqlcheck,
	Clos_generic_cache,
	Clos_generic_call,
	Clos_generic_precedence_index,
	Clos_generic_size
};

enum Clos_method_Index {
	Clos_method_function,
	Clos_method_generic_function,
	Clos_method_lambda_list,
	Clos_method_qualifiers,
	Clos_method_specializers,
	Clos_method_size
};

enum Clos_shortcomb_Index {
	Clos_shortcomb_name,
	Clos_shortcomb_document,
	Clos_shortcomb_identity,
	Clos_shortcomb_operator,
	Clos_shortcomb_order,
	Clos_shortcomb_size
};

enum Clos_longcomb_Index {
	Clos_longcomb_name,
	Clos_longcomb_document,
	Clos_longcomb_lambda_list,
	Clos_longcomb_binding,
	Clos_longcomb_qualifiers,
	Clos_longcomb_arguments,
	Clos_longcomb_generic,
	Clos_longcomb_form,
	Clos_longcomb_function,
	Clos_longcomb_size
};

enum Clos_shortdef_Index {
	Clos_shortdef_name,
	Clos_shortdef_document,
	Clos_shortdef_identity,
	Clos_shortdef_operator,
	Clos_shortdef_size
};

enum Clos_longdef_Index {
	Clos_longdef_name,
	Clos_longdef_document,
	Clos_longdef_lambda_list,
	Clos_longdef_qualifiers,
	Clos_longdef_arguments,
	Clos_longdef_generic,
	Clos_longdef_form,
	Clos_longdef_size
};

enum Clos_specializer_Index {
	Clos_specializer_object,
	Clos_specializer_type,
	Clos_specializer_size
};

enum Clos_standard {
	Clos_standard_around,
	Clos_standard_before,
	Clos_standard_primary,
	Clos_standard_after,
	Clos_standard_size
};

enum Clos_short {
	Clos_short_around,
	Clos_short_primary,
	Clos_short_size
};

enum Clos_structure_Index {
	Clos_structure_name,
	Clos_structure_direct_slots,
	Clos_structure_slots,
	Clos_structure_documentation,
	Clos_structure_include,
	Clos_structure_precedence_list,
	Clos_structure_value,
	Clos_structure_predicate,
	Clos_structure_access,
	Clos_structure_copier,
	Clos_structure_constructor,
	Clos_structure_size
};

#endif


/************************************************************
 *  clos.h
 ************************************************************/
#ifndef __CLOS_HEADER__
#define __CLOS_HEADER__


#define Clos_standard_class _n(Clos_standard_class)
#define Clos_standard_generic _n(Clos_standard_generic)
#define Clos_standard_method _n(Clos_standard_method)
#define Clos_standard_combination _n(Clos_standard_combination)
#define Clos_standard_specializer _n(Clos_standard_specializer)

#define struct_clos _n(struct_clos)
#define getclassof_clos _n(getclassof_clos)
#define setclassof_clos _n(setclassof_clos)
#define getslot_clos _n(getslot_clos)
#define setslot_clos _n(setslot_clos)
#define getvalue_clos _n(getvalue_clos)
#define setvalue_clos _n(setvalue_clos)
#define getfuncall_clos _n(getfuncall_clos)
#define setfuncall_clos _n(setfuncall_clos)
#define getversion_clos _n(getversion_clos)
#define setversion_clos _n(setversion_clos)
#define getslotvector _n(getslotvector)
#define setslotvector _n(setslotvector)
#define lenslotvector _n(lenslotvector)
#define getclosvalue _n(getclosvalue)
#define setclosvalue _n(setclosvalue)
#define lenclosvalue _n(lenclosvalue)
#define clos_standard_ignore _n(clos_standard_ignore)
#define clos_standard_class_p_debug _n(clos_standard_class_p_debug)
#define clos_standard_generic_p_debug _n(clos_standard_generic_p_debug)
#define clos_standard_method_p_debug _n(clos_standard_method_p_debug)
#define clos_standard_combination_p_debug _n(clos_standard_combination_p_debug)
#define clos_standard_specializer_p_debug _n(clos_standard_specializer_p_debug)

#define slot_vector_alloc _n(slot_vector_alloc)
#define slot_vector_local _n(slot_vector_local)
#define slot_vector_heap _n(slot_vector_heap)
#define slot_vector_copy_alloc _n(slot_vector_copy_alloc)
#define slot_vector_copy_local _n(slot_vector_copy_local)
#define slot_vector_copy_heap _n(slot_vector_copy_heap)
#define slot_vector_copyheap_alloc _n(slot_vector_copyheap_alloc)
#define slot_vector_clear _n(slot_vector_clear)
#define clos_value_heap _n(clos_value_heap)
#define clos_alloc _n(clos_alloc)
#define clos_local _n(clos_local)
#define clos_heap _n(clos_heap)
#define clos_destroy _n(clos_destroy)
#define clos_swap _n(clos_swap)
#define clos_copy_alloc _n(clos_copy_alloc)
#define clos_allcopy_alloc _n(clos_allcopy_alloc)
#define clos_getslots_heap _n(clos_getslots_heap)
#define closp _n(closp)
#define clos_value_p _n(clos_value_p)
#define slot_vector_p _n(slot_vector_p)
#define clos_funcall_p _n(clos_funcall_p)
#define slot_class_p _n(slot_class_p)
#define slot_instance_p _n(slot_instance_p)
#define clos_set_funcall _n(clos_set_funcall)
#define slot_set_class _n(slot_set_class)
#define slot_set_instance _n(slot_set_instance)
#define slot_set_allocation_ _n(slot_set_allocation_)
#define clos_errorp _n(clos_errorp)
#define clos_getp _n(clos_getp)
#define clos_setp _n(clos_setp)
#define clos_checkp_ _n(clos_checkp_)
#define clos_get_ _n(clos_get_)
#define clos_set_ _n(clos_set_)
#define clos_check_ _n(clos_check_)
#define clos_getelt _n(clos_getelt)
#define clos_setelt _n(clos_setelt)
#define clos_checkelt_ _n(clos_checkelt_)
#define clos_getconst_ _n(clos_getconst_)
#define clos_setconst_ _n(clos_setconst_)
#define clos_checkconst_ _n(clos_checkconst_)
#define clos_slot_exists_p _n(clos_slot_exists_p)
#define clos_slot_boundp_nil _n(clos_slot_boundp_nil)
#define clos_slot_boundp_ _n(clos_slot_boundp_)
#define clos_slot_makunbound_nil_ _n(clos_slot_makunbound_nil_)
#define clos_slot_makunbound_ _n(clos_slot_makunbound_)
#define clos_find_class_nil _n(clos_find_class_nil)
#define clos_find_class_ _n(clos_find_class_)
#define clos_define_class _n(clos_define_class)
#define clos_find_generic_nil _n(clos_find_generic_nil)
#define clos_find_generic_ _n(clos_find_generic_)
#define clos_define_generic_ _n(clos_define_generic_)
#define clos_find_combination_nil _n(clos_find_combination_nil)
#define clos_find_combination_ _n(clos_find_combination_)
#define clos_define_combination _n(clos_define_combination)
#define clos_find_specializer_nil_ _n(clos_find_specializer_nil_)
#define clos_find_specializer_ _n(clos_find_specializer_)
#define clos_define_specializer_ _n(clos_define_specializer_)
#define clos_forget_all_specializer_unsafe _n(clos_forget_all_specializer_unsafe)
#define init_clos _n(init_clos)
#define build_clos _n(build_clos)

extern addr Clos_standard_class;
extern addr Clos_standard_generic;
extern addr Clos_standard_method;
extern addr Clos_standard_combination;
extern addr Clos_standard_specializer;

struct clos_struct {
	fixnum version;
};

#define PtrClosStruct_Low(x)			PtrBodySSa((x),CLOS_INDEX_SIZE)
#define ClosStruct_Low(x)				((struct clos_struct *)PtrClosStruct_Low(x))
#define GetClassOfClos_Low(x,y)			GetArraySS((x),CLOS_INDEX_CLASS_OF,(y))
#define SetClassOfClos_Low(x,y)			SetArraySS((x),CLOS_INDEX_CLASS_OF,(y))
#define GetSlotClos_Low(x,y)			GetArraySS((x),CLOS_INDEX_SLOT,(y))
#define SetSlotClos_Low(x,y)			SetArraySS((x),CLOS_INDEX_SLOT,(y))
#define GetValueClos_Low(x,y)			GetArraySS((x),CLOS_INDEX_VALUE,(y))
#define SetValueClos_Low(x,y)			SetArraySS((x),CLOS_INDEX_VALUE,(y))
#define GetFuncallClos_Low(x,y)			(*(y) = GetUser((x)))
#define SetFuncallClos_Low(x,y)			(SetUser((x), (y) != 0))
#define GetVersionClos_Low(x,y)			(*(y) = ClosStruct_Low(x)->version)
#define SetVersionClos_Low(x,y)			(ClosStruct_Low(x)->version = (y))

#define GetSlotVector_Low				GetArrayA4
#define SetSlotVector_Low				SetArrayA4
#define LenSlotVector_Low				LenArrayA4
#define GetClosValue_Low				GetArrayA4
#define SetClosValue_Low				SetArrayA4
#define LenClosValue_Low				LenArrayA4

#define clos_standard_class_p_Low(x)		(Clos_standard_class == (x))
#define clos_standard_generic_p_Low(x)		(Clos_standard_generic == (x))
#define clos_standard_method_p_Low(x)		(Clos_standard_method == (x))
#define clos_standard_combination_p_Low(x)	(Clos_standard_combination == (x))
#define clos_standard_specializer_p_Low(x)	(Clos_standard_specializer == (x))

#ifdef LISP_DEBUG
#define ClosStruct				struct_clos
#define GetClassOfClos			getclassof_clos
#define SetClassOfClos			setclassof_clos
#define GetSlotClos				getslot_clos
#define SetSlotClos				setslot_clos
#define GetValueClos			getvalue_clos
#define SetValueClos			setvalue_clos
#define GetFuncallClos			getfuncall_clos
#define SetFuncallClos			setfuncall_clos
#define GetVersionClos			getversion_clos
#define SetVersionClos			setversion_clos

#define GetSlotVector			getslotvector
#define SetSlotVector			setslotvector
#define LenSlotVector			lenslotvector
#define GetClosValue			getclosvalue
#define SetClosValue			setclosvalue
#define LenClosValue			lenclosvalue

#define clos_standard_class_p		clos_standard_class_p_debug
#define clos_standard_generic_p		clos_standard_generic_p_debug
#define clos_standard_method_p		clos_standard_method_p_debug
#define clos_standard_combination_p	clos_standard_combination_p_debug
#define clos_standard_specializer_p	clos_standard_specializer_p_debug

#else

#define ClosStruct				ClosStruct_Low
#define GetClassOfClos			GetClassOfClos_Low
#define SetClassOfClos			SetClassOfClos_Low
#define GetSlotClos				GetSlotClos_Low
#define SetSlotClos				SetSlotClos_Low
#define GetValueClos			GetValueClos_Low
#define SetValueClos			SetValueClos_Low
#define GetFuncallClos			GetFuncallClos_Low
#define SetFuncallClos			SetFuncallClos_Low
#define GetVersionClos			GetVersionClos_Low
#define SetVersionClos			SetVersionClos_Low

#define GetSlotVector			GetSlotVector_Low
#define SetSlotVector			SetSlotVector_Low
#define LenSlotVector			LenSlotVector_Low
#define GetClosValue			GetClosValue_Low
#define SetClosValue			SetClosValue_Low
#define LenClosValue			LenClosValue_Low

#define clos_standard_class_p		clos_standard_class_p_Low
#define clos_standard_generic_p		clos_standard_generic_p_Low
#define clos_standard_method_p		clos_standard_method_p_Low
#define clos_standard_combination_p	clos_standard_combination_p_Low
#define clos_standard_specializer_p	clos_standard_specializer_p_Low

#endif

/* access */
struct clos_struct *struct_clos(addr pos);
void getclassof_clos(addr pos, addr *ret);
void setclassof_clos(addr pos, addr value);
void getslot_clos(addr pos, addr *ret);
void setslot_clos(addr pos, addr value);
void getvalue_clos(addr pos, addr *ret);
void setvalue_clos(addr pos, addr value);
void getfuncall_clos(addr pos, int *ret);
void setfuncall_clos(addr pos, int value);
void getversion_clos(addr pos, fixnum *ret);
void setversion_clos(addr pos, fixnum value);

void getslotvector(addr pos, size_t index, addr *ret);
void setslotvector(addr pos, size_t index, addr value);
void lenslotvector(addr pos, size_t *ret);
void getclosvalue(addr pos, size_t index, addr *ret);
void setclosvalue(addr pos, size_t index, addr value);
void lenclosvalue(addr pos, size_t *ret);

void clos_standard_ignore(int value);
int clos_standard_class_p_debug(addr pos);
int clos_standard_generic_p_debug(addr pos);
int clos_standard_method_p_debug(addr pos);
int clos_standard_combination_p_debug(addr pos);
int clos_standard_specializer_p_debug(addr pos);

/* allocate */
void slot_vector_alloc(LocalRoot local, addr *ret, size_t size);
void slot_vector_local(LocalRoot local, addr *ret, size_t size);
void slot_vector_heap(addr *ret, size_t size);
void slot_vector_copy_alloc(LocalRoot local, addr *ret, addr pos);
void slot_vector_copy_local(LocalRoot local, addr *ret, addr pos);
void slot_vector_copy_heap(addr *ret, addr pos);
void slot_vector_copyheap_alloc(LocalRoot local, addr *ret, addr pos);
void slot_vector_clear(addr pos);

void clos_value_heap(addr *ret, size_t size);
void clos_alloc(LocalRoot local, addr *ret, addr slots);
void clos_local(LocalRoot local, addr *ret, addr slots);
void clos_heap(addr *ret, addr slots);

void clos_destroy(addr pos);
void clos_swap(addr a, addr b);
void clos_copy_alloc(LocalRoot local, addr pos, addr *ret);
void clos_allcopy_alloc(LocalRoot local, addr pos, addr *ret);
void clos_getslots_heap(addr pos, addr *ret);

/* control */
int closp(addr pos);
int clos_value_p(addr pos);
int slot_vector_p(addr pos);
int clos_funcall_p(addr pos);
int slot_class_p(addr pos);
int slot_instance_p(addr pos);
void clos_set_funcall(addr pos);
void slot_set_class(addr pos);
void slot_set_instance(addr pos);
int slot_set_allocation_(addr pos, addr value);

int clos_errorp(addr pos, size_t index, constindex name);
int clos_getp(addr pos, addr key, addr *ret);
int clos_setp(addr pos, addr key, addr value);
int clos_checkp_(addr pos, addr key, addr *value, int *ret);
int clos_get_(addr pos, addr key, addr *ret);
int clos_set_(addr pos, addr key, addr value);
int clos_check_(addr pos, addr key, addr *ret);
void clos_getelt(addr pos, size_t index, addr *ret);
void clos_setelt(addr pos, size_t index, addr value);
int clos_checkelt_(addr pos, size_t index, addr *ret);

int clos_getconst_(addr pos, constindex index, addr *ret);
int clos_setconst_(addr pos, constindex index, addr value);
int clos_checkconst_(addr pos, constindex index, addr *ret);
#define ClosGetConst_(p,n,r) clos_getconst_((p),CONSTANT_##n,(r))
#define ClosSetConst_(p,n,v) clos_setconst_((p),CONSTANT_##n,(v))
#define ClosCheckConst_(p,n,r) clos_checkconst_((p),CONSTANT_##n,(r))

/* check */
int clos_slot_exists_p(addr pos, addr name);
int clos_slot_boundp_nil(addr pos, addr name);
int clos_slot_boundp_(addr pos, addr name, int *ret);
int clos_slot_makunbound_nil_(addr pos, addr name, int *ret);
int clos_slot_makunbound_(addr pos, addr name);

/* talbe */
void clos_find_class_nil(addr name, addr *ret);
int clos_find_class_(addr name, addr *ret);
void clos_define_class(addr name, addr value);

void clos_find_generic_nil(addr name, addr *ret);
int clos_find_generic_(addr name, addr *ret);
int clos_define_generic_(addr name, addr value);

void clos_find_combination_nil(addr name, addr *ret);
int clos_find_combination_(addr name, addr *ret);
void clos_define_combination(addr name, addr value);

int clos_find_specializer_nil_(addr name, addr *ret);
int clos_find_specializer_(addr name, addr *ret);
int clos_define_specializer_(addr name, addr value);
void clos_forget_all_specializer_unsafe(void);

/* build */
void init_clos(void);
void build_clos(Execute ptr);

#endif


/************************************************************
 *  clos_type.h
 ************************************************************/
#ifndef __CLOS_TYPE_HEADER__
#define __CLOS_TYPE_HEADER__


#define init_clos_type _n(init_clos_type)
#define clos_class_of_ _n(clos_class_of_)
#define clos_intern_specializer_ _n(clos_intern_specializer_)

/* class-of */
void init_clos_type(void);
int clos_class_of_(addr object, addr *ret);

/* specializer */
int clos_intern_specializer_(addr object, addr *ret);

#endif


/************************************************************
 *  code.h
 ************************************************************/
#ifndef __CODE_HEADER__
#define __CODE_HEADER__


#define init_code _n(init_code)
#define build_code _n(build_code)

void init_code(void);
void build_code(void);

#endif


/************************************************************
 *  common.h
 ************************************************************/
#ifndef __COMMON_HEADER__
#define __COMMON_HEADER__


#define init_common_eval _n(init_common_eval)
#define init_common_types _n(init_common_types)
#define init_common_data _n(init_common_data)
#define init_common_iteration _n(init_common_iteration)
#define init_common_objects _n(init_common_objects)
#define init_common_structures _n(init_common_structures)
#define init_common_conditions _n(init_common_conditions)
#define init_common_symbols _n(init_common_symbols)
#define init_common_packages _n(init_common_packages)
#define init_common_numbers _n(init_common_numbers)
#define init_common_characters _n(init_common_characters)
#define init_common_conses _n(init_common_conses)
#define init_common_arrays _n(init_common_arrays)
#define init_common_strings _n(init_common_strings)
#define init_common_sequences _n(init_common_sequences)
#define init_common_hashtables _n(init_common_hashtables)
#define init_common_filenames _n(init_common_filenames)
#define init_common_files _n(init_common_files)
#define init_common_streams _n(init_common_streams)
#define init_common_printer _n(init_common_printer)
#define init_common_reader _n(init_common_reader)
#define init_common_system _n(init_common_system)
#define init_common_environment _n(init_common_environment)
#define build_common_eval _n(build_common_eval)
#define build_common_types _n(build_common_types)
#define build_common_data _n(build_common_data)
#define build_common_iteration _n(build_common_iteration)
#define build_common_objects _n(build_common_objects)
#define build_common_structures _n(build_common_structures)
#define build_common_conditions _n(build_common_conditions)
#define build_common_symbols _n(build_common_symbols)
#define build_common_packages _n(build_common_packages)
#define build_common_numbers _n(build_common_numbers)
#define build_common_characters _n(build_common_characters)
#define build_common_conses _n(build_common_conses)
#define build_common_arrays _n(build_common_arrays)
#define build_common_strings _n(build_common_strings)
#define build_common_sequences _n(build_common_sequences)
#define build_common_hashtables _n(build_common_hashtables)
#define build_common_filenames _n(build_common_filenames)
#define build_common_files _n(build_common_files)
#define build_common_streams _n(build_common_streams)
#define build_common_printer _n(build_common_printer)
#define build_common_reader _n(build_common_reader)
#define build_common_system _n(build_common_system)
#define build_common_environment _n(build_common_environment)
#define init_common _n(init_common)
#define build_common _n(build_common)

void init_common_eval(void);
void init_common_types(void);
void init_common_data(void);
void init_common_iteration(void);
void init_common_objects(void);
void init_common_structures(void);
void init_common_conditions(void);
void init_common_symbols(void);
void init_common_packages(void);
void init_common_numbers(void);
void init_common_characters(void);
void init_common_conses(void);
void init_common_arrays(void);
void init_common_strings(void);
void init_common_sequences(void);
void init_common_hashtables(void);
void init_common_filenames(void);
void init_common_files(void);
void init_common_streams(void);
void init_common_printer(void);
void init_common_reader(void);
void init_common_system(void);
void init_common_environment(void);

void build_common_eval(void);
void build_common_types(void);
void build_common_data(void);
void build_common_iteration(void);
void build_common_objects(void);
void build_common_structures(void);
void build_common_conditions(void);
void build_common_symbols(void);
void build_common_packages(void);
void build_common_numbers(void);
void build_common_characters(void);
void build_common_conses(void);
void build_common_arrays(void);
void build_common_strings(void);
void build_common_sequences(void);
void build_common_hashtables(void);
void build_common_filenames(void);
void build_common_files(void);
void build_common_streams(void);
void build_common_printer(void);
void build_common_reader(void);
void build_common_system(void);
void build_common_environment(void);

void init_common(void);
void build_common(void);

#endif


/************************************************************
 *  compile.h
 ************************************************************/
#ifndef __COMPILE_HEADER__
#define __COMPILE_HEADER__


#define compile_file_pathname_common_ _n(compile_file_pathname_common_)
#define with_compilation_unit_common_ _n(with_compilation_unit_common_)
#define syscall_with_compilation_unit _n(syscall_with_compilation_unit)
#define init_compile _n(init_compile)

int compile_file_pathname_common_(Execute ptr, addr file, addr rest, addr *ret);
int with_compilation_unit_common_(addr form, addr *ret);
int syscall_with_compilation_unit(Execute ptr, addr over, addr args, addr call);

void init_compile(void);

#endif


/************************************************************
 *  declare.h
 ************************************************************/
#ifndef __DECLARE_HEADER__
#define __DECLARE_HEADER__


enum EVAL_DECLARE {
	EVAL_DECLARE_TYPE_VALUE,
	EVAL_DECLARE_TYPE_FUNCTION,
	EVAL_DECLARE_SPECIAL,
	EVAL_DECLARE_INLINE,
	EVAL_DECLARE_IGNORE_VALUE,
	EVAL_DECLARE_IGNORE_FUNCTION,
	EVAL_DECLARE_DYNAMIC_VALUE,
	EVAL_DECLARE_DYNAMIC_FUNCTION,
	EVAL_DECLARE_DECLARATION,
	EVAL_DECLARE_SIZE
};

#define RefEvalDeclare_Low      RefEval
#define GetEvalDeclare_Low      GetEval
#define SetEvalDeclare_Low      SetEval

#define PtrEvalDeclare_Low(p)	((OptimizeType *)PtrEvalBody(p, EVAL_DECLARE_SIZE))
#define RefEvalDeclareOptimize_Low(p,i)		(PtrEvalDeclare_Low(p)[i])
#define GetEvalDeclareOptimize_Low(p,i,v)	(*(v) = PtrEvalDeclare_Low(p)[i])
#define SetEvalDeclareOptimize_Low(p,i,v)	(PtrEvalDeclare_Low(p)[i] = (v))

#ifdef LISP_DEBUG
#define RefEvalDeclare          refevaldeclare
#define GetEvalDeclare          getevaldeclare
#define SetEvalDeclare          setevaldeclare
#define RefEvalDeclareOptimize	refevaldeclareoptimize
#define GetEvalDeclareOptimize	getevaldeclareoptimize
#define SetEvalDeclareOptimize	setevaldeclareoptimize
#else
#define RefEvalDeclare          RefEvalDeclare_Low
#define GetEvalDeclare          GetEvalDeclare_Low
#define SetEvalDeclare          SetEvalDeclare_Low
#define RefEvalDeclareOptimize	RefEvalDeclareOptimize_Low
#define GetEvalDeclareOptimize	GetEvalDeclareOptimize_Low
#define SetEvalDeclareOptimize	SetEvalDeclareOptimize_Low
#endif

#define DEFAULT_OPTIMIZE 1

#define refevaldeclare _n(refevaldeclare)
#define getevaldeclare _n(getevaldeclare)
#define setevaldeclare _n(setevaldeclare)
#define refevaldeclareoptimize _n(refevaldeclareoptimize)
#define getevaldeclareoptimize _n(getevaldeclareoptimize)
#define setevaldeclareoptimize _n(setevaldeclareoptimize)
#define eval_declare_alloc _n(eval_declare_alloc)
#define eval_declare_local _n(eval_declare_local)
#define eval_declare_heap _n(eval_declare_heap)
#define empty_declare _n(empty_declare)
#define empty_nil_declare _n(empty_nil_declare)
#define apply_array_declare _n(apply_array_declare)
#define get_optimize_declare _n(get_optimize_declare)
#define get_optimize_compilation_declare _n(get_optimize_compilation_declare)
#define get_optimize_debug_declare _n(get_optimize_debug_declare)
#define get_optimize_safety_declare _n(get_optimize_safety_declare)
#define get_optimize_space_declare _n(get_optimize_space_declare)
#define get_optimize_speed_declare _n(get_optimize_speed_declare)
#define getall_declaration_declare _n(getall_declaration_declare)
#define getall_inline_declare _n(getall_inline_declare)
#define getall_special_declare _n(getall_special_declare)
#define getall_type_value_declare _n(getall_type_value_declare)
#define getall_type_function_declare _n(getall_type_function_declare)
#define getall_optimize_declare _n(getall_optimize_declare)
#define getall_dynamic_value_declare _n(getall_dynamic_value_declare)
#define getall_dynamic_function_declare _n(getall_dynamic_function_declare)
#define getall_ignore_value_declare _n(getall_ignore_value_declare)
#define getall_ignore_function_declare _n(getall_ignore_function_declare)
#define getroot_declare _n(getroot_declare)
#define setroot_declare _n(setroot_declare)
#define build_declare _n(build_declare)
#define push_declaration_declaim _n(push_declaration_declaim)
#define copy_optimize_declare _n(copy_optimize_declare)
#define apply_compilation_speed_declaim _n(apply_compilation_speed_declaim)
#define apply_debug_declaim _n(apply_debug_declaim)
#define apply_safety_declaim _n(apply_safety_declaim)
#define apply_space_declaim _n(apply_space_declaim)
#define apply_speed_declaim _n(apply_speed_declaim)
#define parse_declaim_heap_ _n(parse_declaim_heap_)
#define parse_declare_heap_ _n(parse_declare_heap_)
#define parse_optimize_heap_ _n(parse_optimize_heap_)
#define declare_body_form_ _n(declare_body_form_)
#define declare_body_ _n(declare_body_)
#define declare_body_documentation_ _n(declare_body_documentation_)
#define split_decl_body_doc_ _n(split_decl_body_doc_)
#define copy_eval_declare_alloc _n(copy_eval_declare_alloc)
#define copy_eval_declare_local _n(copy_eval_declare_local)
#define copy_eval_declare_heap _n(copy_eval_declare_heap)
#define set_optimize_compilation_declare _n(set_optimize_compilation_declare)
#define set_optimize_debug_declare _n(set_optimize_debug_declare)
#define set_optimize_safety_declare _n(set_optimize_safety_declare)
#define set_optimize_space_declare _n(set_optimize_space_declare)
#define set_optimize_speed_declare _n(set_optimize_speed_declare)
#define proclaim_common_ _n(proclaim_common_)

typedef signed char OptimizeType;

addr refevaldeclare(addr pos, size_t index);
void getevaldeclare(addr pos, size_t index, addr *ret);
void setevaldeclare(addr pos, size_t index, addr value);
OptimizeType refevaldeclareoptimize(addr pos, size_t index);
void getevaldeclareoptimize(addr pos, size_t index, OptimizeType *ret);
void setevaldeclareoptimize(addr pos, size_t index, OptimizeType value);

void eval_declare_alloc(LocalRoot local, addr *ret);
void eval_declare_local(LocalRoot local, addr *ret);
void eval_declare_heap(addr *ret);
int empty_declare(addr pos);
int empty_nil_declare(addr pos);
void apply_array_declare(OptimizeType *array, addr pos);

OptimizeType get_optimize_declare(addr pos, enum EVAL_OPTIMIZE index);
OptimizeType get_optimize_compilation_declare(addr pos);
OptimizeType get_optimize_debug_declare(addr pos);
OptimizeType get_optimize_safety_declare(addr pos);
OptimizeType get_optimize_space_declare(addr pos);
OptimizeType get_optimize_speed_declare(addr pos);

void getall_declaration_declare(addr pos, addr *ret);
void getall_inline_declare(addr pos, addr *ret);
void getall_special_declare(addr pos, addr *ret);
void getall_type_value_declare(addr pos, addr *ret);
void getall_type_function_declare(addr pos, addr *ret);
const OptimizeType *getall_optimize_declare(addr pos);
void getall_dynamic_value_declare(addr pos, addr *ret);
void getall_dynamic_function_declare(addr pos, addr *ret);
void getall_ignore_value_declare(addr pos, addr *ret);
void getall_ignore_function_declare(addr pos, addr *ret);

void getroot_declare(addr *ret);
void setroot_declare(addr pos);
void build_declare(void);
void push_declaration_declaim(addr symbol);
void copy_optimize_declare(OptimizeType *array);
void apply_compilation_speed_declaim(OptimizeType value);
void apply_debug_declaim(OptimizeType value);
void apply_safety_declaim(OptimizeType value);
void apply_space_declaim(OptimizeType value);
void apply_speed_declaim(OptimizeType value);

int parse_declaim_heap_(Execute ptr, addr env, addr decl, addr *ret);
int parse_declare_heap_(Execute ptr, addr env, addr decl, addr *ret);
int parse_optimize_heap_(addr decl, addr *value, int *ret);
int declare_body_form_(addr list, addr *retdecl, addr *retbody);
int declare_body_(Execute ptr, addr env, addr cons, addr *retdecl, addr *retbody);
int declare_body_documentation_(Execute ptr, addr env,
		addr cons, addr *rdoc, addr *rdecl, addr *rbody);
int split_decl_body_doc_(addr list, addr *rdoc, addr *rdecl, addr *rbody);

void copy_eval_declare_alloc(LocalRoot local, addr *ret, addr pos);
void copy_eval_declare_local(LocalRoot local, addr *ret, addr pos);
void copy_eval_declare_heap(addr *ret, addr pos);

/* debug */
void set_optimize_compilation_declare(addr pos, OptimizeType value);
void set_optimize_debug_declare(addr pos, OptimizeType value);
void set_optimize_safety_declare(addr pos, OptimizeType value);
void set_optimize_space_declare(addr pos, OptimizeType value);
void set_optimize_speed_declare(addr pos, OptimizeType value);

/* common */
int proclaim_common_(Execute ptr, addr var);

#endif


/************************************************************
 *  document.h
 ************************************************************/
#ifndef __DOCUMENT_HEADER__
#define __DOCUMENT_HEADER__


#define init_documentation _n(init_documentation)
#define build_documentation _n(build_documentation)

void init_documentation(void);
void build_documentation(Execute ptr);

#endif


/************************************************************
 *  eastasian_unicode.h
 ************************************************************/
/*  Auto generated by mk.eastasian.lisp  */
#ifndef __EASTASIAN_UNICODE_HEADER__
#define __EASTASIAN_UNICODE_HEADER__


#define EastAsianTable_Size 1161

enum EastAsianType {
#ifdef LISP_DEBUG
    EastAsian_Debug = 10,
#endif
    EastAsian_error,
    EastAsian_N,
    EastAsian_A,
    EastAsian_H,
    EastAsian_W,
    EastAsian_F,
    EastAsian_NA,
    EastAsian_Size
};

struct eastasian_struct {
    unicode a, b;
    enum EastAsianType c;
};

#define EastAsianSymbol _n(EastAsianSymbol)
#define EastAsianAscii _n(EastAsianAscii)
#define EastAsianTable _n(EastAsianTable)
#define eastasian_symbol _n(eastasian_symbol)
#define eastasian_width _n(eastasian_width)
#define init_eastasian _n(init_eastasian)
extern unsigned EastAsianSymbol[EastAsian_Size];
extern const enum EastAsianType EastAsianAscii[0x80];
extern const struct eastasian_struct EastAsianTable[EastAsianTable_Size];
enum EastAsianType eastasian_symbol(unicode c);
unsigned eastasian_width(unicode c);
void init_eastasian(void);

#endif


/************************************************************
 *  encode.h
 ************************************************************/
#ifndef __ENCODE_HEADER__
#define __ENCODE_HEADER__


#define readbom8_encode _n(readbom8_encode)
#define readbom16_encode _n(readbom16_encode)
#define readbom32_encode _n(readbom32_encode)
#define writebom_encode_ _n(writebom_encode_)
#define read_char_encode_ _n(read_char_encode_)
#define read_hang_encode_ _n(read_hang_encode_)
#define write_char_encode_ _n(write_char_encode_)
#define length_char_encode _n(length_char_encode)
#define length_string_encode_ _n(length_string_encode_)
#define UTF8_length_clang_ _n(UTF8_length_clang_)
#define UTF16_length_clang_ _n(UTF16_length_clang_)
#define UTF8_buffer_clang_ _n(UTF8_buffer_clang_)
#define UTF16_buffer_clang_ _n(UTF16_buffer_clang_)
#define UTF8_null_strlen _n(UTF8_null_strlen)
#define UTF8_size_strlen _n(UTF8_size_strlen)
#define UTF8_null_makeunicode _n(UTF8_null_makeunicode)
#define UTF8_size_makeunicode _n(UTF8_size_makeunicode)
#define UTF16_null_strlen _n(UTF16_null_strlen)
#define UTF16_size_strlen _n(UTF16_size_strlen)
#define UTF16_null_makeunicode _n(UTF16_null_makeunicode)
#define UTF16_size_makeunicode _n(UTF16_size_makeunicode)
#define UTF32_null_strlen _n(UTF32_null_strlen)
#define UTF32_size_strlen _n(UTF32_size_strlen)
#define UTF32_null_makeunicode _n(UTF32_null_makeunicode)
#define UTF32_size_makeunicode _n(UTF32_size_makeunicode)
#define UTF32_length_utf8 _n(UTF32_length_utf8)
#define UTF32_length_utf16 _n(UTF32_length_utf16)
#define UTF32_make_utf8 _n(UTF32_make_utf8)
#define UTF32_make_utf16 _n(UTF32_make_utf16)
#define init_encode _n(init_encode)

#define LISP_UTF8_SEQ5CHECK
#define UTF16range(x) (0xD800 <= (x) && (x) < 0xE000)
#define UTF16high(x) (0xD800 <= (x) && (x) < 0xDC00)
#define UTF16low(x) (0xDC00 <= (x) && (x) < 0xE000)
#define UTF16unicode(a, b) \
	((((((a)>>6UL)&0x0FUL)+1UL)<<16UL) | (((a)&0x3FUL)<<10UL) | ((b)&0x03FFUL))

/* Byte Order Mark */
int readbom8_encode(addr stream);
int readbom16_encode(addr stream); /* 1:le, 2:be */
int readbom32_encode(addr stream); /* 1:le, 2:be */
int writebom_encode_(addr stream);

int read_char_encode_(filestream fm, unicode *c, int *ret);
int read_hang_encode_(filestream fm, unicode *c, int *hang, int *ret);
int write_char_encode_(filestream fm, unicode c);
int length_char_encode(filestream fm, unicode c);
int length_string_encode_(filestream fm, addr pos, size_t *rsize, int *ret);

/* unicode buffer */
int UTF8_length_clang_(addr pos, size_t *rsize, int *ret);
int UTF16_length_clang_(addr pos, size_t *rsize, int *ret);
int UTF8_buffer_clang_(LocalRoot local, addr *ret, addr string);
int UTF16_buffer_clang_(LocalRoot local, addr *ret, addr string);

/* unicode string */
int UTF8_null_strlen(const byte *src, size_t *ret);
int UTF8_size_strlen(const byte *src, size_t size, size_t *ret);
int UTF8_null_makeunicode(unicode *dst, const byte *src);
int UTF8_size_makeunicode(unicode *dst, const byte *src, size_t size);
int UTF16_null_strlen(const byte16 *src, size_t *ret);
int UTF16_size_strlen(const byte16 *src, size_t size, size_t *ret);
int UTF16_null_makeunicode(unicode *dst, const byte16 *src);
int UTF16_size_makeunicode(unicode *dst, const byte16 *src, size_t size);
int UTF32_null_strlen(const unicode *src, size_t *ret);
int UTF32_size_strlen(const unicode *src, size_t size, size_t *ret);
int UTF32_null_makeunicode(unicode *dst, const unicode *src);
int UTF32_size_makeunicode(unicode *dst, const unicode *src, size_t size);

int UTF32_length_utf8(const unicode *ptr, size_t size, size_t *ret);
int UTF32_length_utf16(const unicode *ptr, size_t size, size_t *ret);
int UTF32_make_utf8(byte *dst, const unicode *src, size_t size);
int UTF32_make_utf16(byte16 *dst, const unicode *src, size_t size);

/* initialize */
void init_encode(void);

#endif


/************************************************************
 *  environment.h
 ************************************************************/
#ifndef __ENVIRONMENT_HEADER__
#define __ENVIRONMENT_HEADER__


#define init_environment _n(init_environment)
#define build_environment _n(build_environment)

void init_environment(void);
void build_environment(Execute ptr);

#endif


/************************************************************
 *  eval.h
 ************************************************************/
#ifndef __EVAL_HEADER__
#define __EVAL_HEADER__


#define init_eval _n(init_eval)
void init_eval(void);

#endif


/************************************************************
 *  extern.h
 ************************************************************/
#ifndef __EXTERN_HEADER__
#define __EXTERN_HEADER__


#define init_extern _n(init_extern)
void init_extern(void);

#endif


/************************************************************
 *  file.h
 ************************************************************/
#ifndef __FILE_HEADER__
#define __FILE_HEADER__


#define init_file _n(init_file)
#define free_file _n(free_file)
#define consolep_file _n(consolep_file)
#define make_standard_input _n(make_standard_input)
#define make_standard_output _n(make_standard_output)
#define make_standard_error _n(make_standard_error)
#define update_standard_input _n(update_standard_input)
#define update_standard_output _n(update_standard_output)
#define update_standard_error _n(update_standard_error)
#define script_header _n(script_header)
#define force_close_stream_file _n(force_close_stream_file)
#define close_stream_file_ _n(close_stream_file_)
#define read_binary_file_ _n(read_binary_file_)
#define read_byte_file_type _n(read_byte_file_type)
#define read_byte_file_ _n(read_byte_file_)
#define unread_byte_file_ _n(unread_byte_file_)
#define write_binary_file_ _n(write_binary_file_)
#define write_byte_file_type_ _n(write_byte_file_type_)
#define write_byte_file_ _n(write_byte_file_)
#define read_char_file_ _n(read_char_file_)
#define read_hang_file_ _n(read_hang_file_)
#define write_char_file_ _n(write_char_file_)
#define element_type_file_ _n(element_type_file_)
#define external_format_file_ _n(external_format_file_)
#define file_length_file_type_ _n(file_length_file_type_)
#define file_length_file_ _n(file_length_file_)
#define file_position_file_type_ _n(file_position_file_type_)
#define file_position_file_ _n(file_position_file_)
#define file_position_start_file_type_ _n(file_position_start_file_type_)
#define file_position_start_file_ _n(file_position_start_file_)
#define file_position_end_file_type_ _n(file_position_end_file_type_)
#define file_position_end_file_ _n(file_position_end_file_)
#define file_position_set_file_type_ _n(file_position_set_file_type_)
#define file_position_set_file_ _n(file_position_set_file_)
#define file_charlen_file_ _n(file_charlen_file_)
#define file_strlen_file_ _n(file_strlen_file_)
#define listen_file_ _n(listen_file_)
#define clear_input_file_ _n(clear_input_file_)
#define finish_output_file_ _n(finish_output_file_)
#define force_output_file_ _n(force_output_file_)
#define clear_output_file_ _n(clear_output_file_)
#define exitpoint_file_ _n(exitpoint_file_)
#define termsize_file_ _n(termsize_file_)
#define save_stream_file _n(save_stream_file)
#define save_stream_system _n(save_stream_system)

#define CheckFileStream(stream) Check(! file_stream_p(stream), "type error")
#define PtrFileMemory(stream) ((filestream)PtrDataStream(stream))

/*
 *  initialize
 */
int init_file(void);
void free_file(void);
int consolep_file(void);


/*
 *  Common Function
 */
int make_standard_input(addr *stream);
int make_standard_output(addr *stream);
int make_standard_error(addr *stream);
int update_standard_input(addr stream);
int update_standard_output(addr stream);
int update_standard_error(addr stream);
int script_header(addr stream);


/*
 *  stream function
 */
void force_close_stream_file(addr stream);
int close_stream_file_(addr stream, addr *ret);
int read_binary_file_(addr stream, void *pos, size_t size, size_t *ret);
int read_byte_file_type(addr stream, addr *ret);
int read_byte_file_(addr stream, addr *value, int *ret);
int unread_byte_file_(addr stream, byte c);
int write_binary_file_(addr stream, const void *pos, size_t size, size_t *ret);
int write_byte_file_type_(filestream fm, addr pos);
int write_byte_file_(addr stream, addr pos);
int read_char_file_(addr stream, unicode *c, int *ret);
int read_hang_file_(addr stream, unicode *c, int *hang, int *ret);
int write_char_file_(addr stream, unicode c);
int element_type_file_(addr stream, addr *ret);
int external_format_file_(addr stream, addr *ret);
int file_length_file_type_(filestream fm, size_t *value, int *ret);
int file_length_file_(addr file, size_t *value, int *ret);
int file_position_file_type_(addr stream, size_t *value, int *ret);
int file_position_file_(addr stream, size_t *value, int *ret);
int file_position_start_file_type_(addr stream, int *ret);
int file_position_start_file_(addr stream, int *ret);
int file_position_end_file_type_(addr stream, int *ret);
int file_position_end_file_(addr stream, int *ret);
int file_position_set_file_type_(addr stream, size_t value, int *ret);
int file_position_set_file_(addr stream, size_t value, int *ret);
int file_charlen_file_(addr stream, unicode u, size_t *value, int *ret);
int file_strlen_file_(addr stream, addr pos, size_t *value, int *ret);
int listen_file_(addr stream, int *ret);
int clear_input_file_(addr stream);
int finish_output_file_(addr stream);
int force_output_file_(addr stream);
int clear_output_file_(addr stream);
int exitpoint_file_(addr stream);
int termsize_file_(addr stream, size_t *value, int *ret);


/*
 *  core
 */
int save_stream_file(addr pos);
int save_stream_system(addr pos);

#endif


/************************************************************
 *  function.h
 ************************************************************/
#ifndef __FUNCTION_HEADER__
#define __FUNCTION_HEADER__


#define function_alloc _n(function_alloc)
#define function_local _n(function_local)
#define function_heap _n(function_heap)
#define function_empty_heap _n(function_empty_heap)
#define macro_alloc _n(macro_alloc)
#define macro_local _n(macro_local)
#define macro_heap _n(macro_heap)
#define compiled_alloc _n(compiled_alloc)
#define compiled_local _n(compiled_local)
#define compiled_heap _n(compiled_heap)
#define compiled_macro_alloc _n(compiled_macro_alloc)
#define compiled_macro_local _n(compiled_macro_local)
#define compiled_macro_heap _n(compiled_macro_heap)
#define compiled_system _n(compiled_system)
#define compiled_setf_system _n(compiled_setf_system)
#define compiled_macro_system _n(compiled_macro_system)
#define setcompiled_code _n(setcompiled_code)
#define getcompiled_code _n(getcompiled_code)
#define setcompiled_macro _n(setcompiled_macro)
#define setcompiled_none _n(setcompiled_none)
#define setcompiled_any _n(setcompiled_any)
#define setcompiled_empty _n(setcompiled_empty)
#define setcompiled_rest _n(setcompiled_rest)
#define setcompiled_dynamic _n(setcompiled_dynamic)
#define setcompiled_var1 _n(setcompiled_var1)
#define setcompiled_var2 _n(setcompiled_var2)
#define setcompiled_var3 _n(setcompiled_var3)
#define setcompiled_var4 _n(setcompiled_var4)
#define setcompiled_var5 _n(setcompiled_var5)
#define setcompiled_var6 _n(setcompiled_var6)
#define setcompiled_opt1 _n(setcompiled_opt1)
#define setcompiled_opt2 _n(setcompiled_opt2)
#define setcompiled_opt3 _n(setcompiled_opt3)
#define setcompiled_opt4 _n(setcompiled_opt4)
#define setcompiled_opt5 _n(setcompiled_opt5)
#define setcompiled_var1opt1 _n(setcompiled_var1opt1)
#define setcompiled_var2opt1 _n(setcompiled_var2opt1)
#define setcompiled_var3opt1 _n(setcompiled_var3opt1)
#define setcompiled_var4opt1 _n(setcompiled_var4opt1)
#define setcompiled_var5opt1 _n(setcompiled_var5opt1)
#define setcompiled_var1opt2 _n(setcompiled_var1opt2)
#define setcompiled_var2opt2 _n(setcompiled_var2opt2)
#define setcompiled_var2opt3 _n(setcompiled_var2opt3)
#define setcompiled_var1rest _n(setcompiled_var1rest)
#define setcompiled_var2rest _n(setcompiled_var2rest)
#define setcompiled_var3rest _n(setcompiled_var3rest)
#define setcompiled_var4rest _n(setcompiled_var4rest)
#define setcompiled_opt1rest _n(setcompiled_opt1rest)
#define setcompiled_var1dynamic _n(setcompiled_var1dynamic)
#define setcompiled_var2dynamic _n(setcompiled_var2dynamic)
#define setcompiled_var3dynamic _n(setcompiled_var3dynamic)
#define setcompiled_var4dynamic _n(setcompiled_var4dynamic)
#define setcompiled_opt1dynamic _n(setcompiled_opt1dynamic)

#define setcompiled_extend_macro _n(setcompiled_extend_macro)
#define setcompiled_extend_rest _n(setcompiled_extend_rest)
#define setcompiled_extend_dynamic _n(setcompiled_extend_dynamic)
#define setcompiled_extend_any _n(setcompiled_extend_any)
#define setcompiled_extend_empty _n(setcompiled_extend_empty)
#define setcompiled_extend_var1 _n(setcompiled_extend_var1)
#define setcompiled_extend_var2 _n(setcompiled_extend_var2)
#define setcompiled_extend_var3 _n(setcompiled_extend_var3)
#define setcompiled_extend_var4 _n(setcompiled_extend_var4)
#define setcompiled_extend_var5 _n(setcompiled_extend_var5)
#define setcompiled_extend_var6 _n(setcompiled_extend_var6)
#define setcompiled_extend_opt1 _n(setcompiled_extend_opt1)
#define setcompiled_extend_opt2 _n(setcompiled_extend_opt2)
#define setcompiled_extend_opt3 _n(setcompiled_extend_opt3)
#define setcompiled_extend_var1opt1 _n(setcompiled_extend_var1opt1)
#define setcompiled_extend_var1opt2 _n(setcompiled_extend_var1opt2)
#define setcompiled_extend_var1opt3 _n(setcompiled_extend_var1opt3)
#define setcompiled_extend_var2opt1 _n(setcompiled_extend_var2opt1)
#define setcompiled_extend_var2opt2 _n(setcompiled_extend_var2opt2)
#define setcompiled_extend_var2opt3 _n(setcompiled_extend_var2opt3)
#define setcompiled_extend_var3opt1 _n(setcompiled_extend_var3opt1)
#define setcompiled_extend_var3opt2 _n(setcompiled_extend_var3opt2)
#define setcompiled_extend_var3opt3 _n(setcompiled_extend_var3opt3)
#define setcompiled_extend_var1rest _n(setcompiled_extend_var1rest)
#define setcompiled_extend_var2rest _n(setcompiled_extend_var2rest)
#define setcompiled_extend_var3rest _n(setcompiled_extend_var3rest)
#define setcompiled_extend_var1dynamic _n(setcompiled_extend_var1dynamic)
#define setcompiled_extend_var2dynamic _n(setcompiled_extend_var2dynamic)
#define setcompiled_extend_var3dynamic _n(setcompiled_extend_var3dynamic)

#define structfunction _n(structfunction)
#define getcodefunction _n(getcodefunction)
#define setcodefunction _n(setcodefunction)
#define getnamefunction _n(getnamefunction)
#define setnamefunction _n(setnamefunction)
#define getdatafunction _n(getdatafunction)
#define setdatafunction _n(setdatafunction)
#define gettype_function _n(gettype_function)
#define settype_function _n(settype_function)
#define getdocumentation_function _n(getdocumentation_function)
#define setdocumentation_function _n(setdocumentation_function)
#define getlambda_expression_function _n(getlambda_expression_function)
#define setlambda_expression_function _n(setlambda_expression_function)
#define getdefunform_function _n(getdefunform_function)
#define setdefunform_function _n(setdefunform_function)
#define functionp _n(functionp)
#define funcall_function_p _n(funcall_function_p)
#define macro_function_p _n(macro_function_p)
#define interpreted_function_p _n(interpreted_function_p)
#define interpreted_funcall_function_p _n(interpreted_funcall_function_p)
#define interpreted_macro_function_p _n(interpreted_macro_function_p)
#define compiled_function_p _n(compiled_function_p)
#define compiled_funcall_function_p _n(compiled_funcall_function_p)
#define compiled_macro_function_p _n(compiled_macro_function_p)
#define settrace_function _n(settrace_function)
#define tracep_function _n(tracep_function)
#define build_function _n(build_function)
#define init_function _n(init_function)

enum FUNCTION_INDEX {
	FUNCTION_INDEX_CODE,
	FUNCTION_INDEX_NAME,
	FUNCTION_INDEX_DATA,
	FUNCTION_INDEX_TABLE,
	FUNCTION_INDEX_SIZE
};

struct function_struct {
	unsigned macro : 1;
	unsigned compiled : 1;
	unsigned trace : 1;
	pointer index;
};

#define PtrFunction_Low(x)			PtrBodySSa(x, FUNCTION_INDEX_SIZE)
#define StructFunction_Low(x)		((struct function_struct *)PtrFunction_Low(x))
#define GetCodeFunction_Low(x,v)	GetArraySS((x),FUNCTION_INDEX_CODE,(v))
#define SetCodeFunction_Low(x,v)	SetArraySS((x),FUNCTION_INDEX_CODE,(v))
#define GetNameFunction_Low(x,v)	GetArraySS((x),FUNCTION_INDEX_NAME,(v))
#define SetNameFunction_Low(x,v)	SetArraySS((x),FUNCTION_INDEX_NAME,(v))
#define GetDataFunction_Low(x,v)	GetArraySS((x),FUNCTION_INDEX_DATA,(v))
#define SetDataFunction_Low(x,v)	SetArraySS((x),FUNCTION_INDEX_DATA,(v))
#define GetTableFunction_Low(x,v)	GetArraySS((x),FUNCTION_INDEX_TABLE,(v))
#define SetTableFunction_Low(x,v)	SetArraySS((x),FUNCTION_INDEX_TABLE,(v))

#ifdef LISP_DEBUG
#define StructFunction(x)			structfunction(x)
#define GetCodeFunction(x,v)		getcodefunction(x,v)
#define SetCodeFunction(x,v)		setcodefunction(x,v)
#define GetNameFunction(x,v)		getnamefunction(x,v)
#define SetNameFunction(x,v)		setnamefunction(x,v)
#define GetDataFunction(x,v)		getdatafunction(x,v)
#define SetDataFunction(x,v)		setdatafunction(x,v)
#else
#define StructFunction(x)			StructFunction_Low(x)
#define GetCodeFunction(x,v)		GetCodeFunction_Low(x,v)
#define SetCodeFunction(x,v)		SetCodeFunction_Low(x,v)
#define GetNameFunction(x,v)		GetNameFunction_Low(x,v)
#define SetNameFunction(x,v)		setnamefunction(x,v)
#define GetDataFunction(x,v)		GetDataFunction_Low(x,v)
#define SetDataFunction(x,v)		SetDataFunction_Low(x,v)
#endif

void function_alloc(LocalRoot local, addr *ret, addr name, addr code);
void function_local(LocalRoot local, addr *ret, addr name, addr code);
void function_heap(addr *ret, addr name, addr code);
void function_empty_heap(addr *ret, addr name);
void macro_alloc(LocalRoot local, addr *ret, addr name, addr code);
void macro_local(LocalRoot local, addr *ret, addr name, addr code);
void macro_heap(addr *ret, addr name, addr code);

void compiled_alloc(LocalRoot local, addr *ret, addr name);
void compiled_local(LocalRoot local, addr *ret, addr name);
void compiled_heap(addr *ret, addr name);
void compiled_macro_alloc(LocalRoot local, addr *ret, addr name);
void compiled_macro_local(LocalRoot local, addr *ret, addr name);
void compiled_macro_heap(addr *ret, addr name);

void compiled_system(addr *ret, addr name);
void compiled_setf_system(addr *ret, addr symbol);
void compiled_macro_system(addr *ret, addr name);

void setcompiled_code(addr pos, pointer p);
void getcompiled_code(addr pos, pointer *ret);
void setcompiled_macro(addr pos, pointer p);
void setcompiled_none(addr pos, pointer p);
void setcompiled_any(addr pos, pointer p);
void setcompiled_empty(addr pos, pointer p);
void setcompiled_rest(addr pos, pointer p);
void setcompiled_dynamic(addr pos, pointer p);
void setcompiled_var1(addr pos, pointer p);
void setcompiled_var2(addr pos, pointer p);
void setcompiled_var3(addr pos, pointer p);
void setcompiled_var4(addr pos, pointer p);
void setcompiled_var5(addr pos, pointer p);
void setcompiled_var6(addr pos, pointer p);
void setcompiled_opt1(addr pos, pointer p);
void setcompiled_opt2(addr pos, pointer p);
void setcompiled_opt3(addr pos, pointer p);
void setcompiled_opt4(addr pos, pointer p);
void setcompiled_opt5(addr pos, pointer p);
void setcompiled_var1opt1(addr pos, pointer p);
void setcompiled_var2opt1(addr pos, pointer p);
void setcompiled_var3opt1(addr pos, pointer p);
void setcompiled_var4opt1(addr pos, pointer p);
void setcompiled_var5opt1(addr pos, pointer p);
void setcompiled_var1opt2(addr pos, pointer p);
void setcompiled_var2opt2(addr pos, pointer p);
void setcompiled_var2opt3(addr pos, pointer p);
void setcompiled_var1rest(addr pos, pointer p);
void setcompiled_var2rest(addr pos, pointer p);
void setcompiled_var3rest(addr pos, pointer p);
void setcompiled_var4rest(addr pos, pointer p);
void setcompiled_opt1rest(addr pos, pointer p);
void setcompiled_var1dynamic(addr pos, pointer p);
void setcompiled_var2dynamic(addr pos, pointer p);
void setcompiled_var3dynamic(addr pos, pointer p);
void setcompiled_var4dynamic(addr pos, pointer p);
void setcompiled_opt1dynamic(addr pos, pointer p);

void setcompiled_extend_macro(addr pos, pointer p);
void setcompiled_extend_rest(addr pos, pointer p);
void setcompiled_extend_dynamic(addr pos, pointer p);
void setcompiled_extend_any(addr pos, pointer p);
void setcompiled_extend_empty(addr pos, pointer p);
void setcompiled_extend_var1(addr pos, pointer p);
void setcompiled_extend_var2(addr pos, pointer p);
void setcompiled_extend_var3(addr pos, pointer p);
void setcompiled_extend_var4(addr pos, pointer p);
void setcompiled_extend_var5(addr pos, pointer p);
void setcompiled_extend_var6(addr pos, pointer p);
void setcompiled_extend_opt1(addr pos, pointer p);
void setcompiled_extend_opt2(addr pos, pointer p);
void setcompiled_extend_opt3(addr pos, pointer p);
void setcompiled_extend_var1opt1(addr pos, pointer p);
void setcompiled_extend_var1opt2(addr pos, pointer p);
void setcompiled_extend_var1opt3(addr pos, pointer p);
void setcompiled_extend_var2opt1(addr pos, pointer p);
void setcompiled_extend_var2opt2(addr pos, pointer p);
void setcompiled_extend_var2opt3(addr pos, pointer p);
void setcompiled_extend_var3opt1(addr pos, pointer p);
void setcompiled_extend_var3opt2(addr pos, pointer p);
void setcompiled_extend_var3opt3(addr pos, pointer p);
void setcompiled_extend_var1rest(addr pos, pointer p);
void setcompiled_extend_var2rest(addr pos, pointer p);
void setcompiled_extend_var3rest(addr pos, pointer p);
void setcompiled_extend_var1dynamic(addr pos, pointer p);
void setcompiled_extend_var2dynamic(addr pos, pointer p);
void setcompiled_extend_var3dynamic(addr pos, pointer p);

struct function_struct *structfunction(addr pos);
void getcodefunction(addr pos, addr *ret);
void setcodefunction(addr pos, addr value);
void getnamefunction(addr pos, addr *ret);
void setnamefunction(addr pos, addr value);
void getdatafunction(addr pos, addr *ret);
void setdatafunction(addr pos, addr value);

void gettype_function(addr pos, addr *ret);
void settype_function(addr pos, addr value);
void getdocumentation_function(addr pos, addr *ret);
void setdocumentation_function(addr pos, addr value);
void getlambda_expression_function(addr pos, addr *ret);
void setlambda_expression_function(addr pos, addr value);
void getdefunform_function(addr pos, addr *ret);
void setdefunform_function(addr pos, addr value);

int functionp(addr pos);
int funcall_function_p(addr pos);
int macro_function_p(addr pos);
int interpreted_function_p(addr pos);
int interpreted_funcall_function_p(addr pos);
int interpreted_macro_function_p(addr pos);
int compiled_function_p(addr pos);
int compiled_funcall_function_p(addr pos);
int compiled_macro_function_p(addr pos);
void settrace_function(addr pos);
int tracep_function(addr pos);

void build_function(void);
void init_function(void);

#endif


/************************************************************
 *  gc.h
 ************************************************************/
#ifndef __GC_HEADER__
#define __GC_HEADER__


#define gcexec _n(gcexec)
#define gcsync _n(gcsync)

void gcexec(enum GcMode mode);
void gcsync(Execute ptr, enum GcMode mode);

#endif


/************************************************************
 *  heap_core.h
 ************************************************************/
#ifndef __HEAP_CORE_HEADER__
#define __HEAP_CORE_HEADER__


#define save_heap _n(save_heap)
#define load_heap _n(load_heap)
#define init_heap_core _n(init_heap_core)

int save_heap(filestream fm);
int load_heap(filestream fm);
void init_heap_core(void);

#endif


/************************************************************
 *  heap_memory.h
 ************************************************************/
#ifndef __HEAP_MEMORY_HEADER__
#define __HEAP_MEMORY_HEADER__


#define heap_alloc _n(heap_alloc)
#define heap_root _n(heap_root)
#define heap_front _n(heap_front)
#define heap_pos _n(heap_pos)
#define heap_tail _n(heap_tail)
#define heap_range _n(heap_range)
#define heap_object _n(heap_object)
#define heap_count _n(heap_count)
#define heap_gc_count _n(heap_gc_count)
#define heap_gc_partial _n(heap_gc_partial)
#define heap_gc_full _n(heap_gc_full)
#define heap_cons_count _n(heap_cons_count)
#define heap_symbol_count _n(heap_symbol_count)

#define alloctail _n(alloctail)
#define allocheap _n(allocheap)
#define alloc_heap _n(alloc_heap)
#define free_heap _n(free_heap)
#define reload_heap _n(reload_heap)
#define makespace_heap _n(makespace_heap)
#define valid_heap _n(valid_heap)
#define get_heap_object _n(get_heap_object)
#define get_heap_count _n(get_heap_count)
#define get_heap_gc_count _n(get_heap_gc_count)
#define get_heap_size _n(get_heap_size)

struct heap_addr {
	addr pos;
};

/* variable */
extern void *heap_alloc;
extern addr heap_root;
extern addr heap_front;
extern addr heap_pos;
extern addr heap_tail;
extern addr heap_range;
extern size_t heap_object;
extern size_t heap_count;
extern size_t heap_gc_count;
extern size_t heap_gc_partial;
extern size_t heap_gc_full;
extern size_t heap_cons_count;
extern size_t heap_symbol_count;

struct heap_addr *alloctail(void);
void allocheap(size_t size, enum LISPTYPE type, addr *root, int size2);

/* function */
int alloc_heap(size_t);
void free_heap(void);
void reload_heap(void);

/* gc */
void makespace_heap(addr pos, size_t size);
int valid_heap(const void *);
size_t get_heap_object(void);
size_t get_heap_count(void);
size_t get_heap_gc_count(void);
size_t get_heap_size(void);

#endif


/************************************************************
 *  hashtable.h
 ************************************************************/
#ifndef __HASHTABLE_HEADER__
#define __HASHTABLE_HEADER__


#define hashtable_full_heap _n(hashtable_full_heap)
#define hashtable_full_local _n(hashtable_full_local)
#define hashtable_full_alloc _n(hashtable_full_alloc)
#define hashtable_integer_heap _n(hashtable_integer_heap)
#define hashtable_integer_local _n(hashtable_integer_local)
#define hashtable_integer_alloc _n(hashtable_integer_alloc)
#define hashtable_heap _n(hashtable_heap)
#define hashtable_local _n(hashtable_local)
#define hashtable_alloc _n(hashtable_alloc)
#define hashtable_size_heap _n(hashtable_size_heap)
#define hashtable_size_local _n(hashtable_size_local)
#define hashtable_size_alloc _n(hashtable_size_alloc)
#define clear_hashtable_heap _n(clear_hashtable_heap)
#define clear_hashtable_local _n(clear_hashtable_local)
#define clear_hashtable _n(clear_hashtable)
#define hashtablep _n(hashtablep)
#define gettest_hashtable _n(gettest_hashtable)
#define settest_hashtable _n(settest_hashtable)
#define gettest_symbol_hashtable _n(gettest_symbol_hashtable)
#define getcount_hashtable _n(getcount_hashtable)
#define inccount_hashtable _n(inccount_hashtable)
#define getsize_hashtable _n(getsize_hashtable)
#define setrehash_float_hashtable _n(setrehash_float_hashtable)
#define getrehash_float_hashtable _n(getrehash_float_hashtable)
#define setrehash_integer_hashtable _n(setrehash_integer_hashtable)
#define getrehash_integer_hashtable _n(getrehash_integer_hashtable)
#define getrehash_threshold_hashtable _n(getrehash_threshold_hashtable)
#define force_resize_hashtable_ _n(force_resize_hashtable_)
#define internp_hashheap_ _n(internp_hashheap_)
#define intern_hashheap_ _n(intern_hashheap_)
#define findcons_hashtable_ _n(findcons_hashtable_)
#define findcons_char_hashtable_ _n(findcons_char_hashtable_)
#define findcons_unicode_hashtable_ _n(findcons_unicode_hashtable_)
#define findcons_character2_hashtable_ _n(findcons_character2_hashtable_)
#define find_hashtable_ _n(find_hashtable_)
#define find_char_hashtable_ _n(find_char_hashtable_)
#define find_unicode_hashtable_ _n(find_unicode_hashtable_)
#define find_character2_hashtable_ _n(find_character2_hashtable_)
#define findnil_hashtable_ _n(findnil_hashtable_)
#define findnil_char_hashtable_ _n(findnil_char_hashtable_)
#define findnil_unicode_hashtable_ _n(findnil_unicode_hashtable_)
#define findnil_character2_hashtable_ _n(findnil_character2_hashtable_)
#define findnil_hashtable_debug _n(findnil_hashtable_debug)
#define delete_hashtable_ _n(delete_hashtable_)
#define allkeys_hashtable_heap _n(allkeys_hashtable_heap)
#define allkeys_hashtable_local _n(allkeys_hashtable_local)
#define allkeys_hashtable_alloc _n(allkeys_hashtable_alloc)
#define equalp_hashtable_ _n(equalp_hashtable_)
#define equalrt_hashtable_ _n(equalrt_hashtable_)
#define hash_iterator_alloc _n(hash_iterator_alloc)
#define hash_iterator_local _n(hash_iterator_local)
#define hash_iterator_heap _n(hash_iterator_heap)
#define set_hash_iterator _n(set_hash_iterator)
#define next_hash_iterator _n(next_hash_iterator)

enum HASHTABLE_INDEX {
	HASHTABLE_INDEX_ARRAY = 0,
	HASHTABLE_INDEX_PADDING,
	HASHTABLE_INDEX_SIZE
};

enum HASHTABLE_TEST {
	HASHTABLE_TEST_EQ = 0,
	HASHTABLE_TEST_EQL,
	HASHTABLE_TEST_EQUAL,
	HASHTABLE_TEST_EQUALP,
	HASHTABLE_TEST_CACHE, /* for generic function */
	HASHTABLE_TEST_SIZE
};

struct StructHashtable {
	unsigned resize_float_p : 1;
	unsigned expand_p : 1;
	enum HASHTABLE_TEST test;
	size_t count, size, limit;
	size_t resize_integer;
	double_float resize_float;
	double_float threshold;
};

#ifdef LISP_ARCH_32BIT
#define heap_hashtable      heap_array4
#define local_hashtable     local_array4
#define alloc_hashtable     alloc_array4
#else
#define heap_hashtable      heap_array8
#define local_hashtable     local_array8
#define alloc_hashtable     alloc_array8
#endif
#define SetTableHash(x,y)   SetArraySS((x), HASHTABLE_INDEX_ARRAY, (y))

#define PtrHashtable(x) PtrBodySSa(x, HASHTABLE_INDEX_SIZE)
#define PtrStructHashtable(x) ((struct StructHashtable *)PtrHashtable(x))
#define GetTestHashtable(x) ((int)PtrStructHashtable(x)->test)

#ifdef LISP_ARCH_32BIT
#define GetArrayHash		GetArrayA4
#define SetArrayHash		SetArrayA4
#define LenArrayHash		LenArrayA4
#else
#define GetArrayHash		GetArrayA8
#define SetArrayHash		SetArrayA8
#define LenArrayHash		LenArrayA8
#endif
#define GetTableHash(x,y)	GetArraySS((x), HASHTABLE_INDEX_ARRAY, (y))

#define HASHTABLE_TEST_DEFAULT				HASHTABLE_TEST_EQ
#define HASHTABLE_SIZE_DEFAULT				4
#define HASHTABLE_REHASH_SIZE_DEFAULT		1.5
#define HASHTABLE_REHASH_THRESHOLD_DEFAULT	1.0

void hashtable_full_heap(addr *ret,
		enum HASHTABLE_TEST test, size_t size,
		double_float rehash_size, double_float rehash_threshold);
void hashtable_full_local(LocalRoot local, addr *ret,
		enum HASHTABLE_TEST test, size_t size,
		double_float rehash_size, double_float rehash_threshold);
void hashtable_full_alloc(LocalRoot local, addr *ret,
		enum HASHTABLE_TEST test, size_t size,
		double_float rehash_size, double_float rehash_threshold);

void hashtable_integer_heap(addr *ret,
		enum HASHTABLE_TEST test, size_t size,
		size_t rehash_size, double_float rehash_threshold);
void hashtable_integer_local(LocalRoot local, addr *ret,
		enum HASHTABLE_TEST test, size_t size,
		size_t rehash_size, double_float rehash_threshold);
void hashtable_integer_alloc(LocalRoot local, addr *ret,
		enum HASHTABLE_TEST test, size_t size,
		size_t rehash_size, double_float rehash_threshold);

void hashtable_heap(addr *ret);
void hashtable_local(LocalRoot local, addr *ret);
void hashtable_alloc(LocalRoot local, addr *ret);
void hashtable_size_heap(addr *ret, size_t size);
void hashtable_size_local(LocalRoot local, addr *ret, size_t size);
void hashtable_size_alloc(LocalRoot local, addr *ret, size_t size);
void clear_hashtable_heap(addr pos);
void clear_hashtable_local(addr pos);
void clear_hashtable(addr pos);
int hashtablep(addr pos);

void gettest_hashtable(addr pos, enum HASHTABLE_TEST *ret);
void settest_hashtable(addr pos, enum HASHTABLE_TEST value);
void gettest_symbol_hashtable(addr pos, addr *ret);
void getcount_hashtable(addr pos, size_t *ret);
void inccount_hashtable(addr pos, size_t value);
void getsize_hashtable(addr pos, size_t *ret);
void setrehash_float_hashtable(addr pos, double_float value);
int getrehash_float_hashtable(addr pos, double_float *ret);
void setrehash_integer_hashtable(addr pos, size_t value);
int getrehash_integer_hashtable(addr pos, size_t *ret);
void getrehash_threshold_hashtable(addr pos, double_float *ret);

/* intern */
int force_resize_hashtable_(addr pos, size_t size);
int internp_hashheap_(addr pos, addr key, addr *ret, int *existp);
int intern_hashheap_(addr pos, addr key, addr *ret);

/* notfound = nil */
int findcons_hashtable_(addr pos, addr key, addr *ret);
int findcons_char_hashtable_(addr pos, const char *key, addr *ret);
int findcons_unicode_hashtable_(addr pos, unicode key, addr *ret);
int findcons_character2_hashtable_(addr pos, unicode a, unicode b, addr *ret);

/* notfound = unbound */
int find_hashtable_(addr pos, addr key, addr *ret);
int find_char_hashtable_(addr pos, const char *key, addr *ret);
int find_unicode_hashtable_(addr pos, unicode key, addr *ret);
int find_character2_hashtable_(addr pos, unicode a, unicode b, addr *ret);

/* notfound = nil */
int findnil_hashtable_(addr pos, addr key, addr *ret);
int findnil_char_hashtable_(addr pos, const char *key, addr *ret);
int findnil_unicode_hashtable_(addr pos, unicode key, addr *ret);
int findnil_character2_hashtable_(addr pos, unicode a, unicode b, addr *ret);

/* debug */
int findnil_hashtable_debug(addr pos, addr key, addr *ret);

/* delete=0, notfound=1 */
int delete_hashtable_(addr pos, addr key, int *ret);

/* map-function */
void allkeys_hashtable_heap(addr pos, addr *ret);
void allkeys_hashtable_local(LocalRoot local, addr pos, addr *ret);
void allkeys_hashtable_alloc(LocalRoot local, addr pos, addr *ret);

/* equalp */
int equalp_hashtable_(addr left, addr right, int *ret);
int equalrt_hashtable_(addr left, addr right, int *ret);

/* iterator */
void hash_iterator_alloc(LocalRoot local, addr *ret, addr table);
void hash_iterator_local(LocalRoot local, addr *ret, addr table);
void hash_iterator_heap(addr *ret, addr table);
void set_hash_iterator(addr pos, addr table);
/* 0:finish, 1:find */
int next_hash_iterator(addr pos, addr *key, addr *value);

#endif


/************************************************************
 *  localtime.h
 ************************************************************/
#ifndef __LOCALTIME_HEADER__
#define __LOCALTIME_HEADER__


#define init_localtime _n(init_localtime)
#define gmtime_arch _n(gmtime_arch)
#define localtime_arch _n(localtime_arch)
#define nowtime_string _n(nowtime_string)

#if defined(LISP_WINDOWS)
/* Windows */
#define __STDC_WANT_LIB_EXT1__ 1
#elif defined(LISP_UNIX)
/* Unix */
#define _BSD_SOURCE 1
#elif defined(__STDC_LIB_EXT1__)
/* C11 */
#define __STDC_WANT_LIB_EXT1__ 1
#else
/* C99 */
#endif

void init_localtime(void);
int gmtime_arch(struct tm *ret, const time_t *time);
int localtime_arch(struct tm *ret, const time_t *time);
int nowtime_string(char *ptr, size_t size);

#endif


/************************************************************
 *  make_typedef.h
 ************************************************************/
#ifndef __MAKE_TYPEDEF_HEADER__
#define __MAKE_TYPEDEF_HEADER__


#define code_make_struct _n(code_make_struct)
#define CodeMake _n(CodeMake)

struct code_make_struct {
	unsigned escape : 1;
	Execute ptr;
	LocalRoot local;
	addr code;
};
typedef struct code_make_struct *CodeMake;
typedef int (*code_make_calltype)(CodeMake, addr);

#endif


/************************************************************
 *  make.h
 ************************************************************/
#ifndef __MAKE_HEADER__
#define __MAKE_HEADER__


#define set_code_make_struct _n(set_code_make_struct)
#define code_make_execute_ _n(code_make_execute_)
#define code_make_ _n(code_make_)
#define init_make _n(init_make)

void set_code_make_struct(struct code_make_struct *str, Execute ptr, addr code);
int code_make_execute_(CodeMake ptr, addr scope);
int code_make_(Execute ptr, addr *ret, addr scope);
void init_make(void);

#endif


/************************************************************
 *  package_object.h
 ************************************************************/
#ifndef __PACKAGE_OBJECT_HEADER__
#define __PACKAGE_OBJECT_HEADER__


#define packagep _n(packagep)
#define getname_package_ _n(getname_package_)
#define getnickname_package_ _n(getnickname_package_)
#define getuselist_package_ _n(getuselist_package_)
#define getusedbylist_package_ _n(getusedbylist_package_)
#define getshadow_package_ _n(getshadow_package_)
#define getdocument_package _n(getdocument_package)
#define setdocument_package _n(setdocument_package)
#define getname_package_unsafe _n(getname_package_unsafe)
#define getnickname_package_unsafe _n(getnickname_package_unsafe)
#define getuselist_package_unsafe _n(getuselist_package_unsafe)
#define getusedbylist_package_unsafe _n(getusedbylist_package_unsafe)
#define getshadow_package_unsafe _n(getshadow_package_unsafe)
#define getexport_package_unsafe _n(getexport_package_unsafe)
#define get_readonly_package _n(get_readonly_package)
#define set_readonly_package _n(set_readonly_package)

#define push_list_nicknames_package _n(push_list_nicknames_package)
#define push_list_use_package _n(push_list_use_package)
#define push_list_used_package _n(push_list_used_package)
#define push_list_export_package_ _n(push_list_export_package_)
#define push_list_shadow_package_ _n(push_list_shadow_package_)
#define delete_list_use_package _n(delete_list_use_package)
#define delete_list_used_package _n(delete_list_used_package)
#define delete_list_export_package_ _n(delete_list_export_package_)
#define delete_list_shadow_package_ _n(delete_list_shadow_package_)

enum PACKAGE_INDEX {
	PACKAGE_INDEX_TABLE = 0,
	PACKAGE_INDEX_NAME,
	PACKAGE_INDEX_NICKNAME,
	PACKAGE_INDEX_USE,
	PACKAGE_INDEX_USED,
	PACKAGE_INDEX_SHADOW,
	PACKAGE_INDEX_EXPORT,
	PACKAGE_INDEX_DOCUMENT,
	PACKAGE_INDEX_SIZE
};

enum PACKAGE_TYPE {
	PACKAGE_TYPE_NIL = 0,
	PACKAGE_TYPE_INTERNAL,
	PACKAGE_TYPE_EXTERNAL,
	PACKAGE_TYPE_INHERITED,
	PACKAGE_TYPE_SIZE
};

#define GetPackage      GetArrayA2
#define SetPackage      SetArrayA2

int packagep(addr pos);

int getname_package_(addr pos, addr *ret);
int getnickname_package_(addr pos, addr *ret);
int getuselist_package_(addr pos, addr *ret);
int getusedbylist_package_(addr pos, addr *ret);
int getshadow_package_(addr pos, addr *ret);
void getdocument_package(addr pos, addr *ret);
void setdocument_package(addr pos, addr value);

void getname_package_unsafe(addr pos, addr *ret);
void getnickname_package_unsafe(addr pos, addr *ret);
void getuselist_package_unsafe(addr pos, addr *ret);
void getusedbylist_package_unsafe(addr pos, addr *ret);
void getshadow_package_unsafe(addr pos, addr *ret);
void getexport_package_unsafe(addr pos, addr *ret);
int get_readonly_package(addr pos);
void set_readonly_package(addr pos, int value);

/* package list */
void push_list_nicknames_package(addr package, addr pos);
void push_list_use_package(addr package, addr pos);
void push_list_used_package(addr package, addr pos);
int push_list_export_package_(addr package, addr name);
int push_list_shadow_package_(addr package, addr symbol);
void delete_list_use_package(addr package, addr pos);
void delete_list_used_package(addr package, addr pos);
int delete_list_export_package_(addr package, addr name);
int delete_list_shadow_package_(addr package, addr symbol);

#endif


/************************************************************
 *  package.h
 ************************************************************/
#ifndef __PACKAGE_HEADER__
#define __PACKAGE_HEADER__


#define build_package _n(build_package)
#define getpackage_ _n(getpackage_)
#define append_nicknames_package_ _n(append_nicknames_package_)
#define delete_renameone_package_ _n(delete_renameone_package_)
#define rename_package_ _n(rename_package_)
#define find_symbol_package_ _n(find_symbol_package_)
#define find_package_ _n(find_package_)
#define find_char_package_ _n(find_char_package_)
#define package_size_heap_ _n(package_size_heap_)
#define package_heap_ _n(package_heap_)
#define find_allsymbols_package_ _n(find_allsymbols_package_)
#define list_all_packages_ _n(list_all_packages_)
#define in_package_ _n(in_package_)
#define externalp_package_ _n(externalp_package_)
#define exportp_package_ _n(exportp_package_)
#define exportp_name_package_ _n(exportp_name_package_)
#define checksymbol_package_ _n(checksymbol_package_)
#define keyword_packagetype _n(keyword_packagetype)
#define init_package _n(init_package)

#define PackageTable(x) (*(x) = LispRoot(PACKAGE))

void build_package(void);
int getpackage_(Execute ptr, addr *ret);

int append_nicknames_package_(addr pos, addr right);
int delete_renameone_package_(addr table, addr name);
int rename_package_(addr pos, addr name, addr right, addr *ret);

int find_symbol_package_(addr package, addr name,
		addr *value, enum PACKAGE_TYPE *ret);
int find_package_(addr name, addr *ret);
int find_char_package_(const char *name, addr *ret);
int package_size_heap_(addr *ret, addr name, size_t size);
int package_heap_(addr *ret, addr name);
int find_allsymbols_package_(addr name, addr *ret);
int list_all_packages_(addr *ret);
int in_package_(Execute ptr, addr package, addr *ret);

int externalp_package_(addr symbol, addr package, int *ret);
int exportp_package_(addr symbol, addr package, int *ret);
int exportp_name_package_(addr package, addr name, addr *value, int *ret);
int checksymbol_package_(addr symbol, addr package, int *ret);
void keyword_packagetype(enum PACKAGE_TYPE type, addr *ret);

/* initialize */
void init_package(void);

#endif


/************************************************************
 *  package_intern.h
 ************************************************************/
#ifndef __PACKAGE_INTERN_HEADER__
#define __PACKAGE_INTERN_HEADER__


#define intern_package_table_ _n(intern_package_table_)
#define intern_package_ _n(intern_package_)
#define intern_char_package_ _n(intern_char_package_)
#define unintern_package_ _n(unintern_package_)
#define setkeyword_package_ _n(setkeyword_package_)
#define intern_default_package_ _n(intern_default_package_)
#define internchar_ _n(internchar_)
#define internchar_default_ _n(internchar_default_)
#define internchar_null_ _n(internchar_null_)
#define internchar_keyword_ _n(internchar_keyword_)
#define interncommon_ _n(interncommon_)
#define internchar_debug _n(internchar_debug)
#define internchar_keyword_debug _n(internchar_keyword_debug)
#define interncommon_debug _n(interncommon_debug)
#define interncharr_debug _n(interncharr_debug)
#define interncharr_null_debug _n(interncharr_null_debug)
#define interncommonr_debug _n(interncommonr_debug)
#define init_package_intern _n(init_package_intern)

int intern_package_table_(addr package, addr name,
		addr *value, enum PACKAGE_TYPE *ret);
int intern_package_(addr package, addr name,
		addr *value, enum PACKAGE_TYPE *ret);
int intern_char_package_(addr package, const char *name,
		addr *value, enum PACKAGE_TYPE *ret);
int unintern_package_(addr package, addr symbol, int *ret);
int setkeyword_package_(addr pos);

int intern_default_package_(Execute ptr, addr name,
		addr *value, enum PACKAGE_TYPE *ret);
int internchar_(const char *pname, const char *sname,
		addr *value, enum PACKAGE_TYPE *ret);
int internchar_default_(Execute ptr, const char *name,
		addr *value, enum PACKAGE_TYPE *ret);
int internchar_null_(Execute ptr, const char *pname, const char *sname,
		addr *value, enum PACKAGE_TYPE *ret);
int internchar_keyword_(const char *name, addr *value, enum PACKAGE_TYPE *ret);
int interncommon_(const char *name, addr *value, enum PACKAGE_TYPE *ret);

void internchar_debug(const char *pname, const char *sname, addr *value);
void internchar_keyword_debug(const char *name, addr *value);
void interncommon_debug(const char *name, addr *value);
addr interncharr_debug(const char *pname, const char *sname);
addr interncharr_null_debug(Execute ptr, const char *pname, const char *sname);
addr interncommonr_debug(const char *name);

void init_package_intern(void);

#endif


/************************************************************
 *  pathname.h
 ************************************************************/
#ifndef __PATHNAME_HEADER__
#define __PATHNAME_HEADER__


#define defaults_pathname_heap_ _n(defaults_pathname_heap_)
#define parse_pathname_full_heap_ _n(parse_pathname_full_heap_)
#define parse_pathname_setf_heap_ _n(parse_pathname_setf_heap_)
#define parse_pathname_char_heap_ _n(parse_pathname_char_heap_)
#define pathname_designator_alloc_ _n(pathname_designator_alloc_)
#define pathname_designator_heap_ _n(pathname_designator_heap_)
#define pathname_designator_local_ _n(pathname_designator_local_)
#define physical_pathname_alloc_ _n(physical_pathname_alloc_)
#define physical_pathname_heap_ _n(physical_pathname_heap_)
#define physical_pathname_local_ _n(physical_pathname_local_)
#define file_name_pathname_heap_ _n(file_name_pathname_heap_)
#define file_name_pathname_local_ _n(file_name_pathname_local_)
#define directory_name_pathname_heap_ _n(directory_name_pathname_heap_)
#define directory_name_pathname_local_ _n(directory_name_pathname_local_)
#define name_pathname_heap_ _n(name_pathname_heap_)
#define name_pathname_local_ _n(name_pathname_local_)
#define name_physical_heap_ _n(name_physical_heap_)
#define name_physical_local_ _n(name_physical_local_)
#define merge_pathnames_clang_ _n(merge_pathnames_clang_)
#define build_pathname _n(build_pathname)

/*  pathname
 *    host -> unix, windows, "logical"
 *    [unix]
 *      device = nil
 *      version = :unspecific
 *    [windows]
 *      device = (universal | device | "[A-Z]" | Nil)
 *      version = :unspecific
 *    [logical]
 *      device = :unspecific
 *      version = (or null integer)
 */
int defaults_pathname_heap_(Execute ptr, addr *ret, addr defaults);
int parse_pathname_full_heap_(Execute ptr, addr thing, addr host,
		addr defaults, size_t start, size_t end, int junk, addr *ret, size_t *pos);
int parse_pathname_setf_heap_(Execute ptr, addr thing, addr host, addr *ret);

int parse_pathname_char_heap_(Execute ptr, const char *str, addr *ret);
int pathname_designator_alloc_(Execute ptr, addr pos, addr *ret, int localp);
int pathname_designator_heap_(Execute ptr, addr pos, addr *ret);
int pathname_designator_local_(Execute ptr, addr pos, addr *ret);

int physical_pathname_alloc_(Execute ptr, addr pos, addr *ret, int localp);
int physical_pathname_heap_(Execute ptr, addr pos, addr *ret);
int physical_pathname_local_(Execute ptr, addr pos, addr *ret);

int file_name_pathname_heap_(LocalRoot local, addr pos, addr *ret);
int file_name_pathname_local_(LocalRoot local, addr pos, addr *ret);

int directory_name_pathname_heap_(LocalRoot local, addr pos, addr *ret);
int directory_name_pathname_local_(LocalRoot local, addr pos, addr *ret);
int name_pathname_heap_(Execute ptr, addr pos, addr *ret);
int name_pathname_local_(Execute ptr, addr pos, addr *ret);
int name_physical_heap_(Execute ptr, addr pos, addr *ret);
int name_physical_local_(Execute ptr, addr pos, addr *ret);
int merge_pathnames_clang_(Execute ptr,
		addr pos, addr defpath, addr defver, addr *ret);

/* initialize */
void build_pathname(void);

#endif


/************************************************************
 *  print.h
 ************************************************************/
#ifndef __PRINT_HEADER__
#define __PRINT_HEADER__


#define array_print_ _n(array_print_)
#define base_print_ _n(base_print_)
#define radix_print_ _n(radix_print_)
#define case_print_ _n(case_print_)
#define circle_print_ _n(circle_print_)
#define escape_print_ _n(escape_print_)
#define gensym_print_ _n(gensym_print_)
#define readably_print_ _n(readably_print_)
#define pretty_print_ _n(pretty_print_)
#define level_print_ _n(level_print_)
#define length_print_ _n(length_print_)
#define lines_print_ _n(lines_print_)
#define miser_width_print_ _n(miser_width_print_)
#define right_margin_print_ _n(right_margin_print_)
#define pprint_dispatch_print_ _n(pprint_dispatch_print_)
#define push_array_print _n(push_array_print)
#define push_base_print _n(push_base_print)
#define push_radix_print _n(push_radix_print)
#define push_case_print_ _n(push_case_print_)
#define push_circle_print _n(push_circle_print)
#define push_escape_print _n(push_escape_print)
#define push_gensym_print _n(push_gensym_print)
#define push_readably_print _n(push_readably_print)
#define push_pretty_print _n(push_pretty_print)
#define push_level_print_ _n(push_level_print_)
#define push_level_nil_print _n(push_level_nil_print)
#define push_length_print_ _n(push_length_print_)
#define push_length_nil_print _n(push_length_nil_print)
#define push_lines_print_ _n(push_lines_print_)
#define push_lines_nil_print _n(push_lines_nil_print)
#define push_miser_width_print_ _n(push_miser_width_print_)
#define push_miser_width_nil_print _n(push_miser_width_nil_print)
#define push_right_margin_print_ _n(push_right_margin_print_)
#define push_right_margin_nil_print _n(push_right_margin_nil_print)
#define push_pprint_dispatch _n(push_pprint_dispatch)
#define print_unreadable_object_ _n(print_unreadable_object_)
#define print_unreadable_common_ _n(print_unreadable_common_)
#define build_print _n(build_print)
#define init_print _n(init_print)

#define PRINT_DEFAULT_WIDTH		72

enum PrintCase {
	PrintCase_unread = 0,
	PrintCase_upcase,
	PrintCase_downcase,
	PrintCase_capitalize,
	PrintCase_preserve,
	PrintCase_invert,
	PrintCase_escape,
	PrintCase_size
};
typedef int (*calltype_print)(Execute ptr, addr stream, addr object);

int array_print_(Execute ptr, int *ret);
int base_print_(Execute ptr, unsigned *ret);
int radix_print_(Execute ptr, int *ret);
int case_print_(Execute ptr, enum PrintCase *ret);
int circle_print_(Execute ptr, int *ret);
int escape_print_(Execute ptr, int *ret);
int gensym_print_(Execute ptr, int *ret);
int readably_print_(Execute ptr, int *ret);
int pretty_print_(Execute ptr, int *ret);
int level_print_(Execute ptr, size_t *value, int *ret);
int length_print_(Execute ptr, size_t *value, int *ret);
int lines_print_(Execute ptr, size_t *value, int *ret);
int miser_width_print_(Execute ptr, size_t *value, int *ret);
int right_margin_print_(Execute ptr, addr stream, size_t *ret);
int pprint_dispatch_print_(Execute ptr, addr *ret);

void push_array_print(Execute ptr, int value);
void push_base_print(Execute ptr, unsigned base);
void push_radix_print(Execute ptr, int value);
int push_case_print_(Execute ptr, enum PrintCase pcase);
void push_circle_print(Execute ptr, int value);
void push_escape_print(Execute ptr, int value);
void push_gensym_print(Execute ptr, int value);
void push_readably_print(Execute ptr, int value);
void push_pretty_print(Execute ptr, int value);
int push_level_print_(Execute ptr, size_t value);
void push_level_nil_print(Execute ptr);
int push_length_print_(Execute ptr, size_t value);
void push_length_nil_print(Execute ptr);
int push_lines_print_(Execute ptr, size_t value);
void push_lines_nil_print(Execute ptr);
int push_miser_width_print_(Execute ptr, size_t value);
void push_miser_width_nil_print(Execute ptr);
int push_right_margin_print_(Execute ptr, size_t value);
void push_right_margin_nil_print(Execute ptr);
void push_pprint_dispatch(Execute ptr, addr value);

int print_unreadable_object_(Execute ptr, addr stream, addr pos,
		int type, int identity, calltype_print call);
int print_unreadable_common_(Execute ptr, addr stream, addr pos,
		int type, int identity, addr body);

/* initialize */
void build_print(Execute ptr);
void init_print(void);

#endif


/************************************************************
 *  random.h
 ************************************************************/
/*
 *  xorshift+
 *
 *  Xorshift RNGs
 *    George Marsaglia, The Florida State University,
 *    Journal of Statistical Software, 2003.
 *    http://www.jstatsoft.org/v08/i14/paper
 *
 *  Further scramblings of Marsaglia's xorshift generators
 *    Sebastiano Vigna, Universit`a degli Studi di Milano, Italy,
 *    arXiv:1404.0390v3 [cs.DS] 23 May 2016.
 *    https://arxiv.org/abs/1404.0390
 *    http://vigna.di.unimi.it/ftp/papers/xorshiftplus.pdf
 *
 *  Usage:
 *    struct random_state state;
 *    random_seed_string(&state, "Hello");
 *    printf("%lu\n", random_number_64bit(&state));
 *    printf("%lu\n", random_number_64bit(&state));
 *    printf("%lu\n", random_number_64bit(&state));
 */
#ifndef __RANDOM_HEADER__
#define __RANDOM_HEADER__


#define random_number_32bit _n(random_number_32bit)
#define random_number_64bit _n(random_number_64bit)
#define random_equal_32bit _n(random_equal_32bit)
#define random_equal_64bit _n(random_equal_64bit)
#define random_less_32bit _n(random_less_32bit)
#define random_less_64bit _n(random_less_64bit)
#define random_seed_buffer _n(random_seed_buffer)
#define random_seed_string _n(random_seed_string)
#define random_state_equal _n(random_state_equal)

struct random_state {
	union {
		uint64_t u64[2];
		uint32_t u32[4];
	} seed;
};

/* random */
uint32_t random_number_32bit(struct random_state *state);
uint64_t random_number_64bit(struct random_state *state);
/* 0 ... value */
uint32_t random_equal_32bit(struct random_state *state, uint32_t value);
uint64_t random_equal_64bit(struct random_state *state, uint64_t value);
/* 0 ... value-1 */
uint32_t random_less_32bit(struct random_state *state, uint32_t value);
uint64_t random_less_64bit(struct random_state *state, uint64_t value);
/* seed */
void random_seed_buffer(struct random_state *state, const void *ptr, size_t size);
void random_seed_string(struct random_state *state, const char *word);
/* check */
int random_state_equal(struct random_state *a, struct random_state *b);

#endif


/************************************************************
 *  random_state.h
 ************************************************************/
#ifndef __RANDOM_STATE_HEADER__
#define __RANDOM_STATE_HEADER__


#define struct_random_state _n(struct_random_state)
#define init_random_state _n(init_random_state)
#define free_random_state _n(free_random_state)
#define random_state_alloc _n(random_state_alloc)
#define random_state_local _n(random_state_local)
#define random_state_heap _n(random_state_heap)
#define copy_random_state _n(copy_random_state)
#define randomly_random_state _n(randomly_random_state)
#define constant_random_state_ _n(constant_random_state_)
#define make_random_state_heap_ _n(make_random_state_heap_)
#define make_bignum_random_state_alloc _n(make_bignum_random_state_alloc)
#define make_bignum_random_state_local _n(make_bignum_random_state_local)
#define make_bignum_random_state_heap _n(make_bignum_random_state_heap)
#define equal_random_state_addr _n(equal_random_state_addr)
#define random_state_integer_ _n(random_state_integer_)
#define random_state_make_ _n(random_state_make_)
#define random_state_write_ _n(random_state_write_)

struct random_state *struct_random_state(addr pos);

int init_random_state(void);
void free_random_state(void);

void random_state_alloc(LocalRoot local, addr *ret);
void random_state_local(LocalRoot local, addr *ret);
void random_state_heap(addr *ret);

void copy_random_state(addr left, addr right);
void randomly_random_state(addr left);
int constant_random_state_(Execute ptr, addr left);
int make_random_state_heap_(Execute ptr, addr *ret, addr state);

void make_bignum_random_state_alloc(LocalRoot local, addr pos, addr *ret);
void make_bignum_random_state_local(LocalRoot local, addr pos, addr *ret);
void make_bignum_random_state_heap(addr pos, addr *ret);

int equal_random_state_addr(addr left, addr right);
int random_state_integer_(addr pos, addr *ret);
int random_state_make_(LocalRoot local, addr pos, addr *ret);
int random_state_write_(LocalRoot local, addr pos, addr value);

#endif


/************************************************************
 *  reader_type.h
 ************************************************************/
#ifndef __READER_TYPE_HEADER__
#define __READER_TYPE_HEADER__


#define ptr_readtype _n(ptr_readtype)
#define struct_readtype _n(struct_readtype)
#define get_readtype _n(get_readtype)
#define set_readtype _n(set_readtype)
#define dispatch_readtype _n(dispatch_readtype)
#define make_readtype _n(make_readtype)
#define copy_readtype _n(copy_readtype)
#define default_array_readtype _n(default_array_readtype)
#define default_dispatch_readtype_ _n(default_dispatch_readtype_)
#define array_readtype_heap _n(array_readtype_heap)
#define dispatch_readtype_heap _n(dispatch_readtype_heap)
#define make_array_readtype _n(make_array_readtype)
#define make_table_readtype _n(make_table_readtype)
#define make_dispatch_readtype_ _n(make_dispatch_readtype_)
#define readtype_whitespace _n(readtype_whitespace)
#define readtype_constituent _n(readtype_constituent)
#define readtype_termmacro _n(readtype_termmacro)
#define readtype_sharpmacro _n(readtype_sharpmacro)
#define delete_readtype_ _n(delete_readtype_)

enum ReadTable_Type {
	ReadTable_Type_illegal,
	ReadTable_Type_whitespace,
	ReadTable_Type_constituent,
	ReadTable_Type_macro_term,
	ReadTable_Type_macro_nonterm,
	ReadTable_Type_escape_single,
	ReadTable_Type_escape_multiple,
	ReadTable_Type_SIZE
};

struct readtype_struct {
	unsigned dispatch : 1;
	enum ReadTable_Type type : 5;
	unicode code;
};

#define PtrReadType_Low(p)		PtrBodySSa((p), 1)
#define ReadTypeStruct_Low(p)	((struct readtype_struct *)PtrReadType_Low(p))
#define GetReadType_Low(p,v)	GetArraySS((p), 0, (v))
#define SetReadType_Low(p,v)	SetArraySS((p), 0, (v))

#ifdef LISP_DEBUG
#define PtrReadType				ptr_readtype
#define ReadTypeStruct			struct_readtype
#define GetReadType				get_readtype
#define SetReadType				set_readtype
#else
#define PtrReadType				PtrReadType_Low
#define ReadTypeStruct			ReadTypeStruct_Low
#define GetReadType				GetReadType_Low
#define SetReadType				SetReadType_Low
#endif

void *ptr_readtype(addr pos);
struct readtype_struct *struct_readtype(addr pos);
void get_readtype(addr pos, addr *ret);
void set_readtype(addr pos, addr value);

int dispatch_readtype(addr pos);
void make_readtype(addr *ret,
		enum ReadTable_Type type, unicode code, unsigned dispatch);
void copy_readtype(addr *ret, addr copy);
void default_array_readtype(addr array);
int default_dispatch_readtype_(addr pos, unicode u);
void array_readtype_heap(addr *ret);
void dispatch_readtype_heap(addr *ret);
void make_array_readtype(addr *ret);
void make_table_readtype(addr *ret);
int make_dispatch_readtype_(addr *ret);

int readtype_whitespace(unicode u);
int readtype_constituent(unicode u);
int readtype_termmacro(unicode u, addr *ret);
int readtype_sharpmacro(unicode u, addr *ret);
int delete_readtype_(addr pos, unicode c);

#endif


/************************************************************
 *  reader.h
 ************************************************************/
#ifndef __READER_HEADER__
#define __READER_HEADER__


enum ReadTable_Result {
	ReadTable_Result_normal,
	ReadTable_Result_macro,
	ReadTable_Result_eof
};

#define readtable_typetable_ _n(readtable_typetable_)
#define readtable_result_ _n(readtable_result_)
#define readtable_novalue_ _n(readtable_novalue_)
#define read_call_ _n(read_call_)
#define read_stream_ _n(read_stream_)
#define read_preserving_ _n(read_preserving_)
#define read_recursive_ _n(read_recursive_)
#define read_from_string_ _n(read_from_string_)
#define readstring_debug _n(readstring_debug)
#define readr_debug _n(readr_debug)
#define init_reader _n(init_reader)
#define build_reader _n(build_reader)

int readtable_typetable_(addr pos, unicode c, enum ReadTable_Type *ret);
int readtable_result_(Execute ptr,
		addr *token, addr stream, addr table, enum ReadTable_Result *ret);
int readtable_novalue_(Execute ptr, int *result, addr *ret, addr stream, addr table);
int read_call_(Execute ptr, addr stream, int *result, addr *ret);
int read_stream_(Execute ptr, addr stream, int *result, addr *ret);
int read_preserving_(Execute ptr, addr stream, int *result, addr *ret);
int read_recursive_(Execute ptr, addr stream, int *result, addr *ret);
int read_from_string_(Execute ptr, int *result, addr *ret, addr pos);
int readstring_debug(addr *ret, const char *code);
addr readr_debug(const char *code);

void init_reader(void);
void build_reader(void);

#endif


/************************************************************
 *  restart.h
 ************************************************************/
#ifndef __RESTART_HEADER__
#define __RESTART_HEADER__


#define restartp _n(restartp)
#define restart_heap _n(restart_heap)
#define getname_restart _n(getname_restart)
#define setname_restart _n(setname_restart)
#define getfunction_restart _n(getfunction_restart)
#define setfunction_restart _n(setfunction_restart)
#define getinteractive_restart _n(getinteractive_restart)
#define setinteractive_restart _n(setinteractive_restart)
#define getreport_restart _n(getreport_restart)
#define setreport_restart _n(setreport_restart)
#define gettest_restart _n(gettest_restart)
#define settest_restart _n(settest_restart)
#define getcondition_restart _n(getcondition_restart)
#define setcondition_restart _n(setcondition_restart)
#define getassociated_restart _n(getassociated_restart)
#define setassociated_restart _n(setassociated_restart)
#define setescape_restart _n(setescape_restart)
#define getescape_restart _n(getescape_restart)
#define setenable_restart _n(setenable_restart)
#define getenable_restart _n(getenable_restart)
#define init_restart _n(init_restart)

int restartp(addr pos);
void restart_heap(addr *ret, addr name);
void getname_restart(addr pos, addr *ret);
void setname_restart(addr pos, addr value);
void getfunction_restart(addr pos, addr *ret);
void setfunction_restart(addr pos, addr value);
void getinteractive_restart(addr pos, addr *ret);
void setinteractive_restart(addr pos, addr value);
void getreport_restart(addr pos, addr *ret);
void setreport_restart(addr pos, addr value);
void gettest_restart(addr pos, addr *ret);
void settest_restart(addr pos, addr value);
void getcondition_restart(addr pos, addr *ret);
void setcondition_restart(addr pos, addr value);
void getassociated_restart(addr pos, addr *ret);
void setassociated_restart(addr pos, addr value);
void setescape_restart(addr pos, int value);
int getescape_restart(addr pos);
void setenable_restart(addr pos, int value);
int getenable_restart(addr pos);
void init_restart(void);

#endif


/************************************************************
 *  require.h
 ************************************************************/
#ifndef __REQUIRE_HEADER__
#define __REQUIRE_HEADER__


#define provide_common_ _n(provide_common_)
#define modules_find_ _n(modules_find_)
#define modules_delete_ _n(modules_delete_)
#define require_common_ _n(require_common_)
#define require_append_ _n(require_append_)
#define require_delete_ _n(require_delete_)
#define build_require _n(build_require)
#define init_require _n(init_require)

int provide_common_(Execute ptr, addr var);
int modules_find_(Execute ptr, addr var, int *ret);
int modules_delete_(Execute ptr, addr var);
int require_common_(Execute ptr, addr var, addr opt);
int require_append_(Execute ptr, addr var, int forcep, int *ret);
int require_delete_(Execute ptr, addr var, int forcep, int *ret);
void build_require(void);
void init_require(void);

#endif


/************************************************************
 *  rt.h
 ************************************************************/
#ifndef __RT_HEADER__
#define __RT_HEADER__


#define init_rt _n(init_rt)
#define build_rt _n(build_rt)

void init_rt(void);
void build_rt(void);

#endif


/************************************************************
 *  scope.h
 ************************************************************/
#ifndef __SCOPE_HEADER__
#define __SCOPE_HEADER__


#define eval_scope_ _n(eval_scope_)
#define init_scope _n(init_scope)

int eval_scope_(Execute ptr, addr *ret, addr eval);
void init_scope(void);

#endif


/************************************************************
 *  structure.h
 ************************************************************/
#ifndef __STRUCTURE_HEADER__
#define __STRUCTURE_HEADER__


#define structure_class_p_ _n(structure_class_p_)
#define structure_class_p_debug _n(structure_class_p_debug)
#define structure_class_object_p_debug _n(structure_class_object_p_debug)
#define structure_instance_p_ _n(structure_instance_p_)
#define structure_instance_p_debug _n(structure_instance_p_debug)
#define equalp_structure_ _n(equalp_structure_)
#define equalrt_structure_ _n(equalrt_structure_)
#define typep_structure_ _n(typep_structure_)
#define structure_get_object _n(structure_get_object)
#define structure_get_class _n(structure_get_class)
#define structure_get _n(structure_get)
#define structure_get_type_ _n(structure_get_type_)
#define getdoc_structure_ _n(getdoc_structure_)
#define setdoc_structure_ _n(setdoc_structure_)

#define structure_reader_ _n(structure_reader_)
#define structure_constructor_common_ _n(structure_constructor_common_)
#define allocate_instance_structure_ _n(allocate_instance_structure_)
#define make_instance_structure_ _n(make_instance_structure_)
#define copy_structure_common _n(copy_structure_common)
#define init_structure _n(init_structure)

int structure_class_p_(addr pos, int *ret);
int structure_class_p_debug(addr pos);
int structure_class_object_p_debug(addr pos);
int structure_instance_p_(addr pos, int *ret);
int equalp_structure_(addr a, addr b, int *ret);
int equalrt_structure_(addr a, addr b, int *ret);
int typep_structure_(addr value, addr instance, int *ret);
int structure_get_object(addr pos, addr *ret);
int structure_get_class(addr pos, addr *ret);
int structure_get(addr pos, addr *ret);
int structure_get_type_(addr pos, addr *ret);
int getdoc_structure_(addr symbol, addr *ret);
int setdoc_structure_(addr symbol, addr value);

int structure_reader_(Execute ptr, addr symbol, addr rest, addr *ret);
int structure_constructor_common_(Execute ptr, addr symbol, addr rest, addr *ret);
int allocate_instance_structure_(Execute ptr, addr clos, addr *ret);
int make_instance_structure_(Execute ptr, addr rest, addr *ret);
void copy_structure_common(addr var, addr *ret);
void init_structure(void);

#endif


/************************************************************
 *  subtypep_typedef.h
 ************************************************************/
#ifndef __SUBTYPEP_TYPEDEF_HEADER__
#define __SUBTYPEP_TYPEDEF_HEADER__


enum SUBTYPEP_RESULT {
	SUBTYPEP_INCLUDE,
	SUBTYPEP_EXCLUDE,
	SUBTYPEP_FALSE,
	SUBTYPEP_INVALID,
	SUBTYPEP_SIZE
};

enum SubtypepExtend {
	SubtypepExtend_Atomic,
	SubtypepExtend_AtomicNot,
	SubtypepExtend_Compound,
	SubtypepExtend_ForceNumber,
	SubtypepExtend_Normal
};

typedef enum SUBTYPEP_RESULT SubtypepResult;
typedef int (*call_type_subtypep)(Execute, addr, addr, SubtypepResult *);

#define ReturnInvalid(ret) Result(ret, SUBTYPEP_INVALID)
#define ReturnInclude(ret) Result(ret, SUBTYPEP_INCLUDE)
#define ReturnFalse(ret) Result(ret, SUBTYPEP_FALSE)
#define ReturnExclude(ret) Result(ret, SUBTYPEP_EXCLUDE)
#define ReturnIncludeExclude(ret, p) \
	Result(ret, (p)? SUBTYPEP_INCLUDE: SUBTYPEP_EXCLUDE)

#define ReturnSecondThrow(ret, v) { \
	switch (v) { \
		case SUBTYPEP_EXCLUDE: return ReturnExclude(ret); \
		case SUBTYPEP_INVALID: return ReturnInvalid(ret); \
		default: break; \
	} \
}
#define ReturnSecondValue(ret, v) \
	Result(ret, ((v) == SUBTYPEP_INCLUDE)? SUBTYPEP_FALSE: SUBTYPEP_EXCLUDE)

#endif


/************************************************************
 *  subtypep.h
 ************************************************************/
#ifndef __SUBTYPEP_HEADER__
#define __SUBTYPEP_HEADER__


#define init_subtypep _n(init_subtypep)
#define subtypep_extend_ _n(subtypep_extend_)
#define subtypep_scope_ _n(subtypep_scope_)
#define subtypep_check_ _n(subtypep_check_)

void init_subtypep(void);
int subtypep_extend_(Execute ptr, addr x, addr y, addr env, addr check, addr *ret);
int subtypep_scope_(Execute ptr, addr x, addr y, addr env, SubtypepResult *ret);
int subtypep_check_(Execute ptr, addr x, addr y, addr env, int *ret, int *validp);

#endif


/************************************************************
 *  sxhash.h
 ************************************************************/
#ifndef __SXHASH_HEADER__
#define __SXHASH_HEADER__


#define init_sxhash _n(init_sxhash)
#define sxhash_equalp_depth_ _n(sxhash_equalp_depth_)
#define sxhash_equalp_ _n(sxhash_equalp_)
#define sxhash_equal_depth_ _n(sxhash_equal_depth_)
#define sxhash_equal_ _n(sxhash_equal_)
#define sxhash_eq_ _n(sxhash_eq_)
#define sxhash_char_equalp_ _n(sxhash_char_equalp_)
#define sxhash_char_equal_ _n(sxhash_char_equal_)
#define sxhash_unicode_equalp_ _n(sxhash_unicode_equalp_)
#define sxhash_unicode_equal_ _n(sxhash_unicode_equal_)
#define sxhash_character2_equalp_ _n(sxhash_character2_equalp_)
#define sxhash_character2_equal_ _n(sxhash_character2_equal_)

void init_sxhash(void);
int sxhash_equalp_depth_(addr pos, int depth, fixnum *ret);
int sxhash_equalp_(addr pos, fixnum *ret);
int sxhash_equal_depth_(addr pos, int depth, fixnum *ret);
int sxhash_equal_(addr pos, fixnum *ret);
int sxhash_eq_(addr pos, fixnum *ret);

int sxhash_char_equalp_(const char *pos, fixnum *ret);
int sxhash_char_equal_(const char *pos, fixnum *ret);
int sxhash_unicode_equalp_(unicode pos, fixnum *ret);
int sxhash_unicode_equal_(unicode pos, fixnum *ret);
int sxhash_character2_equalp_(unicode a, unicode b, fixnum *ret);
int sxhash_character2_equal_(unicode a, unicode b, fixnum *ret);

#endif


/************************************************************
 *  syscall.h
 ************************************************************/
#ifndef __SYSCALL_HEADER__
#define __SYSCALL_HEADER__


#define init_syscall _n(init_syscall)
#define build_syscall _n(build_syscall)

void init_syscall(void);
void build_syscall(void);

#endif


/************************************************************
 *  print_font.h
 ************************************************************/
#ifndef __PRINT_COLOR_HEADER__
#define __PRINT_COLOR_HEADER__


enum print_font {
	print_font_reset,
	print_font_bold,
	print_font_faint,
	print_font_italic,
	print_font_underline,
	print_font_blink1,
	print_font_blink2,
	print_font_reverse,
	print_font_hide_in,
	print_font_hide_out
};

enum print_color {
	print_color_reset,
	print_color_black,
	print_color_red,
	print_color_green,
	print_color_yellow,
	print_color_blue,
	print_color_magenta,
	print_color_cyan,
	print_color_white,
	print_color_bright_black,
	print_color_bright_red,
	print_color_bright_green,
	print_color_bright_yellow,
	print_color_bright_blue,
	print_color_bright_magenta,
	print_color_bright_cyan,
	print_color_bright_white
};

typedef enum print_font PrintFont;
typedef enum print_color PrintColor;

#endif


/************************************************************
 *  prompt.h
 ************************************************************/
#ifndef __PROMPT_HEADER__
#define __PROMPT_HEADER__


#define push_prompt _n(push_prompt)
#define push_prompt_eval_loop _n(push_prompt_eval_loop)
#define get_prompt _n(get_prompt)
#define getvalue_prompt _n(getvalue_prompt)
#define getmode_prompt _n(getmode_prompt)
#define read_prompt_ _n(read_prompt_)
#define read_error_prompt_ _n(read_error_prompt_)

enum prompt_mode {
	prompt_input,
	prompt_eval,
	prompt_for,
	prompt_debugger,
	prompt_inspect,
	prompt_step
};
typedef enum prompt_mode PromptMode;

struct prompt_struct {
	PromptMode mode;
};

#define PtrPromptStruct(x) ((struct prompt_struct *)PtrBodySS(x))

void push_prompt(Execute ptr, addr value, PromptMode mode);
void push_prompt_eval_loop(Execute ptr);
void get_prompt(Execute ptr, addr *value, PromptMode *mode);
void getvalue_prompt(Execute ptr, addr *ret);
void getmode_prompt(Execute ptr, PromptMode *ret);
int read_prompt_(Execute ptr, addr stream, int *result, addr *ret);
int read_error_prompt_(Execute ptr, addr stream, addr *ret);

#endif


/************************************************************
 *  terme.h
 ************************************************************/
#ifndef __TERME_HEADER__
#define __TERME_HEADER__


#define init_terme _n(init_terme)
#define build_terme _n(build_terme)
#define begin_terme _n(begin_terme)
#define end_terme _n(end_terme)
#define prompt_terme_ _n(prompt_terme_)
#define readline_terme_ _n(readline_terme_)
#define clear_terme_ _n(clear_terme_)
#define text_color_terme _n(text_color_terme)

void init_terme(void);
void build_terme(void);
int begin_terme(void);
int end_terme(void);
int prompt_terme_(Execute ptr, addr pos, PromptMode mode);
int readline_terme_(Execute ptr, addr *ret);
int clear_terme_(Execute ptr);
int text_color_terme(Execute ptr, PrintColor value);

#endif


/************************************************************
 *  call_conditions.h
 ************************************************************/
#ifndef __CALL_CONDITIONS_HEADER__
#define __CALL_CONDITIONS_HEADER__


#define assert_common_ _n(assert_common_)
#define error_common_ _n(error_common_)
#define cerror_common_ _n(cerror_common_)
#define check_type_common_ _n(check_type_common_)
#define invalid_method_error_common_ _n(invalid_method_error_common_)
#define method_combination_error_common_ _n(method_combination_error_common_)
#define signal_common_ _n(signal_common_)
#define warn_common_ _n(warn_common_)
#define break_common_ _n(break_common_)
#define handler_bind_common_ _n(handler_bind_common_)
#define handler_case_common_ _n(handler_case_common_)
#define ignore_errors_common_ _n(ignore_errors_common_)
#define make_condition_common_ _n(make_condition_common_)
#define compute_restarts_common_ _n(compute_restarts_common_)
#define find_restart_common_ _n(find_restart_common_)
#define restart_bind_common_ _n(restart_bind_common_)
#define restart_case_common_ _n(restart_case_common_)
#define with_condition_restarts_common_ _n(with_condition_restarts_common_)
#define with_simple_restart_common_ _n(with_simple_restart_common_)
#define abort_common_ _n(abort_common_)
#define continue_common_ _n(continue_common_)
#define muffle_warning_common_ _n(muffle_warning_common_)
#define store_value_common_ _n(store_value_common_)
#define use_value_common_ _n(use_value_common_)

int assert_common_(Execute ptr, addr form, addr env, addr *ret);
int error_common_(Execute ptr, addr datum, addr rest);
int cerror_common_(Execute ptr, addr restart, addr datum, addr rest);
int check_type_common_(Execute ptr, addr form, addr env, addr *ret);
int invalid_method_error_common_(Execute ptr, addr method, addr format, addr args);
int method_combination_error_common_(Execute ptr, addr format, addr args);
int signal_common_(Execute ptr, addr datum, addr rest);
int warn_common_(Execute ptr, addr datum, addr rest);
int break_common_(Execute ptr, addr format, addr args);
int handler_bind_common_(addr rest, addr env, addr *ret);
int handler_case_common_(Execute ptr, addr right, addr env, addr *ret);
int ignore_errors_common_(Execute ptr, addr form, addr env, addr *ret);
int make_condition_common_(Execute ptr, addr args, addr *ret);
int compute_restarts_common_(Execute ptr, addr pos, addr *ret);
int find_restart_common_(Execute ptr, addr var, addr opt, addr *ret);
int restart_bind_common_(addr right, addr env, addr *ret);
int restart_case_common_(Execute ptr, addr form, addr env, addr *ret);
int with_condition_restarts_common_(addr form, addr *ret);
int with_simple_restart_common_(addr form, addr env, addr *ret);
int abort_common_(Execute ptr, addr opt);
int continue_common_(Execute ptr, addr opt);
int muffle_warning_common_(Execute ptr, addr opt);
int store_value_common_(Execute ptr, addr var, addr opt);
int use_value_common_(Execute ptr, addr var, addr opt);

#endif


/************************************************************
 *  call_printer.h
 ************************************************************/
#ifndef __CALL_PRINTER_HEADER__
#define __CALL_PRINTER_HEADER__


#define formatter_common_ _n(formatter_common_)
#define pprint_fill_common_ _n(pprint_fill_common_)
#define pprint_linear_common_ _n(pprint_linear_common_)
#define pprint_tabular_common_ _n(pprint_tabular_common_)
#define pprint_indent_common_ _n(pprint_indent_common_)
#define pprint_logical_block_common_ _n(pprint_logical_block_common_)
#define pprint_newline_common_ _n(pprint_newline_common_)
#define pprint_tab_common_ _n(pprint_tab_common_)
#define print_unreadable_object_common_ _n(print_unreadable_object_common_)
#define set_pprint_dispatch_common_ _n(set_pprint_dispatch_common_)
#define write_common_ _n(write_common_)
#define prin1_common_ _n(prin1_common_)
#define princ_common_ _n(princ_common_)
#define print_common_ _n(print_common_)
#define pprint_common_ _n(pprint_common_)
#define write_to_string_common_ _n(write_to_string_common_)
#define prin1_to_string_common_ _n(prin1_to_string_common_)
#define princ_to_string_common_ _n(princ_to_string_common_)
#define init_call_printer _n(init_call_printer)

int formatter_common_(LocalRoot local, addr var, addr env, addr *ret);
int pprint_fill_common_(Execute ptr, addr stream, addr list, addr colon);
int pprint_linear_common_(Execute ptr, addr stream, addr list, addr colon);
int pprint_tabular_common_(Execute ptr,
		addr stream, addr list, addr colon, addr tabsize);
int pprint_indent_common_(Execute ptr, addr rel, addr n, addr stream);
int pprint_logical_block_common_(addr form, addr env, addr *ret);
int pprint_newline_common_(Execute ptr, addr kind, addr stream);
int pprint_tab_common_(Execute ptr, addr kind, addr column, addr colinc, addr stream);
int print_unreadable_object_common_(addr form, addr env, addr *ret);
int set_pprint_dispatch_common_(Execute ptr,
		addr spec, addr call, addr priority, addr table);
int write_common_(Execute ptr, addr var, addr args);
int prin1_common_(Execute ptr, addr var, addr stream);
int princ_common_(Execute ptr, addr var, addr stream);
int print_common_(Execute ptr, addr var, addr stream);
int pprint_common_(Execute ptr, addr var, addr stream);
int write_to_string_common_(Execute ptr, addr var, addr args, addr *ret);
int prin1_to_string_common_(Execute ptr, addr var, addr *ret);
int princ_to_string_common_(Execute ptr, addr var, addr *ret);

void init_call_printer(void);

#endif


/************************************************************
 *  call_arrays.h
 ************************************************************/
#ifndef __CALL_ARRAYS_HEADER__
#define __CALL_ARRAYS_HEADER__


#define make_array_common_ _n(make_array_common_)
#define adjust_array_common_ _n(adjust_array_common_)
#define adjustable_array_p_common_ _n(adjustable_array_p_common_)
#define aref_common_ _n(aref_common_)
#define setf_aref_common_ _n(setf_aref_common_)
#define array_dimension_common_ _n(array_dimension_common_)
#define array_dimensions_common_ _n(array_dimensions_common_)
#define array_element_type_common_ _n(array_element_type_common_)
#define array_has_fill_pointer_p_common_ _n(array_has_fill_pointer_p_common_)
#define array_displacement_common_ _n(array_displacement_common_)
#define array_in_bounds_p_common_ _n(array_in_bounds_p_common_)
#define array_rank_common_ _n(array_rank_common_)
#define array_row_major_index_common_ _n(array_row_major_index_common_)
#define array_total_size_common_ _n(array_total_size_common_)
#define arrayp_common _n(arrayp_common)
#define fill_pointer_common_ _n(fill_pointer_common_)
#define setf_fill_pointer_common_ _n(setf_fill_pointer_common_)
#define row_major_aref_common_ _n(row_major_aref_common_)
#define setf_row_major_aref_common_ _n(setf_row_major_aref_common_)
#define simple_vector_p_common _n(simple_vector_p_common)
#define svref_common_ _n(svref_common_)
#define setf_svref_common_ _n(setf_svref_common_)
#define vectorp_common _n(vectorp_common)
#define bit_common_ _n(bit_common_)
#define setf_bit_common_ _n(setf_bit_common_)
#define bit_vector_p_common _n(bit_vector_p_common)
#define simple_bit_vector_p_common _n(simple_bit_vector_p_common)
#define bit_and_common_ _n(bit_and_common_)
#define bit_andc1_common_ _n(bit_andc1_common_)
#define bit_andc2_common_ _n(bit_andc2_common_)
#define bit_eqv_common_ _n(bit_eqv_common_)
#define bit_ior_common_ _n(bit_ior_common_)
#define bit_nand_common_ _n(bit_nand_common_)
#define bit_nor_common_ _n(bit_nor_common_)
#define bit_orc1_common_ _n(bit_orc1_common_)
#define bit_orc2_common_ _n(bit_orc2_common_)
#define bit_xor_common_ _n(bit_xor_common_)
#define bit_not_common_ _n(bit_not_common_)

int make_array_common_(Execute ptr, addr var, addr rest, addr *ret);
int adjust_array_common_(Execute ptr, addr pos, addr dim, addr rest, addr *ret);
int adjustable_array_p_common_(addr var, int *ret);
int aref_common_(addr var, addr rest, addr *ret);
int setf_aref_common_(addr value, addr var, addr rest);
int array_dimension_common_(addr var, addr axis, addr *ret);
int array_dimensions_common_(addr var, addr *ret);
int array_element_type_common_(addr var, addr *ret);
int array_has_fill_pointer_p_common_(addr var, int *ret);
int array_displacement_common_(addr pos, addr *ret, addr *offset);
int array_in_bounds_p_common_(addr array, addr rest, int *ret);
int array_rank_common_(addr pos, addr *ret);
int array_row_major_index_common_(addr array, addr rest, addr *ret);
int array_total_size_common_(addr array, addr *ret);
int arrayp_common(addr var);
int fill_pointer_common_(Execute ptr, addr array, addr *ret);
int setf_fill_pointer_common_(Execute ptr, addr value, addr array);
int row_major_aref_common_(addr array, addr index, addr *ret);
int setf_row_major_aref_common_(addr value, addr array, addr index);
int simple_vector_p_common(addr var);
int svref_common_(addr pos, addr index, addr *ret);
int setf_svref_common_(addr value, addr pos, addr index);
int vectorp_common(addr var);
int bit_common_(addr pos, addr rest, addr *ret);
int setf_bit_common_(addr value, addr pos, addr rest);
int bit_vector_p_common(addr var);
int simple_bit_vector_p_common(addr var);
int bit_and_common_(addr x, addr y, addr opt, addr *ret);
int bit_andc1_common_(addr x, addr y, addr opt, addr *ret);
int bit_andc2_common_(addr x, addr y, addr opt, addr *ret);
int bit_eqv_common_(addr x, addr y, addr opt, addr *ret);
int bit_ior_common_(addr x, addr y, addr opt, addr *ret);
int bit_nand_common_(addr x, addr y, addr opt, addr *ret);
int bit_nor_common_(addr x, addr y, addr opt, addr *ret);
int bit_orc1_common_(addr x, addr y, addr opt, addr *ret);
int bit_orc2_common_(addr x, addr y, addr opt, addr *ret);
int bit_xor_common_(addr x, addr y, addr opt, addr *ret);
int bit_not_common_(addr x, addr opt, addr *ret);

#endif


/************************************************************
 *  cons_plist.h
 ************************************************************/
#ifndef __CONS_PLIST_HEADER__
#define __CONS_PLIST_HEADER__


#define getplist _n(getplist)
#define getplist_safe _n(getplist_safe)
#define setplist_alloc _n(setplist_alloc)
#define setplist_local _n(setplist_local)
#define setplist_heap _n(setplist_heap)
#define setplist_alloc_safe _n(setplist_alloc_safe)
#define setplist_local_safe _n(setplist_local_safe)
#define setplist_heap_safe _n(setplist_heap_safe)
#define pushnewplist_alloc _n(pushnewplist_alloc)
#define pushnewplist_local _n(pushnewplist_local)
#define pushnewplist_heap _n(pushnewplist_heap)
#define remplist_safe_ _n(remplist_safe_)
#define remplist_check _n(remplist_check)
#define remplist _n(remplist)
#define remplist_local_ _n(remplist_local_)
#define remplist_heap_ _n(remplist_heap_)
#define getplist_constant _n(getplist_constant)
#define getplist_constant_safe _n(getplist_constant_safe)
#define setplist_constant_alloc _n(setplist_constant_alloc)
#define setplist_constant_local _n(setplist_constant_local)
#define setplist_constant_heap _n(setplist_constant_heap)
#define remplist_constant _n(remplist_constant)
#define getpplist _n(getpplist)
#define setpplist_alloc _n(setpplist_alloc)
#define setpplist_local _n(setpplist_local)
#define setpplist_heap _n(setpplist_heap)
#define getplist_callname _n(getplist_callname)
#define setplist_callname_alloc _n(setplist_callname_alloc)
#define setplist_callname_local _n(setplist_callname_local)
#define setplist_callname_heap _n(setplist_callname_heap)
#define pushnewplist_callname_alloc _n(pushnewplist_callname_alloc)
#define pushnewplist_callname_local _n(pushnewplist_callname_local)
#define pushnewplist_callname_heap _n(pushnewplist_callname_heap)
#define getpplist_callname _n(getpplist_callname)
#define setpplist_callname_alloc _n(setpplist_callname_alloc)
#define setpplist_callname_local _n(setpplist_callname_local)
#define setpplist_callname_heap _n(setpplist_callname_heap)

enum RemPlist {
	RemPlist_Delete,
	RemPlist_NotFound,
	RemPlist_Update,
	RemPlist_Size
};

/* 0:find-value, 1:not-found(Nil) */
int getplist(addr plist, addr key, addr *ret);
int getplist_safe(addr plist, addr key, addr *ret);
int setplist_alloc(LocalRoot local, addr plist, addr key, addr value, addr *ret);
int setplist_local(LocalRoot local, addr plist, addr key, addr value, addr *ret);
int setplist_heap(addr plist, addr key, addr value, addr *ret);
int setplist_alloc_safe(LocalRoot local, addr plist, addr key, addr value, addr *ret);
int setplist_local_safe(LocalRoot local, addr plist, addr key, addr value, addr *ret);
int setplist_heap_safe(addr plist, addr key, addr value, addr *ret);

int pushnewplist_alloc(LocalRoot local, addr plist, addr key, addr value, addr *ret);
int pushnewplist_local(LocalRoot local, addr plist, addr key, addr value, addr *ret);
int pushnewplist_heap(addr plist, addr key, addr value, addr *ret);
int remplist_safe_(addr plist, addr key, addr *value, enum RemPlist *ret);
enum RemPlist remplist_check(addr plist, addr key, addr *ret);
int remplist(addr plist, addr key, addr *ret);
int remplist_local_(LocalRoot local, addr list, addr key, addr *value, int *ret);
int remplist_heap_(addr list, addr key, addr *value, int *ret);

/* 0:find-value, 1:not-found(Nil) */
int getplist_constant(addr plist, constindex index, addr *ret);
int getplist_constant_safe(addr plist, constindex index, addr *ret);
#define GetPlistConst(x,y,z) getplist_constant((x),CONSTANT_##y,(z))
#define GetKeyArgs(a,b,c) getplist_constant_safe((a),CONSTANT_##b,(c))

/* 0:find-and-set, 1:make-new-cons */
int setplist_constant_alloc(LocalRoot local, addr plist,
		constindex index, addr value, addr *ret);
int setplist_constant_local(LocalRoot local, addr plist,
		constindex index, addr value, addr *ret);
int setplist_constant_heap(addr plist,
		constindex index, addr value, addr *ret);
int remplist_constant(addr plist, constindex index, addr *ret);

int getpplist(addr plist, addr key1, addr key2, addr *ret);
int setpplist_alloc(LocalRoot local,
		addr plist, addr key1, addr key2, addr value, addr *ret);
int setpplist_local(LocalRoot local,
		addr plist, addr key1, addr key2, addr value, addr *ret);
int setpplist_heap(addr plist, addr key1, addr key2, addr value, addr *ret);

/* callname */
int getplist_callname(addr plist, addr callname, addr *ret);
int setplist_callname_alloc(LocalRoot local,
		addr plist, addr callname, addr value, addr *ret);
int setplist_callname_local(LocalRoot local,
		addr plist, addr callname, addr value, addr *ret);
int setplist_callname_heap(addr plist, addr callname, addr value, addr *ret);

int pushnewplist_callname_alloc(LocalRoot local,
		addr plist, addr key, addr callname, addr *ret);
int pushnewplist_callname_local(LocalRoot local,
		addr plist, addr key, addr callname, addr *ret);
int pushnewplist_callname_heap(addr plist,
		addr key, addr callname, addr *ret);

int getpplist_callname(addr plist, addr key, addr callname, addr *ret);
int setpplist_callname_alloc(LocalRoot local,
		addr plist, addr key, addr callname, addr value, addr *ret);
int setpplist_callname_local(LocalRoot local,
		addr plist, addr key, addr callname, addr value, addr *ret);
int setpplist_callname_heap(addr plist,
		addr key, addr callname, addr value, addr *ret);

#endif


/************************************************************
 *  type_parse.h
 ************************************************************/
#ifndef __TYPE_PARSE_HEADER__
#define __TYPE_PARSE_HEADER__


#define init_type_parse _n(init_type_parse)
#define build_type_parse _n(build_type_parse)
#define parse_type_ _n(parse_type_)
#define parse_type_not_ _n(parse_type_not_)
#define parse_type_noaster_ _n(parse_type_noaster_)
#define parse_type_unsafe _n(parse_type_unsafe)
#define parse_type_values_ _n(parse_type_values_)

void init_type_parse(void);
void build_type_parse(void);
int parse_type_(Execute ptr, addr *ret, addr pos, addr env);
int parse_type_not_(Execute ptr, addr *ret, addr pos, addr env);
int parse_type_noaster_(Execute ptr, addr *ret, addr pos, addr env);
void parse_type_unsafe(addr *ret, addr pos);

/* debug */
int parse_type_values_(Execute ptr, addr *ret, addr type, addr env);

#endif


/************************************************************
 *  call_characters.h
 ************************************************************/
#ifndef __CALL_CHARACTERS_HEADER__
#define __CALL_CHARACTERS_HEADER__


#define char_eql_common_ _n(char_eql_common_)
#define char_not_eql_common_ _n(char_not_eql_common_)
#define char_less_common_ _n(char_less_common_)
#define char_greater_common_ _n(char_greater_common_)
#define char_less_equal_common_ _n(char_less_equal_common_)
#define char_greater_equal_common_ _n(char_greater_equal_common_)
#define char_equal_common_ _n(char_equal_common_)
#define char_not_equal_common_ _n(char_not_equal_common_)
#define char_lessp_common_ _n(char_lessp_common_)
#define char_greaterp_common_ _n(char_greaterp_common_)
#define char_not_lessp_common_ _n(char_not_lessp_common_)
#define char_not_greaterp_common_ _n(char_not_greaterp_common_)
#define character_common_ _n(character_common_)
#define alpha_char_p_common _n(alpha_char_p_common)
#define alphanumericp_common _n(alphanumericp_common)
#define digit_char_common _n(digit_char_common)
#define digit_char_p_common _n(digit_char_p_common)
#define graphic_char_p_common _n(graphic_char_p_common)
#define standard_char_p_common _n(standard_char_p_common)
#define char_upcase_common _n(char_upcase_common)
#define char_downcase_common _n(char_downcase_common)
#define upper_case_p_common _n(upper_case_p_common)
#define lower_case_p_common _n(lower_case_p_common)
#define both_case_p_common _n(both_case_p_common)
#define char_code_common _n(char_code_common)
#define code_char_common _n(code_char_common)
#define char_name_common_ _n(char_name_common_)
#define name_char_common_ _n(name_char_common_)

int char_eql_common_(addr list, addr *ret);
int char_not_eql_common_(addr list, addr *ret);
int char_less_common_(addr list, addr *ret);
int char_greater_common_(addr list, addr *ret);
int char_less_equal_common_(addr list, addr *ret);
int char_greater_equal_common_(addr list, addr *ret);
int char_equal_common_(addr list, addr *ret);
int char_not_equal_common_(addr list, addr *ret);
int char_lessp_common_(addr list, addr *ret);
int char_greaterp_common_(addr list, addr *ret);
int char_not_lessp_common_(addr list, addr *ret);
int char_not_greaterp_common_(addr list, addr *ret);
int character_common_(addr var, addr *ret);
void alpha_char_p_common(addr var, addr *ret);
void alphanumericp_common(addr var, addr *ret);
void digit_char_common(addr var, addr opt, addr *ret);
void digit_char_p_common(addr var, addr opt, addr *ret);
void graphic_char_p_common(addr var, addr *ret);
void standard_char_p_common(addr var, addr *ret);
void char_upcase_common(addr var, addr *ret);
void char_downcase_common(addr var, addr *ret);
void upper_case_p_common(addr var, addr *ret);
void lower_case_p_common(addr var, addr *ret);
void both_case_p_common(addr var, addr *ret);
void char_code_common(addr var, addr *ret);
void code_char_common(addr var, addr *ret);
int char_name_common_(addr var, addr *ret);
int name_char_common_(LocalRoot local, addr var, addr *ret);

#endif


/************************************************************
 *  character_name.h
 ************************************************************/
#ifndef __CHARACTER_NAME_HEADER__
#define __CHARACTER_NAME_HEADER__


#define findtable_unicode_name_ _n(findtable_unicode_name_)
#define findtable_char_name_ _n(findtable_char_name_)
#define findtable_name_char_ _n(findtable_name_char_)
#define find_name_char_ _n(find_name_char_)
#define build_character_name _n(build_character_name)

int findtable_unicode_name_(addr *ret, unicode u);
int findtable_char_name_(addr *ret, addr pos);
int findtable_name_char_(addr *ret, addr name);
int find_name_char_(addr *ret, addr name);

void build_character_name(void);

#endif


/************************************************************
 *  clos_class.h
 ************************************************************/
#ifndef __CLOS_CLASS_HEADER__
#define __CLOS_CLASS_HEADER__


#define stdget_class_name_check _n(stdget_class_name_check)
#define stdget_class_name_ _n(stdget_class_name_)
#define stdset_class_name_ _n(stdset_class_name_)
#define stdget_class_direct_slots_ _n(stdget_class_direct_slots_)
#define stdset_class_direct_slots_ _n(stdset_class_direct_slots_)
#define stdget_class_direct_subclasses_ _n(stdget_class_direct_subclasses_)
#define stdset_class_direct_subclasses_ _n(stdset_class_direct_subclasses_)
#define stdget_class_direct_superclasses_ _n(stdget_class_direct_superclasses_)
#define stdset_class_direct_superclasses_ _n(stdset_class_direct_superclasses_)
#define stdget_class_precedence_list_ _n(stdget_class_precedence_list_)
#define stdset_class_precedence_list_ _n(stdset_class_precedence_list_)
#define stdget_class_slots_ _n(stdget_class_slots_)
#define stdset_class_slots_ _n(stdset_class_slots_)
#define stdget_class_finalized_p_ _n(stdget_class_finalized_p_)
#define stdset_class_finalized_p_ _n(stdset_class_finalized_p_)
#define stdget_class_prototype_ _n(stdget_class_prototype_)
#define stdset_class_prototype_ _n(stdset_class_prototype_)
#define stdget_class_default_initargs_ _n(stdget_class_default_initargs_)
#define stdset_class_default_initargs_ _n(stdset_class_default_initargs_)
#define stdget_class_direct_default_initargs_ _n(stdget_class_direct_default_initargs_)
#define stdset_class_direct_default_initargs_ _n(stdset_class_direct_default_initargs_)
#define stdget_class_version_ _n(stdget_class_version_)
#define stdset_class_version_ _n(stdset_class_version_)
#define stdget_class_document_ _n(stdget_class_document_)
#define stdset_class_document_ _n(stdset_class_document_)
#define stdget_class_redefined_class_ _n(stdget_class_redefined_class_)
#define stdset_class_redefined_class_ _n(stdset_class_redefined_class_)
#define clos_subclass_p_ _n(clos_subclass_p_)
#define clos_subtype_p_ _n(clos_subtype_p_)
#define clos_class_p_ _n(clos_class_p_)
#define clos_funcallable_p_ _n(clos_funcallable_p_)
#define clos_generic_p_ _n(clos_generic_p_)
#define clos_method_p_ _n(clos_method_p_)
#define clos_define_combination_p_ _n(clos_define_combination_p_)
#define clos_define_long_combination_p_ _n(clos_define_long_combination_p_)
#define clos_define_short_combination_p_ _n(clos_define_short_combination_p_)
#define clos_combination_p_ _n(clos_combination_p_)
#define clos_long_combination_p_ _n(clos_long_combination_p_)
#define clos_short_combination_p_ _n(clos_short_combination_p_)
#define clos_specializer_p_ _n(clos_specializer_p_)
#define clos_referenced_p_ _n(clos_referenced_p_)
#define clos_built_p_ _n(clos_built_p_)
#define funcallp_ _n(funcallp_)
#define clos_instance_alloc_ _n(clos_instance_alloc_)
#define clos_instance_local_ _n(clos_instance_local_)
#define clos_instance_heap_ _n(clos_instance_heap_)
#define clos_find_slotname _n(clos_find_slotname)
#define clos_precedence_list_redefine_ _n(clos_precedence_list_redefine_)
#define clos_precedence_list_ _n(clos_precedence_list_)
#define clos_compute_slots_ _n(clos_compute_slots_)
#define slotvector_set_location _n(slotvector_set_location)
#define clos_stdclass_direct_slots_ _n(clos_stdclass_direct_slots_)
#define clos_stdclass_prototype_ _n(clos_stdclass_prototype_)
#define clos_stdclass_supers_ _n(clos_stdclass_supers_)
#define build_clos_class _n(build_clos_class)
#define clos_subclass_p_debug _n(clos_subclass_p_debug)
#define clos_subtype_p_debug _n(clos_subtype_p_debug)
#define clos_generic_p_debug _n(clos_generic_p_debug)
#define clos_method_p_debug _n(clos_method_p_debug)
#define clos_define_combination_p_debug _n(clos_define_combination_p_debug)

/* access */
void stdget_class_name_check(addr pos, addr *ret);
int stdget_class_name_(addr pos, addr *ret);
int stdset_class_name_(addr pos, addr value);
int stdget_class_direct_slots_(addr pos, addr *ret);
int stdset_class_direct_slots_(addr pos, addr value);
int stdget_class_direct_subclasses_(addr pos, addr *ret);
int stdset_class_direct_subclasses_(addr pos, addr value);
int stdget_class_direct_superclasses_(addr pos, addr *ret);
int stdset_class_direct_superclasses_(addr pos, addr value);
int stdget_class_precedence_list_(addr pos, addr *ret);
int stdset_class_precedence_list_(addr pos, addr value);
int stdget_class_slots_(addr pos, addr *ret);
int stdset_class_slots_(addr pos, addr value);
int stdget_class_finalized_p_(addr pos, addr *ret);
int stdset_class_finalized_p_(addr pos, addr value);
int stdget_class_prototype_(addr pos, addr *ret);
int stdset_class_prototype_(addr pos, addr value);
int stdget_class_default_initargs_(addr pos, addr *ret);
int stdset_class_default_initargs_(addr pos, addr value);
int stdget_class_direct_default_initargs_(addr pos, addr *ret);
int stdset_class_direct_default_initargs_(addr pos, addr value);
int stdget_class_version_(addr pos, addr *ret);
int stdset_class_version_(addr pos, addr value);
int stdget_class_document_(addr pos, addr *ret);
int stdset_class_document_(addr pos, addr value);
int stdget_class_redefined_class_(addr pos, addr *ret);
int stdset_class_redefined_class_(addr pos, addr value);

/* check */
int clos_subclass_p_(addr clos, addr super, int *ret);
int clos_subtype_p_(addr clos, addr super, int *ret);
int clos_class_p_(addr clos, int *ret);
int clos_funcallable_p_(addr clos, int *ret);
int clos_generic_p_(addr clos, int *ret);
int clos_method_p_(addr clos, int *ret);

int clos_define_combination_p_(addr clos, int *ret);
int clos_define_long_combination_p_(addr pos, int *ret);
int clos_define_short_combination_p_(addr pos, int *ret);
int clos_combination_p_(addr pos, int *ret);
int clos_long_combination_p_(addr pos, int *ret);
int clos_short_combination_p_(addr pos, int *ret);

int clos_specializer_p_(addr clos, int *ret);
int clos_referenced_p_(addr clos, int *ret);
int clos_built_p_(addr clos, int *ret);
int funcallp_(addr pos, int *ret);

/* make-instance */
int clos_instance_alloc_(LocalRoot local, addr clos, addr *ret);
int clos_instance_local_(LocalRoot local, addr clos, addr *ret);
int clos_instance_heap_(addr clos, addr *ret);

/* interface */
int clos_find_slotname(addr slots, size_t size, addr name);
int clos_precedence_list_redefine_(
		LocalRoot local, addr pos, addr *ret, addr x, addr list);
int clos_precedence_list_(LocalRoot local, addr pos, addr *ret);
int clos_compute_slots_(LocalRoot local, addr clos, addr *ret);
void slotvector_set_location(addr slots);
int clos_stdclass_direct_slots_(addr instance, addr slots);
int clos_stdclass_prototype_(addr clos);
int clos_stdclass_supers_(LocalRoot local,
		addr *ret, addr metaclass, addr name, addr slots, addr supers);

/* build */
void build_clos_class(LocalRoot local);

/* debug */
int clos_subclass_p_debug(addr clos, addr super);
int clos_subtype_p_debug(addr clos, addr super);
int clos_generic_p_debug(addr clos);
int clos_method_p_debug(addr clos);
int clos_define_combination_p_debug(addr clos);

#endif


/************************************************************
 *  condition_debugger.h
 ************************************************************/
#ifndef __CONDITION_DEBUGGER_HEADER__
#define __CONDITION_DEBUGGER_HEADER__


#define set_enable_debugger _n(set_enable_debugger)
#define handler_warning_ _n(handler_warning_)
#define handler_savecore_ _n(handler_savecore_)
#define handler_exit_ _n(handler_exit_)
#define invoke_debugger_ _n(invoke_debugger_)
#define build_condition_debugger _n(build_condition_debugger)
#define init_condition_debugger _n(init_condition_debugger)

void set_enable_debugger(Execute ptr, int value);

int handler_warning_(Execute ptr);
int handler_savecore_(Execute ptr);
int handler_exit_(Execute ptr);
int invoke_debugger_(Execute ptr, addr condition);

void build_condition_debugger(Execute ptr);
void init_condition_debugger(void);

#endif


/************************************************************
 *  control_execute.h
 ************************************************************/
#ifndef __CONTROL_EXECUTE_HEADER__
#define __CONTROL_EXECUTE_HEADER__


#define runcode_control_ _n(runcode_control_)
#define revert_control_ _n(revert_control_)
#define revert_goto_control_ _n(revert_goto_control_)
#define execute_control_ _n(execute_control_)
#define apply_control_ _n(apply_control_)
#define apply_named_control_ _n(apply_named_control_)
#define applya_control_ _n(applya_control_)
#define funcall_control_ _n(funcall_control_)
#define apply1_control_ _n(apply1_control_)
#define applya1_control_ _n(applya1_control_)
#define funcall1_control_ _n(funcall1_control_)

int runcode_control_(Execute ptr, addr code);
int revert_control_(Execute ptr);
int revert_goto_control_(Execute ptr, size_t index);
int execute_control_(Execute ptr, addr call);

int apply_control_(Execute ptr, addr call, addr args);
int apply_named_control_(Execute ptr, addr call, addr list);
int applya_control_(Execute ptr, addr call, ...);
int funcall_control_(Execute ptr, addr call, ...);

int apply1_control_(Execute ptr, addr *ret, addr call, addr cons);
int applya1_control_(Execute ptr, addr *ret, addr call, ...);
int funcall1_control_(Execute ptr, addr *ret, addr call, ...);

#endif


/************************************************************
 *  control_object.h
 ************************************************************/
#ifndef __CONTROL_OBJECT_HEADER__
#define __CONTROL_OBJECT_HEADER__


#define GcCounterForce _n(GcCounterForce)
#define ControlCounter _n(ControlCounter)
#define ptrbodycontrol_debug _n(ptrbodycontrol_debug)
#define structcontrol_debug _n(structcontrol_debug)
#define getcontrol_debug _n(getcontrol_debug)
#define setcontrol_debug _n(setcontrol_debug)
#define taginfo_heap _n(taginfo_heap)
#define ptrtaginfo_debug _n(ptrtaginfo_debug)
#define structtaginfo_debug _n(structtaginfo_debug)
#define getnametaginfo_debug _n(getnametaginfo_debug)
#define setnametaginfo_debug _n(setnametaginfo_debug)
#define handler_local _n(handler_local)
#define getnamehandler_debug _n(getnamehandler_debug)
#define setnamehandler_debug _n(setnamehandler_debug)
#define getcallhandler_debug _n(getcallhandler_debug)
#define setcallhandler_debug _n(setcallhandler_debug)
#define getescape_handler _n(getescape_handler)
#define setescape_handler _n(setescape_handler)
#define getdisable_handler _n(getdisable_handler)
#define setdisable_handler _n(setdisable_handler)
#define checkhandler_control_ _n(checkhandler_control_)
#define push_control _n(push_control)
#define push_args_control _n(push_args_control)
#define pop_control_ _n(pop_control_)
#define free_control_degrade_ _n(free_control_degrade_)
#define stack_check_control _n(stack_check_control)
#define pushspecial_control _n(pushspecial_control)
#define pushtaginfo_control _n(pushtaginfo_control)
#define pushhandler_control _n(pushhandler_control)
#define pushrestart_control _n(pushrestart_control)
#define existspecial_control _n(existspecial_control)
#define getdata_control _n(getdata_control)
#define getdata_code_control _n(getdata_code_control)
#define setdata_control _n(setdata_control)
#define getcall_control _n(getcall_control)
#define getcatch_control _n(getcatch_control)
#define getcondition_control _n(getcondition_control)
#define gethandler_control _n(gethandler_control)
#define getrestart_control _n(getrestart_control)
#define setcatch_control _n(setcatch_control)
#define sethandler_control _n(sethandler_control)
#define setrestart_control _n(setrestart_control)
#define pushdebug_control _n(pushdebug_control)
#define getdebug_control _n(getdebug_control)
#define save_control _n(save_control)
#define restore_control_ _n(restore_control_)

#ifdef LISP_DEBUG_FORCE_GC
extern size_t GcCounterForce;
#endif
extern size_t ControlCounter;

/*
 *  control
 */
enum Control_Index {
	Control_Next,
	Control_Cons,
	Control_ConsTail,
	Control_Special,
	Control_Close,
	Control_Table,
	Control_Data,
	Control_Call,
	Control_Size
};

struct control_struct {
	LocalStack stack;
	addr *lexical_reader;
	addr lexical_vector;
	addr trace;
	addr run_code;
	size_t run_point;
};

#define PtrBodyControl_Low(p)			PtrBodySSa(p, Control_Size)
#define StructControl_Low(p)			((struct control_struct *)PtrBodyControl(p))
#define GetControl_Low					GetArraySS
#define SetControl_Low					SetArraySS

#ifdef LISP_DEBUG
#define PtrBodyControl					ptrbodycontrol_debug
#define StructControl					structcontrol_debug
#define GetControl						getcontrol_debug
#define SetControl						setcontrol_debug
#else
#define PtrBodyControl					PtrBodyControl_Low
#define StructControl					StructControl_Low
#define GetControl						GetControl_Low
#define SetControl						SetControl_Low
#endif

void *ptrbodycontrol_debug(addr pos);
struct control_struct *structcontrol_debug(addr pos);
void getcontrol_debug(addr pos, size_t index, addr *ret);
void setcontrol_debug(addr pos, size_t index, addr value);


/*
 *  special
 */
enum Special_Index {
	Special_Symbol,
	Special_Value,
	Special_Size
};


/*
 *  taginfo
 */
enum TagInfo_Index {
	TagInfo_Name,
	TagInfo_Size
};

struct taginfo_struct {
	int open;
	addr control;
	size_t point;
};

#define PtrTagInfo_Low(p)			PtrBodySSa((p), TagInfo_Size)
#define StructTagInfo_Low(p)		((struct taginfo_struct *)PtrTagInfo(p))
#define GetNameTagInfo_Low(p,v)		GetArraySS(p, TagInfo_Name, v)
#define SetNameTagInfo_Low(p,v)		SetArraySS(p, TagInfo_Name, v)

#ifdef LISP_DEBUG
#define PtrTagInfo					ptrtaginfo_debug
#define StructTagInfo				structtaginfo_debug
#define GetNameTagInfo				getnametaginfo_debug
#define SetNameTagInfo				setnametaginfo_debug
#else
#define PtrTagInfo					PtrTagInfo_Low
#define StructTagInfo				StructTagInfo_Low
#define GetNameTagInfo				GetNameTagInfo_Low
#define SetNameTagInfo				SetNameTagInfo_Low
#endif

void taginfo_heap(addr *ret, addr control, addr tag, size_t point);
void *ptrtaginfo_debug(addr pos);
struct taginfo_struct *structtaginfo_debug(addr pos);
void getnametaginfo_debug(addr pos, addr *ret);
void setnametaginfo_debug(addr pos, addr value);


/*
 *  handler
 */
enum Handler_Index {
	Handler_Name,
	Handler_Call,
	Handler_Size
};

#define GetNameHandler_Low(p,x)		GetArrayA2((p), Handler_Name, (x))
#define SetNameHandler_Low(p,x)		SetArrayA2((p), Handler_Name, (x))
#define GetCallHandler_Low(p,x)		GetArrayA2((p), Handler_Call, (x))
#define SetCallHandler_Low(p,x)		SetArrayA2((p), Handler_Call, (x))

#ifdef LISP_DEBUG
#define GetNameHandler				getnamehandler_debug
#define SetNameHandler				setnamehandler_debug
#define GetCallHandler				getcallhandler_debug
#define SetCallHandler				setcallhandler_debug
#else
#define GetNameHandler				GetNameHandler_Low
#define SetNameHandler				SetNameHandler_Low
#define GetCallHandler				GetCallHandler_Low
#define SetCallHandler				SetCallHandler_Low
#endif

void handler_local(LocalRoot local, addr *ret, addr name, addr call, int esc);
void getnamehandler_debug(addr pos, addr *ret);
void setnamehandler_debug(addr pos, addr value);
void getcallhandler_debug(addr pos, addr *ret);
void setcallhandler_debug(addr pos, addr value);

int getescape_handler(addr pos);
void setescape_handler(addr pos, int value);
int getdisable_handler(addr pos);
void setdisable_handler(addr pos, int value);
int checkhandler_control_(Execute ptr, addr pos, addr instance, int *ret);


/*
 *  function
 */
/* push control */
void push_control(Execute ptr, addr *ret);
void push_args_control(Execute ptr, addr *ret);
int pop_control_(Execute ptr, addr control);
int free_control_degrade_(Execute ptr, addr control);

/* data */
int stack_check_control(Execute ptr);
void pushspecial_control(Execute ptr, addr pos, addr value);
void pushtaginfo_control(Execute ptr, addr pos);
void pushhandler_control(Execute ptr, addr pos);
void pushrestart_control(Execute ptr, addr pos);
int existspecial_control(Execute ptr, addr pos);

/* access */
void getdata_control(Execute ptr, addr *ret);
void getdata_code_control(Execute ptr, addr *ret);
void setdata_control(Execute ptr, addr value);
int getcall_control(Execute ptr, addr *ret);

int getcatch_control(addr pos, addr *ret);
int getcondition_control(addr pos, addr *ret);
int gethandler_control(addr pos, addr *ret);
int getrestart_control(addr pos, addr *ret);

void setcatch_control(LocalRoot local, addr pos, addr value);
void sethandler_control(LocalRoot local, addr pos, addr value);
void setrestart_control(LocalRoot local, addr pos, addr value);

void pushdebug_control(Execute ptr, addr pos);
int getdebug_control(Execute ptr, addr *ret);
void save_control(Execute ptr);
int restore_control_(Execute ptr);

#endif


/************************************************************
 *  execute_object.h
 ************************************************************/
#ifndef __EXECUTE_OBJECT_HEADER__
#define __EXECUTE_OBJECT_HEADER__


#define init_execute_values _n(init_execute_values)
#define save_values_control _n(save_values_control)
#define restore_values_control _n(restore_values_control)
#define normal_throw_control _n(normal_throw_control)
#define save_throw_control _n(save_throw_control)
#define restore_throw_control _n(restore_throw_control)
#define save_execute_control _n(save_execute_control)
#define restore_execute_control _n(restore_execute_control)
#define lexical_control _n(lexical_control)
#define getlow_lexical_debug _n(getlow_lexical_debug)
#define setlow_lexical_debug _n(setlow_lexical_debug)
#define get_lexical_control _n(get_lexical_control)
#define set_lexical_control _n(set_lexical_control)
#define reference_lexical_control _n(reference_lexical_control)
#define closure_heap _n(closure_heap)
#define get_closure _n(get_closure)
#define lexical_closure _n(lexical_closure)
#define reference_heap _n(reference_heap)
#define get_reference _n(get_reference)
#define set_reference _n(set_reference)
#define getvalue_reference _n(getvalue_reference)

/* values */
#define SetExecuteValues			SetArrayA4
#define GetExecuteValues			GetArrayA4
#define SetExecuteValuesList(x,y)	SetExecuteValues((x),EXECUTE_VALUES,(y))
#define GetExecuteValuesList(x,y)	GetExecuteValues((x),EXECUTE_VALUES,(y))
void init_execute_values(struct execute *bit);
void save_values_control(struct execute *ptr, addr *ret, size_t *rsize);
void restore_values_control(struct execute *ptr, addr pos, size_t size);


/* throw */
void normal_throw_control(struct execute *ptr);
void save_throw_control(struct execute *ptr, struct execute_throw *save);
void restore_throw_control(struct execute *ptr, const struct execute_throw *save);


/* save */
void save_execute_control(struct execute *ptr, addr *ret);
void restore_execute_control(struct execute *ptr, addr pos);


/* lexical */
#define SetExecuteLexical		SetArrayA4
#ifdef LISP_DEBUG
#define getlow_lexical_control(p,i,r) getlow_lexical_debug((p),(i),(r))
#define setlow_lexical_control(p,i,v) setlow_lexical_debug((p),(i),(v))
#else
#define getlow_lexical_control(p,i,r) (*(r) = (p)->lexical_reader[i])
#define setlow_lexical_control(p,i,v) SetExecuteLexical((p)->lexical_vector,(i),(v))
#endif

void lexical_control(struct execute *ptr, size_t size);
void getlow_lexical_debug(struct execute *ptr, size_t index, addr *ret);
void setlow_lexical_debug(struct execute *ptr, size_t index, addr value);
void get_lexical_control(struct execute *ptr, size_t index, addr *ret);
void set_lexical_control(struct execute *ptr, size_t index, addr value);
void reference_lexical_control(struct execute *ptr, size_t index);


/* closure */
void closure_heap(addr *ret, addr value, size_t lexical);
void get_closure(addr pos, addr *ret);
size_t lexical_closure(addr pos);


/* reference */
void reference_heap(addr *ret, addr value);
void get_reference(addr pos, addr *ret);
void set_reference(addr pos, addr value);
void getvalue_reference(addr pos, addr *ret);

#endif


/************************************************************
 *  hold.h
 ************************************************************/
#ifndef __HOLD_HEADER__
#define __HOLD_HEADER__


#define setgchold _n(setgchold)
#define gchold_local _n(gchold_local)
#define gchold_push_local _n(gchold_push_local)
#define gchold_push_force_local _n(gchold_push_force_local)
#define gchold_pushva_local _n(gchold_pushva_local)
#define gchold_pushva_force_local _n(gchold_pushva_force_local)
#define gchold_push_special _n(gchold_push_special)
#define gchold_pushva_special _n(gchold_pushva_special)
#define localhold_local _n(localhold_local)
#define localhold_local_push _n(localhold_local_push)
#define localhold_array _n(localhold_array)
#define localhold_push _n(localhold_push)
#define localhold_pushva _n(localhold_pushva)
#define localhold_pushva_force _n(localhold_pushva_force)
#define localhold_end _n(localhold_end)
#define localhold_set _n(localhold_set)
#define localhold_set_force _n(localhold_set_force)
#define Hold_local _n(Hold_local)
#define hold_local _n(hold_local)
#define holdp _n(holdp)
#define hold_set _n(hold_set)
#define hold_set_null _n(hold_set_null)
#define hold_get _n(hold_get)
#define hold_value _n(hold_value)
#define holdv _n(holdv)

struct localhold {
	LocalRoot local;
	LocalStack stack;
	addr array;
};
typedef struct localhold *LocalHold;

void setgchold(addr pos, size_t index, addr value);
void gchold_local(LocalRoot local, addr *ret, size_t size);
void gchold_push_local(LocalRoot local, addr pos);
void gchold_push_force_local(LocalRoot local, addr pos);
void gchold_pushva_local(LocalRoot local, ...);
void gchold_pushva_force_local(LocalRoot local, ...);
void gchold_push_special(Execute ptr, addr pos);
void gchold_pushva_special(Execute ptr, ...);

LocalHold localhold_local(LocalRoot local);
LocalHold localhold_local_push(LocalRoot local, addr pos);
LocalHold localhold_array(LocalRoot local, size_t size);
void localhold_push(LocalHold local, addr pos);
void localhold_pushva(LocalHold local, ...);
void localhold_pushva_force(LocalHold local, ...);
void localhold_end(LocalHold hold);
void localhold_set(LocalHold hold, size_t index, addr value);
void localhold_set_force(LocalHold hold, size_t index, addr value);

#define LocalHold_local(ptr) localhold_local((ptr)->local)
#define LocalHold_local_push(ptr, pos) localhold_local_push((ptr)->local, (pos))
#define LocalHold_array(ptr, size) localhold_array((ptr)->local, (size))


/*
 *  hold object
 */
void Hold_local(addr *ret, addr value);
void hold_local(LocalRoot local, addr *ret, addr value);
int holdp(addr pos);
void hold_set(addr pos, addr value);
void hold_set_null(addr pos, addr value);
void hold_get(addr pos, addr *ret);
void hold_value(addr pos, addr *ret);
addr holdv(addr pos);

#endif


/************************************************************
 *  print_write.h
 ************************************************************/
#ifndef __PRINT_TYPE_HEADER__
#define __PRINT_TYPE_HEADER__


#define push_write_object _n(push_write_object)
#define getdepth_print_write _n(getdepth_print_write)
#define setdepth_print_write _n(setdepth_print_write)
#define write_check_all_clear _n(write_check_all_clear)
#define write_check_call_ _n(write_check_call_)
#define pprint_pop_circle_ _n(pprint_pop_circle_)
#define pprint_check_circle_ _n(pprint_check_circle_)
#define write_default_print_ _n(write_default_print_)
#define write_print_ _n(write_print_)
#define princ_print_ _n(princ_print_)
#define prin1_print_ _n(prin1_print_)
#define print_print_ _n(print_print_)
#define pprint_print_ _n(pprint_print_)
#define write_string_heap_ _n(write_string_heap_)
#define write_string_local_ _n(write_string_local_)
#define princ_string_heap_ _n(princ_string_heap_)
#define princ_string_local_ _n(princ_string_local_)
#define prin1_string_heap_ _n(prin1_string_heap_)
#define prin1_string_local_ _n(prin1_string_local_)
#define init_print_write _n(init_print_write)

void push_write_object(Execute ptr);
void getdepth_print_write(Execute ptr, size_t *ret);
void setdepth_print_write(Execute ptr, size_t value);
void write_check_all_clear(Execute ptr);
int write_check_call_(Execute ptr, addr pos);
int pprint_pop_circle_(Execute ptr, addr stream, addr pos, int *ret);
int pprint_check_circle_(Execute ptr, addr pos, addr *value, int *ret);
int write_default_print_(Execute ptr, addr stream, addr pos);
int write_print_(Execute ptr, addr stream, addr pos);
int princ_print_(Execute ptr, addr stream, addr pos);
int prin1_print_(Execute ptr, addr stream, addr pos);
int print_print_(Execute ptr, addr stream, addr pos);
int pprint_print_(Execute ptr, addr stream, addr pos);
int write_string_heap_(Execute ptr, addr *ret, addr pos);
int write_string_local_(Execute ptr, addr *ret, addr pos);
int princ_string_heap_(Execute ptr, addr *ret, addr pos);
int princ_string_local_(Execute ptr, addr *ret, addr pos);
int prin1_string_heap_(Execute ptr, addr *ret, addr pos);
int prin1_string_local_(Execute ptr, addr *ret, addr pos);
void init_print_write(void);

#endif


/************************************************************
 *  call_conses.h
 ************************************************************/
#ifndef __CALL_CONSES_HEADER__
#define __CALL_CONSES_HEADER__


#define sublis_common_ _n(sublis_common_)
#define nsublis_common_ _n(nsublis_common_)
#define subst_common_ _n(subst_common_)
#define nsubst_common_ _n(nsubst_common_)
#define subst_if_common_ _n(subst_if_common_)
#define nsubst_if_common_ _n(nsubst_if_common_)
#define subst_if_not_common_ _n(subst_if_not_common_)
#define nsubst_if_not_common_ _n(nsubst_if_not_common_)
#define tree_equal_common_ _n(tree_equal_common_)
#define list_length_common_ _n(list_length_common_)
#define make_list_common_ _n(make_list_common_)
#define push_common_ _n(push_common_)
#define pop_common_ _n(pop_common_)
#define nth_common_ _n(nth_common_)
#define setf_nth_common_ _n(setf_nth_common_)
#define nthcdr_common_ _n(nthcdr_common_)
#define member_common_ _n(member_common_)
#define member_if_common_ _n(member_if_common_)
#define member_if_not_common_ _n(member_if_not_common_)
#define mapc_common_ _n(mapc_common_)
#define mapcar_common_ _n(mapcar_common_)
#define mapcan_common_ _n(mapcan_common_)
#define mapl_common_ _n(mapl_common_)
#define maplist_common_ _n(maplist_common_)
#define mapcon_common_ _n(mapcon_common_)
#define nconc_common_ _n(nconc_common_)
#define append_common_ _n(append_common_)
#define revappend_common_ _n(revappend_common_)
#define nreconc_common_ _n(nreconc_common_)
#define butlast_common_ _n(butlast_common_)
#define nbutlast_common_ _n(nbutlast_common_)
#define last_common_ _n(last_common_)
#define ldiff_common _n(ldiff_common)
#define tailp_common _n(tailp_common)
#define assoc_common_ _n(assoc_common_)
#define assoc_if_common_ _n(assoc_if_common_)
#define assoc_if_not_common_ _n(assoc_if_not_common_)
#define copy_alist_common_ _n(copy_alist_common_)
#define pairlis_common_ _n(pairlis_common_)
#define rassoc_common_ _n(rassoc_common_)
#define rassoc_if_common_ _n(rassoc_if_common_)
#define rassoc_if_not_common_ _n(rassoc_if_not_common_)
#define get_properties_common_ _n(get_properties_common_)
#define getf_common_ _n(getf_common_)
#define remf_common_ _n(remf_common_)
#define intersection_common_ _n(intersection_common_)
#define nintersection_common_ _n(nintersection_common_)
#define adjoin_common_ _n(adjoin_common_)
#define pushnew_common_ _n(pushnew_common_)
#define set_difference_common_ _n(set_difference_common_)
#define nset_difference_common_ _n(nset_difference_common_)
#define set_exclusive_or_common_ _n(set_exclusive_or_common_)
#define nset_exclusive_or_common_ _n(nset_exclusive_or_common_)
#define subsetp_common_ _n(subsetp_common_)
#define union_common_ _n(union_common_)
#define nunion_common_ _n(nunion_common_)

int sublis_common_(Execute ptr, addr alist, addr tree, addr rest, addr *ret);
int nsublis_common_(Execute ptr, addr alist, addr tree, addr rest, addr *ret);
int subst_common_(Execute ptr, addr one, addr old, addr tree, addr key, addr *ret);
int nsubst_common_(Execute ptr, addr one, addr old, addr tree, addr key, addr *ret);
int subst_if_common_(Execute ptr,
		addr one, addr predicate, addr tree, addr key, addr *ret);
int nsubst_if_common_(Execute ptr,
		addr one, addr predicate, addr tree, addr key, addr *ret);
int subst_if_not_common_(Execute ptr,
		addr one, addr predicate, addr tree, addr key, addr *ret);
int nsubst_if_not_common_(Execute ptr,
		addr one, addr predicate, addr tree, addr key, addr *ret);
int tree_equal_common_(Execute ptr, addr tree1, addr tree2, addr key, int *ret);
int list_length_common_(addr list, addr *ret);
int make_list_common_(addr var, addr rest, addr *ret);
int push_common_(Execute ptr, addr form, addr env, addr *ret);
int pop_common_(Execute ptr, addr form, addr env, addr *ret);
int nth_common_(addr index, addr list, addr *ret);
int setf_nth_common_(addr value, addr index, addr list);
int nthcdr_common_(addr index, addr list, addr *ret);
int member_common_(Execute ptr, addr item, addr list, addr rest, addr *ret);
int member_if_common_(Execute ptr, addr call, addr list, addr rest, addr *ret);
int member_if_not_common_(Execute ptr, addr call, addr list, addr rest, addr *ret);
int mapc_common_(Execute ptr, addr call, addr rest, addr *ret);
int mapcar_common_(Execute ptr, addr call, addr rest, addr *ret);
int mapcan_common_(Execute ptr, addr call, addr rest, addr *ret);
int mapl_common_(Execute ptr, addr call, addr rest, addr *ret);
int maplist_common_(Execute ptr, addr call, addr rest, addr *ret);
int mapcon_common_(Execute ptr, addr call, addr rest, addr *ret);
int nconc_common_(addr args, addr *ret);
int append_common_(addr args, addr *ret);
int revappend_common_(addr list, addr tail, addr *ret);
int nreconc_common_(addr list, addr tail, addr *ret);
int butlast_common_(addr list, addr index, addr *ret);
int nbutlast_common_(addr list, addr index, addr *ret);
int last_common_(addr list, addr index, addr *ret);
void ldiff_common(addr list, addr object, addr *ret);
void tailp_common(addr object, addr list, int *ret);
int assoc_common_(Execute ptr, addr item, addr list, addr rest, addr *ret);
int assoc_if_common_(Execute ptr, addr call, addr list, addr rest, addr *ret);
int assoc_if_not_common_(Execute ptr, addr call, addr list, addr rest, addr *ret);
int copy_alist_common_(addr list, addr *ret);
int pairlis_common_(addr keys, addr data, addr list, addr *ret);
int rassoc_common_(Execute ptr, addr item, addr list, addr rest, addr *ret);
int rassoc_if_common_(Execute ptr, addr call, addr list, addr rest, addr *ret);
int rassoc_if_not_common_(Execute ptr, addr call, addr list, addr rest, addr *ret);
int get_properties_common_(addr plist, addr indicator,
		addr *rkey, addr *rvalue, addr *rlist);
int getf_common_(addr list, addr key, addr value, addr *ret);
int remf_common_(Execute ptr, addr form, addr env, addr *ret);
int intersection_common_(Execute ptr, addr list1, addr list2, addr rest, addr *ret);
int nintersection_common_(Execute ptr, addr list1, addr list2, addr rest, addr *ret);
int adjoin_common_(Execute ptr, addr item, addr list, addr rest, addr *ret);
int pushnew_common_(Execute ptr, addr form, addr env, addr *ret);
int set_difference_common_(Execute ptr, addr a, addr b, addr rest, addr *ret);
int nset_difference_common_(Execute ptr, addr a, addr b, addr rest, addr *ret);
int set_exclusive_or_common_(Execute ptr, addr a, addr b, addr rest, addr *ret);
int nset_exclusive_or_common_(Execute ptr, addr a, addr b, addr rest, addr *ret);
int subsetp_common_(Execute ptr, addr list1, addr list2, addr rest, addr *ret);
int union_common_(Execute ptr, addr list1, addr list2, addr rest, addr *ret);
int nunion_common_(Execute ptr, addr list1, addr list2, addr rest, addr *ret);

#endif


/************************************************************
 *  equal.h
 ************************************************************/
#ifndef __EQUAL_HEADER__
#define __EQUAL_HEADER__


#define atom_function _n(atom_function)
#define eq_function _n(eq_function)
#define eq_function_ _n(eq_function_)
#define eql_function _n(eql_function)
#define eql_function_ _n(eql_function_)
#define equal_function_ _n(equal_function_)
#define equalp_function_ _n(equalp_function_)
#define equalrt_function_ _n(equalrt_function_)
#define equal_debug _n(equal_debug)
#define equalp_debug _n(equalp_debug)
#define equalrt_debug _n(equalrt_debug)

int atom_function(addr pos);
int eq_function(addr left, addr right);
int eq_function_(addr left, addr right, int *ret);
int eql_function(addr left, addr right);
int eql_function_(addr left, addr right, int *ret);
int equal_function_(addr left, addr right, int *ret);
int equalp_function_(addr left, addr right, int *ret);
int equalrt_function_(addr left, addr right, int *ret);

int equal_debug(addr left, addr right);
int equalp_debug(addr left, addr right);
int equalrt_debug(addr left, addr right);

#endif


/************************************************************
 *  call_data.h
 ************************************************************/
#ifndef __CALL_DATA_HEADER__
#define __CALL_DATA_HEADER__


#define apply_common_ _n(apply_common_)
#define defun_common_ _n(defun_common_)
#define fdefinition_common_ _n(fdefinition_common_)
#define setf_fdefinition_common_ _n(setf_fdefinition_common_)
#define fboundp_common_ _n(fboundp_common_)
#define fmakunbound_common_ _n(fmakunbound_common_)
#define funcall_common_ _n(funcall_common_)
#define function_lambda_expression_common _n(function_lambda_expression_common)
#define lambda_list_keywords_common _n(lambda_list_keywords_common)
#define defconstant_common_ _n(defconstant_common_)
#define defparameter_common_ _n(defparameter_common_)
#define defvar_common_ _n(defvar_common_)
#define destructuring_bind_common_ _n(destructuring_bind_common_)
#define psetq_common_ _n(psetq_common_)
#define psetf_common_ _n(psetf_common_)
#define return_common_ _n(return_common_)
#define complement_common _n(complement_common)
#define constantly_common _n(constantly_common)
#define every_common_ _n(every_common_)
#define some_common_ _n(some_common_)
#define notevery_common_ _n(notevery_common_)
#define notany_common_ _n(notany_common_)
#define and_common_ _n(and_common_)
#define cond_common_ _n(cond_common_)
#define or_common_ _n(or_common_)
#define when_common_ _n(when_common_)
#define unless_common_ _n(unless_common_)
#define case_common_ _n(case_common_)
#define ecase_common_ _n(ecase_common_)
#define ccase_common_ _n(ccase_common_)
#define typecase_common_ _n(typecase_common_)
#define etypecase_common_ _n(etypecase_common_)
#define ctypecase_common_ _n(ctypecase_common_)
#define multiple_value_bind_common_ _n(multiple_value_bind_common_)
#define multiple_value_list_common_ _n(multiple_value_list_common_)
#define multiple_value_setq_common_ _n(multiple_value_setq_common_)
#define nth_value_common_ _n(nth_value_common_)
#define prog_common_ _n(prog_common_)
#define proga_common_ _n(proga_common_)
#define prog1_common_ _n(prog1_common_)
#define prog2_common_ _n(prog2_common_)
#define define_modify_macro_common_ _n(define_modify_macro_common_)
#define defsetf_common_ _n(defsetf_common_)
#define define_setf_expander_common_ _n(define_setf_expander_common_)
#define setf_common_ _n(setf_common_)
#define shiftf_common_ _n(shiftf_common_)
#define rotatef_common_ _n(rotatef_common_)

int apply_common_(Execute ptr, addr call, addr arg, addr args);
int defun_common_(Execute ptr, addr right, addr env, addr *ret);
int fdefinition_common_(Execute ptr, addr name, addr *ret);
int setf_fdefinition_common_(addr value, addr name);
int fboundp_common_(addr name, int *ret);
int fmakunbound_common_(addr name);
int funcall_common_(Execute ptr, addr call, addr args);
void function_lambda_expression_common(addr var, addr *ret1, addr *ret2, addr *ret3);
void lambda_list_keywords_common(addr *ret);
int defconstant_common_(addr form, addr env, addr *ret);
int defparameter_common_(addr form, addr env, addr *ret);
int defvar_common_(addr form, addr env, addr *ret);
int destructuring_bind_common_(Execute ptr, addr form, addr env, addr *ret);
int psetq_common_(Execute ptr, addr form, addr env, addr *ret);
int psetf_common_(Execute ptr, addr form, addr env, addr *ret);
int return_common_(addr form, addr env, addr *ret);
void complement_common(addr var, addr *ret);
void constantly_common(addr var, addr *ret);
int every_common_(Execute ptr, addr call, addr rest, addr *ret);
int some_common_(Execute ptr, addr call, addr rest, addr *ret);
int notevery_common_(Execute ptr, addr call, addr rest, addr *ret);
int notany_common_(Execute ptr, addr call, addr rest, addr *ret);
int and_common_(addr form, addr env, addr *ret);
int cond_common_(addr form, addr env, addr *ret);
int or_common_(Execute ptr, addr form, addr env, addr *ret);
int when_common_(addr form, addr env, addr *ret);
int unless_common_(addr form, addr env, addr *ret);
int case_common_(Execute ptr, addr form, addr env, addr *ret);
int ecase_common_(Execute ptr, addr form, addr env, addr *ret);
int ccase_common_(Execute ptr, addr form, addr env, addr *ret);
int typecase_common_(Execute ptr, addr form, addr env, addr *ret);
int etypecase_common_(Execute ptr, addr form, addr env, addr *ret);
int ctypecase_common_(Execute ptr, addr form, addr env, addr *ret);
int multiple_value_bind_common_(Execute ptr, addr form, addr env, addr *ret);
int multiple_value_list_common_(addr form, addr env, addr *ret);
int multiple_value_setq_common_(addr form, addr env, addr *ret);
int nth_value_common_(addr form, addr env, addr *ret);
int prog_common_(addr form, addr env, addr *ret);
int proga_common_(addr form, addr env, addr *ret);
int prog1_common_(Execute ptr, addr form, addr env, addr *ret);
int prog2_common_(addr form, addr env, addr *ret);
int define_modify_macro_common_(LocalRoot local, addr form, addr env, addr *ret);
int defsetf_common_(Execute ptr, addr form, addr env, addr *ret);
int define_setf_expander_common_(addr form, addr env, addr *ret);
int setf_common_(Execute ptr, addr form, addr env, addr *ret);
int shiftf_common_(Execute ptr, addr form, addr env, addr *ret);
int rotatef_common_(Execute ptr, addr form, addr env, addr *ret);

#endif


/************************************************************
 *  callname.h
 ************************************************************/
#ifndef __CALLNAME_HEADER__
#define __CALLNAME_HEADER__


#define refcallname _n(refcallname)
#define getcallname _n(getcallname)
#define setcallname _n(setcallname)
#define refcallnametype _n(refcallnametype)
#define getcallnametype _n(getcallnametype)
#define setcallnametype _n(setcallnametype)
#define make_callname_alloc _n(make_callname_alloc)
#define callname_alloc _n(callname_alloc)
#define callname_local _n(callname_local)
#define callname_heap _n(callname_heap)
#define setf_callname_alloc _n(setf_callname_alloc)
#define setf_callname_local _n(setf_callname_local)
#define setf_callname_heap _n(setf_callname_heap)
#define copy_callname_alloc _n(copy_callname_alloc)
#define copy_callname_local _n(copy_callname_local)
#define copy_callname_heap _n(copy_callname_heap)
#define parse_callname _n(parse_callname)
#define parse_callname_alloc _n(parse_callname_alloc)
#define parse_callname_local _n(parse_callname_local)
#define parse_callname_heap _n(parse_callname_heap)
#define parse_callname_abort _n(parse_callname_abort)
#define parse_callname_error_ _n(parse_callname_error_)
#define callnamep _n(callnamep)
#define symbolp_callname _n(symbolp_callname)
#define setfp_callname _n(setfp_callname)
#define constantp_callname _n(constantp_callname)
#define function_name_p _n(function_name_p)
#define equal_callname _n(equal_callname)
#define getglobal_callname _n(getglobal_callname)
#define getglobalcheck_callname_ _n(getglobalcheck_callname_)
#define setglobal_callname_ _n(setglobal_callname_)
#define remtype_global_callname_ _n(remtype_global_callname_)
#define getglobal_parse_callname _n(getglobal_parse_callname)
#define getglobalcheck_parse_callname_ _n(getglobalcheck_parse_callname_)
#define setglobal_parse_callname_ _n(setglobal_parse_callname_)
#define name_callname_alloc _n(name_callname_alloc)
#define name_callname_local _n(name_callname_local)
#define name_callname_heap _n(name_callname_heap)

enum CALLNAME_TYPE {
	CALLNAME_ERROR = 0,
	CALLNAME_SYMBOL,
	CALLNAME_SETF,
	CALLNAME_SIZE
};

typedef enum CALLNAME_TYPE CallNameType;

#define RefCallName_Low(s)          RefArrayA2((s),0)
#define GetCallName_Low(s,v)        GetArrayA2((s),0,(v))
#define SetCallName_Low(s,v)        SetArrayA2((s),0,(v))
#define RefCallNameType_Low(s)      ((CallNameType)GetUser(s))
#define GetCallNameType_Low(s,v)    (*(v) = RefCallNameType_Low(s))
#define SetCallNameType_Low(s,v)    SetUser((s), (byte)(v))

#ifdef LISP_DEBUG
#define RefCallName(s)              refcallname(s)
#define GetCallName(s,v)            getcallname(s,v)
#define SetCallName(s,v)            setcallname(s,v)
#define RefCallNameType(s)          refcallnametype(s)
#define GetCallNameType(s,v)        getcallnametype(s,v)
#define SetCallNameType(s,v)        setcallnametype(s,v)
#define ParseCallName               parse_callname_abort
#else
#define RefCallName(s)              RefCallName_Low(s)
#define GetCallName(s,v)            GetCallName_Low(s,v)
#define SetCallName(s,v)            SetCallName_Low(s,v)
#define RefCallNameType(s)          RefCallNameType_Low(s)
#define GetCallNameType(s,v)        GetCallNameType_Low(s,v)
#define SetCallNameType(s,v)        SetCallNameType_Low(s,v)
#define ParseCallName               parse_callname_alloc
#endif

/* access */
addr refcallname(addr pos);
void getcallname(addr pos, addr *value);
void setcallname(addr pos, addr value);
CallNameType refcallnametype(addr pos);
void getcallnametype(addr pos, CallNameType *value);
void setcallnametype(addr pos, CallNameType value);

/* allocate */
void make_callname_alloc(LocalRoot local, addr *ret);
void callname_alloc(LocalRoot local, addr *ret, addr name, CallNameType type);
void callname_local(LocalRoot local, addr *ret, addr name, CallNameType type);
void callname_heap(addr *ret, addr name, CallNameType type);
void setf_callname_alloc(LocalRoot local, addr *ret, addr symbol);
void setf_callname_local(LocalRoot local, addr *ret, addr symbol);
void setf_callname_heap(addr *ret, addr symbol);

/* copy */
void copy_callname_alloc(LocalRoot local, addr *ret, addr pos);
void copy_callname_local(LocalRoot local, addr *ret, addr pos);
void copy_callname_heap(addr *ret, addr pos);

/* parse */
CallNameType parse_callname(addr name, addr *ret);
int parse_callname_alloc(LocalRoot local, addr *ret, addr name);
int parse_callname_local(LocalRoot local, addr *ret, addr name);
int parse_callname_heap(addr *ret, addr name);
void parse_callname_abort(LocalRoot local, addr *ret, addr name);
int parse_callname_error_(addr *ret, addr name);

/* boolean */
int callnamep(addr pos);
int symbolp_callname(addr call);
int setfp_callname(addr call);
int constantp_callname(addr call);
int function_name_p(addr name);
int equal_callname(addr left, addr right);

/* function */
void getglobal_callname(addr pos, addr *ret);
int getglobalcheck_callname_(addr pos, addr *ret);
int setglobal_callname_(addr pos, addr value);
int remtype_global_callname_(addr pos);

void getglobal_parse_callname(addr pos, addr *value);
int getglobalcheck_parse_callname_(addr pos, addr *ret);
int setglobal_parse_callname_(addr pos, addr value);

/* name */
void name_callname_alloc(LocalRoot local, addr pos, addr *ret);
void name_callname_local(LocalRoot local, addr pos, addr *ret);
void name_callname_heap(addr pos, addr *ret);

#endif


/************************************************************
 *  common_header.h
 ************************************************************/
#ifndef __COMMON_HEADER_HEADER__
#define __COMMON_HEADER_HEADER__


#define setfunction_common _n(setfunction_common)
#define setmacro_common _n(setmacro_common)
#define setsetfmacro_common _n(setsetfmacro_common)
#define defconstant_symbol _n(defconstant_symbol)
#define define_special_operator _n(define_special_operator)
#define keyword_start_end_ _n(keyword_start_end_)
#define keyword_start1_end1_ _n(keyword_start1_end1_)
#define keyword_start2_end2_ _n(keyword_start2_end2_)
#define keyword_start_end_value_ _n(keyword_start_end_value_)

/* helper */
#ifdef LISP_DEBUG
void setfunction_common(addr symbol, addr value);
void setmacro_common(addr symbol, addr value);
void setsetfmacro_common(addr symbol, addr value);
#define SetFunctionCommon	setfunction_common
#define SetMacroCommon		setmacro_common
#define SetSetfMacroCommon	setsetfmacro_common
#else
#define SetFunctionCommon	SetFunctionSymbol
#define SetMacroCommon		setmacro_symbol
#define SetSetfMacroCommon	setsetfmacro_symbol
#endif

void defconstant_symbol(addr symbol, addr value);
void define_special_operator(constindex index);
#define DefineSpecialOperator(x) define_special_operator(CONSTANT_##x)

int keyword_start_end_(size_t size, addr rest, size_t *pstart, size_t *pend);
int keyword_start1_end1_(size_t size, addr rest, size_t *pstart, size_t *pend);
int keyword_start2_end2_(size_t size, addr rest, size_t *pstart, size_t *pend);
int keyword_start_end_value_(size_t size,
		addr astart, addr aend, size_t *pstart, size_t *pend);

#endif


/************************************************************
 *  lambda.h
 ************************************************************/
#ifndef __LAMBDA_HEADER__
#define __LAMBDA_HEADER__


#define lambda_macro_ _n(lambda_macro_)
#define lambda_deftype_ _n(lambda_deftype_)
#define lambda_generic_function_ _n(lambda_generic_function_)
#define lambda_specialized_ _n(lambda_specialized_)
#define lambda_ordinary_ _n(lambda_ordinary_)
#define atleast_argument_count _n(atleast_argument_count)
#define lambda_defsetf_ _n(lambda_defsetf_)
#define getenvironment_macro_lambda _n(getenvironment_macro_lambda)
#define define_modify_macro_heap_ _n(define_modify_macro_heap_)
#define argumentp _n(argumentp)
#define getargument _n(getargument)
#define setargument _n(setargument)
#define argumentstruct _n(argumentstruct)
#define argument_alloc _n(argument_alloc)
#define argument_local _n(argument_local)
#define argument_heap _n(argument_heap)
#define argument_ordinary_heap_ _n(argument_ordinary_heap_)
#define argument_generic_heap_ _n(argument_generic_heap_)
#define argument_method_heap_ _n(argument_method_heap_)
#define argument_combination_heap_ _n(argument_combination_heap_)
#define argument_boa_heap_ _n(argument_boa_heap_)
#define argument_ordinary_lambda_heap_ _n(argument_ordinary_lambda_heap_)
#define argument_generic_lambda_heap_ _n(argument_generic_lambda_heap_)
#define argument_method_lambda_heap_ _n(argument_method_lambda_heap_)
#define argument_method_keywords_heap_ _n(argument_method_keywords_heap_)
#define argument_method_to_generic _n(argument_method_to_generic)
#define argument_boa_lambda_heap_ _n(argument_boa_lambda_heap_)
#define argument_boa_variables_heap_ _n(argument_boa_variables_heap_)
#define find_keyword_allow_other_keys _n(find_keyword_allow_other_keys)

enum ArgumentType {
	ArgumentType_macro,
	ArgumentType_ordinary,
	ArgumentType_deftype,
	ArgumentType_generic,
	ArgumentType_method,
	ArgumentType_combination,
	ArgumentType_defsetf,
	ArgumentType_boa,
	ArgumentType_size,
};

enum ArgumentIndex {
	ArgumentIndex_var,
	ArgumentIndex_opt,
	ArgumentIndex_rest,
	ArgumentIndex_body,
	ArgumentIndex_restbody,
	ArgumentIndex_key,
	ArgumentIndex_aux,
	ArgumentIndex_whole,
	ArgumentIndex_environment,
	ArgumentIndex_dotted,
	ArgumentIndex_size
};

struct argument_struct {
	unsigned keyp : 1;
	unsigned allow : 1;
	unsigned whole : 1;
	unsigned rest : 1;
	unsigned body : 1;
	unsigned restbody : 1;
	unsigned environment : 1;
	unsigned dotted : 1;
	enum ArgumentType type;
	size_t var, opt, key, aux;
};

#define PtrArgument_Low				PtrBodySS
#define GetArgument_Low				GetArraySS
#define SetArgument_Low				SetArraySS
#define ArgumentStruct_Low(x)		((struct argument_struct *)PtrArgument_Low(x))

#ifdef LISP_DEBUG
#define GetArgument					getargument
#define SetArgument					setargument
#define ArgumentStruct				argumentstruct
#else
#define GetArgument					GetArgument_Low
#define SetArgument					SetArgument_Low
#define ArgumentStruct				ArgumentStruct_Low
#endif

/* parse */
int lambda_macro_(LocalRoot local, addr *ret, addr cons, addr instance);
int lambda_deftype_(LocalRoot local, addr *ret, addr cons, addr instance);
int lambda_generic_function_(LocalRoot local, addr *ret, addr cons);
int lambda_specialized_(LocalRoot local, addr *ret, addr cons);
int lambda_ordinary_(LocalRoot local, addr *ret, addr cons);
void atleast_argument_count(addr cons, size_t *ret);
int lambda_defsetf_(LocalRoot local, addr *ret, addr cons);
void getenvironment_macro_lambda(addr pos, addr *ret);
int define_modify_macro_heap_(LocalRoot local, addr *ret, addr *rest, addr list);

/* argument */
int argumentp(addr pos);
void getargument(addr pos, size_t index, addr *ret);
void setargument(addr pos, size_t index, addr value);
struct argument_struct *argumentstruct(addr pos);
void argument_alloc(LocalRoot local, addr *ret);
void argument_local(LocalRoot local, addr *ret);
void argument_heap(addr *ret);
int argument_ordinary_heap_(LocalRoot local, addr *ret, addr list);
int argument_generic_heap_(LocalRoot local, addr *ret, addr list);
int argument_method_heap_(LocalRoot local, addr *ret, addr list);
int argument_combination_heap_(LocalRoot local, addr *ret, addr list);
int argument_boa_heap_(LocalRoot local, addr *ret, addr list, addr g);

/* expand */
int argument_ordinary_lambda_heap_(addr *ret, addr pos);
int argument_generic_lambda_heap_(addr *ret, addr pos);
int argument_method_lambda_heap_(addr *ret, addr pos);
int argument_method_keywords_heap_(addr pos, addr *ret, int *allow);
void argument_method_to_generic(addr pos, addr *ret);
int argument_boa_lambda_heap_(addr *ret, addr pos);
int argument_boa_variables_heap_(addr *ret, addr pos);

/* :allow-other-keys */
int find_keyword_allow_other_keys(addr list);

#endif


/************************************************************
 *  parse_typedef.h
 ************************************************************/
#ifndef __PARSE_TYPEDEF_HEADER__
#define __PARSE_TYPEDEF_HEADER__

enum EVAL_PARSE {
	EVAL_PARSE_EMPTY,
	/* constant */
	EVAL_PARSE_NIL,
	EVAL_PARSE_T,
	EVAL_PARSE_CLOS,
	EVAL_PARSE_INTEGER,
	EVAL_PARSE_RATIONAL,
	EVAL_PARSE_COMPLEX,
	EVAL_PARSE_CHARACTER,
	EVAL_PARSE_ARRAY,
	EVAL_PARSE_VECTOR,
	EVAL_PARSE_BITVECTOR,
	EVAL_PARSE_STRING,
	EVAL_PARSE_SYMBOL,
	EVAL_PARSE_FLOAT,
	EVAL_PARSE_DECLAIM,
	EVAL_PARSE_PACKAGE,
	EVAL_PARSE_RANDOM_STATE,
	EVAL_PARSE_PATHNAME,
	EVAL_PARSE_ENVIRONMENT,
	EVAL_PARSE_PAPER,
	EVAL_PARSE_LEXICAL,
	/* cons */
	EVAL_PARSE_PROGN,
	EVAL_PARSE_LET,
	EVAL_PARSE_LETA,
	EVAL_PARSE_SETQ,
	EVAL_PARSE_DEFUN,
	EVAL_PARSE_DEFMACRO,
	EVAL_PARSE_MACRO_LAMBDA,
	EVAL_PARSE_DEFTYPE,
	EVAL_PARSE_DEFINE_COMPILER_MACRO,
	EVAL_PARSE_DESTRUCTURING_BIND,
	EVAL_PARSE_QUOTE,
	EVAL_PARSE_FUNCTION,
	EVAL_PARSE_LAMBDA,
	EVAL_PARSE_IF,
	EVAL_PARSE_UNWIND_PROTECT,
	EVAL_PARSE_TAGBODY,
	EVAL_PARSE_TAG,
	EVAL_PARSE_GO,
	EVAL_PARSE_BLOCK,
	EVAL_PARSE_RETURN_FROM,
	EVAL_PARSE_CATCH,
	EVAL_PARSE_THROW,
	EVAL_PARSE_FLET,
	EVAL_PARSE_LABELS,
	EVAL_PARSE_THE,
	EVAL_PARSE_EVAL_WHEN,
	EVAL_PARSE_VALUES,
	EVAL_PARSE_LOCALLY,
	EVAL_PARSE_CALL,
	EVAL_PARSE_MULTIPLE_VALUE_BIND,
	EVAL_PARSE_MULTIPLE_VALUE_CALL,
	EVAL_PARSE_MULTIPLE_VALUE_PROG1,
	EVAL_PARSE_NTH_VALUE,
	EVAL_PARSE_PROGV,
	EVAL_PARSE_LOAD_TIME_VALUE,
	EVAL_PARSE_STEP,
	/* size */
	EVAL_PARSE_SIZE
};

typedef enum EVAL_PARSE EvalParse;

#endif


/************************************************************
 *  parse.h
 ************************************************************/
#ifndef __PARSE_HEADER__
#define __PARSE_HEADER__


#define check_variable_ _n(check_variable_)
#define check_function_variable_ _n(check_function_variable_)
#define tagbody_tag_p _n(tagbody_tag_p)

int check_variable_(addr symbol);
int check_function_variable_(addr symbol);
int tagbody_tag_p(addr pos);

#endif


/************************************************************
 *  restart_value.h
 ************************************************************/
#ifndef __RESTART_VALUE_HEADER__
#define __RESTART_VALUE_HEADER__


#define symbol_special_restart_ _n(symbol_special_restart_)
#define callname_global_restart_ _n(callname_global_restart_)
#define function_global_restart_ _n(function_global_restart_)
#define setf_global_restart_ _n(setf_global_restart_)
#define fdefinition_restart_ _n(fdefinition_restart_)
#define abort_restart_char_heap _n(abort_restart_char_heap)
#define abort_restart_char_control _n(abort_restart_char_control)
#define init_restart_value _n(init_restart_value)

int symbol_special_restart_(Execute ptr, addr symbol, addr *ret);
int callname_global_restart_(Execute ptr, addr name, addr *ret);
int function_global_restart_(Execute ptr, addr symbol, addr *ret);
int setf_global_restart_(Execute ptr, addr symbol, addr *ret);
int fdefinition_restart_(Execute ptr, addr name, addr *ret);
void abort_restart_char_heap(addr *ret, const char *str);
void abort_restart_char_control(Execute ptr, const char *str);

void init_restart_value(void);

#endif


/************************************************************
 *  call_filenames.h
 ************************************************************/
#ifndef __CALL_FILENAMES_HEADER__
#define __CALL_FILENAMES_HEADER__


#define pathname_common_ _n(pathname_common_)
#define make_pathname_common_ _n(make_pathname_common_)
#define pathnamep_common _n(pathnamep_common)
#define pathname_host_common_ _n(pathname_host_common_)
#define pathname_device_common_ _n(pathname_device_common_)
#define pathname_directory_common_ _n(pathname_directory_common_)
#define pathname_name_common_ _n(pathname_name_common_)
#define pathname_type_common_ _n(pathname_type_common_)
#define pathname_version_common_ _n(pathname_version_common_)
#define load_logical_pathname_translations_common_ \
	_n(load_logical_pathname_translations_common_)
#define logical_pathname_translations_common_ \
	_n(logical_pathname_translations_common_)
#define setf_logical_pathname_translations_common_ \
	_n(setf_logical_pathname_translations_common_)
#define logical_pathname_common_ _n(logical_pathname_common_)
#define default_pathname_defaults_common _n(default_pathname_defaults_common)
#define namestring_common_ _n(namestring_common_)
#define file_namestring_common_ _n(file_namestring_common_)
#define directory_namestring_common_ _n(directory_namestring_common_)
#define host_namestring_common_ _n(host_namestring_common_)
#define enough_namestring_common_ _n(enough_namestring_common_)
#define parse_namestring_common_ _n(parse_namestring_common_)
#define wild_pathname_p_common_ _n(wild_pathname_p_common_)
#define pathname_match_p_common_ _n(pathname_match_p_common_)
#define translate_pathname_common_ _n(translate_pathname_common_)
#define translate_logical_pathname_common_ _n(translate_logical_pathname_common_)
#define merge_pathnames_common_ _n(merge_pathnames_common_)

int pathname_common_(Execute ptr, addr var, addr *ret);
int make_pathname_common_(Execute ptr, addr rest, addr *ret);
void pathnamep_common(addr var, addr *ret);
int pathname_host_common_(Execute ptr, addr pos, addr rest, addr *ret);
int pathname_device_common_(Execute ptr, addr pos, addr rest, addr *ret);
int pathname_directory_common_(Execute ptr, addr pos, addr rest, addr *ret);
int pathname_name_common_(Execute ptr, addr pos, addr rest, addr *ret);
int pathname_type_common_(Execute ptr, addr pos, addr rest, addr *ret);
int pathname_version_common_(Execute ptr, addr pos, addr *ret);
int load_logical_pathname_translations_common_(Execute ptr, addr host, addr *ret);
int logical_pathname_translations_common_(addr host, addr *ret);
int setf_logical_pathname_translations_common_(Execute ptr, addr host, addr list);
int logical_pathname_common_(Execute ptr, addr *ret, addr pos);
void default_pathname_defaults_common(void);
int namestring_common_(Execute ptr, addr *ret, addr pos);
int file_namestring_common_(Execute ptr, addr *ret, addr pos);
int directory_namestring_common_(Execute ptr, addr *ret, addr pos);
int host_namestring_common_(Execute ptr, addr *ret, addr pos);
int enough_namestring_common_(Execute ptr, addr *ret, addr pos, addr defaults);
int parse_namestring_common_(Execute ptr,
		addr thing, addr rest, addr *ret1, addr *ret2);
int wild_pathname_p_common_(Execute ptr, addr *ret, addr file, addr field);
int pathname_match_p_common_(Execute ptr, addr *ret, addr a, addr b);
int translate_pathname_common_(Execute ptr, addr *ret, addr pos, addr from, addr to);
int translate_logical_pathname_common_(Execute ptr, addr *ret, addr pos);
int merge_pathnames_common_(Execute ptr,
		addr *ret, addr pos, addr defaults, addr version);

#endif


/************************************************************
 *  call_environment.h
 ************************************************************/
#ifndef __CALL_ENVIRONMENT_HEADER__
#define __CALL_ENVIRONMENT_HEADER__


#define decode_universal_time_common_ _n(decode_universal_time_common_)
#define encode_universal_time_common_ _n(encode_universal_time_common_)
#define get_decoded_time_common_ _n(get_decoded_time_common_)
#define apropos_common_ _n(apropos_common_)
#define apropos_list_common_ _n(apropos_list_common_)
#define time_common_ _n(time_common_)
#define room_common_ _n(room_common_)
#define ed_common_ _n(ed_common_)
#define dribble_common_ _n(dribble_common_)

int decode_universal_time_common_(LocalRoot local, addr pos, addr zone,
		addr *rsecond, addr *rminute, addr *rhour,
		addr *rdate, addr *rmonth, addr *ryear,
		addr *rweek, addr *rdaylight, addr *rzone);
int encode_universal_time_common_(LocalRoot local, addr rest, addr *ret);
int get_decoded_time_common_(LocalRoot local,
		addr *rsecond, addr *rminute, addr *rhour,
		addr *rdate, addr *rmonth, addr *ryear,
		addr *rweek, addr *rdaylight, addr *rzone);
int apropos_common_(Execute ptr, addr var, addr package);
int apropos_list_common_(Execute ptr, addr var, addr package, addr *ret);
int time_common_(addr form, addr env, addr *ret);
int room_common_(Execute ptr, addr var);
int ed_common_(Execute ptr, addr var);
int dribble_common_(Execute ptr, addr file);

#endif


/************************************************************
 *  env_time.h
 ************************************************************/
#ifndef __ENV_TIME_HEADER__
#define __ENV_TIME_HEADER__


#define decode_universal_time_call_ _n(decode_universal_time_call_)
#define encode_universal_time_call_ _n(encode_universal_time_call_)
#define get_universal_time_call_ _n(get_universal_time_call_)
#define get_decoded_time_call_ _n(get_decoded_time_call_)
#define get_internal_time_units_per_second _n(get_internal_time_units_per_second)
#define get_internal_real_time_common_ _n(get_internal_real_time_common_)
#define get_internal_run_time_common _n(get_internal_run_time_common)
#define sleep_common_ _n(sleep_common_)

struct universal_time_struct {
	addr second, minute, hour, date, month, year, week, daylight_p, zone;
};

int decode_universal_time_call_(LocalRoot local,
		struct universal_time_struct *u, addr pos, addr zone);
int encode_universal_time_call_(LocalRoot local, addr *ret,
		addr sec, addr min, addr hour,
		addr day, addr month, addr year, addr zone);
int get_universal_time_call_(LocalRoot local, addr *ret);
int get_decoded_time_call_(LocalRoot local, struct universal_time_struct *u);
void get_internal_time_units_per_second(fixnum *ret);
int get_internal_real_time_common_(LocalRoot local, addr *ret);
void get_internal_run_time_common(addr *ret);
int sleep_common_(Execute ptr, addr var);

#endif


/************************************************************
 *  eval_load.h
 ************************************************************/
#ifndef __EVAL_LOAD_HEADER__
#define __EVAL_LOAD_HEADER__


#define eval_load_ _n(eval_load_)
#define eval_load_force_lisp_ _n(eval_load_force_lisp_)
#define eval_load_force_fasl_ _n(eval_load_force_fasl_)
#define compile_load_ _n(compile_load_)

int eval_load_(Execute ptr, int *ret,
		addr file, addr verbose, addr print, int exist, addr external);
int eval_load_force_lisp_(Execute ptr, int *ret,
		addr file, addr verbose, addr print, int exist, addr external);
int eval_load_force_fasl_(Execute ptr, int *ret,
		addr file, addr verbose, addr print, int exist, addr external);
int compile_load_(Execute ptr,
		addr file, addr verbose, addr print, addr external);

#endif


/************************************************************
 *  package_common.h
 ************************************************************/
#ifndef __PACKAGE_COMMON_HEADER__
#define __PACKAGE_COMMON_HEADER__


#define make_gentemp_ _n(make_gentemp_)
#define do_symbols_package_ _n(do_symbols_package_)
#define do_external_symbols_package_ _n(do_external_symbols_package_)
#define do_all_symbols_package_ _n(do_all_symbols_package_)
#define all_symbols_package_ _n(all_symbols_package_)

int make_gentemp_(Execute ptr, addr prefix, addr package, addr *ret);
int do_symbols_package_(Execute ptr, addr call, addr package);
int do_external_symbols_package_(Execute ptr, addr call, addr package);
int do_all_symbols_package_(Execute ptr, addr call);
int all_symbols_package_(addr package, addr *ret);

#endif


/************************************************************
 *  pathname_wildcard.h
 ************************************************************/
#ifndef __PATHNAME_WILDCARD_HEADER__
#define __PATHNAME_WILDCARD_HEADER__


#define wild_pathname_boolean_ _n(wild_pathname_boolean_)
#define wildcard_stringp_p_ _n(wildcard_stringp_p_)
#define wildcard_string_pathname_ _n(wildcard_string_pathname_)
#define wildcard_eq_pathname_ _n(wildcard_eq_pathname_)
#define wildcard_pathname_ _n(wildcard_pathname_)

int wild_pathname_boolean_(addr file, addr field, int *ret);
int wildcard_stringp_p_(addr pos, int *ret);
int wildcard_string_pathname_(addr a, addr b, lisp_equal_calltype equal, int *ret);
int wildcard_eq_pathname_(addr a, addr b, lisp_equal_calltype equal, int *ret);
int wildcard_pathname_(addr a, addr b, int wild, int *ret);

#endif


/************************************************************
 *  real_truncate.h
 ************************************************************/
#ifndef __REAL_TRUNCATE_HEADER__
#define __REAL_TRUNCATE_HEADER__


#define truncate1_common_ _n(truncate1_common_)
#define truncate2_common_ _n(truncate2_common_)
#define truncate_common_ _n(truncate_common_)
#define ftruncate1_common_ _n(ftruncate1_common_)
#define ftruncate2_common_ _n(ftruncate2_common_)
#define ftruncate_common_ _n(ftruncate_common_)
#define rem_rational_common_ _n(rem_rational_common_)

int truncate1_common_(LocalRoot local, addr *quot, addr *rem, addr left);
int truncate2_common_(LocalRoot local, addr *quot, addr *rem, addr left, addr right);
int truncate_common_(LocalRoot local, addr var, addr div, addr *ret1, addr *ret2);
int ftruncate1_common_(LocalRoot local, addr *quot, addr *rem, addr left);
int ftruncate2_common_(LocalRoot local, addr *quot, addr *rem, addr left, addr right);
int ftruncate_common_(LocalRoot local, addr var, addr div, addr *ret1, addr *ret2);
int rem_rational_common_(LocalRoot local, addr left, addr right, addr *ret);

#endif


/************************************************************
 *  sort.h
 ************************************************************/
#ifndef __SORT_HEADER__
#define __SORT_HEADER__


#define simplesort_cons_unsafe_ _n(simplesort_cons_unsafe_)
#define simplesort_info_cons_unsafe_ _n(simplesort_info_cons_unsafe_)
#define simple_sort_sequence_ _n(simple_sort_sequence_)
#define bubble_sort_sequence_ _n(bubble_sort_sequence_)
#define quick_sort_sequence_ _n(quick_sort_sequence_)
#define merge_sort_sequence_ _n(merge_sort_sequence_)

/* unsafe */
int simplesort_cons_unsafe_(addr *ret,
		addr cons, int (*call_)(addr left, addr right, int *ret));
int simplesort_info_cons_unsafe_(addr *ret, addr cons, addr info,
		int (*call_)(addr info, addr left, addr right, int *ret));

/* sort */
int simple_sort_sequence_(Execute ptr, addr pos, addr call, addr key);
int bubble_sort_sequence_(Execute ptr, addr pos, addr call, addr key);
int quick_sort_sequence_(Execute ptr, addr pos, addr call, addr key);
int merge_sort_sequence_(Execute ptr, addr pos, addr call, addr key);

#endif


/************************************************************
 *  stream_broadcast.h
 ************************************************************/
#ifndef __STREAM_BROADCAST_HEADER__
#define __STREAM_BROADCAST_HEADER__


#define open_broadcast_stream_ _n(open_broadcast_stream_)
#define push_broadcast_stream _n(push_broadcast_stream)
#define get_broadcast_stream _n(get_broadcast_stream)
#define init_stream_broadcast _n(init_stream_broadcast)

int open_broadcast_stream_(addr *stream, addr list);
void push_broadcast_stream(addr stream, addr output);
void get_broadcast_stream(addr stream, addr *ret);
void init_stream_broadcast(void);

#endif


/************************************************************
 *  stream_common.h
 ************************************************************/
#ifndef __STREAM_COMMON_HEADER__
#define __STREAM_COMMON_HEADER__


#define read_binary_stream_ _n(read_binary_stream_)
#define write_binary_stream_ _n(write_binary_stream_)
#define terpri_stream_ _n(terpri_stream_)
#define fresh_line_stream_ _n(fresh_line_stream_)
#define peek_char_stream_ _n(peek_char_stream_)
#define read_line_stream_ _n(read_line_stream_)
#define write_string_stream_ _n(write_string_stream_)
#define read_sequence_stream_ _n(read_sequence_stream_)
#define write_sequence_stream_ _n(write_sequence_stream_)

int read_binary_stream_(addr stream, void *pos, size_t size, size_t *ret);
int write_binary_stream_(addr stream, const void *pos, size_t size, size_t *ret);
int terpri_stream_(addr stream);
int fresh_line_stream_(addr stream, int *ret);
int peek_char_stream_(Execute ptr, addr *ret,
		addr type, addr stream, int errorp, addr value, int recp);
int read_line_stream_(Execute ptr, addr *ret, int *miss,
		addr pos, int errorp, addr value, int recp);
int write_string_stream_(Execute ptr, addr string, addr rest, addr *ret);
int read_sequence_stream_(addr *ret, addr seq, addr stream, size_t start, size_t end);
int write_sequence_stream_(LocalRoot local,
		addr seq, addr stream, size_t start, size_t end);

#endif


/************************************************************
 *  stream_echo.h
 ************************************************************/
#ifndef __STREAM_ECHO_HEADER__
#define __STREAM_ECHO_HEADER__


#define open_echo_stream _n(open_echo_stream)
#define get_echo_input_stream _n(get_echo_input_stream)
#define set_echo_input_stream _n(set_echo_input_stream)
#define get_echo_output_stream _n(get_echo_output_stream)
#define set_echo_output_stream _n(set_echo_output_stream)
#define init_stream_echo _n(init_stream_echo)

void open_echo_stream(addr *stream, addr input, addr output);
void get_echo_input_stream(addr stream, addr *ret);
void set_echo_input_stream(addr stream, addr input);
void get_echo_output_stream(addr stream, addr *ret);
void set_echo_output_stream(addr stream, addr output);
void init_stream_echo(void);

#endif


/************************************************************
 *  call_eval.h
 ************************************************************/
#ifndef __CALL_EVAL_HEADER__
#define __CALL_EVAL_HEADER__


#define lambda_common _n(lambda_common)
#define compile_common_ _n(compile_common_)
#define eval_common_ _n(eval_common_)
#define compiler_macro_function_common_ _n(compiler_macro_function_common_)
#define setf_compiler_macro_function_common_ _n(setf_compiler_macro_function_common_)
#define define_compiler_macro_common_ _n(define_compiler_macro_common_)
#define set_define_compiler_macro_ _n(set_define_compiler_macro_)
#define defmacro_common_ _n(defmacro_common_)
#define macro_function_common_ _n(macro_function_common_)
#define macroexpand_common_ _n(macroexpand_common_)
#define macroexpand_1_common_ _n(macroexpand_1_common_)
#define define_symbol_macro_common_ _n(define_symbol_macro_common_)
#define declaim_common_ _n(declaim_common_)
#define constantp_common_ _n(constantp_common_)

void lambda_common(addr form, addr *ret);
int compile_common_(Execute ptr, addr var, addr opt,
		addr *ret1, addr *ret2, addr *ret3);
int eval_common_(Execute ptr, addr var);
int compiler_macro_function_common_(addr var, addr env, addr *ret);
int setf_compiler_macro_function_common_(addr value, addr var, addr env);
int define_compiler_macro_common_(Execute ptr, addr form, addr env, addr *ret);
int set_define_compiler_macro_(addr callname, addr value);
int defmacro_common_(Execute ptr, addr right, addr env, addr *ret);
int macro_function_common_(addr symbol, addr env, addr *ret);
int macroexpand_common_(Execute ptr, addr form, addr env, addr *ret, addr *sec);
int macroexpand_1_common_(Execute ptr, addr form, addr env, addr *ret, addr *sec);
int define_symbol_macro_common_(addr form, addr env, addr *ret);
int declaim_common_(Execute ptr, addr form, addr env, addr *ret);
int constantp_common_(Execute ptr, addr var, addr opt, addr *ret);

#endif


/************************************************************
 *  compile_file.h
 ************************************************************/
#ifndef __COMPILE_FILE_HEADER__
#define __COMPILE_FILE_HEADER__


#define set_eval_compile_mode _n(set_eval_compile_mode)
#define eval_compile_p _n(eval_compile_p)
#define eval_compile_file_ _n(eval_compile_file_)
#define handler_compile_ _n(handler_compile_)
#define compile_file_common_ _n(compile_file_common_)
#define init_compile_file _n(init_compile_file)

void set_eval_compile_mode(Execute ptr, addr value);
int eval_compile_p(Execute ptr);
int eval_compile_file_(Execute ptr, addr pos);
int handler_compile_(Execute ptr);
int compile_file_common_(Execute ptr, addr file, addr rest,
		addr *ret1, addr *ret2, addr *ret3);
void init_compile_file(void);

#endif


/************************************************************
 *  eval_execute.h
 ************************************************************/
#ifndef __EVAL_EXECUTE_HEADER__
#define __EVAL_EXECUTE_HEADER__


#define eval_execute_partial_ _n(eval_execute_partial_)
#define eval_result_partial_ _n(eval_result_partial_)
#define eval_result_partial_form_ _n(eval_result_partial_form_)
#define eval_result_compile_ _n(eval_result_compile_)
#define eval_result_macro_ _n(eval_result_macro_)
#define eval_toplevel_loop_ _n(eval_toplevel_loop_)
#define eval_stream_toplevel_ _n(eval_stream_toplevel_)

int eval_execute_partial_(Execute ptr, addr pos);
int eval_result_partial_(Execute ptr, addr pos, addr *ret);
int eval_result_partial_form_(Execute ptr, addr pos, addr *ret);
int eval_result_compile_(Execute ptr, addr pos, addr *ret);
int eval_result_macro_(Execute ptr, addr pos, addr *ret);
int eval_toplevel_loop_(Execute ptr, addr stream);
int eval_stream_toplevel_(Execute ptr, addr stream);

#endif


/************************************************************
 *  parse_macro.h
 ************************************************************/
#ifndef __PARSE_MACRO_HEADER__
#define __PARSE_MACRO_HEADER__


#define environment_symbol _n(environment_symbol)
#define init_parse_environment _n(init_parse_environment)
#define snapshot_envstack_ _n(snapshot_envstack_)
#define rollback_envstack_ _n(rollback_envstack_)
#define defvar_envstack_ _n(defvar_envstack_)
#define lexical_envstack_ _n(lexical_envstack_)
#define defun_envstack_ _n(defun_envstack_)
#define function_envstack_ _n(function_envstack_)
#define defmacro_envstack_ _n(defmacro_envstack_)
#define macrolet_envstack_ _n(macrolet_envstack_)
#define define_symbol_macro_envstack_ _n(define_symbol_macro_envstack_)
#define symbol_macrolet_envstack_ _n(symbol_macrolet_envstack_)
#define symbol_macrolet_envstack_p_ _n(symbol_macrolet_envstack_p_)
#define environment_heap_ _n(environment_heap_)
#define copy_environment _n(copy_environment)
#define close_environment _n(close_environment)
#define find_environment_ _n(find_environment_)
#define macroexpand1_ _n(macroexpand1_)
#define macroexpand_ _n(macroexpand_)
#define parse_macroexpand_ _n(parse_macroexpand_)

void environment_symbol(addr *ret);
void init_parse_environment(Execute ptr);
int snapshot_envstack_(Execute ptr, addr *ret);
int rollback_envstack_(Execute ptr, addr pos);
int defvar_envstack_(Execute ptr, addr name);
int lexical_envstack_(Execute ptr, addr name);
int defun_envstack_(Execute ptr, addr name);
int function_envstack_(Execute ptr, addr name);
int defmacro_envstack_(Execute ptr, addr name, addr lambda);
int macrolet_envstack_(Execute ptr, addr name, addr lambda);
int define_symbol_macro_envstack_(Execute ptr, addr name, addr form);
int symbol_macrolet_envstack_(Execute ptr, addr name, addr form);
int symbol_macrolet_envstack_p_(Execute ptr, addr name, addr *value, int *ret);

int environment_heap_(Execute ptr, addr *ret);
void copy_environment(addr *ret, addr pos);
void close_environment(addr pos);

int find_environment_(addr symbol, addr env, addr *ret);
int macroexpand1_(Execute ptr, addr *ret, addr form, addr env, int *result);
int macroexpand_(Execute ptr, addr *ret, addr form, addr env, int *result);
int parse_macroexpand_(Execute ptr, addr *ret, addr form);

#endif


/************************************************************
 *  file_open.h
 ************************************************************/
#ifndef __FILE_OPEN_HEADER__
#define __FILE_OPEN_HEADER__


#define open_input_binary_stream_ _n(open_input_binary_stream_)
#define open_input_unsigned16_stream_ _n(open_input_unsigned16_stream_)
#define open_input_unsigned32_stream_ _n(open_input_unsigned32_stream_)
#define open_input_signed8_stream_ _n(open_input_signed8_stream_)
#define open_input_signed16_stream_ _n(open_input_signed16_stream_)
#define open_input_signed32_stream_ _n(open_input_signed32_stream_)
#ifdef LISP_64BIT
#define open_input_unsigned64_stream_ _n(open_input_unsigned64_stream_)
#define open_input_signed64_stream_ _n(open_input_signed64_stream_)
#endif
#define open_input_ascii_stream_ _n(open_input_ascii_stream_)
#define open_input_utf8_stream_ _n(open_input_utf8_stream_)
#define open_input_utf8bom_stream_ _n(open_input_utf8bom_stream_)
#define open_input_utf16_stream_ _n(open_input_utf16_stream_)
#define open_input_utf16le_stream_ _n(open_input_utf16le_stream_)
#define open_input_utf16be_stream_ _n(open_input_utf16be_stream_)
#define open_input_utf16lebom_stream_ _n(open_input_utf16lebom_stream_)
#define open_input_utf16bebom_stream_ _n(open_input_utf16bebom_stream_)
#define open_input_utf32_stream_ _n(open_input_utf32_stream_)
#define open_input_utf32le_stream_ _n(open_input_utf32le_stream_)
#define open_input_utf32be_stream_ _n(open_input_utf32be_stream_)
#define open_input_utf32lebom_stream_ _n(open_input_utf32lebom_stream_)
#define open_input_utf32bebom_stream_ _n(open_input_utf32bebom_stream_)
#define open_input_stream_ _n(open_input_stream_)
#define open_input_stream_error_ _n(open_input_stream_error_)
#define open_output_binary_stream_ _n(open_output_binary_stream_)
#define open_output_unsigned16_stream_ _n(open_output_unsigned16_stream_)
#define open_output_unsigned32_stream_ _n(open_output_unsigned32_stream_)
#define open_output_signed8_stream_ _n(open_output_signed8_stream_)
#define open_output_signed16_stream_ _n(open_output_signed16_stream_)
#define open_output_signed32_stream_ _n(open_output_signed32_stream_)
#ifdef LISP_64BIT
#define open_output_unsigned64_stream_ _n(open_output_unsigned64_stream_)
#define open_output_signed64_stream_ _n(open_output_signed64_stream_)
#endif
#define open_output_ascii_stream_ _n(open_output_ascii_stream_)
#define open_output_utf8_stream_ _n(open_output_utf8_stream_)
#define open_output_utf16le_stream_ _n(open_output_utf16le_stream_)
#define open_output_utf16be_stream_ _n(open_output_utf16be_stream_)
#define open_output_utf32le_stream_ _n(open_output_utf32le_stream_)
#define open_output_utf32be_stream_ _n(open_output_utf32be_stream_)
#define open_io_binary_stream_ _n(open_io_binary_stream_)
#define open_io_unsigned16_stream_ _n(open_io_unsigned16_stream_)
#define open_io_unsigned32_stream_ _n(open_io_unsigned32_stream_)
#define open_io_signed8_stream_ _n(open_io_signed8_stream_)
#define open_io_signed16_stream_ _n(open_io_signed16_stream_)
#define open_io_signed32_stream_ _n(open_io_signed32_stream_)
#ifdef LISP_64BIT
#define open_io_unsigned64_stream_ _n(open_io_unsigned64_stream_)
#define open_io_signed64_stream_ _n(open_io_signed64_stream_)
#endif
#define open_io_ascii_stream_ _n(open_io_ascii_stream_)
#define open_io_utf8_stream_ _n(open_io_utf8_stream_)
#define open_io_utf8bom_stream_ _n(open_io_utf8bom_stream_)
#define open_io_utf16_stream_ _n(open_io_utf16_stream_)
#define open_io_utf16le_stream_ _n(open_io_utf16le_stream_)
#define open_io_utf16be_stream_ _n(open_io_utf16be_stream_)
#define open_io_utf16lebom_stream_ _n(open_io_utf16lebom_stream_)
#define open_io_utf16bebom_stream_ _n(open_io_utf16bebom_stream_)
#define open_io_utf32_stream_ _n(open_io_utf32_stream_)
#define open_io_utf32le_stream_ _n(open_io_utf32le_stream_)
#define open_io_utf32be_stream_ _n(open_io_utf32be_stream_)
#define open_io_utf32lebom_stream_ _n(open_io_utf32lebom_stream_)
#define open_io_utf32bebom_stream_ _n(open_io_utf32bebom_stream_)
#define open_probe_stream_ _n(open_probe_stream_)

/* input */
int open_input_binary_stream_(Execute ptr, addr *stream, addr file);
int open_input_unsigned16_stream_(Execute ptr, addr *stream, addr file);
int open_input_unsigned32_stream_(Execute ptr, addr *stream, addr file);
int open_input_signed8_stream_(Execute ptr, addr *stream, addr file);
int open_input_signed16_stream_(Execute ptr, addr *stream, addr file);
int open_input_signed32_stream_(Execute ptr, addr *stream, addr file);
#ifdef LISP_64BIT
int open_input_unsigned64_stream_(Execute ptr, addr *stream, addr file);
int open_input_signed64_stream_(Execute ptr, addr *stream, addr file);
#endif
int open_input_ascii_stream_(Execute ptr, addr *stream, addr file);
int open_input_utf8_stream_(Execute ptr, addr *stream, addr file);
int open_input_utf8bom_stream_(Execute ptr, addr *stream, addr file);
int open_input_utf16_stream_(Execute ptr, addr *stream, addr file);
int open_input_utf16le_stream_(Execute ptr, addr *stream, addr file);
int open_input_utf16be_stream_(Execute ptr, addr *stream, addr file);
int open_input_utf16lebom_stream_(Execute ptr, addr *stream, addr file);
int open_input_utf16bebom_stream_(Execute ptr, addr *stream, addr file);
int open_input_utf32_stream_(Execute ptr, addr *stream, addr file);
int open_input_utf32le_stream_(Execute ptr, addr *stream, addr file);
int open_input_utf32be_stream_(Execute ptr, addr *stream, addr file);
int open_input_utf32lebom_stream_(Execute ptr, addr *stream, addr file);
int open_input_utf32bebom_stream_(Execute ptr, addr *stream, addr file);

int open_input_stream_(Execute ptr, addr *stream, addr file, addr format);
int open_input_stream_error_(Execute ptr, addr *ret, addr file, addr format);

/* output */
int open_output_binary_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_output_unsigned16_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_output_unsigned32_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_output_signed8_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_output_signed16_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_output_signed32_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
#ifdef LISP_64BIT
int open_output_unsigned64_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_output_signed64_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
#endif
int open_output_ascii_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_output_utf8_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode, int bomp);
int open_output_utf16le_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode, int bomp);
int open_output_utf16be_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode, int bomp);
int open_output_utf32le_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode, int bomp);
int open_output_utf32be_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode, int bomp);

/* io */
int open_io_binary_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_unsigned16_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_unsigned32_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_signed8_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_signed16_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_signed32_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
#ifdef LISP_64BIT
int open_io_unsigned64_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_signed64_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
#endif
int open_io_ascii_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_utf8_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_utf8bom_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_utf16_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_utf16le_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_utf16be_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_utf16lebom_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_utf16bebom_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_utf32_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_utf32le_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_utf32be_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_utf32lebom_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);
int open_io_utf32bebom_stream_(Execute ptr, addr *stream,
		addr file, enum FileOutput mode);

/* probe */
int open_probe_stream_(Execute ptr, addr *stream, addr file);

#endif


/************************************************************
 *  files.h
 ************************************************************/
#ifndef __FILES_HEADER__
#define __FILES_HEADER__


#define directory_files_ _n(directory_files_)
#define probe_file_files_ _n(probe_file_files_)
#define ensure_directories_exist_files_ _n(ensure_directories_exist_files_)
#define file_author_files_ _n(file_author_files_)
#define file_write_date_files_ _n(file_write_date_files_)
#define rename_file_files_ _n(rename_file_files_)
#define delete_file_files_ _n(delete_file_files_)
#define remove_file_common_ _n(remove_file_common_)
#define remove_directory_common_ _n(remove_directory_common_)
#define truename_files_ _n(truename_files_)

int directory_files_(Execute ptr, addr *ret, addr pos);
int probe_file_files_(Execute ptr, addr *ret, addr pos);
int ensure_directories_exist_files_(Execute ptr,
		addr *ret1, addr *ret2, addr pos, int verbose);
int file_author_files_(Execute ptr, addr *ret, addr pos);
int file_write_date_files_(Execute ptr, addr *ret, addr pos);
int rename_file_files_(Execute ptr,
		addr *ret1, addr *ret2, addr *ret3, addr file, addr to);
int delete_file_files_(Execute ptr, addr pos);
int remove_file_common_(Execute ptr, addr pos, int errorp, int *ret);
int remove_directory_common_(Execute ptr, addr pos, int errorp, int *ret);
int truename_files_(Execute ptr, addr file, addr *ret, int errorp);

#endif


/************************************************************
 *  pathname_object.h
 ************************************************************/
#ifndef __PATHNAME_OBJECT_HEADER__
#define __PATHNAME_OBJECT_HEADER__


#define getarray_pathname _n(getarray_pathname)
#define setarray_pathname _n(setarray_pathname)
#define reflogical_pathname _n(reflogical_pathname)
#define getlogical_pathname _n(getlogical_pathname)
#define setlogical_pathname _n(setlogical_pathname)
#define gethost_pathname _n(gethost_pathname)
#define sethost_pathname _n(sethost_pathname)
#define getdevice_pathname _n(getdevice_pathname)
#define setdevice_pathname _n(setdevice_pathname)
#define getdirectory_pathname _n(getdirectory_pathname)
#define setdirectory_pathname _n(setdirectory_pathname)
#define getname_pathname _n(getname_pathname)
#define setname_pathname _n(setname_pathname)
#define gettype_pathname _n(gettype_pathname)
#define settype_pathname _n(settype_pathname)
#define getversion_pathname _n(getversion_pathname)
#define setversion_pathname _n(setversion_pathname)
#define pathname_ignore_case_p _n(pathname_ignore_case_p)
#define pathname_equal_function _n(pathname_equal_function)

#define make_pathname_alloc _n(make_pathname_alloc)
#define pathname_alloc _n(pathname_alloc)
#define pathname_local _n(pathname_local)
#define pathname_heap _n(pathname_heap)
#define logical_pathname_alloc _n(logical_pathname_alloc)
#define logical_pathname_local _n(logical_pathname_local)
#define logical_pathname_heap _n(logical_pathname_heap)
#define pathnamep _n(pathnamep)
#define pathname_pathname_p _n(pathname_pathname_p)
#define pathname_logical_p _n(pathname_logical_p)
#define pathname_file_p _n(pathname_file_p)
#define pathname_directory_p _n(pathname_directory_p)
#define copylocal_pathname_array _n(copylocal_pathname_array)
#define copy_pathname_alloc _n(copy_pathname_alloc)
#define pathname_equal_ _n(pathname_equal_)

#define make_pathname_heap_ _n(make_pathname_heap_)
#define pathname_host_ _n(pathname_host_)
#define pathname_device_ _n(pathname_device_)
#define pathname_directory_ _n(pathname_directory_)
#define pathname_name_ _n(pathname_name_)
#define pathname_type_ _n(pathname_type_)
#define pathname_version _n(pathname_version)

enum PATHNAME_INDEX {
	PATHNAME_INDEX_HOST,
	PATHNAME_INDEX_DEVICE,
	PATHNAME_INDEX_DIRECTORY,
	PATHNAME_INDEX_NAME,
	PATHNAME_INDEX_TYPE,
	PATHNAME_INDEX_VERSION,
	PATHNAME_INDEX_SIZE
};

#define GetArrayPathname_Low			GetArrayA2
#define SetArrayPathname_Low			SetArrayA2
#define RefLogicalPathname_Low(x)		((int)GetUser(x))
#define GetLogicalPathname_Low(x,y)		(*(y) = (int)GetUser(x))
#define SetLogicalPathname_Low(x,y)		(SetUser((x),(y)))

#define GetHostPathname_Low(x,y)		GetArrayA2((x),PATHNAME_INDEX_HOST,(y))
#define SetHostPathname_Low(x,y)		SetArrayA2((x),PATHNAME_INDEX_HOST,(y))
#define GetDevicePathname_Low(x,y)		GetArrayA2((x),PATHNAME_INDEX_DEVICE,(y))
#define SetDevicePathname_Low(x,y)		SetArrayA2((x),PATHNAME_INDEX_DEVICE,(y))
#define GetDirectoryPathname_Low(x,y)	GetArrayA2((x),PATHNAME_INDEX_DIRECTORY,(y))
#define SetDirectoryPathname_Low(x,y)	SetArrayA2((x),PATHNAME_INDEX_DIRECTORY,(y))
#define GetNamePathname_Low(x,y)		GetArrayA2((x),PATHNAME_INDEX_NAME,(y))
#define SetNamePathname_Low(x,y)		SetArrayA2((x),PATHNAME_INDEX_NAME,(y))
#define GetTypePathname_Low(x,y)		GetArrayA2((x),PATHNAME_INDEX_TYPE,(y))
#define SetTypePathname_Low(x,y)		SetArrayA2((x),PATHNAME_INDEX_TYPE,(y))
#define GetVersionPathname_Low(x,y)		GetArrayA2((x),PATHNAME_INDEX_VERSION,(y))
#define SetVersionPathname_Low(x,y)		SetArrayA2((x),PATHNAME_INDEX_VERSION,(y))

#ifdef LISP_DEBUG
#define GetArrayPathname				getarray_pathname
#define SetArrayPathname				setarray_pathname
#define RefLogicalPathname				reflogical_pathname
#define GetLogicalPathname				getlogical_pathname
#define SetLogicalPathname				setlogical_pathname

#define GetHostPathname					gethost_pathname
#define SetHostPathname					sethost_pathname
#define GetDevicePathname				getdevice_pathname
#define SetDevicePathname				setdevice_pathname
#define GetDirectoryPathname			getdirectory_pathname
#define SetDirectoryPathname			setdirectory_pathname
#define GetNamePathname					getname_pathname
#define SetNamePathname					setname_pathname
#define GetTypePathname					gettype_pathname
#define SetTypePathname					settype_pathname
#define GetVersionPathname				getversion_pathname
#define SetVersionPathname				setversion_pathname
#else
#define GetArrayPathname				GetArrayPathname_Low
#define SetArrayPathname				SetArrayPathname_Low
#define RefLogicalPathname				RefLogicalPathname_Low
#define GetLogicalPathname				GetLogicalPathname_Low
#define SetLogicalPathname				SetLogicalPathname_Low

#define GetHostPathname					GetHostPathname_Low
#define SetHostPathname					SetHostPathname_Low
#define GetDevicePathname				GetDevicePathname_Low
#define SetDevicePathname				SetDevicePathname_Low
#define GetDirectoryPathname			GetDirectoryPathname_Low
#define SetDirectoryPathname			SetDirectoryPathname_Low
#define GetNamePathname					GetNamePathname_Low
#define SetNamePathname					SetNamePathname_Low
#define GetTypePathname					GetTypePathname_Low
#define SetTypePathname					SetTypePathname_Low
#define GetVersionPathname				GetVersionPathname_Low
#define SetVersionPathname				SetVersionPathname_Low
#endif

/* access */
void getarray_pathname(addr pos, enum PATHNAME_INDEX index, addr *ret);
void setarray_pathname(addr pos, enum PATHNAME_INDEX index, addr value);
int reflogical_pathname(addr pos);
void getlogical_pathname(addr pos, int *ret);
void setlogical_pathname(addr pos, int value);
void gethost_pathname(addr pos, addr *ret);
void sethost_pathname(addr pos, addr value);
void getdevice_pathname(addr pos, addr *ret);
void setdevice_pathname(addr pos, addr value);
void getdirectory_pathname(addr pos, addr *ret);
void setdirectory_pathname(addr pos, addr value);
void getname_pathname(addr pos, addr *ret);
void setname_pathname(addr pos, addr value);
void gettype_pathname(addr pos, addr *ret);
void settype_pathname(addr pos, addr value);
void getversion_pathname(addr pos, addr *ret);
void setversion_pathname(addr pos, addr value);
int pathname_ignore_case_p(addr pos);
lisp_equal_calltype pathname_equal_function(addr pos);

/* pathname object */
void make_pathname_alloc(LocalRoot local, addr *ret, int logical);

/* pathname */
void pathname_alloc(LocalRoot local, addr *ret,
		addr host, addr device, addr directory, addr name, addr type);
void pathname_local(LocalRoot local, addr *ret,
		addr host, addr device, addr directory, addr name, addr type);
void pathname_heap(addr *ret,
		addr host, addr device, addr directory, addr name, addr type);

/* logical-pathname */
void logical_pathname_alloc(LocalRoot local, addr *ret, addr host,
		addr directory, addr name, addr type, addr version);
void logical_pathname_local(LocalRoot local, addr *ret, addr host,
		addr directory, addr name, addr type, addr version);
void logical_pathname_heap(addr *ret, addr host,
		addr directory, addr name, addr type, addr version);

/* check */
int pathnamep(addr pos);
int pathname_pathname_p(addr pos);
int pathname_logical_p(addr pos);
int pathname_file_p(addr pos);
int pathname_directory_p(addr pos);
void copylocal_pathname_array(LocalRoot local, addr a, int i, addr b);
void copy_pathname_alloc(LocalRoot local, addr *ret, addr pos);
#define copy_pathname_heap(x,y) copy_pathname_alloc(NULL, (x), (y))
int pathname_equal_(addr left, addr right, int *ret);

int make_pathname_heap_(addr *ret,
		addr host, addr device, addr directory,
		addr name, addr type, addr version, int localp);
int pathname_host_(addr pos, addr *ret, int localp);
int pathname_device_(addr pos, addr *ret, int localp);
int pathname_directory_(addr pos, addr *ret, int localp);
int pathname_name_(addr pos, addr *ret, int localp);
int pathname_type_(addr pos, addr *ret, int localp);
void pathname_version(addr pos, addr *ret);

#endif


/************************************************************
 *  pathname_translate.h
 ************************************************************/
#ifndef __PATHNAME_TRANSLATE_HEADER__
#define __PATHNAME_TRANSLATE_HEADER__


#define table_logical_pathname _n(table_logical_pathname)
#define gethost_logical_pathname_ _n(gethost_logical_pathname_)
#define sethost_logical_pathname_ _n(sethost_logical_pathname_)
#define translate_pathname_alloc_ _n(translate_pathname_alloc_)
#define translate_pathname_heap_ _n(translate_pathname_heap_)
#define build_pathname_translate _n(build_pathname_translate)

/* found=0, notfound=1 */
void table_logical_pathname(addr *ret);
int gethost_logical_pathname_(addr key, addr *ret);
int sethost_logical_pathname_(addr key, addr value);

int translate_pathname_alloc_(Execute ptr,
		addr *ret, addr pos, addr from, addr to, int localp);
int translate_pathname_heap_(Execute ptr, addr *ret, addr pos, addr from, addr to);

void build_pathname_translate(void);

#endif


/************************************************************
 *  call_hashtables.h
 ************************************************************/
#ifndef __CALL_HASHTABLES_HEADER__
#define __CALL_HASHTABLES_HEADER__


#define make_hash_table_common_ _n(make_hash_table_common_)
#define hash_table_count_common _n(hash_table_count_common)
#define hash_table_rehash_size_common_ _n(hash_table_rehash_size_common_)
#define hash_table_rehash_threshold_common _n(hash_table_rehash_threshold_common)
#define hash_table_size_common _n(hash_table_size_common)
#define hash_table_test_common _n(hash_table_test_common)
#define gethash_common_ _n(gethash_common_)
#define setf_gethash_common_ _n(setf_gethash_common_)
#define remhash_common_ _n(remhash_common_)
#define maphash_common_ _n(maphash_common_)
#define with_hash_table_iterator_common_ _n(with_hash_table_iterator_common_)
#define sxhash_common_ _n(sxhash_common_)

int make_hash_table_common_(addr rest, addr *ret);
void hash_table_count_common(addr var, addr *ret);
int hash_table_rehash_size_common_(addr var, addr *ret);
void hash_table_rehash_threshold_common(addr var, addr *ret);
void hash_table_size_common(addr var, addr *ret);
void hash_table_test_common(addr var, addr *ret);
int gethash_common_(addr key, addr table, addr value, addr *ret, addr *check);
int setf_gethash_common_(LocalRoot local, addr value, addr key, addr table);
int remhash_common_(addr key, addr table, addr *ret);
int maphash_common_(Execute ptr, addr call, addr table);
int with_hash_table_iterator_common_(Execute ptr, addr form, addr env, addr *ret);
int sxhash_common_(addr var, addr *ret);

#endif


/************************************************************
 *  call_iteration.h
 ************************************************************/
#ifndef __CALL_ITERATION_HEADER__
#define __CALL_ITERATION_HEADER__


#define do_common_ _n(do_common_)
#define doa_common_ _n(doa_common_)
#define dotimes_common_ _n(dotimes_common_)
#define dolist_common_ _n(dolist_common_)

int do_common_(addr form, addr env, addr *ret);
int doa_common_(addr form, addr env, addr *ret);
int dotimes_common_(addr form, addr env, addr *ret);
int dolist_common_(Execute ptr, addr form, addr env, addr *ret);

#endif


/************************************************************
 *  call_numbers.h
 ************************************************************/
#ifndef __CALL_NUMBERS_HEADER__
#define __CALL_NUMBERS_HEADER__


#define number_equal_common_ _n(number_equal_common_)
#define number_not_equal_common_ _n(number_not_equal_common_)
#define number_less_common_ _n(number_less_common_)
#define number_greater_common_ _n(number_greater_common_)
#define number_less_equal_common_ _n(number_less_equal_common_)
#define number_greater_equal_common_ _n(number_greater_equal_common_)
#define max_common_ _n(max_common_)
#define min_common_ _n(min_common_)
#define plus_common_ _n(plus_common_)
#define minus_common_ _n(minus_common_)
#define asterisk_common_ _n(asterisk_common_)
#define slash_common_ _n(slash_common_)
#define incf_common_ _n(incf_common_)
#define decf_common_ _n(decf_common_)
#define random_common_ _n(random_common_)
#define conjugate_common_ _n(conjugate_common_)
#define realpart_common_ _n(realpart_common_)
#define imagpart_common_ _n(imagpart_common_)
#define parse_integer_common_ _n(parse_integer_common_)

int number_equal_common_(LocalRoot local, addr left, addr rest, int *ret);
int number_not_equal_common_(LocalRoot local, addr left, addr rest, int *ret);
int number_less_common_(LocalRoot local, addr left, addr rest, int *ret);
int number_greater_common_(LocalRoot local, addr left, addr rest, int *ret);
int number_less_equal_common_(LocalRoot local, addr left, addr rest, int *ret);
int number_greater_equal_common_(LocalRoot local, addr left, addr rest, int *ret);
int max_common_(LocalRoot local, addr left, addr rest, addr *ret);
int min_common_(LocalRoot local, addr left, addr rest, addr *ret);
int plus_common_(LocalRoot local, addr rest, addr *ret);
int minus_common_(LocalRoot local, addr left, addr rest, addr *ret);
int asterisk_common_(LocalRoot local, addr rest, addr *ret);
int slash_common_(LocalRoot local, addr left, addr rest, addr *ret);
int incf_common_(Execute ptr, addr form, addr env, addr *ret);
int decf_common_(Execute ptr, addr form, addr env, addr *ret);
int random_common_(Execute ptr, addr limit, addr state, addr *ret);
int conjugate_common_(addr var, addr *ret);
int realpart_common_(addr var, addr *ret);
int imagpart_common_(addr var, addr *ret);
int parse_integer_common_(LocalRoot local,
		addr var, addr rest, addr *ret1, addr *ret2);

#endif


/************************************************************
 *  cmpl.h
 ************************************************************/
#ifndef __CMPL_HEADER__
#define __CMPL_HEADER__


#define complexp _n(complexp)
#define setreal_complex _n(setreal_complex)
#define getreal_complex _n(getreal_complex)
#define setimag_complex _n(setimag_complex)
#define getimag_complex _n(getimag_complex)
#define settype_complex _n(settype_complex)
#define gettype_complex _n(gettype_complex)
#define getcomplex _n(getcomplex)
#define getcomplexr _n(getcomplexr)
#define make_complex_unsafe _n(make_complex_unsafe)
#define complex_alloc_ _n(complex_alloc_)
#define complex_local_ _n(complex_local_)
#define complex_heap_ _n(complex_heap_)
#define complex_single_alloc_ _n(complex_single_alloc_)
#define complex_single_local_ _n(complex_single_local_)
#define complex_single_heap_ _n(complex_single_heap_)
#define complex_double_alloc_ _n(complex_double_alloc_)
#define complex_double_local_ _n(complex_double_local_)
#define complex_double_heap_ _n(complex_double_heap_)
#define complex_long_alloc_ _n(complex_long_alloc_)
#define complex_long_local_ _n(complex_long_local_)
#define complex_long_heap_ _n(complex_long_heap_)
#define real_complex_single_heap_ _n(real_complex_single_heap_)
#define real_complex_double_heap_ _n(real_complex_double_heap_)
#define real_complex_long_heap_ _n(real_complex_long_heap_)
#define complex_copy_alloc_ _n(complex_copy_alloc_)
#define complex_copy_local_ _n(complex_copy_local_)
#define complex_copy_heap_ _n(complex_copy_heap_)
#define complex_result_local_ _n(complex_result_local_)
#define complex_result_heap_ _n(complex_result_heap_)
#define complex_throw_alloc_ _n(complex_throw_alloc_)
#define complex_throw_local_ _n(complex_throw_local_)
#define complex_throw_heap_ _n(complex_throw_heap_)
#define complex_force_heap_ _n(complex_force_heap_)
#define single_float_complex_ _n(single_float_complex_)
#define double_float_complex_ _n(double_float_complex_)
#define long_float_complex_ _n(long_float_complex_)
#define zerop_complex_ _n(zerop_complex_)
#define eql_complex _n(eql_complex)
#define equal_complex_ _n(equal_complex_)
#define equal_fc_number_ _n(equal_fc_number_)
#define equal_bc_number_ _n(equal_bc_number_)
#define equal_rc_number_ _n(equal_rc_number_)
#define equal_sc_number_ _n(equal_sc_number_)
#define equal_dc_number_ _n(equal_dc_number_)
#define equal_lc_number_ _n(equal_lc_number_)
#define sign_reverse_complex_common_ _n(sign_reverse_complex_common_)
#define abs_complex_common_ _n(abs_complex_common_)
#define signum_complex_common_ _n(signum_complex_common_)

enum ComplexType {
	ComplexType_single,
	ComplexType_double,
	ComplexType_long,
	ComplexType_rational,
	ComplexType_error
};

#define SetRealComplex_Low(x,y) SetArrayA2((x), 0, (y))
#define GetRealComplex_Low(x,y) GetArrayA2((x), 0, (y))
#define SetImagComplex_Low(x,y) SetArrayA2((x), 1, (y))
#define GetImagComplex_Low(x,y) GetArrayA2((x), 1, (y))
#define SetTypeComplex_Low(x,y) SetUser((x), (byte)(y))
#define GetTypeComplex_Low(x)   ((enum ComplexType)GetUser(x))


#ifdef LISP_DEBUG
#define SetRealComplex SetRealComplex_Low
#define GetRealComplex GetRealComplex_Low
#define SetImagComplex SetImagComplex_Low
#define GetImagComplex GetImagComplex_Low
#define SetTypeComplex SetTypeComplex_Low
#define GetTypeComplex GetTypeComplex_Low
#else
#define SetRealComplex setreal_complex
#define GetRealComplex getreal_complex
#define SetImagComplex setimag_complex
#define GetImagComplex getimag_complex
#define SetTypeComplex settype_complex
#define GetTypeComplex gettype_complex
#endif

int complexp(addr pos);
void setreal_complex(addr pos, addr value);
void getreal_complex(addr pos, addr *ret);
void setimag_complex(addr pos, addr value);
void getimag_complex(addr pos, addr *ret);
void settype_complex(addr pos, int value);
enum ComplexType gettype_complex(addr pos);
enum ComplexType getcomplex(addr pos, enum ComplexType *type, addr *real, addr *imag);
enum ComplexType getcomplexr(addr pos, addr *real, addr *imag);

void make_complex_unsafe(LocalRoot local, addr *ret, enum ComplexType type);
int complex_alloc_(LocalRoot local, addr *ret, addr real, addr imag);
int complex_local_(LocalRoot local, addr *ret, addr real, addr imag);
int complex_heap_(addr *ret, addr real, addr imag);

int complex_single_alloc_(LocalRoot local,
		addr *ret, single_float real, single_float imag);
int complex_single_local_(LocalRoot local,
		addr *ret, single_float real, single_float imag);
int complex_single_heap_(addr *ret,
		single_float real, single_float imag);
int complex_double_alloc_(LocalRoot local,
		addr *ret, double_float real, double_float imag);
int complex_double_local_(LocalRoot local,
		addr *ret, double_float real, double_float imag);
int complex_double_heap_(addr *ret,
		double_float real, double_float imag);
int complex_long_alloc_(LocalRoot local,
		addr *ret, long_float real, long_float imag);
int complex_long_local_(LocalRoot local,
		addr *ret, long_float real, long_float imag);
int complex_long_heap_(addr *ret,
		long_float real, long_float imag);

int real_complex_single_heap_(addr *ret, single_float real, single_float imag);
int real_complex_double_heap_(addr *ret, double_float real, double_float imag);
int real_complex_long_heap_(addr *ret, long_float real, long_float imag);

int complex_copy_alloc_(LocalRoot local, addr pos, addr *ret);
int complex_copy_local_(LocalRoot local, addr pos, addr *ret);
int complex_copy_heap_(addr pos, addr *ret);
int complex_result_local_(LocalRoot local, addr pos, addr *ret);
int complex_result_heap_(LocalRoot local, addr pos, addr *ret);
int complex_throw_alloc_(LocalRoot local, addr pos, addr *ret);
int complex_throw_local_(LocalRoot local, addr pos, addr *ret);
int complex_throw_heap_(addr pos, addr *ret);
int complex_force_heap_(addr *ret, addr real, addr imag, enum ComplexType type);

int single_float_complex_(addr pos, single_float *re, single_float *im);
int double_float_complex_(addr pos, double_float *re, double_float *im);
int long_float_complex_(addr pos, long_float *re, long_float *im);

int zerop_complex_(addr pos, int *ret);
int eql_complex(addr left, addr right);
int equal_complex_(LocalRoot local, addr left, addr right, int *ret);
int equal_fc_number_(addr left, addr right, int *ret);
int equal_bc_number_(addr left, addr right, int *ret);
int equal_rc_number_(LocalRoot local, addr left, addr right, int *ret);
int equal_sc_number_(LocalRoot local, addr left, addr right, int *ret);
int equal_dc_number_(LocalRoot local, addr left, addr right, int *ret);
int equal_lc_number_(LocalRoot local, addr left, addr right, int *ret);
#define equal_cf_number_(a,b,r) equal_fc_number_((b),(a),(r))
#define equal_cb_number_(a,b,r) equal_bc_number_((b),(a),(r))
#define equal_cr_number_(m,a,b,r) equal_rc_number_((m),(b),(a),(r))
#define equal_cs_number_(m,a,b,r) equal_sc_number_((m),(b),(a),(r))
#define equal_cd_number_(m,a,b,r) equal_dc_number_((m),(b),(a),(r))
#define equal_cl_number_(m,a,b,r) equal_lc_number_((m),(b),(a),(r))

int sign_reverse_complex_common_(addr pos, addr *ret);
int abs_complex_common_(addr pos, addr *ret);
int signum_complex_common_(addr pos, addr *ret);

#endif


/************************************************************
 *  integer_common.h
 ************************************************************/
#ifndef __INTEGER_COMMON_HEADER__
#define __INTEGER_COMMON_HEADER__


#define output_nosign_integer_ _n(output_nosign_integer_)
#define output_nosign_comma_integer_ _n(output_nosign_comma_integer_)
#define string_nosign_comma_integer_ _n(string_nosign_comma_integer_)
#define ash_integer_common_ _n(ash_integer_common_)
#define integer_length_value_ _n(integer_length_value_)
#define integer_length_common_ _n(integer_length_common_)
#define parse_integer_clang_ _n(parse_integer_clang_)

int output_nosign_integer_(LocalRoot local, addr stream,
		addr pos, unsigned base, int upperp);
int output_nosign_comma_integer_(LocalRoot local, addr stream,
		addr pos, unsigned base, int upperp, size_t range, unicode comma);
int string_nosign_comma_integer_(LocalRoot local, addr *ret, addr pos,
		unsigned base, int upperp, size_t range, unicode comma);

int ash_integer_common_(LocalRoot local, addr pos, addr count, addr *ret);
int integer_length_value_(addr pos, size_t *ret);
int integer_length_common_(addr pos, addr *ret);
int parse_integer_clang_(LocalRoot local,
		addr string, size_t start, size_t end, unsigned radix, int junk,
		addr *ret, addr *position);

#endif


/************************************************************
 *  real_equal.h
 ************************************************************/
#ifndef __REAL_EQUAL_HEADER__
#define __REAL_EQUAL_HEADER__


#define plusp_realp _n(plusp_realp)
#define plusp_real_ _n(plusp_real_)
#define minusp_realp _n(minusp_realp)
#define minusp_real_ _n(minusp_real_)
#define zerop_real_ _n(zerop_real_)
#define equal_fixnum_real_ _n(equal_fixnum_real_)
#define equal_bignum_real_ _n(equal_bignum_real_)
#define equal_ratio_real_ _n(equal_ratio_real_)
#define equal_single_float_real_ _n(equal_single_float_real_)
#define equal_double_float_real_ _n(equal_double_float_real_)
#define equal_long_float_real_ _n(equal_long_float_real_)
#define equal_real_ _n(equal_real_)
#define not_equal_real_ _n(not_equal_real_)
#define compare_ratio_real_ _n(compare_ratio_real_)
#define compare_real_ _n(compare_real_)
#define less_real_ _n(less_real_)
#define less_equal_real_ _n(less_equal_real_)
#define greater_real_ _n(greater_real_)
#define greater_equal_real_ _n(greater_equal_real_)
#define plusp_real_debug _n(plusp_real_debug)
#define minusp_real_debug _n(minusp_real_debug)
#define zerop_real_debug _n(zerop_real_debug)
#define equal_fixnum_real_debug _n(equal_fixnum_real_debug)
#define equal_bignum_real_debug _n(equal_bignum_real_debug)
#define equal_ratio_real_debug _n(equal_ratio_real_debug)
#define equal_single_float_real_debug _n(equal_single_float_real_debug)
#define equal_double_float_real_debug _n(equal_double_float_real_debug)
#define equal_long_float_real_debug _n(equal_long_float_real_debug)
#define equal_real_debug _n(equal_real_debug)
#define less_real_debug _n(less_real_debug)
#define less_equal_real_debug _n(less_equal_real_debug)
#define greater_real_debug _n(greater_real_debug)
#define greater_equal_real_debug _n(greater_equal_real_debug)

int plusp_realp(addr pos, int *ret);
int plusp_real_(addr pos, int *ret);
int minusp_realp(addr pos, int *ret);
int minusp_real_(addr pos, int *ret);
int zerop_real_(addr pos, int *ret);
int equal_fixnum_real_(addr left, addr right, int *ret);
int equal_bignum_real_(addr left, addr right, int *ret);
int equal_ratio_real_(LocalRoot local, addr left, addr right, int *ret);
int equal_single_float_real_(LocalRoot local, addr left, addr right, int *ret);
int equal_double_float_real_(LocalRoot local, addr left, addr right, int *ret);
int equal_long_float_real_(LocalRoot local, addr left, addr right, int *ret);
int equal_real_(LocalRoot local, addr left, addr right, int *ret);
int not_equal_real_(LocalRoot local, addr left, addr right, int *ret);
int compare_ratio_real_(LocalRoot local, addr left, addr right, int *ret);
int compare_real_(LocalRoot local, addr left, addr right, int *ret);
int less_real_(LocalRoot local, addr left, addr right, int *ret);
int less_equal_real_(LocalRoot local, addr left, addr right, int *ret);
int greater_real_(LocalRoot local, addr left, addr right, int *ret);
int greater_equal_real_(LocalRoot local, addr left, addr right, int *ret);

int plusp_real_debug(addr pos);
int minusp_real_debug(addr pos);
int zerop_real_debug(addr pos);
int equal_fixnum_real_debug(addr left, addr right);
int equal_bignum_real_debug(addr left, addr right);
int equal_ratio_real_debug(LocalRoot local, addr left, addr right);
int equal_single_float_real_debug(LocalRoot local, addr left, addr right);
int equal_double_float_real_debug(LocalRoot local, addr left, addr right);
int equal_long_float_real_debug(LocalRoot local, addr left, addr right);
int equal_real_debug(LocalRoot local, addr left, addr right);
int less_real_debug(LocalRoot local, addr left, addr right);
int less_equal_real_debug(LocalRoot local, addr left, addr right);
int greater_real_debug(LocalRoot local, addr left, addr right);
int greater_equal_real_debug(LocalRoot local, addr left, addr right);

#endif


/************************************************************
 *  number_equal.h
 ************************************************************/
#ifndef __NUMBER_EQUAL_HEADER__
#define __NUMBER_EQUAL_HEADER__


#define zerop_numberp _n(zerop_numberp)
#define zerop_number_ _n(zerop_number_)
#define equal_number_ _n(equal_number_)
#define not_equal_number_ _n(not_equal_number_)

#define plusp_number_ plusp_real_
#define minusp_number_ minusp_real_
int zerop_numberp(addr left, int *ret);
int zerop_number_(addr left, int *ret);
int equal_number_(LocalRoot local, addr left, addr right, int *ret);
int not_equal_number_(LocalRoot local, addr left, addr right, int *ret);

#define compare_number_ compare_real_
#define less_number_ less_real_
#define greater_number_ greater_real_
#define less_equal_number_ less_equal_real_
#define greater_equal_number_ greater_equal_real_

#endif


/************************************************************
 *  number_multi.h
 ************************************************************/
#ifndef __NUMBER_MULTI_HEADER__
#define __NUMBER_MULTI_HEADER__


#define multi_number_heap_ _n(multi_number_heap_)
#define inverse_number_heap_ _n(inverse_number_heap_)
#define div_number_heap_ _n(div_number_heap_)

int multi_number_heap_(LocalRoot local, addr left, addr right, addr *ret);
int inverse_number_heap_(LocalRoot local, addr left, addr *ret);
int div_number_heap_(LocalRoot local, addr left, addr right, addr *ret);

#endif


/************************************************************
 *  number_random.h
 ************************************************************/
#ifndef __NUMBER_RANDOM_HEADER__
#define __NUMBER_RANDOM_HEADER__


#define random_number_common_ _n(random_number_common_)
int random_number_common_(LocalRoot local, addr limit, addr state, addr *ret);

#endif


/************************************************************
 *  number_plus.h
 ************************************************************/
#ifndef __NUMBER_PLUS_HEADER__
#define __NUMBER_PLUS_HEADER__


#define oneplus_number_common_ _n(oneplus_number_common_)
#define oneminus_number_common_ _n(oneminus_number_common_)
#define sign_reverse_number_common_ _n(sign_reverse_number_common_)
#define plus_number_heap_ _n(plus_number_heap_)
#define minus_number_heap_ _n(minus_number_heap_)

int oneplus_number_common_(LocalRoot local, addr value, addr *ret);
int oneminus_number_common_(LocalRoot local, addr value, addr *ret);
int sign_reverse_number_common_(addr left, addr *ret);

int plus_number_heap_(LocalRoot local, addr left, addr right, addr *ret);
int minus_number_heap_(LocalRoot local, addr left, addr right, addr *ret);

#endif


/************************************************************
 *  real_plus.h
 ************************************************************/
#ifndef __REAL_PLUS_HEADER__
#define __REAL_PLUS_HEADER__


#define sign_reverse_real_common_ _n(sign_reverse_real_common_)
#define sign_reverse_real_local_ _n(sign_reverse_real_local_)
#define oneplus_real_common_ _n(oneplus_real_common_)
#define oneminus_real_common_ _n(oneminus_real_common_)
#define plus_fixnum_real_common_ _n(plus_fixnum_real_common_)
#define plus_bignum_real_common_ _n(plus_bignum_real_common_)
#define plus_ratio_real_common_ _n(plus_ratio_real_common_)
#define plus_single_real_common_ _n(plus_single_real_common_)
#define plus_double_real_common_ _n(plus_double_real_common_)
#define plus_long_real_common_ _n(plus_long_real_common_)
#define plus_real_common_ _n(plus_real_common_)
#define plus_real_local_ _n(plus_real_local_)
#define minus_fixnum_real_common_ _n(minus_fixnum_real_common_)
#define minus_real_fixnum_common_ _n(minus_real_fixnum_common_)
#define minus_bignum_real_common_ _n(minus_bignum_real_common_)
#define minus_real_bignum_common_ _n(minus_real_bignum_common_)
#define minus_ratio_real_common_ _n(minus_ratio_real_common_)
#define minus_real_ratio_common_ _n(minus_real_ratio_common_)
#define minus_single_real_common_ _n(minus_single_real_common_)
#define minus_real_single_common_ _n(minus_real_single_common_)
#define minus_double_real_common_ _n(minus_double_real_common_)
#define minus_real_double_common_ _n(minus_real_double_common_)
#define minus_long_real_common_ _n(minus_long_real_common_)
#define minus_real_long_common_ _n(minus_real_long_common_)
#define minus_real_common_ _n(minus_real_common_)
#define minus_real_local_ _n(minus_real_local_)

int sign_reverse_real_common_(addr pos, addr *ret);
int sign_reverse_real_local_(LocalRoot local, addr pos, addr *ret);

int oneplus_real_common_(LocalRoot local, addr value, addr *ret);
int oneminus_real_common_(LocalRoot local, addr value, addr *ret);

int plus_fixnum_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int plus_bignum_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int plus_ratio_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int plus_single_real_common_(addr left, addr right, addr *ret);
int plus_double_real_common_(addr left, addr right, addr *ret);
int plus_long_real_common_(addr left, addr right, addr *ret);
int plus_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int plus_real_local_(LocalRoot local, addr left, addr right, addr *ret);

int minus_fixnum_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_real_fixnum_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_bignum_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_real_bignum_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_ratio_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_real_ratio_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_single_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_real_single_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_double_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_real_double_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_long_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_real_long_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_real_local_(LocalRoot local, addr left, addr right, addr *ret);

#endif


/************************************************************
 *  call_objects.h
 ************************************************************/
#ifndef __CALL_OBJECTS_HEADER__
#define __CALL_OBJECTS_HEADER__


#define defclass_common_ _n(defclass_common_)
#define define_condition_common_ _n(define_condition_common_)
#define find_class_common_ _n(find_class_common_)
#define setf_find_class_common _n(setf_find_class_common)
#define with_accessors_common_ _n(with_accessors_common_)
#define with_slots_common_ _n(with_slots_common_)
#define defgeneric_common_ _n(defgeneric_common_)
#define defmethod_common_ _n(defmethod_common_)
#define define_method_combination_common_ _n(define_method_combination_common_)
#define make_load_form_saving_slots_common_ _n(make_load_form_saving_slots_common_)
#define set_slots_syscall_ _n(set_slots_syscall_)

int defclass_common_(Execute ptr, addr form, addr env, addr *ret);
int define_condition_common_(Execute ptr, addr form, addr env, addr *ret);
int find_class_common_(addr pos, int errorp, addr env, addr *ret);
void setf_find_class_common(addr pos, addr name, addr env);
int with_accessors_common_(Execute ptr, addr form, addr env, addr *ret);
int with_slots_common_(Execute ptr, addr form, addr env, addr *ret);

int defgeneric_common_(Execute ptr, addr form, addr env, addr *ret);
int defmethod_common_(Execute ptr, addr form, addr env, addr *ret);
int define_method_combination_common_(
		LocalRoot local, addr form, addr env, addr *ret);
int make_load_form_saving_slots_common_(Execute ptr,
		addr var, addr list, addr env, addr *ret1, addr *ret2);
int set_slots_syscall_(addr var, addr slots, addr values);

#endif


/************************************************************
 *  clos_combination.h
 ************************************************************/
#ifndef __CLOS_COMBINATION_HEADER__
#define __CLOS_COMBINATION_HEADER__


#define stdget_longcomb_name_ _n(stdget_longcomb_name_)
#define stdset_longcomb_name_ _n(stdset_longcomb_name_)
#define stdget_longcomb_document_ _n(stdget_longcomb_document_)
#define stdset_longcomb_document_ _n(stdset_longcomb_document_)
#define stdget_longcomb_lambda_list_ _n(stdget_longcomb_lambda_list_)
#define stdset_longcomb_lambda_list_ _n(stdset_longcomb_lambda_list_)
#define stdget_longcomb_qualifiers_ _n(stdget_longcomb_qualifiers_)
#define stdset_longcomb_qualifiers_ _n(stdset_longcomb_qualifiers_)
#define stdget_longcomb_arguments_ _n(stdget_longcomb_arguments_)
#define stdset_longcomb_arguments_ _n(stdset_longcomb_arguments_)
#define stdget_longcomb_generic_ _n(stdget_longcomb_generic_)
#define stdset_longcomb_generic_ _n(stdset_longcomb_generic_)
#define stdget_longcomb_form_ _n(stdget_longcomb_form_)
#define stdset_longcomb_form_ _n(stdset_longcomb_form_)
#define stdget_longcomb_function_ _n(stdget_longcomb_function_)
#define stdset_longcomb_function_ _n(stdset_longcomb_function_)
#define stdget_longcomb_binding_ _n(stdget_longcomb_binding_)
#define stdset_longcomb_binding_ _n(stdset_longcomb_binding_)
#define stdget_shortcomb_name_ _n(stdget_shortcomb_name_)
#define stdset_shortcomb_name_ _n(stdset_shortcomb_name_)
#define stdget_shortcomb_document_ _n(stdget_shortcomb_document_)
#define stdset_shortcomb_document_ _n(stdset_shortcomb_document_)
#define stdget_shortcomb_identity_ _n(stdget_shortcomb_identity_)
#define stdset_shortcomb_identity_ _n(stdset_shortcomb_identity_)
#define stdget_shortcomb_operator_ _n(stdget_shortcomb_operator_)
#define stdset_shortcomb_operator_ _n(stdset_shortcomb_operator_)
#define stdget_shortcomb_order_ _n(stdget_shortcomb_order_)
#define stdset_shortcomb_order_ _n(stdset_shortcomb_order_)
#define stdget_longdef_name_ _n(stdget_longdef_name_)
#define stdset_longdef_name_ _n(stdset_longdef_name_)
#define stdget_longdef_document_ _n(stdget_longdef_document_)
#define stdset_longdef_document_ _n(stdset_longdef_document_)
#define stdget_longdef_lambda_list_ _n(stdget_longdef_lambda_list_)
#define stdset_longdef_lambda_list_ _n(stdset_longdef_lambda_list_)
#define stdget_longdef_qualifiers_ _n(stdget_longdef_qualifiers_)
#define stdset_longdef_qualifiers_ _n(stdset_longdef_qualifiers_)
#define stdget_longdef_arguments_ _n(stdget_longdef_arguments_)
#define stdset_longdef_arguments_ _n(stdset_longdef_arguments_)
#define stdget_longdef_generic_ _n(stdget_longdef_generic_)
#define stdset_longdef_generic_ _n(stdset_longdef_generic_)
#define stdget_longdef_form_ _n(stdget_longdef_form_)
#define stdset_longdef_form_ _n(stdset_longdef_form_)
#define stdget_shortdef_name_ _n(stdget_shortdef_name_)
#define stdset_shortdef_name_ _n(stdset_shortdef_name_)
#define stdget_shortdef_document_ _n(stdget_shortdef_document_)
#define stdset_shortdef_document_ _n(stdset_shortdef_document_)
#define stdget_shortdef_identity_ _n(stdget_shortdef_identity_)
#define stdset_shortdef_identity_ _n(stdset_shortdef_identity_)
#define stdget_shortdef_operator_ _n(stdget_shortdef_operator_)
#define stdset_shortdef_operator_ _n(stdset_shortdef_operator_)
#define check_qualifiers_equal_ _n(check_qualifiers_equal_)
#define method_combination_qualifiers_count_ _n(method_combination_qualifiers_count_)
#define qualifiers_position_nil_ _n(qualifiers_position_nil_)
#define qualifiers_position_ _n(qualifiers_position_)
#define build_clos_combination _n(build_clos_combination)
#define mop_find_method_combination_ _n(mop_find_method_combination_)
#define clos_find_method_combination_ _n(clos_find_method_combination_)
#define ensure_define_combination_short_common_ _n(ensure_define_combination_short_common_)
#define ensure_define_combination_long_common_ _n(ensure_define_combination_long_common_)
#define comb_longmacro_ _n(comb_longmacro_)
#define comb_longform_ _n(comb_longform_)
#define comb_shortform_ _n(comb_shortform_)

/* access */
int stdget_longcomb_name_(addr pos, addr *ret);
int stdset_longcomb_name_(addr pos, addr value);
int stdget_longcomb_document_(addr pos, addr *ret);
int stdset_longcomb_document_(addr pos, addr value);
int stdget_longcomb_lambda_list_(addr pos, addr *ret);
int stdset_longcomb_lambda_list_(addr pos, addr value);
int stdget_longcomb_qualifiers_(addr pos, addr *ret);
int stdset_longcomb_qualifiers_(addr pos, addr value);
int stdget_longcomb_arguments_(addr pos, addr *ret);
int stdset_longcomb_arguments_(addr pos, addr value);
int stdget_longcomb_generic_(addr pos, addr *ret);
int stdset_longcomb_generic_(addr pos, addr value);
int stdget_longcomb_form_(addr pos, addr *ret);
int stdset_longcomb_form_(addr pos, addr value);
int stdget_longcomb_function_(addr pos, addr *ret);
int stdset_longcomb_function_(addr pos, addr value);
int stdget_longcomb_binding_(addr pos, addr *ret);
int stdset_longcomb_binding_(addr pos, addr value);

int stdget_shortcomb_name_(addr pos, addr *ret);
int stdset_shortcomb_name_(addr pos, addr value);
int stdget_shortcomb_document_(addr pos, addr *ret);
int stdset_shortcomb_document_(addr pos, addr value);
int stdget_shortcomb_identity_(addr pos, addr *ret);
int stdset_shortcomb_identity_(addr pos, addr value);
int stdget_shortcomb_operator_(addr pos, addr *ret);
int stdset_shortcomb_operator_(addr pos, addr value);
int stdget_shortcomb_order_(addr pos, addr *ret);
int stdset_shortcomb_order_(addr pos, addr value);

int stdget_longdef_name_(addr pos, addr *ret);
int stdset_longdef_name_(addr pos, addr value);
int stdget_longdef_document_(addr pos, addr *ret);
int stdset_longdef_document_(addr pos, addr value);
int stdget_longdef_lambda_list_(addr pos, addr *ret);
int stdset_longdef_lambda_list_(addr pos, addr value);
int stdget_longdef_qualifiers_(addr pos, addr *ret);
int stdset_longdef_qualifiers_(addr pos, addr value);
int stdget_longdef_arguments_(addr pos, addr *ret);
int stdset_longdef_arguments_(addr pos, addr value);
int stdget_longdef_generic_(addr pos, addr *ret);
int stdset_longdef_generic_(addr pos, addr value);
int stdget_longdef_form_(addr pos, addr *ret);
int stdset_longdef_form_(addr pos, addr value);

int stdget_shortdef_name_(addr pos, addr *ret);
int stdset_shortdef_name_(addr pos, addr value);
int stdget_shortdef_document_(addr pos, addr *ret);
int stdset_shortdef_document_(addr pos, addr value);
int stdget_shortdef_identity_(addr pos, addr *ret);
int stdset_shortdef_identity_(addr pos, addr value);
int stdget_shortdef_operator_(addr pos, addr *ret);
int stdset_shortdef_operator_(addr pos, addr value);

/* control */
int check_qualifiers_equal_(Execute ptr, addr comb, addr qua, int *ret);
int method_combination_qualifiers_count_(addr comb, size_t *ret);
int qualifiers_position_nil_(Execute ptr, addr qua, addr comb,
		size_t *rsize, int *ret);
int qualifiers_position_(Execute ptr, addr qua, addr comb, size_t *rsize);
void build_clos_combination(void);

/* generic-function */
int mop_find_method_combination_(addr symbol, addr list, addr *ret);
int clos_find_method_combination_(addr list, addr *ret);
int ensure_define_combination_short_common_(
		addr name, addr doc, addr ident, addr oper);
int ensure_define_combination_long_common_(addr name, addr lambda, addr spec,
		addr args, addr gen, addr doc, addr form, addr decl);

/* long form */
int comb_longmacro_(addr *ret,
		addr lambda, addr spec, addr args, addr gen, addr decl, addr form);
int comb_longform_(Execute ptr, addr *ret, addr gen, addr comb, addr data);
int comb_shortform_(Execute ptr, addr *ret, addr gen, addr comb, addr data);

#endif


/************************************************************
 *  clos_slot.h
 ************************************************************/
#ifndef __CLOS_SLOT_HEADER__
#define __CLOS_SLOT_HEADER__


struct slot_struct {
	size_t location, access;
};

#define struct_slot _n(struct_slot)
#define getname_slot _n(getname_slot)
#define setname_slot _n(setname_slot)
#define gettype_slot _n(gettype_slot)
#define settype_slot _n(settype_slot)
#define getargs_slot _n(getargs_slot)
#define setargs_slot _n(setargs_slot)
#define getform_slot _n(getform_slot)
#define setform_slot _n(setform_slot)
#define getfunction_slot _n(getfunction_slot)
#define setfunction_slot _n(setfunction_slot)
#define getreaders_slot _n(getreaders_slot)
#define setreaders_slot _n(setreaders_slot)
#define getwriters_slot _n(getwriters_slot)
#define setwriters_slot _n(setwriters_slot)
#define getdocument_slot _n(getdocument_slot)
#define setdocument_slot _n(setdocument_slot)
#define getclass_slot _n(getclass_slot)
#define setclass_slot _n(setclass_slot)
#define getreadonly_slot _n(getreadonly_slot)
#define setreadonly_slot _n(setreadonly_slot)
#define getallocation_slot _n(getallocation_slot)
#define setallocation_slot _n(setallocation_slot)
#define getlocation_slot _n(getlocation_slot)
#define setlocation_slot _n(setlocation_slot)
#define getaccess_slot _n(getaccess_slot)
#define setaccess_slot _n(setaccess_slot)

#define slotp _n(slotp)
#define slot_alloc _n(slot_alloc)
#define slot_local _n(slot_local)
#define slot_heap _n(slot_heap)
#define slot_copy_alloc _n(slot_copy_alloc)
#define slot_copy_local _n(slot_copy_local)
#define slot_copy_heap _n(slot_copy_heap)

#define PtrSlotStruct_Low(x)			PtrBodySSa((x),SLOT_INDEX_SIZE)
#define SlotStruct_Low(x)				((struct slot_struct *)PtrSlotStruct_Low(x))
#define GetNameSlot_Low(x,y)			GetArraySS((x),SLOT_INDEX_NAME,(y))
#define SetNameSlot_Low(x,y)			SetArraySS((x),SLOT_INDEX_NAME,(y))
#define GetTypeSlot_Low(x,y)			GetArraySS((x),SLOT_INDEX_TYPE,(y))
#define SetTypeSlot_Low(x,y)			SetArraySS((x),SLOT_INDEX_TYPE,(y))
#define GetArgsSlot_Low(x,y)			GetArraySS((x),SLOT_INDEX_INITARGS,(y))
#define SetArgsSlot_Low(x,y)			SetArraySS((x),SLOT_INDEX_INITARGS,(y))
#define GetFormSlot_Low(x,y)			GetArraySS((x),SLOT_INDEX_INITFORM,(y))
#define SetFormSlot_Low(x,y)			SetArraySS((x),SLOT_INDEX_INITFORM,(y))
#define GetFunctionSlot_Low(x,y)		GetArraySS((x),SLOT_INDEX_INITFUNCTION,(y))
#define SetFunctionSlot_Low(x,y)		SetArraySS((x),SLOT_INDEX_INITFUNCTION,(y))
#define GetReadersSlot_Low(x,y)			GetArraySS((x),SLOT_INDEX_READERS,(y))
#define SetReadersSlot_Low(x,y)			SetArraySS((x),SLOT_INDEX_READERS,(y))
#define GetWritersSlot_Low(x,y)			GetArraySS((x),SLOT_INDEX_WRITERS,(y))
#define SetWritersSlot_Low(x,y)			SetArraySS((x),SLOT_INDEX_WRITERS,(y))
#define GetDocumentSlot_Low(x,y)		GetArraySS((x),SLOT_INDEX_DOCUMENT,(y))
#define SetDocumentSlot_Low(x,y)		SetArraySS((x),SLOT_INDEX_DOCUMENT,(y))
#define GetClassSlot_Low(x,y)			GetArraySS((x),SLOT_INDEX_CLASS,(y))
#define SetClassSlot_Low(x,y)			SetArraySS((x),SLOT_INDEX_CLASS,(y))
#define GetReadOnlySlot_Low(x,y)		GetArraySS((x),SLOT_INDEX_READONLY,(y))
#define SetReadOnlySlot_Low(x,y)		SetArraySS((x),SLOT_INDEX_READONLY,(y))
#define GetAllocationSlot_Low(x,y)		(*(y) = GetUser((x)))
#define SetAllocationSlot_Low(x,y)		(SetUser((x), (y) != 0))
#define GetLocationSlot_Low(x,y)		(*(y) = SlotStruct_Low(x)->location)
#define SetLocationSlot_Low(x,y)		(SlotStruct_Low(x)->location = (y))
#define GetAccessSlot_Low(x,y)			(*(y) = SlotStruct_Low(x)->access)
#define SetAccessSlot_Low(x,y)			(SlotStruct_Low(x)->access = (y))

#ifdef LISP_DEBUG
#define SlotStruct				struct_slot
#define GetNameSlot				getname_slot
#define SetNameSlot				setname_slot
#define GetTypeSlot				gettype_slot
#define SetTypeSlot				settype_slot
#define GetArgsSlot				getargs_slot
#define SetArgsSlot				setargs_slot
#define GetFormSlot				getform_slot
#define SetFormSlot				setform_slot
#define GetFunctionSlot			getfunction_slot
#define SetFunctionSlot			setfunction_slot
#define GetReadersSlot			getreaders_slot
#define SetReadersSlot			setreaders_slot
#define GetWritersSlot			getwriters_slot
#define SetWritersSlot			setwriters_slot
#define GetDocumentSlot			getdocument_slot
#define SetDocumentSlot			setdocument_slot
#define GetClassSlot			getclass_slot
#define SetClassSlot			setclass_slot
#define GetReadOnlySlot			getreadonly_slot
#define SetReadOnlySlot			setreadonly_slot
#define GetAllocationSlot		getallocation_slot
#define SetAllocationSlot		setallocation_slot
#define GetLocationSlot			getlocation_slot
#define SetLocationSlot			setlocation_slot
#define GetAccessSlot			getaccess_slot
#define SetAccessSlot			setaccess_slot
#else
#define SlotStruct				SlotStruct_Low
#define GetNameSlot				GetNameSlot_Low
#define SetNameSlot				SetNameSlot_Low
#define GetTypeSlot				GetTypeSlot_Low
#define SetTypeSlot				SetTypeSlot_Low
#define GetArgsSlot				GetArgsSlot_Low
#define SetArgsSlot				SetArgsSlot_Low
#define GetFormSlot				GetFormSlot_Low
#define SetFormSlot				SetFormSlot_Low
#define GetFunctionSlot			GetFunctionSlot_Low
#define SetFunctionSlot			SetFunctionSlot_Low
#define GetReadersSlot			GetReadersSlot_Low
#define SetReadersSlot			SetReadersSlot_Low
#define GetWritersSlot			GetWritersSlot_Low
#define SetWritersSlot			SetWritersSlot_Low
#define GetDocumentSlot			GetDocumentSlot_Low
#define SetDocumentSlot			SetDocumentSlot_Low
#define GetClassSlot			GetClassSlot_Low
#define SetClassSlot			SetClassSlot_Low
#define GetReadOnlySlot			GetReadOnlySlot_Low
#define SetReadOnlySlot			SetReadOnlySlot_Low
#define GetAllocationSlot		GetAllocationSlot_Low
#define SetAllocationSlot		SetAllocationSlot_Low
#define GetLocationSlot			GetLocationSlot_Low
#define SetLocationSlot			SetLocationSlot_Low
#define GetAccessSlot			GetAccessSlot_Low
#define SetAccessSlot			SetAccessSlot_Low
#endif

struct slot_struct *struct_slot(addr pos);
void getname_slot(addr pos, addr *ret);
void setname_slot(addr pos, addr value);
void gettype_slot(addr pos, addr *ret);
void settype_slot(addr pos, addr value);
void getargs_slot(addr pos, addr *ret);
void setargs_slot(addr pos, addr value);
void getform_slot(addr pos, addr *ret);
void setform_slot(addr pos, addr value);
void getfunction_slot(addr pos, addr *ret);
void setfunction_slot(addr pos, addr value);
void getreaders_slot(addr pos, addr *ret);
void setreaders_slot(addr pos, addr value);
void getwriters_slot(addr pos, addr *ret);
void setwriters_slot(addr pos, addr value);
void getdocument_slot(addr pos, addr *ret);
void setdocument_slot(addr pos, addr value);
void getclass_slot(addr pos, addr *ret);
void setclass_slot(addr pos, addr value);
void getreadonly_slot(addr pos, addr *ret);
void setreadonly_slot(addr pos, addr value);
void getallocation_slot(addr pos, int *ret);
void setallocation_slot(addr pos, int value);
void getlocation_slot(addr pos, size_t *ret);
void setlocation_slot(addr pos, size_t value);
void getaccess_slot(addr pos, size_t *ret);
void setaccess_slot(addr pos, size_t value);

int slotp(addr pos);
void slot_alloc(LocalRoot local, addr *ret);
void slot_local(LocalRoot local, addr *ret);
void slot_heap(addr *ret);
void slot_copy_alloc(LocalRoot local, addr *ret, addr slot);
void slot_copy_local(LocalRoot local, addr *ret, addr slot);
void slot_copy_heap(addr *ret, addr slot);

#endif


/************************************************************
 *  call_packages.h
 ************************************************************/
#ifndef __CALL_PACKAGES_HEADER__
#define __CALL_PACKAGES_HEADER__


#define export_common_ _n(export_common_)
#define find_symbol_common_ _n(find_symbol_common_)
#define import_common_ _n(import_common_)
#define rename_package_common_ _n(rename_package_common_)
#define shadow_common_ _n(shadow_common_)
#define shadowing_import_common_ _n(shadowing_import_common_)
#define make_package_common_ _n(make_package_common_)
#define with_package_iterator_common_ _n(with_package_iterator_common_)
#define unexport_common_ _n(unexport_common_)
#define unintern_common_ _n(unintern_common_)
#define in_package_common_ _n(in_package_common_)
#define unuse_package_common_ _n(unuse_package_common_)
#define use_package_common_ _n(use_package_common_)
#define do_symbols_common_ _n(do_symbols_common_)
#define do_external_symbols_common_ _n(do_external_symbols_common_)
#define do_all_symbols_common_ _n(do_all_symbols_common_)
#define intern_common_ _n(intern_common_)

int export_common_(Execute ptr, addr symbols, addr pg);
int find_symbol_common_(Execute ptr, addr name, addr pg, addr *ret, addr *state);
int import_common_(Execute ptr, addr symbols, addr pg);
int rename_package_common_(Execute ptr, addr pg, addr name, addr names, addr *ret);
int shadow_common_(Execute ptr, addr symbols, addr pg);
int shadowing_import_common_(Execute ptr, addr symbols, addr pg);
int make_package_common_(Execute ptr, addr name, addr rest, addr *ret);
int with_package_iterator_common_(Execute ptr, addr form, addr env, addr *ret);
int unexport_common_(Execute ptr, addr symbols, addr pg);
int unintern_common_(Execute ptr, addr symbol, addr pg, addr *ret);
int in_package_common_(Execute ptr, addr form, addr env, addr *ret);
int unuse_package_common_(Execute ptr, addr unuse, addr pg);
int use_package_common_(Execute ptr, addr use, addr pg);
int do_symbols_common_(addr form, addr env, addr *ret);
int do_external_symbols_common_(addr form, addr env, addr *ret);
int do_all_symbols_common_(addr form, addr env, addr *ret);
int intern_common_(Execute ptr, addr name, addr pg, addr *ret, addr *sec);

#endif


/************************************************************
 *  eval_value.h
 ************************************************************/
#ifndef __EVAL_VALUE_HEADER__
#define __EVAL_VALUE_HEADER__


#define get_toplevel_eval_ _n(get_toplevel_eval_)
#define set_toplevel_eval _n(set_toplevel_eval)
#define push_toplevel_eval _n(push_toplevel_eval)
#define toplevelp_eval _n(toplevelp_eval)
#define get_compile_time_eval_ _n(get_compile_time_eval_)
#define set_compile_time_eval _n(set_compile_time_eval)
#define push_compile_time_eval _n(push_compile_time_eval)
#define compile_time_too_eval_ _n(compile_time_too_eval_)
#define get_compile_toplevel_eval_ _n(get_compile_toplevel_eval_)
#define set_compile_toplevel_eval _n(set_compile_toplevel_eval)
#define push_compile_toplevel_eval _n(push_compile_toplevel_eval)
#define compile_toplevel_p_eval_ _n(compile_toplevel_p_eval_)
#define get_load_toplevel_eval_ _n(get_load_toplevel_eval_)
#define set_load_toplevel_eval _n(set_load_toplevel_eval)
#define push_load_toplevel_eval _n(push_load_toplevel_eval)
#define load_toplevel_p_eval_ _n(load_toplevel_p_eval_)
#define get_execute_eval_ _n(get_execute_eval_)
#define set_execute_eval _n(set_execute_eval)
#define push_execute_eval _n(push_execute_eval)
#define executep_eval_ _n(executep_eval_)
#define push_parse_declare _n(push_parse_declare)
#define get_parse_declare_ _n(get_parse_declare_)
#define get_nocheck_parse_declare _n(get_nocheck_parse_declare)
#define set_parse_declare _n(set_parse_declare)
#define add_parse_declare_ _n(add_parse_declare_)
#define push_enable_compiler_macro _n(push_enable_compiler_macro)
#define enable_compiler_macro_p _n(enable_compiler_macro_p)

int get_toplevel_eval_(Execute ptr, addr *ret);
void set_toplevel_eval(Execute ptr, addr value);
void push_toplevel_eval(Execute ptr, addr value);
int toplevelp_eval(Execute ptr);

int get_compile_time_eval_(Execute ptr, addr *ret);
void set_compile_time_eval(Execute ptr, addr value);
void push_compile_time_eval(Execute ptr, addr value);
int compile_time_too_eval_(Execute ptr, int *ret);

int get_compile_toplevel_eval_(Execute ptr, addr *ret);
void set_compile_toplevel_eval(Execute ptr, addr value);
void push_compile_toplevel_eval(Execute ptr, addr value);
int compile_toplevel_p_eval_(Execute ptr, int *ret);

int get_load_toplevel_eval_(Execute ptr, addr *ret);
void set_load_toplevel_eval(Execute ptr, addr value);
void push_load_toplevel_eval(Execute ptr, addr value);
int load_toplevel_p_eval_(Execute ptr, int *ret);

int get_execute_eval_(Execute ptr, addr *ret);
void set_execute_eval(Execute ptr, addr value);
void push_execute_eval(Execute ptr, addr value);
int executep_eval_(Execute ptr, int *ret);

void push_parse_declare(Execute ptr, addr value);
int get_parse_declare_(Execute ptr, addr *ret);
void get_nocheck_parse_declare(Execute ptr, addr *ret);
void set_parse_declare(Execute ptr, addr value);
int add_parse_declare_(Execute ptr, addr value, addr *ret);

void push_enable_compiler_macro(Execute ptr, addr value);
int enable_compiler_macro_p(Execute ptr);

#endif


/************************************************************
 *  package_designator.h
 ************************************************************/
#ifndef __PACKAGE_DESIGNATOR_HEADER__
#define __PACKAGE_DESIGNATOR_HEADER__


#define package_designator_p _n(package_designator_p)
#define package_designator_equal_ _n(package_designator_equal_)
#define package_designator_ _n(package_designator_)
#define package_designator_update_p_ _n(package_designator_update_p_)
#define init_package_designator _n(init_package_designator)

int package_designator_p(addr pos);
int package_designator_equal_(addr left, addr right, int *ret);
int package_designator_(addr pos, addr *ret);
int package_designator_update_p_(addr pos, addr *ret);
void init_package_designator(void);

#endif


/************************************************************
 *  package_export.h
 ************************************************************/
#ifndef __PACKAGE_EXPORT_HEADER__
#define __PACKAGE_EXPORT_HEADER__


#define symbol_export_package_ _n(symbol_export_package_)
#define export_package_ _n(export_package_)
#define unexport_package_ _n(unexport_package_)

int symbol_export_package_(addr package, addr symbol);
int export_package_(addr package, addr pos);
int unexport_package_(addr package, addr pos);

#endif


/************************************************************
 *  package_import.h
 ************************************************************/
#ifndef __PACKAGE_IMPORT_HEADER__
#define __PACKAGE_IMPORT_HEADER__


#define import_bitpackage_ _n(import_bitpackage_)
#define import_package_ _n(import_package_)

int import_bitpackage_(addr package, addr symbol, addr *value, int *ret);
int import_package_(addr package, addr pos);

#endif


/************************************************************
 *  package_make.h
 ************************************************************/
#ifndef __PACKAGE_MAKE_HEADER__
#define __PACKAGE_MAKE_HEADER__


#define make_package_ _n(make_package_)
#define init_package_make _n(init_package_make)

int make_package_(Execute ptr, addr name, addr names, addr use, addr *ret);
void init_package_make(void);

#endif


/************************************************************
 *  package_shadow.h
 ************************************************************/
#ifndef __PACKAGE_SHADOW_HEADER__
#define __PACKAGE_SHADOW_HEADER__


#define shadow_package_ _n(shadow_package_)
#define shadowing_import_package_ _n(shadowing_import_package_)

int shadow_package_(addr package, addr pos);
int shadowing_import_package_(addr package, addr pos);

#endif


/************************************************************
 *  package_use.h
 ************************************************************/
#ifndef __PACKAGE_USE_HEADER__
#define __PACKAGE_USE_HEADER__


#define use_package_ _n(use_package_)
#define unuse_package_ _n(unuse_package_)

int use_package_(addr package, addr pos);
int unuse_package_(addr package, addr pos);

#endif


/************************************************************
 *  format_function.h
 ************************************************************/
#ifndef __FORMAT_FUNCTION_HEADER__
#define __FORMAT_FUNCTION_HEADER__


#define format_execute_ _n(format_execute_)
#define init_format_function _n(init_format_function)

int format_execute_(Execute ptr, addr stream, addr format, addr args, addr *ret);
void init_format_function(void);

#endif


/************************************************************
 *  format_parse.h
 ************************************************************/
#ifndef __FORMAT_PARSE_HEADER__
#define __FORMAT_PARSE_HEADER__


#define format_abort_ _n(format_abort_)
#define formatp _n(formatp)
#define format_pointer _n(format_pointer)
#define format_bytesize _n(format_bytesize)
#define format_parse_local_ _n(format_parse_local_)
#define format_parse_heap_ _n(format_parse_heap_)
#define format_string_alloc_ _n(format_string_alloc_)
#define format_string_local_ _n(format_string_local_)
#define format_string_heap_ _n(format_string_heap_)
#define init_format_parse _n(init_format_parse)

int format_abort_(addr format, size_t position, const char *str, va_list args);
int formatp(addr pos);
void *format_pointer(addr pos);
size_t format_bytesize(size_t count);
int format_parse_local_(LocalRoot local, addr *ret, addr format);
int format_parse_heap_(LocalRoot local, addr *ret, addr format);
int format_string_alloc_(LocalRoot local, addr *ret, addr format);
int format_string_local_(LocalRoot local, addr *ret, addr format);
int format_string_heap_(addr *ret, addr format);
void init_format_parse(void);

#endif


/************************************************************
 *  print_dispatch.h
 ************************************************************/
#ifndef __PRINT_DISPATCH_HEADER__
#define __PRINT_DISPATCH_HEADER__


#define getlistprintdispatch _n(getlistprintdispatch)
#define setlistprintdispatch _n(setlistprintdispatch)
#define gettypeprinttable _n(gettypeprinttable)
#define settypeprinttable _n(settypeprinttable)
#define getspecifierprinttable _n(getspecifierprinttable)
#define setspecifierprinttable _n(setspecifierprinttable)
#define getfunctionprinttable _n(getfunctionprinttable)
#define setfunctionprinttable _n(setfunctionprinttable)
#define getpriorityprinttable _n(getpriorityprinttable)
#define setpriorityprinttable _n(setpriorityprinttable)
#define find_function_print_dispatch_ _n(find_function_print_dispatch_)
#define print_dispatch_p _n(print_dispatch_p)
#define pprint_dispatch_heap _n(pprint_dispatch_heap)
#define copy_pprint_dispatch_common_ _n(copy_pprint_dispatch_common_)
#define pprint_dispatch_common_ _n(pprint_dispatch_common_)
#define set_pprint_dispatch_print_ _n(set_pprint_dispatch_print_)
#define build_print_dispatch_ _n(build_print_dispatch_)

enum PrintTable_Index {
	PrintTable_type,
	PrintTable_specifier,
	PrintTable_function,
	PrintTable_priority,
	PrintTable_size
};

enum PrintDispatch_Index {
	PrintDispatch_list,
	PrintDispatch_size
};

#define GetListPrintDispatch_Low(x,y)   GetArrayA2((x), PrintDispatch_list, (y))
#define SetListPrintDispatch_Low(x,y)   SetArrayA2((x), PrintDispatch_list, (y))
#define GetTypePrintTable_Low(x,y)  GetArrayA2((x), PrintTable_type, (y))
#define SetTypePrintTable_Low(x,y)  SetArrayA2((x), PrintTable_type, (y))
#define GetSpecifierPrintTable_Low(x,y)  GetArrayA2((x), PrintTable_specifier, (y))
#define SetSpecifierPrintTable_Low(x,y)  SetArrayA2((x), PrintTable_specifier, (y))
#define GetFunctionPrintTable_Low(x,y)  GetArrayA2((x), PrintTable_function, (y))
#define SetFunctionPrintTable_Low(x,y)  SetArrayA2((x), PrintTable_function, (y))
#define GetPriorityPrintTable_Low(x,y)  GetArrayA2((x), PrintTable_priority, (y))
#define SetPriorityPrintTable_Low(x,y)  SetArrayA2((x), PrintTable_priority, (y))

#ifdef LISP_DEBUG
#define GetListPrintDispatch(x,y)    getlistprintdispatch((x),(y))
#define SetListPrintDispatch(x,y)    setlistprintdispatch((x),(y))
#define GetTypePrintTable(x,y)       gettypeprinttable((x),(y))
#define SetTypePrintTable(x,y)       settypeprinttable((x),(y))
#define GetSpecifierPrintTable(x,y)  getspecifierprinttable((x),(y))
#define SetSpecifierPrintTable(x,y)  setspecifierprinttable((x),(y))
#define GetFunctionPrintTable(x,y)   getfunctionprinttable((x),(y))
#define SetFunctionPrintTable(x,y)   setfunctionprinttable((x),(y))
#define GetPriorityPrintTable(x,y)   getpriorityprinttable((x),(y))
#define SetPriorityPrintTable(x,y)   setpriorityprinttable((x),(y))
#else
#define GetListPrintDispatch(x,y)    GetListPrintDispatch_Low((x),(y))
#define SetListPrintDispatch(x,y)    SetListPrintDispatch_Low((x),(y))
#define GetTypePrintTable(x,y)       GetTypePrintTable_Low((x),(y))
#define SetTypePrintTable(x,y)       SetTypePrintTable_Low((x),(y))
#define GetSpecifierPrintTable(x,y)  GetSpecifierPrintTable_Low((x),(y))
#define SetSpecifierPrintTable(x,y)  SetSpecifierPrintTable_Low((x),(y))
#define GetFunctionPrintTable(x,y)   GetFunctionPrintTable_Low((x),(y))
#define SetFunctionPrintTable(x,y)   SetFunctionPrintTable_Low((x),(y))
#define GetPriorityPrintTable(x,y)   GetPriorityPrintTable_Low((x),(y))
#define SetPriorityPrintTable(x,y)   SetPriorityPrintTable_Low((x),(y))
#endif

/* access */
void getlistprintdispatch(addr pos, addr *ret);
void setlistprintdispatch(addr pos, addr value);
void gettypeprinttable(addr pos, addr *ret);
void settypeprinttable(addr pos, addr value);
void getspecifierprinttable(addr pos, addr *ret);
void setspecifierprinttable(addr pos, addr value);
void getfunctionprinttable(addr pos, addr *ret);
void setfunctionprinttable(addr pos, addr value);
void getpriorityprinttable(addr pos, addr *ret);
void setpriorityprinttable(addr pos, addr value);

/* function */
int find_function_print_dispatch_(Execute ptr, addr var, addr table, addr *ret);
int print_dispatch_p(addr pos);
void pprint_dispatch_heap(addr *ret);
int copy_pprint_dispatch_common_(Execute ptr, addr var, addr *ret);
int pprint_dispatch_common_(Execute ptr, addr var, addr table, addr *x, addr *y);
int set_pprint_dispatch_print_(LocalRoot local,
		addr spec, addr type, addr call, addr priority, addr table);
int build_print_dispatch_(void);

#endif


/************************************************************
 *  print_function.h
 ************************************************************/
#ifndef __PRINT_FUNCTION_HEADER__
#define __PRINT_FUNCTION_HEADER__


#define pprint_fill_print_ _n(pprint_fill_print_)
#define pprint_linear_print_ _n(pprint_linear_print_)
#define pprint_tabular_print_ _n(pprint_tabular_print_)
#define init_print_function _n(init_print_function)

int pprint_fill_print_(Execute ptr, addr stream, addr list, int colon);
int pprint_linear_print_(Execute ptr, addr stream, addr list, int colon);
int pprint_tabular_print_(Execute ptr,
		addr stream, addr list, int colon, fixnum tabsize);
void init_print_function(void);

#endif


/************************************************************
 *  print_pretty.h
 ************************************************************/
#ifndef __PRINT_PRETTY_HEADER__
#define __PRINT_PRETTY_HEADER__


#define pprint_throw_ _n(pprint_throw_)
#define pprint_exit_common_ _n(pprint_exit_common_)
#define pprint_pop_common_ _n(pprint_pop_common_)
#define check_pretty_stream_ _n(check_pretty_stream_)
#define expand_pprint_logical_block_common_ _n(expand_pprint_logical_block_common_)
#define pprint_indent_print_ _n(pprint_indent_print_)
#define pprint_newline_print_ _n(pprint_newline_print_)
#define pprint_newline_terpri_ _n(pprint_newline_terpri_)
#define pprint_tab_print_ _n(pprint_tab_print_)
#define pprint_tab_section_ _n(pprint_tab_section_)
#define pprint_tab_section_relative_ _n(pprint_tab_section_relative_)
#define pprint_tab_absolute_force_ _n(pprint_tab_absolute_force_)
#define pprint_tab_relative_force_ _n(pprint_tab_relative_force_)
#define pprint_output_ _n(pprint_output_)

enum pprint_newline {
	pprint_newline_linear,
	pprint_newline_fill,
	pprint_newline_miser,
	pprint_newline_mandatory
};

enum pprint_tabular {
	pprint_tabular_line,
	pprint_tabular_line_relative,
	pprint_tabular_section,
	pprint_tabular_section_relative
};

int pprint_throw_(Execute ptr, addr stream);
int pprint_exit_common_(Execute ptr, addr stream);
int pprint_pop_common_(Execute ptr, addr stream, addr *ret);
int check_pretty_stream_(Execute ptr, addr stream);
int expand_pprint_logical_block_common_(addr *ret, addr stream, addr pos,
		addr prefix, addr per, addr suffix, addr decl, addr body);
int pprint_indent_print_(Execute ptr, int block_p, fixnum n, addr stream);
int pprint_newline_print_(Execute ptr, enum pprint_newline kind, addr stream);
int pprint_newline_terpri_(addr stream);
int pprint_tab_print_(Execute ptr,
		addr stream, enum pprint_tabular kind, fixnum column, fixnum colinc);
int pprint_tab_section_(Execute ptr, addr stream, fixnum column, fixnum colinc);
int pprint_tab_section_relative_(Execute ptr,
		addr stream, fixnum column, fixnum colinc);
int pprint_tab_absolute_force_(addr stream,
		fixnum column, fixnum colinc, fixnum now);
int pprint_tab_relative_force_(addr stream,
		fixnum column, fixnum colinc, fixnum now);
int pprint_output_(Execute ptr, addr stream, addr pos);

#endif


/************************************************************
 *  call_reader.h
 ************************************************************/
#ifndef __CALL_READER_HEADER__
#define __CALL_READER_HEADER__


#define copy_readtable_common_ _n(copy_readtable_common_)
#define make_dispatch_macro_character_common_ _n(make_dispatch_macro_character_common_)
#define read_common_ _n(read_common_)
#define read_preserving_whitespace_common_ _n(read_preserving_whitespace_common_)
#define read_delimited_list_common_ _n(read_delimited_list_common_)
#define read_from_string_common_ _n(read_from_string_common_)
#define readtable_case_common_ _n(readtable_case_common_)
#define setf_readtable_case_common_ _n(setf_readtable_case_common_)
#define get_dispatch_macro_character_common_ _n(get_dispatch_macro_character_common_)
#define set_dispatch_macro_character_common_ _n(set_dispatch_macro_character_common_)
#define get_macro_character_common_ _n(get_macro_character_common_)
#define set_macro_character_common_ _n(set_macro_character_common_)
#define set_syntax_from_char_common_ _n(set_syntax_from_char_common_)
#define with_standard_io_syntax_common_ _n(with_standard_io_syntax_common_)

int copy_readtable_common_(Execute ptr, addr from, addr to, addr *ret);
int make_dispatch_macro_character_common_(Execute ptr,
		addr code, addr nonterm, addr readtable);
int read_common_(Execute ptr, addr stream, addr errorp, addr eof, addr recp, addr *ret);
int read_preserving_whitespace_common_(Execute ptr,
		addr stream, addr errorp, addr eof, addr recp, addr *ret);
int read_delimited_list_common_(Execute ptr, addr code, addr stream, addr recp);
int read_from_string_common_(Execute ptr, addr args, addr *ret, addr *sec);
int readtable_case_common_(addr var, addr *ret);
int setf_readtable_case_common_(addr value, addr var);
int get_dispatch_macro_character_common_(Execute ptr,
		addr x, addr y, addr readtable, addr *ret);
int set_dispatch_macro_character_common_(Execute ptr,
		addr x, addr y, addr call, addr readtable);
int get_macro_character_common_(Execute ptr,
		addr code, addr readtable, addr *ret, addr *sec);
int set_macro_character_common_(Execute ptr,
		addr code, addr call, addr nonterm, addr readtable);
int set_syntax_from_char_common_(Execute ptr, addr x, addr y, addr z, addr w);
int with_standard_io_syntax_common_(addr form, addr env, addr *ret);

#endif


/************************************************************
 *  reader_function.h
 ************************************************************/
#ifndef __READER_FUNCTION_HEADER__
#define __READER_FUNCTION_HEADER__


#define double_quote_reader_ _n(double_quote_reader_)
#define single_quote_reader_ _n(single_quote_reader_)
#define read_delimited_list_ _n(read_delimited_list_)
#define parensis_open_reader_ _n(parensis_open_reader_)
#define parensis_close_reader_ _n(parensis_close_reader_)
#define semicolon_reader_ _n(semicolon_reader_)
#define backquote_reader_ _n(backquote_reader_)
#define comma_reader_ _n(comma_reader_)
#define sharp_reader_ _n(sharp_reader_)
#define error_dispatch_ _n(error_dispatch_)
#define equal_dispatch_ _n(equal_dispatch_)
#define sharp_dispatch_ _n(sharp_dispatch_)
#define single_quote_dispatch_ _n(single_quote_dispatch_)
#define parensis_open_dispatch_ _n(parensis_open_dispatch_)
#define parensis_close_dispatch_ _n(parensis_close_dispatch_)
#define asterisk_dispatch_ _n(asterisk_dispatch_)
#define colon_dispatch_ _n(colon_dispatch_)
#define less_dispatch_ _n(less_dispatch_)
#define backslash_dispatch_ _n(backslash_dispatch_)
#define or_dispatch_ _n(or_dispatch_)
#define plus_dispatch_ _n(plus_dispatch_)
#define minus_dispatch_ _n(minus_dispatch_)
#define dot_dispatch_ _n(dot_dispatch_)
#define radix_dispatch_ _n(radix_dispatch_)
#define binary_dispatch_ _n(binary_dispatch_)
#define octal_dispatch_ _n(octal_dispatch_)
#define hexadecimal_dispatch_ _n(hexadecimal_dispatch_)
#define complex_dispatch_ _n(complex_dispatch_)
#define array_dispatch_ _n(array_dispatch_)
#define pathname_dispatch_ _n(pathname_dispatch_)
#define structure_dispatch_ _n(structure_dispatch_)
#define init_reader_function _n(init_reader_function)

/* reader */
int double_quote_reader_(LocalRoot local, addr stream, addr *ret);
int single_quote_reader_(Execute ptr, addr stream, addr *ret);
int read_delimited_list_(Execute ptr, addr stream, unicode limit, int recursive);
int parensis_open_reader_(Execute ptr, addr stream);
int parensis_close_reader_(void);
int semicolon_reader_(addr stream);
int backquote_reader_(Execute ptr, addr stream, addr *ret);
int comma_reader_(Execute ptr, addr stream, addr *ret);
int sharp_reader_(Execute ptr, addr stream, addr code);

/* dispatch */
int error_dispatch_(addr code);
int equal_dispatch_(Execute ptr, addr stream, addr x, addr y, addr *ret);
int sharp_dispatch_(Execute ptr, addr y, addr *ret);
int single_quote_dispatch_(Execute ptr, addr stream, addr *ret);
int parensis_open_dispatch_(Execute ptr, addr stream, addr y, addr *ret);
int parensis_close_dispatch_(void);
int asterisk_dispatch_(Execute ptr, addr stream, addr x, addr y, addr *ret);
int colon_dispatch_(Execute ptr, addr stream, addr *ret);
int less_dispatch_(void);
int backslash_dispatch_(Execute ptr, addr stream, addr *ret);
int or_dispatch_(addr stream);
int plus_dispatch_(Execute ptr, addr stream);
int minus_dispatch_(Execute ptr, addr stream);
int dot_dispatch_(Execute ptr, addr stream, addr *ret);
int radix_dispatch_(Execute ptr, addr stream, addr y, addr *ret);
int binary_dispatch_(Execute ptr, addr stream, addr *ret);
int octal_dispatch_(Execute ptr, addr stream, addr *ret);
int hexadecimal_dispatch_(Execute ptr, addr stream, addr *ret);
int complex_dispatch_(Execute ptr, addr stream, addr *ret);
int array_dispatch_(Execute ptr, addr stream, addr y, addr *ret);
int pathname_dispatch_(Execute ptr, addr stream, addr *ret);
int structure_dispatch_(Execute ptr, addr stream, addr *ret);

/* initialize */
void init_reader_function(void);

#endif


/************************************************************
 *  reader_table.h
 ************************************************************/
#ifndef __READER_TABLE_HEADER__
#define __READER_TABLE_HEADER__


#define getarray_readtable _n(getarray_readtable)
#define setarray_readtable _n(setarray_readtable)
#define gettable_readtable _n(gettable_readtable)
#define settable_readtable _n(settable_readtable)
#define getdispatch_readtable _n(getdispatch_readtable)
#define setdispatch_readtable _n(setdispatch_readtable)
#define ptr_readtable _n(ptr_readtable)
#define ptrcase_readtable _n(ptrcase_readtable)
#define readtable_heap_ _n(readtable_heap_)
#define copy_readtable_ _n(copy_readtable_)
#define copy_readtable_heap_ _n(copy_readtable_heap_)
#define copy_default_readtable_ _n(copy_default_readtable_)
#define make_dispatch_macro_character_ _n(make_dispatch_macro_character_)
#define get_default_dispatch_macro_ _n(get_default_dispatch_macro_)
#define macro_character_execute_ _n(macro_character_execute_)
#define get_dispatch_macro_character_ _n(get_dispatch_macro_character_)
#define rem_dispatch_macro_character_ _n(rem_dispatch_macro_character_)
#define set_dispatch_macro_character_ _n(set_dispatch_macro_character_)
#define get_default_macro_character _n(get_default_macro_character)
#define readtype_readtable_ _n(readtype_readtable_)
#define get_macro_character_ _n(get_macro_character_)
#define set_macro_character_ _n(set_macro_character_)
#define set_syntax_from_default_ _n(set_syntax_from_default_)
#define set_syntax_from_char_ _n(set_syntax_from_char_)
#define float_readtable_ _n(float_readtable_)
#define readcase_readtable_ _n(readcase_readtable_)
#define getcase_readtable _n(getcase_readtable)
#define setcase_readtable _n(setcase_readtable)
#define getreadtable_ _n(getreadtable_)

/*
 *  readtable                  : smallsize
 *    READTABLE_ARRAY          : array2(80)
 *    READTABLE_TABLE          : hashtable: (character, codetype)
 *    READTABLE_DISPATCH       : hashtable: (character2, function)
 *  body
 *    case                     : enum ReadTable_Case
 */
enum ReadTable_Case {
	ReadTable_upcase,
	ReadTable_downcase,
	ReadTable_preserve,
	ReadTable_invert,
	ReadTable_SIZE
};

enum ReadTable_float {
	ReadTable_short,
	ReadTable_single,
	ReadTable_double,
	ReadTable_long,
	ReadTable_size
};

enum READTABLE_INDEX {
	READTABLE_ARRAY = 0,
	READTABLE_TABLE,
	READTABLE_DISPATCH,
	READTABLE_SIZE
};

#define GetArrayReadtable_Low(p,v)		GetArraySS((p), READTABLE_ARRAY, (v))
#define SetArrayReadtable_Low(p,v)		SetArraySS((p), READTABLE_ARRAY, (v))
#define GetTableReadtable_Low(p,v)		GetArraySS((p), READTABLE_TABLE, (v))
#define SetTableReadtable_Low(p,v)		SetArraySS((p), READTABLE_TABLE, (v))
#define GetDispatchReadtable_Low(p,v)	GetArraySS((p), READTABLE_DISPATCH, (v))
#define SetDispatchReadtable_Low(p,v)	SetArraySS((p), READTABLE_DISPATCH, (v))
#define PtrReadtable_Low(p)				PtrBodySSa((p), READTABLE_SIZE)
#define PtrCaseReadtable_Low(p)			((enum ReadTable_Case *)PtrReadtable(p))

#ifdef LISP_DEBUG
#define GetArrayReadtable				getarray_readtable
#define SetArrayReadtable				setarray_readtable
#define GetTableReadtable				gettable_readtable
#define SetTableReadtable				settable_readtable
#define GetDispatchReadtable			getdispatch_readtable
#define SetDispatchReadtable			setdispatch_readtable
#define PtrReadtable					ptr_readtable
#define PtrCaseReadtable				ptrcase_readtable
#else
#define GetArrayReadtable				GetArrayReadtable_Low
#define SetArrayReadtable				SetArrayReadtable_Low
#define GetTableReadtable				GetTableReadtable_Low
#define SetTableReadtable				SetTableReadtable_Low
#define GetDispatchReadtable			GetDispatchReadtable_Low
#define SetDispatchReadtable			SetDispatchReadtable_Low
#define PtrReadtable					PtrReadtable_Low
#define PtrCaseReadtable				PtrCaseReadtable_Low
#endif

void getarray_readtable(addr pos, addr *ret);
void setarray_readtable(addr pos, addr value);
void gettable_readtable(addr pos, addr *ret);
void settable_readtable(addr pos, addr value);
void getdispatch_readtable(addr pos, addr *ret);
void setdispatch_readtable(addr pos, addr value);
void *ptr_readtable(addr pos);
enum ReadTable_Case *ptrcase_readtable(addr pos);

int readtable_heap_(addr *ret);
int copy_readtable_(addr from, addr to);
int copy_readtable_heap_(addr from, addr *ret);
int copy_default_readtable_(addr pos);
int make_dispatch_macro_character_(addr pos, addr character, int nonterm);
int get_default_dispatch_macro_(addr code1, addr code2, addr *ret);
int macro_character_execute_(Execute ptr, int *result, addr *ret,
		unicode c, addr stream, addr table);
int get_dispatch_macro_character_(addr pos, unicode u1, unicode u2, addr *ret);
int rem_dispatch_macro_character_(addr pos, unicode u1, unicode u2);
int set_dispatch_macro_character_(addr pos, unicode u1, unicode u2, addr call);
void get_default_macro_character(unicode u, addr *ret, int *nonterm);
int readtype_readtable_(addr pos, unicode c, addr *ret);
int get_macro_character_(addr pos, unicode u, addr *ret, int *nonterm);
int set_macro_character_(addr pos, unicode u, int nonterm, addr call);
int set_syntax_from_default_(unicode u1, unicode u2, addr to);
int set_syntax_from_char_(unicode u1, unicode u2, addr to, addr from);

int float_readtable_(Execute ptr, enum ReadTable_float *ret);
int readcase_readtable_(Execute ptr, enum ReadTable_Case *ret);
enum ReadTable_Case getcase_readtable(addr pos);
void setcase_readtable(addr pos, enum ReadTable_Case mode);
int getreadtable_(Execute ptr, addr *ret);

#endif


/************************************************************
 *  call_sequences.h
 ************************************************************/
#ifndef __CALL_SEQUENCES_HEADER__
#define __CALL_SEQUENCES_HEADER__


#define copy_seq_common_ _n(copy_seq_common_)
#define elt_common_ _n(elt_common_)
#define setf_elt_common_ _n(setf_elt_common_)
#define fill_common_ _n(fill_common_)
#define subseq_common_ _n(subseq_common_)
#define setf_subseq_common_ _n(setf_subseq_common_)
#define reduce_common_ _n(reduce_common_)
#define sort_common_ _n(sort_common_)
#define stable_sort_common_ _n(stable_sort_common_)
#define replace_common_ _n(replace_common_)
#define concatenate_common_ _n(concatenate_common_)

int copy_seq_common_(addr var, addr *ret);
int elt_common_(addr var, addr index, addr *ret);
int setf_elt_common_(addr value, addr pos, addr index);
int fill_common_(addr var, addr item, addr rest);
int subseq_common_(addr var, addr start, addr end, addr *ret);
int setf_subseq_common_(addr root, addr pos, addr start, addr end);
int reduce_common_(Execute ptr, addr *ret, addr call, addr pos, addr rest);
int sort_common_(Execute ptr, addr pos, addr call, addr rest);
int stable_sort_common_(Execute ptr, addr pos, addr call, addr rest);
int replace_common_(Execute ptr, addr pos1, addr pos2, addr rest);
int concatenate_common_(Execute ptr, addr *ret, addr type, addr right);

#endif


/************************************************************
 *  sequence_range.h
 ************************************************************/
#ifndef __SEQUENCE_RANGE_HEADER__
#define __SEQUENCE_RANGE_HEADER__


#define save_sequence_range _n(save_sequence_range)
#define load_sequence_range _n(load_sequence_range)
#define build_sequence_range_ _n(build_sequence_range_)
#define make_sequence_range_ _n(make_sequence_range_)
#define build_sequence_range_endp_ _n(build_sequence_range_endp_)
#define make_sequence_range_endp_ _n(make_sequence_range_endp_)
#define build_sequence_range_vector2_ _n(build_sequence_range_vector2_)
#define build_sequence_range_vector_ _n(build_sequence_range_vector_)
#define make_sequence_range_vector_ _n(make_sequence_range_vector_)
#define make_sequence_range_mismatch_ _n(make_sequence_range_mismatch_)
#define get_sequence_range_ _n(get_sequence_range_)
#define getnext_sequence_range_ _n(getnext_sequence_range_)
#define next_sequence_range_ _n(next_sequence_range_)
#define endp_sequence_range _n(endp_sequence_range)
#define set_sequence_range_ _n(set_sequence_range_)
#define getinplace_sequence_range_ _n(getinplace_sequence_range_)
#define setinplace_sequence_range_ _n(setinplace_sequence_range_)
#define reverse_sequence_range _n(reverse_sequence_range)
#define endp_reverse_sequence_range _n(endp_reverse_sequence_range)
#define next_reverse_sequence_range_ _n(next_reverse_sequence_range_)
#define get_reverse_sequence_range_ _n(get_reverse_sequence_range_)
#define getnext_reverse_sequence_range_ _n(getnext_reverse_sequence_range_)
#define set_reverse_sequence_range_ _n(set_reverse_sequence_range_)
#define remove_sequence_range_ _n(remove_sequence_range_)

struct sequence_range {
	unsigned listp : 1;
	unsigned endp : 1;
	addr pos, list, prev;
	size_t start, end, size, index;
	addr save_pos, save_list, save_prev;
	size_t save_index, save_end, save_size;
};

/* save/load */
void save_sequence_range(struct sequence_range *ptr);
void load_sequence_range(struct sequence_range *ptr);


/* build */
int build_sequence_range_(struct sequence_range *ptr,
		addr pos, addr start, addr end);
int make_sequence_range_(LocalRoot local,
		addr pos, addr start, addr end, struct sequence_range **ret);
int build_sequence_range_endp_(struct sequence_range *ptr,
		addr list, addr start, addr end);
int make_sequence_range_endp_(LocalRoot local,
		addr list, addr start, addr end, struct sequence_range **ret);
int build_sequence_range_vector2_(LocalRoot local,
		struct sequence_range *ptr, addr list, addr start, addr end,
		addr *root, addr *tail);
int build_sequence_range_vector_(LocalRoot local,
		struct sequence_range *ptr, addr list, addr start, addr end);
int make_sequence_range_vector_(LocalRoot local,
		addr list, addr start, addr end, struct sequence_range **ret);
int make_sequence_range_mismatch_(LocalRoot local,
		addr list, addr start, addr end, struct sequence_range **ret);

/* access */
int get_sequence_range_(struct sequence_range *ptr, addr *value, int *ret);
int getnext_sequence_range_(struct sequence_range *ptr, addr *value, int *ret);
int next_sequence_range_(struct sequence_range *ptr, int *ret);
int endp_sequence_range(struct sequence_range *ptr);
int set_sequence_range_(struct sequence_range *ptr, addr value);
int getinplace_sequence_range_(struct sequence_range *ptr, struct array_value *ret);
int setinplace_sequence_range_(LocalRoot local,
		struct sequence_range *ptr, const struct array_value *str);

/* reverse */
void reverse_sequence_range(struct sequence_range *ptr);
int endp_reverse_sequence_range(struct sequence_range *ptr);
int next_reverse_sequence_range_(struct sequence_range *ptr, int *ret);
int get_reverse_sequence_range_(struct sequence_range *ptr, addr *value, int *ret);
int getnext_reverse_sequence_range_(
		struct sequence_range *ptr, addr *value, int *ret);
int set_reverse_sequence_range_(struct sequence_range *ptr, addr value);

/* remove */
int remove_sequence_range_(struct sequence_range *ptr);

#endif


/************************************************************
 *  sequence_count.h
 ************************************************************/
#ifndef __SEQUENCE_COUNT_HEADER__
#define __SEQUENCE_COUNT_HEADER__


#define boolean_count_sequence_ _n(boolean_count_sequence_)
#define count_common_ _n(count_common_)
#define count_if_common_ _n(count_if_common_)
#define count_if_not_common_ _n(count_if_not_common_)

struct count_struct {
	unsigned delp : 1;
	unsigned fromp : 1;
	unsigned notp : 1;
	unsigned single : 1;
	unsigned test : 2;
	Execute ptr;
	LocalRoot local;
	addr item, second, pos, from, start, end, key, test1, test2, count;
	size_t limit, start_value;
	struct sequence_range range;
};

int boolean_count_sequence_(struct count_struct *str, int *result, addr value);
int count_common_(Execute ptr, addr *ret, addr item, addr pos, addr rest);
int count_if_common_(Execute ptr, addr *ret, addr call, addr pos, addr rest);
int count_if_not_common_(Execute ptr, addr *ret, addr call, addr pos, addr rest);

#endif


/************************************************************
 *  sequence_common.h
 ************************************************************/
#ifndef __SEQUENCE_COMMON_HEADER__
#define __SEQUENCE_COMMON_HEADER__


#define make_specialized_sequence_ _n(make_specialized_sequence_)
#define array_upgraded_merge_sequence_ _n(array_upgraded_merge_sequence_)
#define make_vector_size_sequence_ _n(make_vector_size_sequence_)
#define setcount_sequence_ _n(setcount_sequence_)

int make_specialized_sequence_(addr *ret, enum ARRAY_TYPE type, int bs, size_t size);
int array_upgraded_merge_sequence_(addr *ret, addr type, size_t size);
int make_vector_size_sequence_(addr *ret, addr pos, size_t size);
int setcount_sequence_(struct count_struct *str, addr count);

#endif


/************************************************************
 *  call_streams.h
 ************************************************************/
#ifndef __CALL_STREAMS_HEADER__
#define __CALL_STREAMS_HEADER__


#define read_byte_common_ _n(read_byte_common_)
#define write_byte_common_ _n(write_byte_common_)
#define peek_char_common_ _n(peek_char_common_)
#define read_char_common_ _n(read_char_common_)
#define read_char_no_hang_common_ _n(read_char_no_hang_common_)
#define terpri_common_ _n(terpri_common_)
#define fresh_line_common_ _n(fresh_line_common_)
#define unread_char_common_ _n(unread_char_common_)
#define write_char_common_ _n(write_char_common_)
#define read_line_common_ _n(read_line_common_)
#define write_string_common_ _n(write_string_common_)
#define write_line_common_ _n(write_line_common_)
#define read_sequence_common_ _n(read_sequence_common_)
#define write_sequence_common_ _n(write_sequence_common_)
#define file_position_common_ _n(file_position_common_)
#define file_string_length_common_ _n(file_string_length_common_)
#define open_common_ _n(open_common_)
#define with_open_file_common_ _n(with_open_file_common_)
#define close_common_ _n(close_common_)
#define with_open_stream_common_ _n(with_open_stream_common_)
#define listen_common_ _n(listen_common_)
#define clear_input_common_ _n(clear_input_common_)
#define finish_output_common_ _n(finish_output_common_)
#define force_output_common_ _n(force_output_common_)
#define clear_output_common_ _n(clear_output_common_)
#define make_string_input_stream_common_ _n(make_string_input_stream_common_)
#define make_string_output_stream_common_ _n(make_string_output_stream_common_)
#define get_output_stream_string_common_ _n(get_output_stream_string_common_)
#define with_input_from_string_common_ _n(with_input_from_string_common_)
#define with_output_to_string_common_ _n(with_output_to_string_common_)

int read_byte_common_(Execute ptr,
		addr stream, addr errorp, addr value, addr *ret);
int write_byte_common_(Execute ptr, addr value, addr stream);
int peek_char_common_(Execute ptr, addr type, addr stream,
		addr errorp, addr value, addr recp, addr *ret);
int read_char_common_(Execute ptr,
		addr stream, addr errorp, addr value, addr recp, addr *ret);
int read_char_no_hang_common_(Execute ptr,
		addr stream, addr errorp, addr value, addr recp, addr *ret);
int terpri_common_(Execute ptr, addr stream);
int fresh_line_common_(Execute ptr, addr stream, addr *ret);
int unread_char_common_(Execute ptr, addr pos, addr stream);
int write_char_common_(Execute ptr, addr pos, addr stream);
int read_line_common_(Execute ptr,
		addr stream, addr errorp, addr value, addr recp,
		addr *ret, addr *sec);
int write_string_common_(Execute ptr, addr string, addr rest);
int write_line_common_(Execute ptr, addr string, addr rest);
int read_sequence_common_(addr var, addr stream, addr rest, addr *ret);
int write_sequence_common_(LocalRoot local, addr var, addr stream, addr rest);
int file_position_common_(Execute ptr, addr stream, addr pos, addr *ret);
int file_string_length_common_(addr stream, addr pos, addr *ret);
int open_common_(Execute ptr, addr pos, addr rest, addr *ret);
int with_open_file_common_(addr form, addr *ret);
int close_common_(Execute ptr, addr pos, addr rest, addr *ret);
int with_open_stream_common_(addr form, addr *ret);
int listen_common_(Execute ptr, addr stream, addr *ret);
int clear_input_common_(Execute ptr, addr stream);
int finish_output_common_(Execute ptr, addr stream);
int force_output_common_(Execute ptr, addr stream);
int clear_output_common_(Execute ptr, addr stream);
int make_string_input_stream_common_(addr var, addr x, addr y, addr *ret);
int make_string_output_stream_common_(Execute ptr, addr rest, addr *ret);
int get_output_stream_string_common_(Execute ptr, addr var, addr *ret);
int with_input_from_string_common_(addr form, addr *ret);
int with_output_to_string_common_(addr form, addr *ret);

#endif


/************************************************************
 *  call_strings.h
 ************************************************************/
#ifndef __CALL_STRINGS_HEADER__
#define __CALL_STRINGS_HEADER__


#define simple_string_p_common _n(simple_string_p_common)
#define char_common_ _n(char_common_)
#define setf_char_common_ _n(setf_char_common_)
#define string_common_ _n(string_common_)
#define string_upcase_common_ _n(string_upcase_common_)
#define string_downcase_common_ _n(string_downcase_common_)
#define string_capitalize_common_ _n(string_capitalize_common_)
#define nstring_upcase_common_ _n(nstring_upcase_common_)
#define nstring_downcase_common_ _n(nstring_downcase_common_)
#define nstring_capitalize_common_ _n(nstring_capitalize_common_)
#define string_trim_common_ _n(string_trim_common_)
#define string_left_trim_common_ _n(string_left_trim_common_)
#define string_right_trim_common_ _n(string_right_trim_common_)
#define string_eql_common_ _n(string_eql_common_)
#define string_not_eql_common_ _n(string_not_eql_common_)
#define string_less_common_ _n(string_less_common_)
#define string_greater_common_ _n(string_greater_common_)
#define string_less_equal_common_ _n(string_less_equal_common_)
#define string_greater_equal_common_ _n(string_greater_equal_common_)
#define string_equal_common_ _n(string_equal_common_)
#define string_not_equal_common_ _n(string_not_equal_common_)
#define string_lessp_common_ _n(string_lessp_common_)
#define string_greaterp_common_ _n(string_greaterp_common_)
#define string_not_greaterp_common_ _n(string_not_greaterp_common_)
#define string_not_lessp_common_ _n(string_not_lessp_common_)
#define make_string_common_ _n(make_string_common_)

void simple_string_p_common(addr var, addr *ret);
int char_common_(addr str, addr pos, addr *ret);
int setf_char_common_(addr value, addr str, addr pos);
int string_common_(addr var, addr *ret);
int string_upcase_common_(addr var, addr rest, addr *ret);
int string_downcase_common_(addr var, addr rest, addr *ret);
int string_capitalize_common_(addr var, addr rest, addr *ret);
int nstring_upcase_common_(addr var, addr rest);
int nstring_downcase_common_(addr var, addr rest);
int nstring_capitalize_common_(addr var, addr rest);
int string_trim_common_(addr trim, addr pos, addr *ret);
int string_left_trim_common_(addr trim, addr pos, addr *ret);
int string_right_trim_common_(addr trim, addr pos, addr *ret);
int string_eql_common_(addr var1, addr var2, addr rest, addr *ret);
int string_not_eql_common_(addr var1, addr var2, addr rest, addr *ret);
int string_less_common_(addr var1, addr var2, addr rest, addr *ret);
int string_greater_common_(addr var1, addr var2, addr rest, addr *ret);
int string_less_equal_common_(addr var1, addr var2, addr rest, addr *ret);
int string_greater_equal_common_(addr var1, addr var2, addr rest, addr *ret);
int string_equal_common_(addr var1, addr var2, addr rest, addr *ret);
int string_not_equal_common_(addr var1, addr var2, addr rest, addr *ret);
int string_lessp_common_(addr var1, addr var2, addr rest, addr *ret);
int string_greaterp_common_(addr var1, addr var2, addr rest, addr *ret);
int string_not_greaterp_common_(addr var1, addr var2, addr rest, addr *ret);
int string_not_lessp_common_(addr var1, addr var2, addr rest, addr *ret);
int make_string_common_(Execute ptr, addr var, addr rest, addr *ret);

#endif


/************************************************************
 *  type_typep.h
 ************************************************************/
#ifndef __TYPE_TYPEP_HEADER__
#define __TYPE_TYPEP_HEADER__


#define typep_table_ _n(typep_table_)
#define typep_clang_ _n(typep_clang_)
#define typep_asterisk_clang_ _n(typep_asterisk_clang_)
#define init_type_typep _n(init_type_typep)

int typep_table_(Execute ptr, addr value, addr type, int *ret);
int typep_clang_(Execute ptr, addr value, addr type, int *ret);
int typep_asterisk_clang_(Execute ptr, addr value, addr type, int *ret);
void init_type_typep(void);

#endif


/************************************************************
 *  call_structures.h
 ************************************************************/
#ifndef __CALL_STRUCTURES_HEADER__
#define __CALL_STRUCTURES_HEADER__


#define defstruct_common_ _n(defstruct_common_)
int defstruct_common_(Execute ptr, addr form, addr env, addr *ret);

#endif


/************************************************************
 *  structure_defstruct.h
 ************************************************************/
#ifndef __STRUCTURE_DEFSTRUCT_HEADER__
#define __STRUCTURE_DEFSTRUCT_HEADER__


struct defstruct {
	unsigned conc_name_p : 1;
	unsigned constructor_p : 1;
	unsigned copier_p : 1;
	unsigned predicate_p : 1;
	unsigned include_p : 1;
	unsigned print_object_p : 1;
	unsigned print_function_p : 1;
	unsigned type_p : 1;
	unsigned type_list_p : 1;
	unsigned type_vector_p : 1;
	unsigned named_p : 1;
	unsigned initial_offset_p : 1;
	enum ARRAY_TYPE type1;
	int type2;
	Execute ptr;
	addr instance, env, doc, slots;
	addr name, conc_name, copier, predicate;
	addr constructor, iname, iargs;
	addr print_object, print_function;
	addr type_vector, initial_offset;
	addr change;
	size_t size, size_all, offset, named_index;
};

#define localhold_defstruct _n(localhold_defstruct)
#define defstruct_clean _n(defstruct_clean)

void localhold_defstruct(struct defstruct *str, LocalHold hold);
void defstruct_clean(struct defstruct *ptr);

#endif


/************************************************************
 *  structure_object.h
 ************************************************************/
#ifndef __STRUCTURE_OBJECT_HEADER__
#define __STRUCTURE_OBJECT_HEADER__


struct structure_struct {
	unsigned named_p : 1;
	unsigned vector_p : 1;
	unsigned list_p : 1;
	enum ARRAY_TYPE type1;
	int type2;
	size_t size, size_all, offset;
};
enum StructureIndex {
	Structure_name,
	Structure_slots,
	Structure_direct,
	Structure_doc,
	Structure_include,
	Structure_precedence,
	Structure_specialized,
	Structure_vector,
	Structure_predicate,
	Structure_access,
	Structure_copier,
	Structure_constructor,
	Structure_size
};

#define PtrStructure_Low(x)            \
	((struct structure_struct *)PtrBodySSa((x), Structure_size))
#define GetNameStructure_Low(x,y)       GetArraySS((x),Structure_name,(y))
#define SetNameStructure_Low(x,y)       SetArraySS((x),Structure_name,(y))
#define GetSlotsStructure_Low(x,y)      GetArraySS((x),Structure_slots,(y))
#define SetSlotsStructure_Low(x,y)      SetArraySS((x),Structure_slots,(y))
#define GetDirectStructure_Low(x,y)     GetArraySS((x),Structure_direct,(y))
#define SetDirectStructure_Low(x,y)     SetArraySS((x),Structure_direct,(y))
#define GetDocStructure_Low(x,y)        GetArraySS((x),Structure_doc,(y))
#define SetDocStructure_Low(x,y)        SetArraySS((x),Structure_doc,(y))
#define GetIncludeStructure_Low(x,y)    GetArraySS((x),Structure_include,(y))
#define SetIncludeStructure_Low(x,y)    SetArraySS((x),Structure_include,(y))
#define GetPrecedenceStructure_Low(x,y) GetArraySS((x),Structure_precedence,(y))
#define SetPrecedenceStructure_Low(x,y) SetArraySS((x),Structure_precedence,(y))
#define GetSpecializedStructure_Low(x,y)    GetArraySS((x),Structure_specialized,(y))
#define SetSpecializedStructure_Low(x,y)    SetArraySS((x),Structure_specialized,(y))
#define GetPredicateStructure_Low(x,y)  GetArraySS((x),Structure_predicate,(y))
#define SetPredicateStructure_Low(x,y)  SetArraySS((x),Structure_predicate,(y))
#define GetAccessStructure_Low(x,y)     GetArraySS((x),Structure_access,(y))
#define SetAccessStructure_Low(x,y)     SetArraySS((x),Structure_access,(y))
#define GetCopierStructure_Low(x,y)     GetArraySS((x),Structure_copier,(y))
#define SetCopierStructure_Low(x,y)     SetArraySS((x),Structure_copier,(y))
#define GetConstructorStructure_Low(x,y)    GetArraySS((x),Structure_constructor,(y))
#define SetConstructorStructure_Low(x,y)    SetArraySS((x),Structure_constructor,(y))

#ifdef LISP_DEBUG
#define PtrStructure                    PtrStructure_Low
#define GetNameStructure                GetNameStructure_Low
#define SetNameStructure                SetNameStructure_Low
#define GetSlotsStructure               GetSlotsStructure_Low
#define SetSlotsStructure               SetSlotsStructure_Low
#define GetDirectStructure              GetDirectStructure_Low
#define SetDirectStructure              SetDirectStructure_Low
#define GetDocStructure                 GetDocStructure_Low
#define SetDocStructure                 SetDocStructure_Low
#define GetIncludeStructure             GetIncludeStructure_Low
#define SetIncludeStructure             SetIncludeStructure_Low
#define GetPrecedenceStructure          GetPrecedenceStructure_Low
#define SetPrecedenceStructure          SetPrecedenceStructure_Low
#define GetSpecializedStructure         GetSpecializedStructure_Low
#define SetSpecializedStructure         SetSpecializedStructure_Low
#define GetPredicateStructure           GetPredicateStructure_Low
#define SetPredicateStructure           SetPredicateStructure_Low
#define GetAccessStructure              GetAccessStructure_Low
#define SetAccessStructure              SetAccessStructure_Low
#define GetCopierStructure              GetCopierStructure_Low
#define SetCopierStructure              SetCopierStructure_Low
#define GetConstructorStructure         GetConstructorStructure_Low
#define SetConstructorStructure         SetConstructorStructure_Low
#else
#define PtrStructure                    ptrstructure
#define GetNameStructure                getnamestructure
#define SetNameStructure                setnamestructure
#define GetSlotsStructure               getslotsstructure
#define SetSlotsStructure               setslotsstructure
#define GetDirectStructure              getdirectstructure
#define SetDirectStructure              setdirectstructure
#define GetDocStructure                 getdocstructure
#define SetDocStructure                 setdocstructure
#define GetIncludeStructure             getincludestructure
#define SetIncludeStructure             setincludestructure
#define GetPrecedenceStructure          getprecedencestructure
#define SetPrecedenceStructure          setprecedencestructure
#define GetSpecializedStructure         getspecializedstructure
#define SetSpecializedStructure         setspecializedstructure
#define GetPredicateStructure           getpredicatestructure
#define SetPredicateStructure           setpredicatestructure
#define GetAccessStructure              getaccessstructure
#define SetAccessStructure              setaccessstructure
#define GetCopierStructure              getcopierstructure
#define SetCopierStructure              setcopierstructure
#define GetConstructorStructure         getconstructorstructure
#define SetConstructorStructure         setconstructorstructure
#endif

#define structure_object_p _n(structure_object_p)
#define ptrstructure _n(ptrstructure)
#define structure_heap _n(structure_heap)
#define structurep _n(structurep)
#define getnamestructure _n(getnamestructure)
#define setnamestructure _n(setnamestructure)
#define getslotsstructure _n(getslotsstructure)
#define setslotsstructure _n(setslotsstructure)
#define getdirectstructure _n(getdirectstructure)
#define setdirectstructure _n(setdirectstructure)
#define getdocstructure _n(getdocstructure)
#define setdocstructure _n(setdocstructure)
#define getincludestructure _n(getincludestructure)
#define setincludestructure _n(setincludestructure)
#define getprecedencestructure _n(getprecedencestructure)
#define setprecedencestructure _n(setprecedencestructure)
#define getspecializedstructure _n(getspecializedstructure)
#define setspecializedstructure _n(setspecializedstructure)
#define getpredicatestructure _n(getpredicatestructure)
#define setpredicatestructure _n(setpredicatestructure)
#define getaccessstructure _n(getaccessstructure)
#define setaccessstructure _n(setaccessstructure)
#define getcopierstructure _n(getcopierstructure)
#define setcopierstructure _n(setcopierstructure)
#define getconstructorstructure _n(getconstructorstructure)
#define setconstructorstructure _n(setconstructorstructure)

#define structure_named_p _n(structure_named_p)
#define structure_list_p _n(structure_list_p)
#define structure_vector_p _n(structure_vector_p)
#define set_named_p_structure _n(set_named_p_structure)
#define set_list_p_structure _n(set_list_p_structure)
#define set_vector_p_structure _n(set_vector_p_structure)
#define get_size_structure _n(get_size_structure)
#define get_size_all_structure _n(get_size_all_structure)
#define get_offset_structure _n(get_offset_structure)
#define set_size_structure _n(set_size_structure)
#define set_size_all_structure _n(set_size_all_structure)
#define set_offset_structure _n(set_offset_structure)
#define gettype_structure _n(gettype_structure)
#define settype_structure _n(settype_structure)
#define structure_swap _n(structure_swap)

int structure_object_p(addr pos);
struct structure_struct *ptrstructure(addr pos);
void getnamestructure(addr pos, addr *ret);
void setnamestructure(addr pos, addr value);
void getslotsstructure(addr pos, addr *ret);
void setslotsstructure(addr pos, addr value);
void getdirectstructure(addr pos, addr *ret);
void setdirectstructure(addr pos, addr value);
void getdocstructure(addr pos, addr *ret);
void setdocstructure(addr pos, addr value);
void getincludestructure(addr pos, addr *ret);
void setincludestructure(addr pos, addr value);
void getprecedencestructure(addr pos, addr *ret);
void setprecedencestructure(addr pos, addr value);
void getspecializedstructure(addr pos, addr *ret);
void setspecializedstructure(addr pos, addr value);
void getpredicatestructure(addr pos, addr *ret);
void setpredicatestructure(addr pos, addr value);
void getaccessstructure(addr pos, addr *ret);
void setaccessstructure(addr pos, addr value);
void getcopierstructure(addr pos, addr *ret);
void setcopierstructure(addr pos, addr value);
void getconstructorstructure(addr pos, addr *ret);
void setconstructorstructure(addr pos, addr value);
void structure_heap(addr *ret);

int structure_named_p(addr pos);
int structure_list_p(addr pos);
int structure_vector_p(addr pos);
void set_named_p_structure(addr pos, int value);
void set_list_p_structure(addr pos, int value);
void set_vector_p_structure(addr pos, int value);
size_t get_size_structure(addr pos);
size_t get_size_all_structure(addr pos);
size_t get_offset_structure(addr pos);
void set_size_structure(addr pos, size_t value);
void set_size_all_structure(addr pos, size_t value);
void set_offset_structure(addr pos, size_t value);
void gettype_structure(addr pos, enum ARRAY_TYPE *rtype1, int *rtype2);
void settype_structure(addr pos, enum ARRAY_TYPE type1, int type2);
void structure_swap(addr x, addr y);

#endif


/************************************************************
 *  call_symbols.h
 ************************************************************/
#ifndef __CALL_SYMBOLS_HEADER__
#define __CALL_SYMBOLS_HEADER__


#define make_symbol_common _n(make_symbol_common)
#define copy_symbol_common_ _n(copy_symbol_common_)
#define gensym_common_ _n(gensym_common_)
#define gentemp_common_ _n(gentemp_common_)
#define setf_symbol_function_common_ _n(setf_symbol_function_common_)
#define setf_symbol_value_common_ _n(setf_symbol_value_common_)
#define setf_symbol_plist_common_ _n(setf_symbol_plist_common_)
#define get_common_ _n(get_common_)
#define setf_get_common_ _n(setf_get_common_)
#define remprop_common_ _n(remprop_common_)
#define makunbound_common_ _n(makunbound_common_)
#define set_common_ _n(set_common_)

void make_symbol_common(addr var, addr *ret);
int copy_symbol_common_(addr var, addr opt, addr *ret);
int gensym_common_(Execute ptr, addr opt, addr *ret);
int gentemp_common_(Execute ptr, addr opt1, addr opt2, addr *ret);
int setf_symbol_function_common_(addr value, addr symbol);
int setf_symbol_value_common_(Execute ptr, addr value, addr symbol);
int setf_symbol_plist_common_(addr value, addr symbol);
int get_common_(addr var1, addr var2, addr opt, addr *ret);
int setf_get_common_(addr value, addr symbol, addr key);
int remprop_common_(addr symbol, addr key, addr *ret);
int makunbound_common_(Execute ptr, addr symbol);
int set_common_(Execute ptr, addr symbol, addr value);

#endif


/************************************************************
 *  call_system.h
 ************************************************************/
#ifndef __CALL_SYSTEM_HEADER__
#define __CALL_SYSTEM_HEADER__


#define load_common_ _n(load_common_)

int load_common_(Execute ptr, addr filespec, addr rest, int *ret);

#endif


/************************************************************
 *  call_types.h
 ************************************************************/
#ifndef __CALL_TYPES_HEADER__
#define __CALL_TYPES_HEADER__


#define type_of_common_ _n(type_of_common_)
#define typep_common_ _n(typep_common_)
#define subtypep_common_ _n(subtypep_common_)

int type_of_common_(addr pos, addr *ret);
int typep_common_(Execute ptr, addr x, addr y, addr env, addr *ret);
int subtypep_common_(Execute ptr, addr x, addr y, addr env, addr *v1, addr *v2);

#endif


/************************************************************
 *  type_value.h
 ************************************************************/
#ifndef __TYPE_VALUE_HEADER__
#define __TYPE_VALUE_HEADER__


#define type_value_nil _n(type_value_nil)
#define type_value_t _n(type_value_t)
#define type_value_clos_ _n(type_value_clos_)
#define type_value_array_ _n(type_value_array_)
#define type_value_vector _n(type_value_vector)
#define type_value_character _n(type_value_character)
#define type_value_integer _n(type_value_integer)
#define type_value_rational _n(type_value_rational)
#define type_value_bitvector _n(type_value_bitvector)
#define type_value_float _n(type_value_float)
#define type_value_complex_ _n(type_value_complex_)
#define type_value_package _n(type_value_package)
#define type_value_random_state _n(type_value_random_state)
#define type_value_pathname _n(type_value_pathname)
#define type_value_environment _n(type_value_environment)
#define type_value_paper _n(type_value_paper)
#define type_value_ _n(type_value_)
#define init_type_value _n(init_type_value)

/*  function type_value
 *     input: object
 *    output: type
 */
void type_value_nil(addr *ret);
void type_value_t(addr *ret);
int type_value_clos_(addr *ret, addr value);
int type_value_array_(addr *ret, addr value);
void type_value_vector(addr *ret, addr value);
void type_value_character(addr *ret, addr value);

void type_value_integer(addr *ret, addr value);
void type_value_rational(addr *ret, addr value);
void type_value_bitvector(addr *ret, addr value);
void type_value_float(addr *ret, addr value);
int type_value_complex_(addr *ret, addr value);
void type_value_package(addr *ret, addr value);
void type_value_random_state(addr *ret, addr value);
void type_value_pathname(addr *ret, addr value);
void type_value_environment(addr *ret, addr value);
void type_value_paper(addr *ret, addr value);

int type_value_(addr *ret, addr value);
void init_type_value(void);

#endif


/************************************************************
 *  clos_generic.h
 ************************************************************/
#ifndef __CLOS_GENERIC_HEADER__
#define __CLOS_GENERIC_HEADER__


#define stdget_generic_name_ _n(stdget_generic_name_)
#define stdset_generic_name_ _n(stdset_generic_name_)
#define stdget_generic_methods_ _n(stdget_generic_methods_)
#define stdset_generic_methods_ _n(stdset_generic_methods_)
#define stdget_generic_lambda_list_ _n(stdget_generic_lambda_list_)
#define stdset_generic_lambda_list_ _n(stdset_generic_lambda_list_)
#define stdget_generic_argument_precedence_order_ _n(stdget_generic_argument_precedence_order_)
#define stdset_generic_argument_precedence_order_ _n(stdset_generic_argument_precedence_order_)
#define stdget_generic_declarations_ _n(stdget_generic_declarations_)
#define stdset_generic_declarations_ _n(stdset_generic_declarations_)
#define stdget_generic_method_class_ _n(stdget_generic_method_class_)
#define stdset_generic_method_class_ _n(stdset_generic_method_class_)
#define stdget_generic_method_combination_ _n(stdget_generic_method_combination_)
#define stdset_generic_method_combination_ _n(stdset_generic_method_combination_)

#define stdget_generic_vector_ _n(stdget_generic_vector_)
#define stdset_generic_vector_ _n(stdset_generic_vector_)
#define stdget_generic_remove_ _n(stdget_generic_remove_)
#define stdset_generic_remove_ _n(stdset_generic_remove_)
#define stdget_generic_argument_ _n(stdget_generic_argument_)
#define stdset_generic_argument_ _n(stdset_generic_argument_)
#define stdget_generic_documentation_ _n(stdget_generic_documentation_)
#define stdset_generic_documentation_ _n(stdset_generic_documentation_)
#define stdget_generic_eqlcheck_ _n(stdget_generic_eqlcheck_)
#define stdset_generic_eqlcheck_ _n(stdset_generic_eqlcheck_)
#define stdget_generic_cache_ _n(stdget_generic_cache_)
#define stdset_generic_cache_ _n(stdset_generic_cache_)
#define stdget_generic_call_ _n(stdget_generic_call_)
#define stdset_generic_call_ _n(stdset_generic_call_)
#define stdget_generic_precedence_index_ _n(stdget_generic_precedence_index_)
#define stdset_generic_precedence_index_ _n(stdset_generic_precedence_index_)
#define stdboundp_generic_argument_precedence_order_ _n(stdboundp_generic_argument_precedence_order_)
#define stdboundp_generic_eqlcheck_ _n(stdboundp_generic_eqlcheck_)
#define stdget_specializer_object_ _n(stdget_specializer_object_)
#define stdset_specializer_object_ _n(stdset_specializer_object_)
#define stdget_specializer_type_ _n(stdget_specializer_type_)
#define stdset_specializer_type_ _n(stdset_specializer_type_)
#define generic_eql_specializer_ _n(generic_eql_specializer_)
#define generic_finalize_ _n(generic_finalize_)
#define closrun_execute_ _n(closrun_execute_)
#define generic_order_ _n(generic_order_)
#define generic_compute_applicable_methods_ _n(generic_compute_applicable_methods_)
#define generic_find_method_ _n(generic_find_method_)
#define get_documentation_function_object_ _n(get_documentation_function_object_)
#define set_documentation_function_object_ _n(set_documentation_function_object_)
#define init_clos_generic _n(init_clos_generic)

/* access */
int stdget_generic_name_(addr pos, addr *ret);
int stdset_generic_name_(addr pos, addr value);
int stdget_generic_methods_(addr pos, addr *ret);
int stdset_generic_methods_(addr pos, addr value);
int stdget_generic_lambda_list_(addr pos, addr *ret);
int stdset_generic_lambda_list_(addr pos, addr value);
int stdget_generic_argument_precedence_order_(addr pos, addr *ret);
int stdset_generic_argument_precedence_order_(addr pos, addr value);
int stdget_generic_declarations_(addr pos, addr *ret);
int stdset_generic_declarations_(addr pos, addr value);
int stdget_generic_method_class_(addr pos, addr *ret);
int stdset_generic_method_class_(addr pos, addr value);
int stdget_generic_method_combination_(addr pos, addr *ret);
int stdset_generic_method_combination_(addr pos, addr value);
int stdget_generic_vector_(addr pos, addr *ret);
int stdset_generic_vector_(addr pos, addr value);
int stdget_generic_remove_(addr pos, addr *ret);
int stdset_generic_remove_(addr pos, addr value);
int stdget_generic_argument_(addr pos, addr *ret);
int stdset_generic_argument_(addr pos, addr value);
int stdget_generic_documentation_(addr pos, addr *ret);
int stdset_generic_documentation_(addr pos, addr value);
int stdget_generic_eqlcheck_(addr pos, addr *ret);
int stdset_generic_eqlcheck_(addr pos, addr value);
int stdget_generic_cache_(addr pos, addr *ret);
int stdset_generic_cache_(addr pos, addr value);
int stdget_generic_call_(addr pos, addr *ret);
int stdset_generic_call_(addr pos, addr value);
int stdget_generic_precedence_index_(addr pos, addr *ret);
int stdset_generic_precedence_index_(addr pos, addr value);
int stdboundp_generic_argument_precedence_order_(addr pos, int *ret);
int stdboundp_generic_eqlcheck_(addr pos, int *ret);

/* eql-specializer */
int stdget_specializer_object_(addr pos, addr *ret);
int stdset_specializer_object_(addr pos, addr value);
int stdget_specializer_type_(addr pos, addr *ret);
int stdset_specializer_type_(addr pos, addr value);

/* generic-function */
int generic_eql_specializer_(addr left, addr right, int check, int *ret);
int generic_finalize_(addr gen);
int closrun_execute_(Execute ptr, addr clos, addr args);
int generic_order_(addr gen, addr order, addr list);

/* common */
int generic_compute_applicable_methods_(LocalRoot local,
		addr gen, addr args, addr *ret);
int generic_find_method_(Execute ptr,
		addr gen, addr qua, addr spec, addr errorp, addr *ret);

/* documentation */
int get_documentation_function_object_(addr pos, addr *ret);
int set_documentation_function_object_(addr pos, addr value);

/* initialize */
void init_clos_generic(void);

#endif


/************************************************************
 *  clos_make.h
 ************************************************************/
#ifndef __CLOS_MAKE_HEADER__
#define __CLOS_MAKE_HEADER__


#define clos_ensure_class_supers_ _n(clos_ensure_class_supers_)
#define clos_ensure_class_slots_ _n(clos_ensure_class_slots_)
#define clos_ensure_class_direct_default_initargs_ _n(clos_ensure_class_direct_default_initargs_)
#define clos_ensure_class_init_ _n(clos_ensure_class_init_)
#define clos_finalize_ _n(clos_finalize_)
#define clos_ensure_class_ _n(clos_ensure_class_)
#define allocate_instance_standard_ _n(allocate_instance_standard_)
#define initialize_instance_stdobject_ _n(initialize_instance_stdobject_)
#define reinitialize_instance_stdobject_ _n(reinitialize_instance_stdobject_)
#define shared_initialize_stdobject_ _n(shared_initialize_stdobject_)
#define make_instance_stdclass_ _n(make_instance_stdclass_)
#define slot_boundp_using_class_common_ _n(slot_boundp_using_class_common_)
#define slot_makunbound_using_class_ _n(slot_makunbound_using_class_)
#define slot_value_using_class_common_ _n(slot_value_using_class_common_)
#define setf_slot_value_using_class_common_ _n(setf_slot_value_using_class_common_)
#define init_clos_make _n(init_clos_make)

int clos_ensure_class_supers_(addr args, addr *ret, int *referp);
int clos_ensure_class_slots_(addr args, addr *ret);
int clos_ensure_class_direct_default_initargs_(LocalRoot local,
		addr pos, addr args, addr *ret);
int clos_ensure_class_init_(LocalRoot local, addr pos, int pushp);

int clos_finalize_(Execute ptr, addr pos, int *ret);
int clos_ensure_class_(Execute ptr, addr name, addr args, addr *ret);
int allocate_instance_standard_(Execute ptr, addr clos, addr *ret);
int initialize_instance_stdobject_(Execute ptr, addr pos, addr rest, addr *ret);
int reinitialize_instance_stdobject_(Execute ptr, addr pos, addr rest, addr *ret);
int shared_initialize_stdobject_(Execute ptr, addr pos, addr name, addr rest);
int make_instance_stdclass_(Execute ptr, addr rest, addr *ret);
int slot_boundp_using_class_common_(Execute ptr,
		addr clos, addr pos, addr name, int *ret);
int slot_makunbound_using_class_(Execute ptr, addr clos, addr pos, addr key);
int slot_value_using_class_common_(Execute ptr,
		addr clos, addr pos, addr key, addr *ret);
int setf_slot_value_using_class_common_(Execute ptr,
		addr clos, addr pos, addr key, addr value);

void init_clos_make(void);

#endif


/************************************************************
 *  clos_cache.h
 ************************************************************/
#ifndef __CLOS_CACHE_HEADER__
#define __CLOS_CACHE_HEADER__


#define hashindex_cache_ _n(hashindex_cache_)
#define cache_equal_function_ _n(cache_equal_function_)
#define cache_equal_debug _n(cache_equal_debug)

int hashindex_cache_(addr key, size_t size, size_t *ret);
int cache_equal_function_(addr left, addr right, int *ret);
int cache_equal_debug(addr left, addr right);

#endif


/************************************************************
 *  clos_defgeneric.h
 ************************************************************/
#ifndef __CLOS_DEFGENERIC_HEADER__
#define __CLOS_DEFGENERIC_HEADER__


#define generic_cache_heap _n(generic_cache_heap)
#define generic_make_ _n(generic_make_)
#define generic_make_empty_ _n(generic_make_empty_)
#define ensure_generic_function_name_ _n(ensure_generic_function_name_)
#define ensure_generic_function_common_ _n(ensure_generic_function_common_)
#define mop_generic_new_ _n(mop_generic_new_)
#define mop_generic_change_ _n(mop_generic_change_)
#define system_generic_define_ _n(system_generic_define_)
#define system_generic_method_ _n(system_generic_method_)

void generic_cache_heap(addr *ret);
int generic_make_(addr *ret, addr call, addr args);
int generic_make_empty_(addr call, addr lambda, addr *ret);
int ensure_generic_function_name_(addr name, addr *ret);
int ensure_generic_function_common_(Execute ptr, addr name, addr rest, addr *ret);
int mop_generic_new_(Execute ptr, addr name, addr rest, addr *ret);
int mop_generic_change_(Execute ptr, addr clos, addr name, addr rest);
int system_generic_define_(Execute ptr, addr name, addr args, addr *ret);
int system_generic_method_(addr gen, addr method);

#endif


/************************************************************
 *  clos_method.h
 ************************************************************/
#ifndef __CLOS_METHOD_HEADER__
#define __CLOS_METHOD_HEADER__


#define stdget_method_function_ _n(stdget_method_function_)
#define stdset_method_function_ _n(stdset_method_function_)
#define stdget_method_generic_function_ _n(stdget_method_generic_function_)
#define stdset_method_generic_function_ _n(stdset_method_generic_function_)
#define stdget_method_lambda_list_ _n(stdget_method_lambda_list_)
#define stdset_method_lambda_list_ _n(stdset_method_lambda_list_)
#define stdget_method_qualifiers_ _n(stdget_method_qualifiers_)
#define stdset_method_qualifiers_ _n(stdset_method_qualifiers_)
#define stdget_method_specializers_ _n(stdget_method_specializers_)
#define stdset_method_specializers_ _n(stdset_method_specializers_)
#define method_instance_call_ _n(method_instance_call_)
#define method_instance_lambda_ _n(method_instance_lambda_)
#define method_find_method_nil_ _n(method_find_method_nil_)
#define method_find_method_ _n(method_find_method_)
#define method_remove_method_unsafe_ _n(method_remove_method_unsafe_)
#define method_remove_method_ _n(method_remove_method_)
#define method_add_method_ _n(method_add_method_)
#define common_method_add_ _n(common_method_add_)
#define common_method_finalize_ _n(common_method_finalize_)
#define ensure_method_common_ _n(ensure_method_common_)
#define methodget_document_ _n(methodget_document_)
#define methodset_document_ _n(methodset_document_)
#define method_make_method_lambda _n(method_make_method_lambda)

/* access */
int stdget_method_function_(addr pos, addr *ret);
int stdset_method_function_(addr pos, addr value);
int stdget_method_generic_function_(addr pos, addr *ret);
int stdset_method_generic_function_(addr pos, addr value);
int stdget_method_lambda_list_(addr pos, addr *ret);
int stdset_method_lambda_list_(addr pos, addr value);
int stdget_method_qualifiers_(addr pos, addr *ret);
int stdset_method_qualifiers_(addr pos, addr value);
int stdget_method_specializers_(addr pos, addr *ret);
int stdset_method_specializers_(addr pos, addr value);

/* control */
int method_instance_call_(LocalRoot local, addr *ret, addr clos, addr call);
int method_instance_lambda_(LocalRoot local, addr *ret, addr clos, addr lambda);
int method_find_method_nil_(Execute ptr, addr gen, addr qua, addr spec, addr *ret);
int method_find_method_(Execute ptr, addr gen, addr qua, addr spec, addr *ret);
int method_remove_method_unsafe_(Execute ptr, addr gen, addr method, int *ret);
int method_remove_method_(Execute ptr, addr gen, addr method);
int method_add_method_(Execute ptr, addr gen, addr method);
int common_method_add_(Execute ptr, addr generic, addr method);
int common_method_finalize_(addr generic);
int ensure_method_common_(Execute ptr, addr *ret,
		addr name, addr lambda, addr qua, addr spec, addr call);

/* document */
int methodget_document_(addr clos, addr *ret);
int methodset_document_(addr clos, addr value);

/* common */
void method_make_method_lambda(addr list, addr env, addr *ret);

#endif


/************************************************************
 *  clos_redefine.h
 ************************************************************/
#ifndef __CLOS_REDEFINE_HEADER__
#define __CLOS_REDEFINE_HEADER__


#define clos_ensure_class_redefine_ _n(clos_ensure_class_redefine_)
#define clos_version_diff_p_ _n(clos_version_diff_p_)
#define clos_version_check_ _n(clos_version_check_)
#define clos_redefine_method_ _n(clos_redefine_method_)
#define clos_change_class_ _n(clos_change_class_)
#define clos_change_method_ _n(clos_change_method_)

int clos_ensure_class_redefine_(Execute ptr, addr clos, addr name, addr rest);
int clos_version_diff_p_(addr pos, int *ret);
int clos_version_check_(Execute ptr, addr pos, addr clos);
int clos_redefine_method_(Execute ptr,
		addr pos, addr add, addr del, addr prop, addr rest);
int clos_change_class_(Execute ptr, addr pos, addr clos, addr rest);
int clos_change_method_(Execute ptr, addr prev, addr inst, addr rest);

#endif


/************************************************************
 *  mop.h
 ************************************************************/
#ifndef __MOP_HEADER__
#define __MOP_HEADER__


#define mop_export_symbol_ _n(mop_export_symbol_)
#define mop_argument_generic_var1 _n(mop_argument_generic_var1)
#define mop_argument_generic_var2 _n(mop_argument_generic_var2)
#define mop_argument_generic_var3 _n(mop_argument_generic_var3)
#define mop_argument_generic_var4 _n(mop_argument_generic_var4)
#define mop_argument_generic_var5 _n(mop_argument_generic_var5)
#define mop_argument_generic_var1opt1 _n(mop_argument_generic_var1opt1)
#define mop_argument_generic_var3opt1 _n(mop_argument_generic_var3opt1)
#define mop_argument_generic_var1rest _n(mop_argument_generic_var1rest)
#define mop_argument_generic_var2rest _n(mop_argument_generic_var2rest)
#define mop_argument_generic_var1rest1key0 _n(mop_argument_generic_var1rest1key0)
#define mop_argument_generic_var2rest1key0 _n(mop_argument_generic_var2rest1key0)
#define mop_argument_generic_var4rest1key0 _n(mop_argument_generic_var4rest1key0)
#define mop_argument_method_var _n(mop_argument_method_var)
#define mop_argument_method_var1 _n(mop_argument_method_var1)
#define mop_argument_method_var1opt1 _n(mop_argument_method_var1opt1)
#define mop_argument_method_var1rest _n(mop_argument_method_var1rest)
#define mop_argument_method_var2 _n(mop_argument_method_var2)
#define mop_argument_method_var2rest _n(mop_argument_method_var2rest)
#define mop_argument_method_print_object _n(mop_argument_method_print_object)

int mop_export_symbol_(addr symbol);

#define ClosKeyTypeTable(r,a,b) \
	keytypetable(CONSTANT_CLOSKEY_##a, TypeTable_##b, (r))

#define ArgumentMethod_var(a,b) \
	mop_argument_method_var((a), CONSTANT_CLOS_##b)
#define ArgumentMethod_var1(a,b) \
	mop_argument_method_var1((a), CONSTANT_CLOS_##b)
#define ArgumentMethod_var1opt1(a,b,c) \
	mop_argument_method_var1opt1((a), CONSTANT_CLOS_##b, CONSTANT_CLOS_##c)
#define ArgumentMethod_var1rest(a,b) \
	mop_argument_method_var1rest((a), CONSTANT_CLOS_##b)

void mop_argument_generic_var1(addr *ret);
void mop_argument_generic_var2(addr *ret);
void mop_argument_generic_var3(addr *ret);
void mop_argument_generic_var4(addr *ret);
void mop_argument_generic_var5(addr *ret);
void mop_argument_generic_var1opt1(addr *ret);
void mop_argument_generic_var3opt1(addr *ret);
void mop_argument_generic_var1rest(addr *ret);
void mop_argument_generic_var2rest(addr *ret);
void mop_argument_generic_var1rest1key0(addr *ret);
void mop_argument_generic_var2rest1key0(addr *ret);
void mop_argument_generic_var4rest1key0(addr *ret);

void mop_argument_method_var(addr *ret, constindex index);
void mop_argument_method_var1(addr *ret, constindex var1);
void mop_argument_method_var1opt1(addr *ret, constindex var1, constindex opt1);
void mop_argument_method_var1rest(addr *ret, constindex var1);
void mop_argument_method_var2(addr *ret, constindex var1, constindex var2);
void mop_argument_method_var2rest(addr *ret, constindex var1, constindex var2);
void mop_argument_method_print_object(addr *ret, addr pos);

#endif


/************************************************************
 *  integer_calc.h
 ************************************************************/
#ifndef __INTEGER_CALC_HEADER__
#define __INTEGER_CALC_HEADER__


#define oneplus_integer_common_ _n(oneplus_integer_common_)
#define oneminus_integer_common_ _n(oneminus_integer_common_)
#define plus_fi_bignum_local_ _n(plus_fi_bignum_local_)
#define plus_fi_real_local_ _n(plus_fi_real_local_)
#define plus_fi_real_common_ _n(plus_fi_real_common_)
#define plus_bi_bignum_local_ _n(plus_bi_bignum_local_)
#define plus_bi_real_local_ _n(plus_bi_real_local_)
#define plus_bi_real_common_ _n(plus_bi_real_common_)
#define plus_ii_bignum_local_ _n(plus_ii_bignum_local_)
#define plus_ii_real_local_ _n(plus_ii_real_local_)
#define plus_ii_real_common_ _n(plus_ii_real_common_)
#define minus_ii_real_common_ _n(minus_ii_real_common_)
#define multi_ii_real_common_ _n(multi_ii_real_common_)

int oneplus_integer_common_(LocalRoot local, addr value, addr *ret);
int oneminus_integer_common_(LocalRoot local, addr value, addr *ret);
int plus_fi_bignum_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_fi_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_fi_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int plus_bi_bignum_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_bi_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_bi_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int plus_ii_bignum_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_ii_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_ii_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_ii_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int multi_ii_real_common_(LocalRoot local, addr left, addr right, addr *ret);

#endif


/************************************************************
 *  cmpl_arch.h
 ************************************************************/
#ifndef __CMPL_ARCH_HEADER__
#define __CMPL_ARCH_HEADER__


#define cexp_f _n(cexp_f)
#define cexp_d _n(cexp_d)
#define cexp_l _n(cexp_l)
#define clog_f _n(clog_f)
#define clog_d _n(clog_d)
#define clog_l _n(clog_l)
#define csin_f _n(csin_f)
#define csin_d _n(csin_d)
#define csin_l _n(csin_l)
#define ccos_f _n(ccos_f)
#define ccos_d _n(ccos_d)
#define ccos_l _n(ccos_l)
#define ctan_f _n(ctan_f)
#define ctan_d _n(ctan_d)
#define ctan_l _n(ctan_l)
#define csinh_f _n(csinh_f)
#define csinh_d _n(csinh_d)
#define csinh_l _n(csinh_l)
#define ccosh_f _n(ccosh_f)
#define ccosh_d _n(ccosh_d)
#define ccosh_l _n(ccosh_l)
#define ctanh_f _n(ctanh_f)
#define ctanh_d _n(ctanh_d)
#define ctanh_l _n(ctanh_l)
#define casin_f _n(casin_f)
#define casin_d _n(casin_d)
#define casin_l _n(casin_l)
#define cacos_f _n(cacos_f)
#define cacos_d _n(cacos_d)
#define cacos_l _n(cacos_l)
#define catan_f _n(catan_f)
#define catan_d _n(catan_d)
#define catan_l _n(catan_l)
#define casinh_f _n(casinh_f)
#define casinh_d _n(casinh_d)
#define casinh_l _n(casinh_l)
#define cacosh_f _n(cacosh_f)
#define cacosh_d _n(cacosh_d)
#define cacosh_l _n(cacosh_l)
#define catanh_f _n(catanh_f)
#define catanh_d _n(catanh_d)
#define catanh_l _n(catanh_l)
#define cabs_f _n(cabs_f)
#define cabs_d _n(cabs_d)
#define cabs_l _n(cabs_l)

void cexp_f(single_float real, single_float imag, single_float *re, single_float *im);
void cexp_d(double_float real, double_float imag, double_float *re, double_float *im);
void cexp_l(long_float real, long_float imag, long_float *re, long_float *im);
void clog_f(single_float real, single_float imag, single_float *re, single_float *im);
void clog_d(double_float real, double_float imag, double_float *re, double_float *im);
void clog_l(long_float real, long_float imag, long_float *re, long_float *im);

void csin_f(single_float real, single_float imag, single_float *re, single_float *im);
void csin_d(double_float real, double_float imag, double_float *re, double_float *im);
void csin_l(long_float real, long_float imag, long_float *re, long_float *im);
void ccos_f(single_float real, single_float imag, single_float *re, single_float *im);
void ccos_d(double_float real, double_float imag, double_float *re, double_float *im);
void ccos_l(long_float real, long_float imag, long_float *re, long_float *im);
void ctan_f(single_float real, single_float imag, single_float *re, single_float *im);
void ctan_d(double_float real, double_float imag, double_float *re, double_float *im);
void ctan_l(long_float real, long_float imag, long_float *re, long_float *im);

void csinh_f(single_float real, single_float imag, single_float *re, single_float *im);
void csinh_d(double_float real, double_float imag, double_float *re, double_float *im);
void csinh_l(long_float real, long_float imag, long_float *re, long_float *im);
void ccosh_f(single_float real, single_float imag, single_float *re, single_float *im);
void ccosh_d(double_float real, double_float imag, double_float *re, double_float *im);
void ccosh_l(long_float real, long_float imag, long_float *re, long_float *im);
void ctanh_f(single_float real, single_float imag, single_float *re, single_float *im);
void ctanh_d(double_float real, double_float imag, double_float *re, double_float *im);
void ctanh_l(long_float real, long_float imag, long_float *re, long_float *im);

void casin_f(single_float real, single_float imag, single_float *re, single_float *im);
void casin_d(double_float real, double_float imag, double_float *re, double_float *im);
void casin_l(long_float real, long_float imag, long_float *re, long_float *im);
void cacos_f(single_float real, single_float imag, single_float *re, single_float *im);
void cacos_d(double_float real, double_float imag, double_float *re, double_float *im);
void cacos_l(long_float real, long_float imag, long_float *re, long_float *im);
void catan_f(single_float real, single_float imag, single_float *re, single_float *im);
void catan_d(double_float real, double_float imag, double_float *re, double_float *im);
void catan_l(long_float real, long_float imag, long_float *re, long_float *im);

void casinh_f(single_float real, single_float imag, single_float *re, single_float *im);
void casinh_d(double_float real, double_float imag, double_float *re, double_float *im);
void casinh_l(long_float real, long_float imag, long_float *re, long_float *im);
void cacosh_f(single_float real, single_float imag, single_float *re, single_float *im);
void cacosh_d(double_float real, double_float imag, double_float *re, double_float *im);
void cacosh_l(long_float real, long_float imag, long_float *re, long_float *im);
void catanh_f(single_float real, single_float imag, single_float *re, single_float *im);
void catanh_d(double_float real, double_float imag, double_float *re, double_float *im);
void catanh_l(long_float real, long_float imag, long_float *re, long_float *im);

void cabs_f(single_float real, single_float imag, single_float *ret);
void cabs_d(double_float real, double_float imag, double_float *ret);
void cabs_l(long_float real, long_float imag, long_float *ret);

#endif


/************************************************************
 *  cmpl_math.h
 ************************************************************/
#ifndef __CMPL_MATH_HEADER__
#define __CMPL_MATH_HEADER__


#define expt_f _n(expt_f)
#define expt_d _n(expt_d)
#define expt_l _n(expt_l)
#define clogb_f_ _n(clogb_f_)
#define clogb_d_ _n(clogb_d_)
#define clogb_l_ _n(clogb_l_)
#define csqrt_f _n(csqrt_f)
#define csqrt_d _n(csqrt_d)
#define csqrt_l _n(csqrt_l)

void expt_f(single_float a, single_float b, single_float c, single_float d,
		single_float *re, single_float *im);
void expt_d(double_float a, double_float b, double_float c, double_float d,
		double_float *re, double_float *im);
void expt_l(long_float a, long_float b, long_float c, long_float d,
		long_float *re, long_float *im);
int clogb_f_(single_float a, single_float b, single_float c, single_float d,
		single_float *re, single_float *im);
int clogb_d_(double_float a, double_float b, double_float c, double_float d,
		double_float *re, double_float *im);
int clogb_l_(long_float a, long_float b, long_float c, long_float d,
		long_float *re, long_float *im);

void csqrt_f(single_float real, single_float imag, single_float *re, single_float *im);
void csqrt_d(double_float real, double_float imag, double_float *re, double_float *im);
void csqrt_l(long_float real, long_float imag, long_float *re, long_float *im);

#endif


/************************************************************
 *  float_equal.h
 ************************************************************/
#ifndef __FLOAT_EQUAL_HEADER__
#define __FLOAT_EQUAL_HEADER__


#define zerop_single_float _n(zerop_single_float)
#define zerop_double_float _n(zerop_double_float)
#define zerop_long_float _n(zerop_long_float)
#define equal_fs_real _n(equal_fs_real)
#define equal_fd_real _n(equal_fd_real)
#define equal_fl_real _n(equal_fl_real)
#define equal_bs_real_ _n(equal_bs_real_)
#define equal_bd_real_ _n(equal_bd_real_)
#define equal_bl_real_ _n(equal_bl_real_)
#define compare_fs_real _n(compare_fs_real)
#define compare_fd_real _n(compare_fd_real)
#define compare_fl_real _n(compare_fl_real)
#define compare_sf_real _n(compare_sf_real)
#define compare_df_real _n(compare_df_real)
#define compare_lf_real _n(compare_lf_real)
#define compare_ss_real _n(compare_ss_real)
#define compare_sd_real _n(compare_sd_real)
#define compare_sl_real _n(compare_sl_real)
#define compare_ds_real _n(compare_ds_real)
#define compare_dd_real _n(compare_dd_real)
#define compare_dl_real _n(compare_dl_real)
#define compare_ls_real _n(compare_ls_real)
#define compare_ld_real _n(compare_ld_real)
#define compare_ll_real _n(compare_ll_real)
#define compare_float _n(compare_float)
#define less_float_clang _n(less_float_clang)
#define less_equal_float_clang _n(less_equal_float_clang)
#define less_ss_clang _n(less_ss_clang)
#define less_dd_clang _n(less_dd_clang)
#define less_ll_clang _n(less_ll_clang)
#define less_equal_ss_clang _n(less_equal_ss_clang)
#define less_equal_dd_clang _n(less_equal_dd_clang)
#define less_equal_ll_clang _n(less_equal_ll_clang)
#define compare_float_ _n(compare_float_)
#define less_float_clang_ _n(less_float_clang_)
#define less_equal_float_clang_ _n(less_equal_float_clang_)

#define plusp_single_float(a) (0.0f < RefSingleFloat(a))
#define plusp_double_float(a) (0.0 < RefDoubleFloat(a))
#define plusp_long_float(a) (0.0L < RefLongFloat(a))
#define minusp_single_float(a) (RefSingleFloat(a) < 0.0f)
#define minusp_double_float(a) (RefDoubleFloat(a) < 0.0)
#define minusp_long_float(a) (RefLongFloat(a) < 0.0L)

int zerop_single_float(addr pos);
int zerop_double_float(addr pos);
int zerop_long_float(addr pos);

int equal_fs_real(addr left, addr right);
int equal_fd_real(addr left, addr right);
int equal_fl_real(addr left, addr right);
#define equal_sf_real(a,b) equal_fs_real((b),(a))
#define equal_df_real(a,b) equal_fd_real((b),(a))
#define equal_lf_real(a,b) equal_fl_real((b),(a))
int equal_bs_real_(addr left, addr right, int *ret);
int equal_bd_real_(addr left, addr right, int *ret);
int equal_bl_real_(addr left, addr right, int *ret);
#define equal_sb_real_(a,b,r) equal_bs_real_((b),(a),(r))
#define equal_db_real_(a,b,r) equal_bd_real_((b),(a),(r))
#define equal_lb_real_(a,b,r) equal_bl_real_((b),(a),(r))
#define equal_ss_real(a,b) (RefSingleFloat(a) == RefSingleFloat(b))
#define equal_dd_real(a,b) (RefDoubleFloat(a) == RefDoubleFloat(b))
#define equal_ll_real(a,b) (RefLongFloat(a) == RefLongFloat(b))
#define equal_sd_real(a,b) (RefSingleFloat(a) == RefDoubleFloat(b))
#define equal_sl_real(a,b) (RefSingleFloat(a) == RefLongFloat(b))
#define equal_ds_real(a,b) (RefDoubleFloat(a) == RefSingleFloat(b))
#define equal_dl_real(a,b) (RefDoubleFloat(a) == RefLongFloat(b))
#define equal_ls_real(a,b) (RefLongFloat(a) == RefSingleFloat(b))
#define equal_ld_real(a,b) (RefLongFloat(a) == RefDoubleFloat(b))

int compare_fs_real(addr left, addr right);
int compare_fd_real(addr left, addr right);
int compare_fl_real(addr left, addr right);
int compare_sf_real(addr left, addr right);
int compare_df_real(addr left, addr right);
int compare_lf_real(addr left, addr right);
int compare_ss_real(addr left, addr right);
int compare_sd_real(addr left, addr right);
int compare_sl_real(addr left, addr right);
int compare_ds_real(addr left, addr right);
int compare_dd_real(addr left, addr right);
int compare_dl_real(addr left, addr right);
int compare_ls_real(addr left, addr right);
int compare_ld_real(addr left, addr right);
int compare_ll_real(addr left, addr right);
int compare_float(addr left, addr right);
#define less_float(a,b) (compare_float((a), (b)) < 0)
#define less_equal_float(a,b) (compare_float((a), (b)) <= 0)
#define greater_float(a,b) (compare_float((a), (b)) > 0)
#define greater_equal_float(a,b) (compare_float((a), (b)) >= 0)
#define less_ss_real(a,b) (compare_ss_real((a), (b)) < 0)
#define less_equal_ss_real(a,b) (compare_ss_real((a), (b)) <= 0)
#define greater_ss_real(a,b) (compare_ss_real((a), (b)) > 0)
#define greater_equal_ss_real(a,b) (compare_ss_real((a), (b)) >= 0)
#define less_dd_real(a,b) (compare_dd_real((a), (b)) < 0)
#define less_equal_dd_real(a,b) (compare_dd_real((a), (b)) <= 0)
#define greater_dd_real(a,b) (compare_dd_real((a), (b)) > 0)
#define greater_equal_dd_real(a,b) (compare_dd_real((a), (b)) >= 0)
#define less_ll_real(a,b) (compare_ll_real((a), (b)) < 0)
#define less_equal_ll_real(a,b) (compare_ll_real((a), (b)) <= 0)
#define greater_ll_real(a,b) (compare_ll_real((a), (b)) > 0)
#define greater_equal_ll_real(a,b) (compare_ll_real((a), (b)) >= 0)
int less_float_clang(addr left, addr right);
int less_equal_float_clang(addr left, addr right);

int less_ss_clang(addr left, addr right);
int less_dd_clang(addr left, addr right);
int less_ll_clang(addr left, addr right);
int less_equal_ss_clang(addr left, addr right);
int less_equal_dd_clang(addr left, addr right);
int less_equal_ll_clang(addr left, addr right);

int compare_float_(addr left, addr right, int *ret);
int less_float_clang_(addr left, addr right, int *ret);
int less_equal_float_clang_(addr left, addr right, int *ret);

#endif


/************************************************************
 *  float_plus.h
 ************************************************************/
#ifndef __FLOAT_PLUS_HEADER__
#define __FLOAT_PLUS_HEADER__


#define plus_float_sv_alloc_ _n(plus_float_sv_alloc_)
#define plus_float_dv_alloc_ _n(plus_float_dv_alloc_)
#define plus_float_lv_alloc_ _n(plus_float_lv_alloc_)
#define plus_float_sv_local_ _n(plus_float_sv_local_)
#define plus_float_dv_local_ _n(plus_float_dv_local_)
#define plus_float_lv_local_ _n(plus_float_lv_local_)
#define plus_float_sv_heap_ _n(plus_float_sv_heap_)
#define plus_float_dv_heap_ _n(plus_float_dv_heap_)
#define plus_float_lv_heap_ _n(plus_float_lv_heap_)
#define minus_float_sv_alloc_ _n(minus_float_sv_alloc_)
#define minus_float_dv_alloc_ _n(minus_float_dv_alloc_)
#define minus_float_lv_alloc_ _n(minus_float_lv_alloc_)
#define minus_float_sv_local_ _n(minus_float_sv_local_)
#define minus_float_dv_local_ _n(minus_float_dv_local_)
#define minus_float_lv_local_ _n(minus_float_lv_local_)
#define minus_float_sv_heap_ _n(minus_float_sv_heap_)
#define minus_float_dv_heap_ _n(minus_float_dv_heap_)
#define minus_float_lv_heap_ _n(minus_float_lv_heap_)
#define minus_float_vs_alloc_ _n(minus_float_vs_alloc_)
#define minus_float_vd_alloc_ _n(minus_float_vd_alloc_)
#define minus_float_vl_alloc_ _n(minus_float_vl_alloc_)
#define minus_float_vs_local_ _n(minus_float_vs_local_)
#define minus_float_vd_local_ _n(minus_float_vd_local_)
#define minus_float_vl_local_ _n(minus_float_vl_local_)
#define minus_float_vs_heap_ _n(minus_float_vs_heap_)
#define minus_float_vd_heap_ _n(minus_float_vd_heap_)
#define minus_float_vl_heap_ _n(minus_float_vl_heap_)
#define sign_reverse_floats_alloc _n(sign_reverse_floats_alloc)
#define sign_reverse_floatd_alloc _n(sign_reverse_floatd_alloc)
#define sign_reverse_floatl_alloc _n(sign_reverse_floatl_alloc)
#define sign_reverse_floats_local _n(sign_reverse_floats_local)
#define sign_reverse_floatd_local _n(sign_reverse_floatd_local)
#define sign_reverse_floatl_local _n(sign_reverse_floatl_local)
#define sign_reverse_floats_heap _n(sign_reverse_floats_heap)
#define sign_reverse_floatd_heap _n(sign_reverse_floatd_heap)
#define sign_reverse_floatl_heap _n(sign_reverse_floatl_heap)
#define plus_float_fs_alloc_ _n(plus_float_fs_alloc_)
#define plus_float_fd_alloc_ _n(plus_float_fd_alloc_)
#define plus_float_fl_alloc_ _n(plus_float_fl_alloc_)
#define plus_float_fs_local_ _n(plus_float_fs_local_)
#define plus_float_fd_local_ _n(plus_float_fd_local_)
#define plus_float_fl_local_ _n(plus_float_fl_local_)
#define plus_float_fs_heap_ _n(plus_float_fs_heap_)
#define plus_float_fd_heap_ _n(plus_float_fd_heap_)
#define plus_float_fl_heap_ _n(plus_float_fl_heap_)
#define plus_float_bs_alloc_ _n(plus_float_bs_alloc_)
#define plus_float_bd_alloc_ _n(plus_float_bd_alloc_)
#define plus_float_bl_alloc_ _n(plus_float_bl_alloc_)
#define plus_float_bs_local_ _n(plus_float_bs_local_)
#define plus_float_bd_local_ _n(plus_float_bd_local_)
#define plus_float_bl_local_ _n(plus_float_bl_local_)
#define plus_float_bs_heap_ _n(plus_float_bs_heap_)
#define plus_float_bd_heap_ _n(plus_float_bd_heap_)
#define plus_float_bl_heap_ _n(plus_float_bl_heap_)
#define plus_float_rs_alloc_ _n(plus_float_rs_alloc_)
#define plus_float_rd_alloc_ _n(plus_float_rd_alloc_)
#define plus_float_rl_alloc_ _n(plus_float_rl_alloc_)
#define plus_float_rs_local_ _n(plus_float_rs_local_)
#define plus_float_rd_local_ _n(plus_float_rd_local_)
#define plus_float_rl_local_ _n(plus_float_rl_local_)
#define plus_float_rs_heap_ _n(plus_float_rs_heap_)
#define plus_float_rd_heap_ _n(plus_float_rd_heap_)
#define plus_float_rl_heap_ _n(plus_float_rl_heap_)
#define plus_float_ss_alloc_ _n(plus_float_ss_alloc_)
#define plus_float_sd_alloc_ _n(plus_float_sd_alloc_)
#define plus_float_sl_alloc_ _n(plus_float_sl_alloc_)
#define plus_float_ds_alloc_ _n(plus_float_ds_alloc_)
#define plus_float_dd_alloc_ _n(plus_float_dd_alloc_)
#define plus_float_dl_alloc_ _n(plus_float_dl_alloc_)
#define plus_float_ls_alloc_ _n(plus_float_ls_alloc_)
#define plus_float_ld_alloc_ _n(plus_float_ld_alloc_)
#define plus_float_ll_alloc_ _n(plus_float_ll_alloc_)
#define plus_float_ss_local_ _n(plus_float_ss_local_)
#define plus_float_sd_local_ _n(plus_float_sd_local_)
#define plus_float_sl_local_ _n(plus_float_sl_local_)
#define plus_float_ds_local_ _n(plus_float_ds_local_)
#define plus_float_dd_local_ _n(plus_float_dd_local_)
#define plus_float_dl_local_ _n(plus_float_dl_local_)
#define plus_float_ls_local_ _n(plus_float_ls_local_)
#define plus_float_ld_local_ _n(plus_float_ld_local_)
#define plus_float_ll_local_ _n(plus_float_ll_local_)
#define plus_float_ss_heap_ _n(plus_float_ss_heap_)
#define plus_float_sd_heap_ _n(plus_float_sd_heap_)
#define plus_float_sl_heap_ _n(plus_float_sl_heap_)
#define plus_float_ds_heap_ _n(plus_float_ds_heap_)
#define plus_float_dd_heap_ _n(plus_float_dd_heap_)
#define plus_float_dl_heap_ _n(plus_float_dl_heap_)
#define plus_float_ls_heap_ _n(plus_float_ls_heap_)
#define plus_float_ld_heap_ _n(plus_float_ld_heap_)
#define plus_float_ll_heap_ _n(plus_float_ll_heap_)
#define minus_float_fs_alloc_ _n(minus_float_fs_alloc_)
#define minus_float_fd_alloc_ _n(minus_float_fd_alloc_)
#define minus_float_fl_alloc_ _n(minus_float_fl_alloc_)
#define minus_float_fs_local_ _n(minus_float_fs_local_)
#define minus_float_fd_local_ _n(minus_float_fd_local_)
#define minus_float_fl_local_ _n(minus_float_fl_local_)
#define minus_float_fs_heap_ _n(minus_float_fs_heap_)
#define minus_float_fd_heap_ _n(minus_float_fd_heap_)
#define minus_float_fl_heap_ _n(minus_float_fl_heap_)
#define minus_float_sf_alloc_ _n(minus_float_sf_alloc_)
#define minus_float_df_alloc_ _n(minus_float_df_alloc_)
#define minus_float_lf_alloc_ _n(minus_float_lf_alloc_)
#define minus_float_sf_local_ _n(minus_float_sf_local_)
#define minus_float_df_local_ _n(minus_float_df_local_)
#define minus_float_lf_local_ _n(minus_float_lf_local_)
#define minus_float_sf_heap_ _n(minus_float_sf_heap_)
#define minus_float_df_heap_ _n(minus_float_df_heap_)
#define minus_float_lf_heap_ _n(minus_float_lf_heap_)
#define minus_float_bs_alloc_ _n(minus_float_bs_alloc_)
#define minus_float_bd_alloc_ _n(minus_float_bd_alloc_)
#define minus_float_bl_alloc_ _n(minus_float_bl_alloc_)
#define minus_float_bs_local_ _n(minus_float_bs_local_)
#define minus_float_bd_local_ _n(minus_float_bd_local_)
#define minus_float_bl_local_ _n(minus_float_bl_local_)
#define minus_float_bs_heap_ _n(minus_float_bs_heap_)
#define minus_float_bd_heap_ _n(minus_float_bd_heap_)
#define minus_float_bl_heap_ _n(minus_float_bl_heap_)
#define minus_float_sb_alloc_ _n(minus_float_sb_alloc_)
#define minus_float_db_alloc_ _n(minus_float_db_alloc_)
#define minus_float_lb_alloc_ _n(minus_float_lb_alloc_)
#define minus_float_sb_local_ _n(minus_float_sb_local_)
#define minus_float_db_local_ _n(minus_float_db_local_)
#define minus_float_lb_local_ _n(minus_float_lb_local_)
#define minus_float_sb_heap_ _n(minus_float_sb_heap_)
#define minus_float_db_heap_ _n(minus_float_db_heap_)
#define minus_float_lb_heap_ _n(minus_float_lb_heap_)
#define minus_float_rs_alloc_ _n(minus_float_rs_alloc_)
#define minus_float_rd_alloc_ _n(minus_float_rd_alloc_)
#define minus_float_rl_alloc_ _n(minus_float_rl_alloc_)
#define minus_float_rs_local_ _n(minus_float_rs_local_)
#define minus_float_rd_local_ _n(minus_float_rd_local_)
#define minus_float_rl_local_ _n(minus_float_rl_local_)
#define minus_float_rs_heap_ _n(minus_float_rs_heap_)
#define minus_float_rd_heap_ _n(minus_float_rd_heap_)
#define minus_float_rl_heap_ _n(minus_float_rl_heap_)
#define minus_float_sr_alloc_ _n(minus_float_sr_alloc_)
#define minus_float_dr_alloc_ _n(minus_float_dr_alloc_)
#define minus_float_lr_alloc_ _n(minus_float_lr_alloc_)
#define minus_float_sr_local_ _n(minus_float_sr_local_)
#define minus_float_dr_local_ _n(minus_float_dr_local_)
#define minus_float_lr_local_ _n(minus_float_lr_local_)
#define minus_float_sr_heap_ _n(minus_float_sr_heap_)
#define minus_float_dr_heap_ _n(minus_float_dr_heap_)
#define minus_float_lr_heap_ _n(minus_float_lr_heap_)
#define minus_float_ss_alloc_ _n(minus_float_ss_alloc_)
#define minus_float_sd_alloc_ _n(minus_float_sd_alloc_)
#define minus_float_sl_alloc_ _n(minus_float_sl_alloc_)
#define minus_float_ds_alloc_ _n(minus_float_ds_alloc_)
#define minus_float_dd_alloc_ _n(minus_float_dd_alloc_)
#define minus_float_dl_alloc_ _n(minus_float_dl_alloc_)
#define minus_float_ls_alloc_ _n(minus_float_ls_alloc_)
#define minus_float_ld_alloc_ _n(minus_float_ld_alloc_)
#define minus_float_ll_alloc_ _n(minus_float_ll_alloc_)
#define minus_float_ss_local_ _n(minus_float_ss_local_)
#define minus_float_sd_local_ _n(minus_float_sd_local_)
#define minus_float_sl_local_ _n(minus_float_sl_local_)
#define minus_float_ds_local_ _n(minus_float_ds_local_)
#define minus_float_dd_local_ _n(minus_float_dd_local_)
#define minus_float_dl_local_ _n(minus_float_dl_local_)
#define minus_float_ls_local_ _n(minus_float_ls_local_)
#define minus_float_ld_local_ _n(minus_float_ld_local_)
#define minus_float_ll_local_ _n(minus_float_ll_local_)
#define minus_float_ss_heap_ _n(minus_float_ss_heap_)
#define minus_float_sd_heap_ _n(minus_float_sd_heap_)
#define minus_float_sl_heap_ _n(minus_float_sl_heap_)
#define minus_float_ds_heap_ _n(minus_float_ds_heap_)
#define minus_float_dd_heap_ _n(minus_float_dd_heap_)
#define minus_float_dl_heap_ _n(minus_float_dl_heap_)
#define minus_float_ls_heap_ _n(minus_float_ls_heap_)
#define minus_float_ld_heap_ _n(minus_float_ld_heap_)
#define minus_float_ll_heap_ _n(minus_float_ll_heap_)

int plus_float_sv_alloc_(LocalRoot local, addr left, single_float right, addr *ret);
int plus_float_dv_alloc_(LocalRoot local, addr left, double_float right, addr *ret);
int plus_float_lv_alloc_(LocalRoot local, addr left, long_float right, addr *ret);
int plus_float_sv_local_(LocalRoot local, addr left, single_float right, addr *ret);
int plus_float_dv_local_(LocalRoot local, addr left, double_float right, addr *ret);
int plus_float_lv_local_(LocalRoot local, addr left, long_float right, addr *ret);
int plus_float_sv_heap_(addr left, single_float right, addr *ret);
int plus_float_dv_heap_(addr left, double_float right, addr *ret);
int plus_float_lv_heap_(addr left, long_float right, addr *ret);

int minus_float_sv_alloc_(LocalRoot local, addr left, single_float right, addr *ret);
int minus_float_dv_alloc_(LocalRoot local, addr left, double_float right, addr *ret);
int minus_float_lv_alloc_(LocalRoot local, addr left, long_float right, addr *ret);
int minus_float_sv_local_(LocalRoot local, addr left, single_float right, addr *ret);
int minus_float_dv_local_(LocalRoot local, addr left, double_float right, addr *ret);
int minus_float_lv_local_(LocalRoot local, addr left, long_float right, addr *ret);
int minus_float_sv_heap_(addr left, single_float right, addr *ret);
int minus_float_dv_heap_(addr left, double_float right, addr *ret);
int minus_float_lv_heap_(addr left, long_float right, addr *ret);

int minus_float_vs_alloc_(LocalRoot local, single_float left, addr right, addr *ret);
int minus_float_vd_alloc_(LocalRoot local, double_float left, addr right, addr *ret);
int minus_float_vl_alloc_(LocalRoot local, long_float left, addr right, addr *ret);
int minus_float_vs_local_(LocalRoot local, single_float left, addr right, addr *ret);
int minus_float_vd_local_(LocalRoot local, double_float left, addr right, addr *ret);
int minus_float_vl_local_(LocalRoot local, long_float left, addr right, addr *ret);
int minus_float_vs_heap_(single_float left, addr right, addr *ret);
int minus_float_vd_heap_(double_float left, addr right, addr *ret);
int minus_float_vl_heap_(long_float left, addr right, addr *ret);

void sign_reverse_floats_alloc(LocalRoot local, addr value, addr *ret);
void sign_reverse_floatd_alloc(LocalRoot local, addr value, addr *ret);
void sign_reverse_floatl_alloc(LocalRoot local, addr value, addr *ret);
void sign_reverse_floats_local(LocalRoot local, addr value, addr *ret);
void sign_reverse_floatd_local(LocalRoot local, addr value, addr *ret);
void sign_reverse_floatl_local(LocalRoot local, addr value, addr *ret);
void sign_reverse_floats_heap(addr value, addr *ret);
void sign_reverse_floatd_heap(addr value, addr *ret);
void sign_reverse_floatl_heap(addr value, addr *ret);

int plus_float_fs_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_fd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_fl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_fs_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_fd_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_fl_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_fs_heap_(addr left, addr right, addr *ret);
int plus_float_fd_heap_(addr left, addr right, addr *ret);
int plus_float_fl_heap_(addr left, addr right, addr *ret);
#define plus_float_sf_alloc_(m,a,b,r) plus_float_fs_alloc_((m),(b),(a),(r))
#define plus_float_df_alloc_(m,a,b,r) plus_float_fd_alloc_((m),(b),(a),(r))
#define plus_float_lf_alloc_(m,a,b,r) plus_float_fl_alloc_((m),(b),(a),(r))
#define plus_float_sf_local_(m,a,b,r) plus_float_fs_local_((m),(b),(a),(r))
#define plus_float_df_local_(m,a,b,r) plus_float_fd_local_((m),(b),(a),(r))
#define plus_float_lf_local_(m,a,b,r) plus_float_fl_local_((m),(b),(a),(r))
#define plus_float_sf_heap_(a,b,r) plus_float_fs_heap_((b),(a),(r))
#define plus_float_df_heap_(a,b,r) plus_float_fd_heap_((b),(a),(r))
#define plus_float_lf_heap_(a,b,r) plus_float_fl_heap_((b),(a),(r))

int plus_float_bs_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_bd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_bl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_bs_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_bd_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_bl_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_bs_heap_(addr left, addr right, addr *ret);
int plus_float_bd_heap_(addr left, addr right, addr *ret);
int plus_float_bl_heap_(addr left, addr right, addr *ret);
#define plus_float_sb_alloc_(m,a,b,r) plus_float_bs_alloc_((m),(b),(a),(r))
#define plus_float_db_alloc_(m,a,b,r) plus_float_bd_alloc_((m),(b),(a),(r))
#define plus_float_lb_alloc_(m,a,b,r) plus_float_bl_alloc_((m),(b),(a),(r))
#define plus_float_sb_local_(m,a,b,r) plus_float_bs_local_((m),(b),(a),(r))
#define plus_float_db_local_(m,a,b,r) plus_float_bd_local_((m),(b),(a),(r))
#define plus_float_lb_local_(m,a,b,r) plus_float_bl_local_((m),(b),(a),(r))
#define plus_float_sb_heap_(a,b,r) plus_float_bs_heap_((b),(a),(r))
#define plus_float_db_heap_(a,b,r) plus_float_bd_heap_((b),(a),(r))
#define plus_float_lb_heap_(a,b,r) plus_float_bl_heap_((b),(a),(r))

int plus_float_rs_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_rd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_rl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_rs_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_rd_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_rl_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_rs_heap_(addr left, addr right, addr *ret);
int plus_float_rd_heap_(addr left, addr right, addr *ret);
int plus_float_rl_heap_(addr left, addr right, addr *ret);
#define plus_float_sr_alloc_(m,a,b,r) plus_float_rs_alloc_((m),(b),(a),(r))
#define plus_float_dr_alloc_(m,a,b,r) plus_float_rd_alloc_((m),(b),(a),(r))
#define plus_float_lr_alloc_(m,a,b,r) plus_float_rl_alloc_((m),(b),(a),(r))
#define plus_float_sr_local_(m,a,b,r) plus_float_rs_local_((m),(b),(a),(r))
#define plus_float_dr_local_(m,a,b,r) plus_float_rd_local_((m),(b),(a),(r))
#define plus_float_lr_local_(m,a,b,r) plus_float_rl_local_((m),(b),(a),(r))
#define plus_float_sr_heap_(a,b,r) plus_float_rs_heap_((b),(a),(r))
#define plus_float_dr_heap_(a,b,r) plus_float_rd_heap_((b),(a),(r))
#define plus_float_lr_heap_(a,b,r) plus_float_rl_heap_((b),(a),(r))

int plus_float_ss_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_sd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_sl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_ds_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_dd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_dl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_ls_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_ld_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_ll_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_ss_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_sd_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_sl_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_ds_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_dd_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_dl_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_ls_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_ld_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_ll_local_(LocalRoot local, addr left, addr right, addr *ret);
int plus_float_ss_heap_(addr left, addr right, addr *ret);
int plus_float_sd_heap_(addr left, addr right, addr *ret);
int plus_float_sl_heap_(addr left, addr right, addr *ret);
int plus_float_ds_heap_(addr left, addr right, addr *ret);
int plus_float_dd_heap_(addr left, addr right, addr *ret);
int plus_float_dl_heap_(addr left, addr right, addr *ret);
int plus_float_ls_heap_(addr left, addr right, addr *ret);
int plus_float_ld_heap_(addr left, addr right, addr *ret);
int plus_float_ll_heap_(addr left, addr right, addr *ret);

int minus_float_fs_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_fd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_fl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_fs_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_fd_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_fl_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_fs_heap_(addr left, addr right, addr *ret);
int minus_float_fd_heap_(addr left, addr right, addr *ret);
int minus_float_fl_heap_(addr left, addr right, addr *ret);

int minus_float_sf_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_df_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_lf_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_sf_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_df_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_lf_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_sf_heap_(addr left, addr right, addr *ret);
int minus_float_df_heap_(addr left, addr right, addr *ret);
int minus_float_lf_heap_(addr left, addr right, addr *ret);

int minus_float_bs_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_bd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_bl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_bs_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_bd_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_bl_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_bs_heap_(addr left, addr right, addr *ret);
int minus_float_bd_heap_(addr left, addr right, addr *ret);
int minus_float_bl_heap_(addr left, addr right, addr *ret);

int minus_float_sb_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_db_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_lb_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_sb_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_db_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_lb_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_sb_heap_(addr left, addr right, addr *ret);
int minus_float_db_heap_(addr left, addr right, addr *ret);
int minus_float_lb_heap_(addr left, addr right, addr *ret);

int minus_float_rs_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_rd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_rl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_rs_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_rd_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_rl_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_rs_heap_(addr left, addr right, addr *ret);
int minus_float_rd_heap_(addr left, addr right, addr *ret);
int minus_float_rl_heap_(addr left, addr right, addr *ret);

int minus_float_sr_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_dr_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_lr_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_sr_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_dr_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_lr_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_sr_heap_(addr left, addr right, addr *ret);
int minus_float_dr_heap_(addr left, addr right, addr *ret);
int minus_float_lr_heap_(addr left, addr right, addr *ret);

int minus_float_ss_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_sd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_sl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_ds_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_dd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_dl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_ls_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_ld_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_ll_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_ss_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_sd_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_sl_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_ds_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_dd_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_dl_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_ls_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_ld_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_ll_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_float_ss_heap_(addr left, addr right, addr *ret);
int minus_float_sd_heap_(addr left, addr right, addr *ret);
int minus_float_sl_heap_(addr left, addr right, addr *ret);
int minus_float_ds_heap_(addr left, addr right, addr *ret);
int minus_float_dd_heap_(addr left, addr right, addr *ret);
int minus_float_dl_heap_(addr left, addr right, addr *ret);
int minus_float_ls_heap_(addr left, addr right, addr *ret);
int minus_float_ld_heap_(addr left, addr right, addr *ret);
int minus_float_ll_heap_(addr left, addr right, addr *ret);

#endif


/************************************************************
 *  rational.h
 ************************************************************/
#ifndef __RATIONAL_HEADER__
#define __RATIONAL_HEADER__


#define rationalp _n(rationalp)
#define rational_result_local_ _n(rational_result_local_)
#define rational_result_heap_ _n(rational_result_heap_)
#define rational_throw_alloc_ _n(rational_throw_alloc_)
#define rational_throw_local_ _n(rational_throw_local_)
#define rational_throw_heap_ _n(rational_throw_heap_)
#define rational_copy_alloc_ _n(rational_copy_alloc_)
#define rational_copy_local_ _n(rational_copy_local_)
#define rational_copy_heap_ _n(rational_copy_heap_)
#define single_float_rational_ _n(single_float_rational_)
#define double_float_rational_ _n(double_float_rational_)
#define long_float_rational_ _n(long_float_rational_)
#define numerator_common_ _n(numerator_common_)
#define denominator_common_ _n(denominator_common_)

int rationalp(addr pos);

int rational_result_local_(LocalRoot local, addr pos, addr *ret);
int rational_result_heap_(LocalRoot local, addr pos, addr *ret);
int rational_throw_alloc_(LocalRoot local, addr pos, addr *ret);
int rational_throw_local_(LocalRoot local, addr pos, addr *ret);
int rational_throw_heap_(addr pos, addr *ret);
int rational_copy_alloc_(LocalRoot local, addr pos, addr *ret);
int rational_copy_local_(LocalRoot local, addr pos, addr *ret);
int rational_copy_heap_(addr pos, addr *ret);

int single_float_rational_(addr pos, single_float *ret);
int double_float_rational_(addr pos, double_float *ret);
int long_float_rational_(addr pos, long_float *ret);

int numerator_common_(addr pos, addr *ret);
int denominator_common_(addr pos, addr *ret);

#endif


/************************************************************
 *  rational_equal.h
 ************************************************************/
#ifndef __RATIONAL_EQUAL_HEADER__
#define __RATIONAL_EQUAL_HEADER__


#define plusp_rational_ _n(plusp_rational_)
#define minusp_rational_ _n(minusp_rational_)
#define zerop_rational_ _n(zerop_rational_)
#define equal_rational_ _n(equal_rational_)
#define not_equal_rational_ _n(not_equal_rational_)
#define compare_rational_ _n(compare_rational_)
#define less_rational_ _n(less_rational_)
#define less_equal_rational_ _n(less_equal_rational_)
#define greater_rational_ _n(greater_rational_)
#define greater_equal_rational_ _n(greater_equal_rational_)
#define less_rational_debug _n(less_rational_debug)
#define less_equal_rational_debug _n(less_equal_rational_debug)

int plusp_rational_(addr pos, int *ret);
int minusp_rational_(addr pos, int *ret);
int zerop_rational_(addr pos, int *ret);
int equal_rational_(addr left, addr right, int *ret);
int not_equal_rational_(addr left, addr right, int *ret);
int compare_rational_(LocalRoot local, addr left, addr right, int *ret);
int less_rational_(LocalRoot local, addr left, addr right, int *ret);
int less_equal_rational_(LocalRoot local, addr left, addr right, int *ret);
int greater_rational_(LocalRoot local, addr left, addr right, int *ret);
int greater_equal_rational_(LocalRoot local, addr left, addr right, int *ret);

int less_rational_debug(LocalRoot local, addr left, addr right);
int less_equal_rational_debug(LocalRoot local, addr left, addr right);

#endif


/************************************************************
 *  rational_plus.h
 ************************************************************/
#ifndef __RATIONAL_PLUS_HEADER__
#define __RATIONAL_PLUS_HEADER__


#define sign_reverse_rational_common_ _n(sign_reverse_rational_common_)
#define sign_reverse_rational_local_ _n(sign_reverse_rational_local_)
#define oneplus_rational_common_ _n(oneplus_rational_common_)
#define oneminus_rational_common_ _n(oneminus_rational_common_)
#define plus_fixnum_rational_common_ _n(plus_fixnum_rational_common_)
#define plus_bignum_rational_common_ _n(plus_bignum_rational_common_)
#define plus_ratio_rational_common_ _n(plus_ratio_rational_common_)
#define plus_single_rational_common_ _n(plus_single_rational_common_)
#define plus_double_rational_common_ _n(plus_double_rational_common_)
#define plus_long_rational_common_ _n(plus_long_rational_common_)
#define plus_rational_common_ _n(plus_rational_common_)
#define plus_rational_local_ _n(plus_rational_local_)
#define minus_fixnum_rational_common_ _n(minus_fixnum_rational_common_)
#define minus_rational_fixnum_common_ _n(minus_rational_fixnum_common_)
#define minus_bignum_rational_common_ _n(minus_bignum_rational_common_)
#define minus_rational_bignum_common_ _n(minus_rational_bignum_common_)
#define minus_ratio_rational_common_ _n(minus_ratio_rational_common_)
#define minus_rational_ratio_common_ _n(minus_rational_ratio_common_)
#define minus_single_rational_common_ _n(minus_single_rational_common_)
#define minus_rational_single_common_ _n(minus_rational_single_common_)
#define minus_double_rational_common_ _n(minus_double_rational_common_)
#define minus_rational_double_common_ _n(minus_rational_double_common_)
#define minus_long_rational_common_ _n(minus_long_rational_common_)
#define minus_rational_long_common_ _n(minus_rational_long_common_)
#define minus_rational_local_ _n(minus_rational_local_)
#define minus_rational_common_ _n(minus_rational_common_)

int sign_reverse_rational_common_(addr pos, addr *ret);
int sign_reverse_rational_local_(LocalRoot local, addr pos, addr *ret);

int oneplus_rational_common_(LocalRoot local, addr value, addr *ret);
int oneminus_rational_common_(LocalRoot local, addr value, addr *ret);

int plus_fixnum_rational_common_(LocalRoot local, addr left, addr right, addr *ret);
int plus_bignum_rational_common_(LocalRoot local, addr left, addr right, addr *ret);
int plus_ratio_rational_common_(LocalRoot local, addr left, addr right, addr *ret);
int plus_single_rational_common_(addr left, addr right, addr *ret);
int plus_double_rational_common_(addr left, addr right, addr *ret);
int plus_long_rational_common_(addr left, addr right, addr *ret);
int plus_rational_common_(LocalRoot local, addr left, addr right, addr *ret);
#define plus_rational_fixnum_common_(m,a,b,r) \
	plus_fixnum_rational_common_((m),(b),(a),(r))
#define plus_rational_bignum_common_(m,a,b,r) \
	plus_bignum_rational_common_((m),(b),(a),(r))
#define plus_rational_ratio_common_(m,a,b,r) \
	plus_ratio_rational_common_((m),(b),(a),(r))
#define plus_rational_single_common_(a,b,r) \
	plus_single_rational_common_((b),(a),(r))
#define plus_rational_double_common_(a,b,r) \
	plus_double_rational_common_((b),(a),(r))
#define plus_rational_long_common_(a,b,r) \
	plus_long_rational_common_((b),(a),(r))
int plus_rational_local_(LocalRoot local, addr left, addr right, addr *ret);

int minus_fixnum_rational_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_rational_fixnum_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_bignum_rational_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_rational_bignum_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_ratio_rational_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_rational_ratio_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_single_rational_common_(addr left, addr right, addr *ret);
int minus_rational_single_common_(addr left, addr right, addr *ret);
int minus_double_rational_common_(addr left, addr right, addr *ret);
int minus_rational_double_common_(addr left, addr right, addr *ret);
int minus_long_rational_common_(addr left, addr right, addr *ret);
int minus_rational_long_common_(addr left, addr right, addr *ret);
int minus_rational_local_(LocalRoot local, addr left, addr right, addr *ret);
int minus_rational_common_(LocalRoot local, addr left, addr right, addr *ret);

#endif


/************************************************************
 *  cmpl_multi.h
 ************************************************************/
#ifndef __CMPL_MULTI_HEADER__
#define __CMPL_MULTI_HEADER__


#define multi_rational_complex_common_ _n(multi_rational_complex_common_)
#define multi_fc_number_common_ _n(multi_fc_number_common_)
#define multi_bc_number_common_ _n(multi_bc_number_common_)
#define multi_rc_number_common_ _n(multi_rc_number_common_)
#define multi_sc_number_common_ _n(multi_sc_number_common_)
#define multi_dc_number_common_ _n(multi_dc_number_common_)
#define multi_lc_number_common_ _n(multi_lc_number_common_)
#define multi_cc_number_common_ _n(multi_cc_number_common_)
#define inverse_complex_common_ _n(inverse_complex_common_)
#define div_rational_complex_common_ _n(div_rational_complex_common_)
#define div_complex_rational_common_ _n(div_complex_rational_common_)
#define div_fc_number_common_ _n(div_fc_number_common_)
#define div_cf_number_common_ _n(div_cf_number_common_)
#define div_bc_number_common_ _n(div_bc_number_common_)
#define div_cb_number_common_ _n(div_cb_number_common_)
#define div_rc_number_common_ _n(div_rc_number_common_)
#define div_cr_number_common_ _n(div_cr_number_common_)
#define div_sc_number_common_ _n(div_sc_number_common_)
#define div_cs_number_common_ _n(div_cs_number_common_)
#define div_dc_number_common_ _n(div_dc_number_common_)
#define div_cd_number_common_ _n(div_cd_number_common_)
#define div_lc_number_common_ _n(div_lc_number_common_)
#define div_cl_number_common_ _n(div_cl_number_common_)
#define div_cc_number_common_ _n(div_cc_number_common_)

int multi_rational_complex_common_(LocalRoot local, addr left, addr right, addr *ret);
int multi_fc_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int multi_bc_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int multi_rc_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int multi_sc_number_common_(addr left, addr right, addr *ret);
int multi_dc_number_common_(addr left, addr right, addr *ret);
int multi_lc_number_common_(addr left, addr right, addr *ret);
int multi_cc_number_common_(LocalRoot local, addr left, addr right, addr *ret);
#define multi_cf_number_common_(m,a,b,r) multi_fc_number_common_((m),(b),(a),(r))
#define multi_cb_number_common_(m,a,b,r) multi_bc_number_common_((m),(b),(a),(r))
#define multi_cr_number_common_(m,a,b,r) multi_rc_number_common_((m),(b),(a),(r))
#define multi_cs_number_common_(a,b,r) multi_sc_number_common_((b),(a),(r))
#define multi_cd_number_common_(a,b,r) multi_dc_number_common_((b),(a),(r))
#define multi_cl_number_common_(a,b,r) multi_lc_number_common_((b),(a),(r))

int inverse_complex_common_(LocalRoot local, addr pos, addr *ret);

int div_rational_complex_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_complex_rational_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_fc_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_cf_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_bc_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_cb_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_rc_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_cr_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_sc_number_common_(addr left, addr right, addr *ret);
int div_cs_number_common_(addr left, addr right, addr *ret);
int div_dc_number_common_(addr left, addr right, addr *ret);
int div_cd_number_common_(addr left, addr right, addr *ret);
int div_lc_number_common_(addr left, addr right, addr *ret);
int div_cl_number_common_(addr left, addr right, addr *ret);
int div_cc_number_common_(LocalRoot local, addr left, addr right, addr *ret);

#endif


/************************************************************
 *  math_type.h
 ************************************************************/
#ifndef __MATH_TYPE_HEADER__
#define __MATH_TYPE_HEADER__


#define getmathtype_float_ _n(getmathtype_float_)
#define getmathreal2_float_ _n(getmathreal2_float_)
#define getmathreal2_addr_ _n(getmathreal2_addr_)
#define getmathcomplex1_log_ _n(getmathcomplex1_log_)
#define getmathcomplex1_inverse_ _n(getmathcomplex1_inverse_)
#define getmathcomplex1_sqrt_ _n(getmathcomplex1_sqrt_)
#define getmathcomplex2_float_ _n(getmathcomplex2_float_)
#define getmathcomplex2_addr_ _n(getmathcomplex2_addr_)

enum MathType {
	MathType_single,
	MathType_double,
	MathType_long,
	MathType_complex,
	MathType_rational,
	MathType_error
};

struct mathtype_struct {
	enum MathType type;
	union {
		single_float s;
		double_float d;
		long_float l;
	} v;
};

struct mathreal2_single {
	single_float a, b;
};
struct mathreal2_double {
	double_float a, b;
};
struct mathreal2_long {
	long_float a, b;
};
struct mathtype_addr {
	addr x, y;
};
struct mathreal2_struct {
	enum MathType type;
	union {
		struct mathreal2_single s;
		struct mathreal2_double d;
		struct mathreal2_long l;
		struct mathtype_addr a;
	} v;
};

struct mathcomplex2_single {
	single_float a, b, c, d;
};
struct mathcomplex2_double {
	double_float a, b, c, d;
};
struct mathcomplex2_long {
	long_float a, b, c, d;
};
struct mathcomplex2_struct {
	enum MathType type;
	union {
		struct mathcomplex2_single s;
		struct mathcomplex2_double d;
		struct mathcomplex2_long l;
		struct mathtype_addr a;
	} v;
};

int getmathtype_float_(struct mathtype_struct *ptr,
		addr pos, enum MathType *ret);
int getmathreal2_float_(struct mathreal2_struct *ptr,
		addr x, addr y, enum MathType *ret);
int getmathreal2_addr_(struct mathreal2_struct *ptr,
		addr x, addr y, enum MathType *ret);
int getmathcomplex1_log_(struct mathreal2_struct *ptr,
		addr pos, enum MathType *ret);
int getmathcomplex1_inverse_(struct mathreal2_struct *ptr,
		addr pos, enum MathType *ret);
int getmathcomplex1_sqrt_(struct mathreal2_struct *ptr,
		addr pos, enum MathType *ret);
int getmathcomplex2_float_(struct mathcomplex2_struct *ptr,
		addr x, addr y, enum MathType *ret);
int getmathcomplex2_addr_(struct mathcomplex2_struct *ptr,
		addr x, addr y, enum MathType *ret);

#endif


/************************************************************
 *  rational_multi.h
 ************************************************************/
#ifndef __RATIONAL_MULTI_HEADER__
#define __RATIONAL_MULTI_HEADER__


#define multi_fixnum_rational_common_ _n(multi_fixnum_rational_common_)
#define multi_bignum_rational_common_ _n(multi_bignum_rational_common_)
#define multi_ratio_rational_common_ _n(multi_ratio_rational_common_)
#define multi_single_rational_common_ _n(multi_single_rational_common_)
#define multi_double_rational_common_ _n(multi_double_rational_common_)
#define multi_long_rational_common_ _n(multi_long_rational_common_)
#define multi_rational_common_ _n(multi_rational_common_)
#define multi_fixnum_rational_local_ _n(multi_fixnum_rational_local_)
#define multi_bignum_rational_local_ _n(multi_bignum_rational_local_)
#define multi_ratio_rational_local_ _n(multi_ratio_rational_local_)
#define multi_rational_local_ _n(multi_rational_local_)
#define div_fixnum_rational_common_ _n(div_fixnum_rational_common_)
#define div_rational_fixnum_common_ _n(div_rational_fixnum_common_)
#define div_bignum_rational_common_ _n(div_bignum_rational_common_)
#define div_rational_bignum_common_ _n(div_rational_bignum_common_)
#define div_ratio_rational_common_ _n(div_ratio_rational_common_)
#define div_rational_ratio_common_ _n(div_rational_ratio_common_)
#define div_single_rational_common_ _n(div_single_rational_common_)
#define div_rational_single_common_ _n(div_rational_single_common_)
#define div_double_rational_common_ _n(div_double_rational_common_)
#define div_rational_double_common_ _n(div_rational_double_common_)
#define div_long_rational_common_ _n(div_long_rational_common_)
#define div_rational_long_common_ _n(div_rational_long_common_)
#define div_rational_local_ _n(div_rational_local_)
#define inverse_rational_common_ _n(inverse_rational_common_)

int multi_fixnum_rational_common_(LocalRoot local, addr left, addr right, addr *ret);
int multi_bignum_rational_common_(LocalRoot local, addr left, addr right, addr *ret);
int multi_ratio_rational_common_(LocalRoot local, addr left, addr right, addr *ret);
int multi_single_rational_common_(addr left, addr right, addr *ret);
int multi_double_rational_common_(addr left, addr right, addr *ret);
int multi_long_rational_common_(addr left, addr right, addr *ret);
#define multi_rational_fixnum_common_(m,a,b,r) \
	multi_fixnum_rational_common_((m),(b),(a),(r))
#define multi_rational_bignum_common_(m,a,b,r) \
	multi_bignum_rational_common_((m),(b),(a),(r))
#define multi_rational_ratio_common_(m,a,b,r) \
	multi_ratio_rational_common_((m),(b),(a),(r))
#define multi_rational_single_common_(a,b,r) \
	multi_single_rational_common_((b),(a),(r))
#define multi_rational_double_common_(a,b,r) \
	multi_double_rational_common_((b),(a),(r))
#define multi_rational_long_common_(a,b,r) \
	multi_long_rational_common_((b),(a),(r))
int multi_rational_common_(LocalRoot local, addr left, addr right, addr *ret);
int multi_fixnum_rational_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_bignum_rational_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_ratio_rational_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_rational_local_(LocalRoot local, addr left, addr right, addr *ret);

int div_fixnum_rational_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_rational_fixnum_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_bignum_rational_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_rational_bignum_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_ratio_rational_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_rational_ratio_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_single_rational_common_(addr left, addr right, addr *ret);
int div_rational_single_common_(addr left, addr right, addr *ret);
int div_double_rational_common_(addr left, addr right, addr *ret);
int div_rational_double_common_(addr left, addr right, addr *ret);
int div_long_rational_common_(addr left, addr right, addr *ret);
int div_rational_long_common_(addr left, addr right, addr *ret);
int div_rational_local_(LocalRoot local, addr left, addr right, addr *ret);

int inverse_rational_common_(LocalRoot local, addr pos, addr *ret);

#endif


/************************************************************
 *  cmpl_plus.h
 ************************************************************/
#ifndef __CMPL_PLUS_HEADER__
#define __CMPL_PLUS_HEADER__


#define oneplus_complex_heap_ _n(oneplus_complex_heap_)
#define oneminus_complex_heap_ _n(oneminus_complex_heap_)
#define plus_rational_complex_common_ _n(plus_rational_complex_common_)
#define plus_fc_number_common_ _n(plus_fc_number_common_)
#define plus_bc_number_common_ _n(plus_bc_number_common_)
#define plus_rc_number_common_ _n(plus_rc_number_common_)
#define plus_sc_number_common_ _n(plus_sc_number_common_)
#define plus_dc_number_common_ _n(plus_dc_number_common_)
#define plus_lc_number_common_ _n(plus_lc_number_common_)
#define plus_cc_number_common_ _n(plus_cc_number_common_)
#define minus_rational_complex_common_ _n(minus_rational_complex_common_)
#define minus_complex_rational_common_ _n(minus_complex_rational_common_)
#define minus_fc_number_common_ _n(minus_fc_number_common_)
#define minus_cf_number_common_ _n(minus_cf_number_common_)
#define minus_bc_number_common_ _n(minus_bc_number_common_)
#define minus_cb_number_common_ _n(minus_cb_number_common_)
#define minus_rc_number_common_ _n(minus_rc_number_common_)
#define minus_cr_number_common_ _n(minus_cr_number_common_)
#define minus_sc_number_common_ _n(minus_sc_number_common_)
#define minus_cs_number_common_ _n(minus_cs_number_common_)
#define minus_dc_number_common_ _n(minus_dc_number_common_)
#define minus_cd_number_common_ _n(minus_cd_number_common_)
#define minus_lc_number_common_ _n(minus_lc_number_common_)
#define minus_cl_number_common_ _n(minus_cl_number_common_)
#define minus_cc_number_common_ _n(minus_cc_number_common_)

int oneplus_complex_heap_(LocalRoot local, addr pos, addr *ret);
int oneminus_complex_heap_(LocalRoot local, addr pos, addr *ret);

int plus_rational_complex_common_(LocalRoot local, addr left, addr right, addr *ret);
int plus_fc_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int plus_bc_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int plus_rc_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int plus_sc_number_common_(addr left, addr right, addr *ret);
int plus_dc_number_common_(addr left, addr right, addr *ret);
int plus_lc_number_common_(addr left, addr right, addr *ret);
int plus_cc_number_common_(LocalRoot local, addr left, addr right, addr *ret);
#define plus_cf_number_common_(m,a,b,r) plus_fc_number_common_((m),(b),(a),(r))
#define plus_cb_number_common_(m,a,b,r) plus_bc_number_common_((m),(b),(a),(r))
#define plus_cr_number_common_(m,a,b,r) plus_rc_number_common_((m),(b),(a),(r))
#define plus_cs_number_common_(a,b,r) plus_sc_number_common_((b),(a),(r))
#define plus_cd_number_common_(a,b,r) plus_dc_number_common_((b),(a),(r))
#define plus_cl_number_common_(a,b,r) plus_lc_number_common_((b),(a),(r))

int minus_rational_complex_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_complex_rational_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_fc_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_cf_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_bc_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_cb_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_rc_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_cr_number_common_(LocalRoot local, addr left, addr right, addr *ret);
int minus_sc_number_common_(addr left, addr right, addr *ret);
int minus_cs_number_common_(addr left, addr right, addr *ret);
int minus_dc_number_common_(addr left, addr right, addr *ret);
int minus_cd_number_common_(addr left, addr right, addr *ret);
int minus_lc_number_common_(addr left, addr right, addr *ret);
int minus_cl_number_common_(addr left, addr right, addr *ret);
int minus_cc_number_common_(LocalRoot local, addr left, addr right, addr *ret);

#endif


/************************************************************
 *  code_init.h
 ************************************************************/
#ifndef __CODE_INIT_HEADER__
#define __CODE_INIT_HEADER__


#define init_code_init _n(init_code_init)
#define build_code_init _n(build_code_init)
#define defcode_constant _n(defcode_constant)
#define CodeValueArray _n(CodeValueArray)

enum CodeValueType {
	CodeValueType_Addr,
	CodeValueType_Index,
	CodeValueType_Fixnum,
	CodeValueType_FixnumNull,
	CodeValueType_Character,
	CodeValueType_Null
};
extern byte CodeValueArray[p_size_code];

#define GetCodeValueArray(x,y) (*(y) = (enum CodeValueType)CodeValueArray[x])

void init_code_init(void);
void build_code_init(void);
void defcode_constant(constindex index, pointer p);

#endif


/************************************************************
 *  optimize_common.h
 ************************************************************/
#ifndef __OPTIMIZE_COMMON_HEADER__
#define __OPTIMIZE_COMMON_HEADER__


#define optimize_common_ _n(optimize_common_)
#define optimize_check_code_ _n(optimize_check_code_)
#define init_optimize_common _n(init_optimize_common)
#define build_optimize_common _n(build_optimize_common)

int optimize_common_(CodeMake ptr, addr scope, int *ret);
int optimize_check_code_(CodeMake ptr, addr scope, int *ret);

void init_optimize_common(void);
void build_optimize_common(void);

#endif


/************************************************************
 *  code_function.h
 ************************************************************/
#ifndef __CODE_FUNCTION_HEADER__
#define __CODE_FUNCTION_HEADER__


#define nop_code _n(nop_code)
#define begin_code _n(begin_code)
#define begin_call_code _n(begin_call_code)
#define end_code _n(end_code)
#define escape_code _n(escape_code)
#define escape_not_code _n(escape_not_code)
#define save_code _n(save_code)
#define restore_code _n(restore_code)
#define normal_code _n(normal_code)
#define revert_code _n(revert_code)
#define revert_goto_code _n(revert_goto_code)

#define set_code _n(set_code)
#define push_code _n(push_code)
#define push_result_code _n(push_result_code)
#define push_values_code _n(push_values_code)
#define nil_set_code _n(nil_set_code)
#define nil_push_code _n(nil_push_code)
#define t_set_code _n(t_set_code)
#define t_push_code _n(t_push_code)
#define lexical_code _n(lexical_code)
#define lexical_set_code _n(lexical_set_code)
#define lexical_push_code _n(lexical_push_code)
#define lexical_rem_code _n(lexical_rem_code)
#define special_set_code _n(special_set_code)
#define special_push_code _n(special_push_code)
#define special_rem_code _n(special_rem_code)
#define declaim_special_code _n(declaim_special_code)
#define declaim_type_value_code _n(declaim_type_value_code)
#define declaim_type_function_code _n(declaim_type_function_code)
#define declaim_inline_code _n(declaim_inline_code)
#define declaim_notinline_code _n(declaim_notinline_code)
#define declaim_compilation_code _n(declaim_compilation_code)
#define declaim_debug_code _n(declaim_debug_code)
#define declaim_safety_code _n(declaim_safety_code)
#define declaim_space_code _n(declaim_space_code)
#define declaim_speed_code _n(declaim_speed_code)
#define declaim_declaration_code _n(declaim_declaration_code)
#define type_result_code _n(type_result_code)
#define type_lexical_code _n(type_lexical_code)
#define type_special_code _n(type_special_code)
#define type_global_code _n(type_global_code)
#define type_function_code _n(type_function_code)
#define type_setf_code _n(type_setf_code)
#define let_lexical_code _n(let_lexical_code)
#define let_special_code _n(let_special_code)
#define leta_special_code _n(leta_special_code)
#define setq_lexical_code _n(setq_lexical_code)
#define setq_special_code _n(setq_special_code)
#define setq_global_code _n(setq_global_code)
#define function_set_code _n(function_set_code)
#define function_push_code _n(function_push_code)
#define setf_set_code _n(setf_set_code)
#define setf_push_code _n(setf_push_code)
#define defmacro_code _n(defmacro_code)
#define deftype_code _n(deftype_code)
#define define_compiler_macro_code _n(define_compiler_macro_code)
#define defun_code _n(defun_code)
#define call_name_code _n(call_name_code)
#define call_result_code _n(call_result_code)
#define call_type_code _n(call_type_code)
#define call_key_code _n(call_key_code)
#define call_function_code _n(call_function_code)
#define call_setf_code _n(call_setf_code)
#define call_lexical_code _n(call_lexical_code)
#define values_nil_code _n(values_nil_code)
#define values_set_code _n(values_set_code)
#define the_set_code _n(the_set_code)
#define the_push_code _n(the_push_code)
#define if_unbound_code _n(if_unbound_code)
#define if_nil_code _n(if_nil_code)
#define if_t_code _n(if_t_code)
#define goto_code _n(goto_code)
#define go_code _n(go_code)
#define return_from_code _n(return_from_code)
#define catch_code _n(catch_code)
#define throw_operator_code _n(throw_operator_code)
#define taginfo_code _n(taginfo_code)
#define blockinfo_code _n(blockinfo_code)
#define handler_bind_code _n(handler_bind_code)
#define handler_case_code _n(handler_case_code)
#define restart_bind_code _n(restart_bind_code)
#define restart_case_code _n(restart_case_code)
#define restart_progn_code _n(restart_progn_code)
#define funcall_code _n(funcall_code)
#define nth_value_code _n(nth_value_code)
#define progv_code _n(progv_code)
#define load_alloc_code _n(load_alloc_code)
#define load_gensym_code _n(load_gensym_code)
#define load_set_code _n(load_set_code)
#define reference_set_code _n(reference_set_code)
#define reference_push_code _n(reference_push_code)
#define step_code _n(step_code)
#define step_off_code _n(step_off_code)
#define step_begin_code _n(step_begin_code)
#define step_end_code _n(step_end_code)

int nop_code(Execute ptr, CodeValue x);
int begin_code(Execute ptr, CodeValue x);
int begin_call_code(Execute ptr, CodeValue x);
int end_code(Execute ptr, CodeValue x);
int escape_code(Execute ptr, CodeValue x);
int escape_not_code(Execute ptr, CodeValue x);
int save_code(Execute ptr, CodeValue x);
int restore_code(Execute ptr, CodeValue x);
int normal_code(Execute ptr, CodeValue x);
int revert_code(Execute ptr, CodeValue x);
int revert_goto_code(Execute ptr, CodeValue x);

int set_code(Execute ptr, CodeValue x);
int push_code(Execute ptr, CodeValue x);
int push_result_code(Execute ptr, CodeValue x);
int push_values_code(Execute ptr, CodeValue x);
int nil_set_code(Execute ptr, CodeValue x);
int nil_push_code(Execute ptr, CodeValue x);
int t_set_code(Execute ptr, CodeValue x);
int t_push_code(Execute ptr, CodeValue x);

int lexical_code(Execute ptr, CodeValue x);
int lexical_set_code(Execute ptr, CodeValue x);
int lexical_push_code(Execute ptr, CodeValue x);
int lexical_rem_code(Execute ptr, CodeValue x);
int special_set_code(Execute ptr, CodeValue x);
int special_push_code(Execute ptr, CodeValue x);
int special_rem_code(Execute ptr, CodeValue x);

int declaim_special_code(Execute ptr, CodeValue x);
int declaim_type_value_code(Execute ptr, CodeValue x);
int declaim_type_function_code(Execute ptr, CodeValue x);
int declaim_inline_code(Execute ptr, CodeValue x);
int declaim_notinline_code(Execute ptr, CodeValue x);
int declaim_compilation_code(Execute ptr, CodeValue x);
int declaim_debug_code(Execute ptr, CodeValue x);
int declaim_safety_code(Execute ptr, CodeValue x);
int declaim_space_code(Execute ptr, CodeValue x);
int declaim_speed_code(Execute ptr, CodeValue x);
int declaim_declaration_code(Execute ptr, CodeValue x);

int type_result_code(Execute ptr, CodeValue x);
int type_lexical_code(Execute ptr, CodeValue x);
int type_special_code(Execute ptr, CodeValue x);
int type_global_code(Execute ptr, CodeValue x);
int type_function_code(Execute ptr, CodeValue x);
int type_setf_code(Execute ptr, CodeValue x);
int let_lexical_code(Execute ptr, CodeValue x);
int let_special_code(Execute ptr, CodeValue x);
int leta_special_code(Execute ptr, CodeValue x);

int setq_lexical_code(Execute ptr, CodeValue x);
int setq_special_code(Execute ptr, CodeValue x);
int setq_global_code(Execute ptr, CodeValue x);

int function_set_code(Execute ptr, CodeValue x);
int function_push_code(Execute ptr, CodeValue x);
int setf_set_code(Execute ptr, CodeValue x);
int setf_push_code(Execute ptr, CodeValue x);

int defmacro_code(Execute ptr, CodeValue x);
int deftype_code(Execute ptr, CodeValue x);
int define_compiler_macro_code(Execute ptr, CodeValue x);
int defun_code(Execute ptr, CodeValue x);

int call_name_code(Execute ptr, CodeValue x);
int call_result_code(Execute ptr, CodeValue x);
int call_type_code(Execute ptr, CodeValue x);
int call_key_code(Execute ptr, CodeValue x);
int call_function_code(Execute ptr, CodeValue x);
int call_setf_code(Execute ptr, CodeValue x);
int call_lexical_code(Execute ptr, CodeValue x);

int values_nil_code(Execute ptr, CodeValue x);
int values_set_code(Execute ptr, CodeValue x);
int the_set_code(Execute ptr, CodeValue x);
int the_push_code(Execute ptr, CodeValue x);

int if_unbound_code(Execute ptr, CodeValue x);
int if_nil_code(Execute ptr, CodeValue x);
int if_t_code(Execute ptr, CodeValue x);
int goto_code(Execute ptr, CodeValue x);
int go_code(Execute ptr, CodeValue x);
int return_from_code(Execute ptr, CodeValue x);
int catch_code(Execute ptr, CodeValue x);
int throw_operator_code(Execute ptr, CodeValue x);
int taginfo_code(Execute ptr, CodeValue x);
int blockinfo_code(Execute ptr, CodeValue x);

int handler_bind_code(Execute ptr, CodeValue x);
int handler_case_code(Execute ptr, CodeValue x);
int restart_bind_code(Execute ptr, CodeValue x);
int restart_case_code(Execute ptr, CodeValue x);
int restart_progn_code(Execute ptr, CodeValue x);

int funcall_code(Execute ptr, CodeValue x);
int nth_value_code(Execute ptr, CodeValue x);
int progv_code(Execute ptr, CodeValue x);

int load_alloc_code(Execute ptr, CodeValue x);
int load_gensym_code(Execute ptr, CodeValue x);
int load_set_code(Execute ptr, CodeValue x);
int reference_set_code(Execute ptr, CodeValue x);
int reference_push_code(Execute ptr, CodeValue x);

int step_code(Execute ptr, CodeValue x);
int step_off_code(Execute ptr, CodeValue x);
int step_begin_code(Execute ptr, CodeValue x);
int step_end_code(Execute ptr, CodeValue x);

#endif


/************************************************************
 *  code_lambda.h
 ************************************************************/
#ifndef __CODE_LAMBDA_HEADER__
#define __CODE_LAMBDA_HEADER__


#define pop_code _n(pop_code)
#define pop_unbound_code _n(pop_unbound_code)
#define getf_code _n(getf_code)
#define rest_copy_code _n(rest_copy_code)
#define rest_bind_code _n(rest_bind_code)
#define allow_other_keys_code _n(allow_other_keys_code)
#define rest_null_code _n(rest_null_code)
#define whole_code _n(whole_code)
#define lambda_code _n(lambda_code)
#define lambda_name_code _n(lambda_name_code)
#define lambda_type_code _n(lambda_type_code)
#define lambda_doc_code _n(lambda_doc_code)
#define lambda_form_code _n(lambda_form_code)
#define lambda_defun_code _n(lambda_defun_code)
#define lambda_closure_code _n(lambda_closure_code)
#define lambda_lexical_code _n(lambda_lexical_code)
#define lambda_cache_code _n(lambda_cache_code)
#define lambda_cache_set_code _n(lambda_cache_set_code)
#define macro_code _n(macro_code)
#define macro_special_code _n(macro_special_code)
#define macro_env_code _n(macro_env_code)
#define macro_whole_code _n(macro_whole_code)
#define labels_make_code _n(labels_make_code)
#define labels_lambda_code _n(labels_lambda_code)
#define bind1_type_code _n(bind1_type_code)
#define bind1_special_code _n(bind1_special_code)
#define bind1_lexical_code _n(bind1_lexical_code)
#define bind2_type_code _n(bind2_type_code)
#define bind2_special_code _n(bind2_special_code)
#define bind2_lexical_code _n(bind2_lexical_code)

int pop_code(Execute ptr, CodeValue x);
int pop_unbound_code(Execute ptr, CodeValue x);
int getf_code(Execute ptr, CodeValue x);
int rest_copy_code(Execute ptr, CodeValue x);
int rest_bind_code(Execute ptr, CodeValue x);
int allow_other_keys_code(Execute ptr, CodeValue x);
int rest_null_code(Execute ptr, CodeValue x);
int whole_code(Execute ptr, CodeValue x);
int lambda_code(Execute ptr, CodeValue x);
int lambda_name_code(Execute ptr, CodeValue x);
int lambda_type_code(Execute ptr, CodeValue x);
int lambda_doc_code(Execute ptr, CodeValue x);
int lambda_form_code(Execute ptr, CodeValue x);
int lambda_defun_code(Execute ptr, CodeValue x);
int lambda_closure_code(Execute ptr, CodeValue x);
int lambda_lexical_code(Execute ptr, CodeValue x);
int lambda_cache_code(Execute ptr, CodeValue x);
int lambda_cache_set_code(Execute ptr, CodeValue x);
int macro_code(Execute ptr, CodeValue x);
int macro_special_code(Execute ptr, CodeValue x);
int macro_env_code(Execute ptr, CodeValue x);
int macro_whole_code(Execute ptr, CodeValue x);
int labels_make_code(Execute ptr, CodeValue x);
int labels_lambda_code(Execute ptr, CodeValue x);
int bind1_type_code(Execute ptr, CodeValue x);
int bind1_special_code(Execute ptr, CodeValue x);
int bind1_lexical_code(Execute ptr, CodeValue x);
int bind2_type_code(Execute ptr, CodeValue x);
int bind2_special_code(Execute ptr, CodeValue x);
int bind2_lexical_code(Execute ptr, CodeValue x);

#endif


/************************************************************
 *  code_values.h
 ************************************************************/
#ifndef __CODE_VALUES_HEADER__
#define __CODE_VALUES_HEADER__


#define values_typep_error_ _n(values_typep_error_)

int values_typep_error_(Execute ptr, addr type);

#endif


/************************************************************
 *  eval_table.h
 ************************************************************/
#ifndef __EVAL_TABLE_HEADER__
#define __EVAL_TABLE_HEADER__


#define make_tablevalue _n(make_tablevalue)
#define copy_tablevalue _n(copy_tablevalue)
#define getname_tablevalue _n(getname_tablevalue)
#define setname_tablevalue _n(setname_tablevalue)
#define gettype_tablevalue _n(gettype_tablevalue)
#define settype_tablevalue _n(settype_tablevalue)
#define getspecialp_tablevalue _n(getspecialp_tablevalue)
#define setspecialp_tablevalue _n(setspecialp_tablevalue)
#define getdynamic_tablevalue _n(getdynamic_tablevalue)
#define setdynamic_tablevalue _n(setdynamic_tablevalue)
#define getignore_tablevalue _n(getignore_tablevalu)
#define setignore_tablevalue _n(setignore_tablevalue)
#define getreference_tablevalue _n(getreference_tablevalue)
#define setreference_tablevalue _n(setreference_tablevalue)
#define getcheck_tablevalue _n(getcheck_tablevalue)
#define setcheck_tablevalue _n(setcheck_tablevalue)
#define getlexical_tablevalue _n(getlexical_tablevalue)
#define setlexical_tablevalue _n(setlexical_tablevalue)
#define getlet_tablevalue _n(getlet_tablevalue)
#define setlet_tablevalue _n(setlet_tablevalue)
#define getclosurep_tablevalue _n(getclosurep_tablevalue)
#define setclosurep_tablevalue _n(setclosurep_tablevalue)
#define getbasep_tablevalue _n(getbasep_tablevalue)
#define setbasep_tablevalue _n(setbasep_tablevalue)
#define getglobalp_tablevalue _n(getglobalp_tablevalue)
#define setglobalp_tablevalue _n(setglobalp_tablevalue)
#define getclosure_tablevalue _n(getclosure_tablevalue)
#define setclosure_tablevalue _n(setclosure_tablevalue)
#define getvalue_tablevalue _n(getvalue_tablevalue)
#define setvalue_tablevalue _n(setvalue_tablevalue)
#define make_tablefunction _n(make_tablefunction)
#define make_redirect_tablefunction _n(make_redirect_tablefunction)
#define getname_tablefunction _n(getname_tablefunction)
#define setname_tablefunction _n(setname_tablefunction)
#define gettype_tablefunction _n(gettype_tablefunction)
#define settype_tablefunction _n(settype_tablefunction)
#define getglobalp_tablefunction _n(getglobalp_tablefunction)
#define setglobalp_tablefunction _n(setglobalp_tablefunction)
#define getdynamic_tablefunction _n(getdynamic_tablefunction)
#define setdynamic_tablefunction _n(setdynamic_tablefunction)
#define getreference_tablefunction _n(getreference_tablefunction)
#define setreference_tablefunction _n(setreference_tablefunction)
#define getcheck_tablefunction _n(getcheck_tablefunction)
#define setcheck_tablefunction _n(setcheck_tablefunction)
#define getignore_tablefunction _n(getignore_tablefunction)
#define setignore_tablefunction _n(setignore_tablefunction)
#define getinline_tablefunction _n(getinline_tablefunction)
#define setinline_tablefunction _n(setinline_tablefunction)
#define getlexical_tablefunction _n(getlexical_tablefunction)
#define setlexical_tablefunction _n(setlexical_tablefunction)
#define getclosurep_tablefunction _n(getclosurep_tablefunction)
#define setclosurep_tablefunction _n(setclosurep_tablefunction)
#define getclosure_tablefunction _n(getclosure_tablefunction)
#define setclosure_tablefunction _n(setclosure_tablefunction)
#define make_tabletagbody _n(make_tabletagbody)
#define copy_tabletagbody _n(copy_tabletagbody)
#define getname_tabletagbody _n(getname_tabletagbody)
#define setname_tabletagbody _n(setname_tabletagbody)
#define getreference_tabletagbody _n(getreference_tabletagbody)
#define setreference_tabletagbody _n(setreference_tabletagbody)
#define equal_tabletagbody _n(equal_tabletagbody)
#define getlexical_tabletagbody _n(getlexical_tabletagbody)
#define setlexical_tabletagbody _n(setlexical_tabletagbody)
#define getclosurep_tabletagbody _n(getclosurep_tabletagbody)
#define setclosurep_tabletagbody _n(setclosurep_tabletagbody)
#define getclosure_tabletagbody _n(getclosure_tabletagbody)
#define setclosure_tabletagbody _n(setclosure_tabletagbody)
#define getjump_tabletagbody _n(getjump_tabletagbody)
#define setjump_tabletagbody _n(setjump_tabletagbody)
#define make_tableblock _n(make_tableblock)
#define copy_tableblock _n(copy_tableblock)
#define getname_tableblock _n(getname_tableblock)
#define setname_tableblock _n(setname_tableblock)
#define getreference_tableblock _n(getreference_tableblock)
#define setreference_tableblock _n(setreference_tableblock)
#define equal_tableblock _n(equal_tableblock)
#define getlexical_tableblock _n(getlexical_tableblock)
#define setlexical_tableblock _n(setlexical_tableblock)
#define getclosurep_tableblock _n(getclosurep_tableblock)
#define setclosurep_tableblock _n(setclosurep_tableblock)
#define getclosure_tableblock _n(getclosure_tableblock)
#define setclosure_tableblock _n(setclosure_tableblock)
#define evaltable_value_heap _n(evaltable_value_heap)
#define evaltable_function_heap _n(evaltable_function_heap)
#define evaltable_tagbody_heap _n(evaltable_tagbody_heap)
#define evaltable_block_heap _n(evaltable_block_heap)
#define gettype_evaltable _n(gettype_evaltable)
#define get_evaltable _n(get_evaltable)
#define getvalue_evaltable _n(getvalue_evaltable)
#define getfunction_evaltable _n(getfunction_evaltable)
#define gettagbody_evaltable _n(gettagbody_evaltable)
#define getblock_evaltable _n(getblock_evaltable)
#define getclosurep_evaltable _n(getclosurep_evaltable)
#define make_tablecall _n(make_tablecall)
#define getcheck_tablecall _n(getcheck_tablecall)
#define setcheck_tablecall _n(setcheck_tablecall)
#define getvalue_tablecall _n(getvalue_tablecall)
#define setvalue_tablecall _n(setvalue_tablecall)
#define gettype_tablecall _n(gettype_tablecall)
#define settype_tablecall _n(settype_tablecall)

enum EvalTable {
	EvalTable_Value,
	EvalTable_Function,
	EvalTable_TagBody,
	EvalTable_Block,
	EvalTable_Self
};

enum IgnoreType {
	IgnoreType_None = 0,
	IgnoreType_Ignore,
	IgnoreType_Ignorable
};

enum InlineType {
	InlineType_None = 0,
	InlineType_Inline,
	InlineType_NotInline
};

enum TABLEVALUE_INDEX {
	TABLEVALUE_INDEX_NAME,
	TABLEVALUE_INDEX_TYPE,
	TABLEVALUE_INDEX_SIZE
};
enum TABLEFUNCTION_INDEX {
	TABLEFUNCTION_INDEX_NAME,
	TABLEFUNCTION_INDEX_TYPE,
	TABLEFUNCTION_INDEX_REDIRECT,
	TABLEFUNCTION_INDEX_SIZE
};
enum TABLETAGBODY_INDEX {
	TABLETAGBODY_INDEX_NAME,
	TABLETAGBODY_INDEX_SIZE
};
enum TABLEBLOCK_INDEX {
	TABLEBLOCK_INDEX_NAME,
	TABLEBLOCK_INDEX_SIZE
};
enum TABLECALL_INDEX {
	TABLECALL_INDEX_VALUE,
	TABLECALL_INDEX_TYPE,
	TABLECALL_INDEX_SIZE
};

struct tablevalue {
	unsigned specialp : 1;
	unsigned dynamic : 1;
	unsigned reference : 1;
	unsigned check : 1;
	unsigned closurep : 1;
	unsigned basep : 1;
	unsigned globalp : 1;
	enum IgnoreType ignore : 4; /* signed */
	size_t lexical, closure, let;
};
struct tablefunction {
	unsigned globalp : 1;
	unsigned dynamic : 1;
	unsigned reference : 1;
	unsigned check : 1;
	unsigned closurep : 1;
	enum IgnoreType ignore : 4; /* signed */
	enum InlineType Inline : 4; /* signed */
	size_t lexical, closure;
};
struct tabletagbody {
	unsigned reference : 1;
	unsigned closurep : 1;
	size_t lexical, closure, jump;
};
struct tableblock {
	unsigned reference : 1;
	unsigned closurep : 1;
	size_t lexical, closure;
};
struct eval_table {
	enum EvalTable type;
};
struct tablecall {
	unsigned check : 1;
};

#define PtrBody_value(x)		PtrEvalBody((x), TABLEVALUE_INDEX_SIZE)
#define PtrBody_function(x)		PtrEvalBody((x), TABLEFUNCTION_INDEX_SIZE)
#define PtrBody_tagbody(x)		PtrEvalBody((x), TABLETAGBODY_INDEX_SIZE)
#define PtrBody_block(x)		PtrEvalBody((x), TABLEBLOCK_INDEX_SIZE)
#define PtrBody_table(x)		PtrEvalBody((x), 1)
#define PtrBody_call(x)			PtrEvalBody((x), TABLECALL_INDEX_SIZE)

#define StructTableValue(p)		((struct tablevalue *)(PtrBody_value(p)))
#define StructTableFunction(p)	((struct tablefunction *)(PtrBody_function(p)))
#define StructTableTagBody(p)	((struct tabletagbody *)PtrBody_tagbody(p))
#define StructTableBlock(p)		((struct tableblock *)PtrBody_block(p))
#define StructEvalTable(p)		((struct eval_table *)PtrBody_table(p))
#define StructTableCall(p)		((struct tablecall *)PtrBody_call(p))

#define CheckTableValue(pos)	Check(! eval_tablevalue_p(pos), "type error")
#define CheckTableFunction(pos)	Check(! eval_tablefunction_p(pos), "type error")
#define CheckTableTagBody(pos)	Check(! eval_tabletagbody_p(pos), "type error")
#define CheckTableBlock(pos)	Check(! eval_tableblock_p(pos), "type error")
#define CheckTableTable(pos)	Check(! eval_table_p(pos), "type error")
#define CheckTableCall(pos)		Check(! eval_tablecall_p(pos), "type error")



/*
 *  tablevalue
 */
void make_tablevalue(addr *ret, addr symbol);
void copy_tablevalue(addr *ret, addr arg);

void getname_tablevalue(addr pos, addr *ret);
void setname_tablevalue(addr pos, addr value);
void gettype_tablevalue(addr pos, addr *ret);
void settype_tablevalue(addr pos, addr value);
int getspecialp_tablevalue(addr pos);
void setspecialp_tablevalue(addr pos, int value);
int getdynamic_tablevalue(addr pos);
void setdynamic_tablevalue(addr pos, int value);
enum IgnoreType getignore_tablevalue(addr pos);
void setignore_tablevalue(addr pos, enum IgnoreType value);
int getreference_tablevalue(addr pos);
void setreference_tablevalue(addr pos, int value);
int getcheck_tablevalue(addr pos);
void setcheck_tablevalue(addr pos, int value);
size_t getlexical_tablevalue(addr pos);
void setlexical_tablevalue(addr pos, size_t value);
size_t getlet_tablevalue(addr pos);
void setlet_tablevalue(addr pos, size_t value);
int getclosurep_tablevalue(addr pos);
void setclosurep_tablevalue(addr pos, int value);
int getbasep_tablevalue(addr pos);
void setbasep_tablevalue(addr pos, int value);
int getglobalp_tablevalue(addr pos);
void setglobalp_tablevalue(addr pos, int value);
size_t getclosure_tablevalue(addr pos);
void setclosure_tablevalue(addr pos, size_t value);
void getvalue_tablevalue(Execute ptr, addr pos, addr *ret);
void setvalue_tablevalue(Execute ptr, addr pos, addr value);


/*
 *  tablefunction
 */
void make_tablefunction(addr *ret, addr call);
void make_redirect_tablefunction(addr *ret, addr arg);

void getname_tablefunction(addr pos, addr *ret);
void setname_tablefunction(addr pos, addr value);
void gettype_tablefunction(addr pos, addr *ret);
void settype_tablefunction(addr pos, addr value);
int getglobalp_tablefunction(addr pos);
void setglobalp_tablefunction(addr pos, int value);
int getdynamic_tablefunction(addr pos);
void setdynamic_tablefunction(addr pos, int value);
int getreference_tablefunction(addr pos);
void setreference_tablefunction(addr pos, int value);
int getcheck_tablefunction(addr pos);
void setcheck_tablefunction(addr pos, int value);
enum IgnoreType getignore_tablefunction(addr pos);
void setignore_tablefunction(addr pos, enum IgnoreType value);
enum InlineType getinline_tablefunction(addr pos);
void setinline_tablefunction(addr pos, enum InlineType value);
size_t getlexical_tablefunction(addr pos);
void setlexical_tablefunction(addr pos, size_t value);
int getclosurep_tablefunction(addr pos);
void setclosurep_tablefunction(addr pos, int value);
size_t getclosure_tablefunction(addr pos);
void setclosure_tablefunction(addr pos, size_t value);


/*
 *  tabletagbody
 */
void make_tabletagbody(addr *ret, addr tag);
void copy_tabletagbody(addr *ret, addr arg);

void getname_tabletagbody(addr pos, addr *ret);
void setname_tabletagbody(addr pos, addr value);
int getreference_tabletagbody(addr pos);
void setreference_tabletagbody(addr pos, int value);
int equal_tabletagbody(addr left, addr right);
size_t getlexical_tabletagbody(addr pos);
void setlexical_tabletagbody(addr pos, size_t value);
int getclosurep_tabletagbody(addr pos);
void setclosurep_tabletagbody(addr pos, int value);
size_t getclosure_tabletagbody(addr pos);
void setclosure_tabletagbody(addr pos, size_t value);
size_t getjump_tabletagbody(addr pos);
void setjump_tabletagbody(addr pos, size_t value);


/*
 *  tableblock
 */
void make_tableblock(addr *ret, addr tag);
void copy_tableblock(addr *ret, addr arg);

void getname_tableblock(addr pos, addr *ret);
void setname_tableblock(addr pos, addr value);
int getreference_tableblock(addr pos);
void setreference_tableblock(addr pos, int value);
int equal_tableblock(addr left, addr right);
size_t getlexical_tableblock(addr pos);
void setlexical_tableblock(addr pos, size_t value);
int getclosurep_tableblock(addr pos);
void setclosurep_tableblock(addr pos, int value);
size_t getclosure_tableblock(addr pos);
void setclosure_tableblock(addr pos, size_t value);


/*
 *  evaltable
 */
void evaltable_value_heap(addr *ret, addr pos);
void evaltable_function_heap(addr *ret, addr pos);
void evaltable_tagbody_heap(addr *ret, addr pos);
void evaltable_block_heap(addr *ret, addr pos);
enum EvalTable gettype_evaltable(addr pos);
void get_evaltable(addr pos, addr *ret);
int getvalue_evaltable(addr list, addr pos, addr *ret);
int getfunction_evaltable(addr list, addr pos, addr *ret);
int gettagbody_evaltable(addr list, addr pos, addr *ret);
int getblock_evaltable(addr list, addr pos, addr *ret);
int getclosurep_evaltable(addr table);


/*
 *  tablecall
 */
void make_tablecall(addr *ret);
int getcheck_tablecall(addr pos);
void setcheck_tablecall(addr pos, int value);
void getvalue_tablecall(addr pos, addr *ret);
void setvalue_tablecall(addr pos, addr value);
void gettype_tablecall(addr pos, addr *ret);
void settype_tablecall(addr pos, addr value);

#endif


/************************************************************
 *  load_code.h
 ************************************************************/
#ifndef __LOAD_CODE_HEADER__
#define __LOAD_CODE_HEADER__


#define execute_load_alloc _n(execute_load_alloc)
#define execute_load_gensym_ _n(execute_load_gensym_)
#define execute_load_set_ _n(execute_load_set_)
#define execute_load_get_ _n(execute_load_get_)
#define fasl_load_time_value _n(fasl_load_time_value)

#define code_make_load_alloc _n(code_make_load_alloc)
#define code_make_load_gensym _n(code_make_load_gensym)
#define code_make_load_set _n(code_make_load_set)

void execute_load_alloc(Execute ptr, size_t size);
int execute_load_gensym_(Execute ptr, addr name, size_t index);
int execute_load_set_(Execute ptr, size_t index);
int execute_load_get_(Execute ptr, size_t index, addr *ret);
void fasl_load_time_value(Execute ptr);

void code_make_load_alloc(Execute ptr, addr *ret, addr index);
void code_make_load_gensym(Execute ptr, addr *ret, addr list);
void code_make_load_set(Execute ptr, addr *ret, addr index);

#endif


/************************************************************
 *  load_object.h
 ************************************************************/
#ifndef __LOAD_OBJECT_HEADER__
#define __LOAD_OBJECT_HEADER__


#define load_time_value_heap _n(load_time_value_heap)
#define get_index_load_time_value _n(get_index_load_time_value)
#define result_load_time_value_ _n(result_load_time_value_)

void load_time_value_heap(addr *ret, addr value, addr index);
void get_index_load_time_value(addr pos, size_t *ret);
int result_load_time_value_(Execute ptr, addr pos, addr *ret);

#endif


/************************************************************
 *  step_prompt.h
 ************************************************************/
#ifndef __STEP_PROMPT_HEADER__
#define __STEP_PROMPT_HEADER__


#define execute_step_code _n(execute_step_code)

int execute_step_code(Execute ptr, addr expr);

#endif


/************************************************************
 *  type_copy.h
 ************************************************************/
#ifndef __TYPE_COPY_HEADER__
#define __TYPE_COPY_HEADER__


#define type_copy_alloc _n(type_copy_alloc)
#define type_copy_local _n(type_copy_local)
#define type_copy_heap _n(type_copy_heap)
#define type_throw_alloc _n(type_throw_alloc)
#define type_throw_local _n(type_throw_local)
#define type_throw_heap _n(type_throw_heap)
#define init_type_copy _n(init_type_copy)

void type_copy_alloc(LocalRoot local, addr *ret, addr type);
void type_copy_local(LocalRoot local, addr *ret, addr type);
void type_copy_heap(addr *ret, addr type);

void type_throw_alloc(LocalRoot local, addr pos, addr *ret);
void type_throw_local(LocalRoot local, addr pos, addr *ret);
void type_throw_heap(addr pos, addr *ret);

void init_type_copy(void);

#endif


/************************************************************
 *  type_deftype.h
 ************************************************************/
#ifndef __TYPE_DEFTYPE_HEADER__
#define __TYPE_DEFTYPE_HEADER__


#define getdeftype _n(getdeftype)
#define setdeftype_ _n(setdeftype_)
#define symbol_deftypep _n(symbol_deftypep)
#define execute_list_deftype_ _n(execute_list_deftype_)
#define execute_symbol_deftype_ _n(execute_symbol_deftype_)
#define deftype_common_ _n(deftype_common_)

void getdeftype(addr symbol, addr *ret);
int setdeftype_(addr symbol, addr pos);
int symbol_deftypep(addr symbol);
int execute_list_deftype_(Execute ptr, addr *ret, addr list, addr env);
int execute_symbol_deftype_(Execute ptr, addr *ret, addr symbol, addr env);
int deftype_common_(Execute ptr, addr form, addr env, addr *ret);

#endif


/************************************************************
 *  scope_typedef.h
 ************************************************************/
#ifndef __SCOPE_TYPEDEF_HEADER__
#define __SCOPE_TYPEDEF_HEADER__


enum EVAL_SCOPE {
	EVAL_SCOPE_THE,
	EVAL_SCOPE_VALUE,
	EVAL_SCOPE_SIZE
};

enum EvalLambda_Index {
	EvalLambda_Call,
	EvalLambda_Table,
	EvalLambda_Args,
	EvalLambda_Decl,
	EvalLambda_Doc,
	EvalLambda_Cons,
	EvalLambda_Clos,
	EvalLambda_The,
	EvalLambda_Free,
	EvalLambda_Form,
	EvalLambda_Defun,
	EvalLambda_Code,
	EvalLambda_Self,
	EvalLambda_Lexical,
	EvalLambda_Size
};

struct scope_struct {
	EvalParse type;
	OptimizeType optimize[EVAL_OPTIMIZE_SIZE];
};

struct let_struct {
	addr stack, args, decl, doc, cons, free, the, allocate;
};

struct lambda_struct {
	addr stack, call, table, lexical;
	addr args, decl, doc, cons, clos, free, the;
	addr form, defun, body_the;
	unsigned globalp;
	EvalParse eval;
};

struct mvbind_struct {
	addr stack, args, decl, doc, cons, free, the, expr, allocate;
};

#endif


/************************************************************
 *  scope_object.h
 ************************************************************/
#ifndef __SCOPE_OBJECT_HEADER__
#define __SCOPE_OBJECT_HEADER__


#define eval_scope_heap_ _n(eval_scope_heap_)
#define eval_scope_size_ _n(eval_scope_size_)
#define make_eval_scope_ _n(make_eval_scope_)
#define structevalscope _n(structevalscope)
#define refevalscopetype _n(refevalscopetype)
#define getevalscopetype _n(getevalscopetype)
#define setevalscopetype _n(setevalscopetype)
#define refevalscopethe _n(refevalscopethe)
#define getevalscopethe _n(getevalscopethe)
#define setevalscopethe _n(setevalscopethe)
#define refevalscopevalue _n(refevalscopevalue)
#define getevalscopevalue _n(getevalscopevalue)
#define setevalscopevalue _n(setevalscopevalue)
#define refevalscopeindex _n(refevalscopeindex)
#define getevalscopeindex _n(getevalscopeindex)
#define setevalscopeindex _n(setevalscopeindex)
#define EvalScopeTable _n(EvalScopeTable)
#define scope_eval _n(scope_eval)
#define scope_allcons _n(scope_allcons)
#define localhold_scope_eval _n(localhold_scope_eval)
#define localhold_scope_allcons _n(localhold_scope_allcons)
#define scope_eval_lexical_ _n(scope_eval_lexical_)
#define scope_step_p _n(scope_step_p)

#define StructEvalScope_Low(x)			((struct scope_struct *)PtrEvalBodyAny(x))
#define RefEvalScopeType_Low(x)			(StructEvalScope(x)->type)
#define GetEvalScopeType_Low(x,v)		(*(v) = RefEvalScopeType_Low(x))
#define SetEvalScopeType_Low(x,v)		(RefEvalScopeType_Low(x) = (v))
#define RefEvalScopeThe_Low(p)			RefEval((p),EVAL_SCOPE_THE)
#define GetEvalScopeThe_Low(p,v)		GetEval((p),EVAL_SCOPE_THE,(v))
#define SetEvalScopeThe_Low(p,v)		SetEval((p),EVAL_SCOPE_THE,(v))
#define RefEvalScopeValue_Low(p)		RefEval((p),EVAL_SCOPE_VALUE)
#define GetEvalScopeValue_Low(p,v)		GetEval((p),EVAL_SCOPE_VALUE,(v))
#define SetEvalScopeValue_Low(p,v)		SetEval((p),EVAL_SCOPE_VALUE,(v))
#define RefEvalScopeIndex_Low(p,i)		RefEval((p),(2UL+(i)))
#define GetEvalScopeIndex_Low(p,i,v)	GetEval((p),(2UL+(i)),(v))
#define SetEvalScopeIndex_Low(p,i,v)	SetEval((p),(2UL+(i)),(v))

#ifdef LISP_DEBUG
#define StructEvalScope(x)			structevalscope(x)
#define RefEvalScopeType(x)			refevalscopetype(x)
#define GetEvalScopeType(x,v)		getevalscopetype(x,v)
#define SetEvalScopeType(x,v)		setevalscopetype(x,v)
#define RefEvalScopeThe(p)			refevalscopethe(p)
#define GetEvalScopeThe(p,v)		getevalscopethe(p,v)
#define SetEvalScopeThe(p,v)		setevalscopethe(p,v)
#define RefEvalScopeValue(p)		refevalscopevalue(p)
#define GetEvalScopeValue(p,v)		getevalscopevalue(p,v)
#define SetEvalScopeValue(p,v)		setevalscopevalue(p,v)
#define RefEvalScopeIndex(p,i)		refevalscopeindex(p,i)
#define GetEvalScopeIndex(p,i,v)	getevalscopeindex(p,i,v)
#define SetEvalScopeIndex(p,i,v)	setevalscopeindex(p,i,v)
#else
#define StructEvalScope(x)			StructEvalScope_Low(x)
#define RefEvalScopeType(x)			RefEvalScopeType_Low(x)
#define GetEvalScopeType(x,v)		GetEvalScopeType_Low(x,v)
#define SetEvalScopeType(x,v)		SetEvalScopeType_Low(x,v)
#define RefEvalScopeThe(p)			RefEvalScopeThe_Low(p)
#define GetEvalScopeThe(p,v)		GetEvalScopeThe_Low(p,v)
#define SetEvalScopeThe(p,v)		SetEvalScopeThe_Low(p,v)
#define RefEvalScopeValue(p)		RefEvalScopeValue_Low(p)
#define GetEvalScopeValue(p,v)		GetEvalScopeValue_Low(p,v)
#define SetEvalScopeValue(p,v)		SetEvalScopeValue_Low(p,v)
#define RefEvalScopeIndex(p,i)		RefEvalScopeIndex_Low(p,i)
#define GetEvalScopeIndex(p,i,v)	GetEvalScopeIndex_Low(p,i,v)
#define SetEvalScopeIndex(p,i,v)	SetEvalScopeIndex_Low(p,i,v)
#endif

int eval_scope_heap_(Execute ptr, addr *ret, size_t size);
int eval_scope_size_(Execute ptr, addr *ret, size_t size,
		EvalParse parse, addr type, addr value);
int make_eval_scope_(Execute ptr,
		addr *ret, EvalParse parse, addr type, addr value);

struct scope_struct *structevalscope(addr pos);
EvalParse refevalscopetype(addr pos);
void getevalscopetype(addr pos, EvalParse *ret);
void setevalscopetype(addr pos, EvalParse value);
addr refevalscopethe(addr pos);
void getevalscopethe(addr pos, addr *ret);
void setevalscopethe(addr pos, addr value);
addr refevalscopevalue(addr pos);
void getevalscopevalue(addr pos, addr *ret);
void setevalscopevalue(addr pos, addr value);
addr refevalscopeindex(addr pos, size_t size);
void getevalscopeindex(addr pos, size_t size, addr *ret);
void setevalscopeindex(addr pos, size_t size, addr value);

/* table */
typedef int (*eval_scope_calltype)(Execute, addr *, addr);
extern eval_scope_calltype EvalScopeTable[EVAL_PARSE_SIZE];

int scope_eval(Execute ptr, addr *ret, addr eval);
int scope_allcons(Execute ptr, addr *retcons, addr *rettype, addr cons);
int localhold_scope_eval(LocalHold hold, Execute ptr, addr *ret, addr eval);
int localhold_scope_allcons(LocalHold hold,
		Execute ptr, addr *retcons, addr *rettype, addr cons);
int scope_eval_lexical_(Execute ptr, addr *ret, addr eval);
int scope_step_p(addr pos);

#endif


/************************************************************
 *  code_object.h
 ************************************************************/
#ifndef __CODE_OBJECT_HEADER__
#define __CODE_OBJECT_HEADER__


#define code_heap _n(code_heap)
#define getarray_code _n(getarray_code)
#define update_code _n(update_code)

enum Code_Index {
	Code_Array,
	Code_Call,
	Code_Size
};

struct code_value {
	callbind_code call;
	pointer id;
	CodeValue value;
};

struct code_struct {
	struct code_value *sys;
	size_t size;
};

#define RefArrayCode		RefArraySS
#define GetArrayCode		GetArraySS
#define SetArrayCode		SetArraySS
#define PtrBodyCode(p)		PtrBodySSa((p), Code_Size)
#define StructCode(p)		((struct code_struct *)PtrBodyCode(p))
#define StructCallCode(p)	((struct code_value *)PtrBodyB4(p))
#define RefArgumentCall		RefArrayA4
#define GetArgumentCall		GetArrayA4
#define SetArgumentCall		SetArrayA4

void code_heap(addr *ret, addr codeA4);
void getarray_code(addr pos, addr *ret);
void update_code(addr code);

#endif


/************************************************************
 *  scope_let.h
 ************************************************************/
#ifndef __SCOPE_LET_HEADER__
#define __SCOPE_LET_HEADER__


#define checktype_p_ _n(checktype_p_)
#define checkvalue_error_ _n(checkvalue_error_)
#define checkvalue_bind_ _n(checkvalue_bind_)

#define scope_init_let _n(scope_init_let)
#define check_scope_variable_ _n(check_scope_variable_)
#define push_tablevalue_global_ _n(push_tablevalue_global_)
#define push_tablevalue_special_global_ _n(push_tablevalue_special_global_)
#define ignore_checkvalue_ _n(ignore_checkvalue_)
#define localhold_let_struct _n(localhold_let_struct)
#define scope_let_call _n(scope_let_call)
#define ifdeclvalue_ _n(ifdeclvalue_)
#define scope_leta_call _n(scope_leta_call)

int checktype_p_(Execute ptr, addr x, addr y, int *false_p, int *exclude_p);
int checkvalue_error_(Execute ptr, addr datum, addr expected, const char *str, ...);
int checkvalue_bind_(Execute ptr, addr value, addr init);

void scope_init_let(struct let_struct *str);
int check_scope_variable_(addr symbol);
int push_tablevalue_global_(Execute ptr, addr stack, addr symbol, addr *ret);
int push_tablevalue_special_global_(Execute ptr, addr stack, addr symbol, addr *ret);
int ignore_checkvalue_(addr stack);
void localhold_let_struct(LocalRoot local, struct let_struct *str);
int scope_let_call(Execute ptr, struct let_struct *str);

int ifdeclvalue_(Execute ptr, addr stack, addr var, addr decl, addr *ret);
int scope_leta_call(Execute ptr, struct let_struct *str);

#endif


/************************************************************
 *  subtypep_number.h
 ************************************************************/
#ifndef __SUBTYPEP_NUMBER_HEADER__
#define __SUBTYPEP_NUMBER_HEADER__


#define real_extract_local_ _n(real_extract_local_)
#define real_extract_heap_ _n(real_extract_heap_)
#define type_subtypep_p _n(type_subtypep_p)
#define type_optimized_or_subtypep _n(type_optimized_or_subtypep)
#define get_type_subtypep _n(get_type_subtypep)
#define type_subtypep_throw_heap_ _n(type_subtypep_throw_heap_)

int real_extract_local_(LocalRoot local, addr *ret, addr type);
int real_extract_heap_(LocalRoot local, addr *ret, addr type);
int type_subtypep_p(addr type);
int type_optimized_or_subtypep(addr type);
void get_type_subtypep(addr *ret, addr type);
int type_subtypep_throw_heap_(LocalRoot local, addr type, addr *ret);

#endif


/************************************************************
 *  subtypep_optimize.h
 ************************************************************/
#ifndef __SUBTYPEP_OPTIMIZE_HEADER__
#define __SUBTYPEP_OPTIMIZE_HEADER__


#define type_optimize_local_ _n(type_optimize_local_)
#define type_optimize_heap_ _n(type_optimize_heap_)
#define type_optimized_p _n(type_optimized_p)
#define get_type_optimized _n(get_type_optimized)
#define type_optimize_throw_heap_ _n(type_optimize_throw_heap_)

int type_optimize_local_(LocalRoot local, addr type, addr *value, int *ret);
int type_optimize_heap_(LocalRoot local, addr type, addr *value, int *ret);
int type_optimized_p(addr type);
void get_type_optimized(addr *ret, addr type);
int type_optimize_throw_heap_(LocalRoot local, addr type, addr *ret);

#endif


/************************************************************
 *  env_code.h
 ************************************************************/
#ifndef __ENV_CODE_HEADER__
#define __ENV_CODE_HEADER__


#define disassemble_common_ _n(disassemble_common_)
#define trace_common_ _n(trace_common_)
#define untrace_common_ _n(untrace_common_)
#define trace_add_common_ _n(trace_add_common_)
#define trace_del_common_ _n(trace_del_common_)
#define init_environment_code _n(init_environment_code)
#define build_environment_code _n(build_environment_code)

int disassemble_common_(Execute ptr, addr pos);
int trace_common_(addr form, addr env, addr *ret);
int untrace_common_(addr form, addr env, addr *ret);
int trace_add_common_(Execute ptr, addr list, addr *ret);
int trace_del_common_(Execute ptr, addr list, addr *ret);

void init_environment_code(void);
void build_environment_code(void);

#endif


/************************************************************
 *  env_describe.h
 ************************************************************/
#ifndef __ENV_DESCRIBE_HEADER__
#define __ENV_DESCRIBE_HEADER__


#define describe_common_ _n(describe_common_)
#define inspect_common_ _n(inspect_common_)
#define init_environment_describe _n(init_environment_describe)
#define build_environment_describe _n(build_environment_describe)

int describe_common_(Execute ptr, addr object, addr stream);
int inspect_common_(Execute ptr, addr object);
void init_environment_describe(void);
void build_environment_describe(Execute ptr);

#endif


/************************************************************
 *  env_version.h
 ************************************************************/
#ifndef __ENV_VERSION_HEADER__
#define __ENV_VERSION_HEADER__


#define implementation_type_common _n(implementation_type_common)
#define implementation_version_common _n(implementation_version_common)
#define short_site_name_common_ _n(short_site_name_common_)
#define long_site_name_common_ _n(long_site_name_common_)
#define machine_instance_common_ _n(machine_instance_common_)
#define machine_type_common_ _n(machine_type_common_)
#define machine_version_common_ _n(machine_version_common_)
#define software_type_common_ _n(software_type_common_)
#define software_version_common_ _n(software_version_common_)
#define user_homedir_pathname_common_ _n(user_homedir_pathname_common_)

void implementation_type_common(addr *ret);
void implementation_version_common(addr *ret);
int short_site_name_common_(addr *ret);
int long_site_name_common_(addr *ret);
int machine_instance_common_(addr *ret);
int machine_type_common_(addr *ret);
int machine_version_common_(addr *ret);
int software_type_common_(addr *ret);
int software_version_common_(addr *ret);
int user_homedir_pathname_common_(Execute ptr, addr *ret);

#endif


/************************************************************
 *  step.h
 ************************************************************/
#ifndef __STEP_HEADER__
#define __STEP_HEADER__


#define step_common_ _n(step_common_)
#define parse_step_ _n(parse_step_)
#define copy_eval_step _n(copy_eval_step)
#define scope_step_ _n(scope_step_)
#define init_parse_step _n(init_parse_step)

int step_common_(Execute ptr, addr form, addr env, addr *ret);
int parse_step_(Execute ptr, addr *ret, addr form);
void copy_eval_step(LocalRoot local, addr *ret, addr eval);
int scope_step_(Execute ptr, addr *ret, addr eval);
void init_parse_step(Execute ptr);

#endif


/************************************************************
 *  call_files.h
 ************************************************************/
#ifndef __CALL_FILES_HEADER__
#define __CALL_FILES_HEADER__


#endif


/************************************************************
 *  loop.h
 ************************************************************/
#ifndef __LOOP_HEADER__
#define __LOOP_HEADER__


#define loop_common_ _n(loop_common_)

int loop_common_(Execute ptr, addr *ret, addr form);

#endif


/************************************************************
 *  math_exp.h
 ************************************************************/
#ifndef __MATH_EXP_HEADER__
#define __MATH_EXP_HEADER__


#define LISP_PI_SINGLE	3.14159265358979323844f
#define LISP_PI_DOUBLE	3.14159265358979323844
#define LISP_PI_LONG	3.14159265358979323844L

#define exp_common_ _n(exp_common_)
#define sin_common_ _n(sin_common_)
#define cos_common_ _n(cos_common_)
#define tan_common_ _n(tan_common_)
#define sinh_common_ _n(sinh_common_)
#define cosh_common_ _n(cosh_common_)
#define tanh_common_ _n(tanh_common_)
#define asin_common_ _n(asin_common_)
#define acos_common_ _n(acos_common_)
#define atan_common_ _n(atan_common_)
#define asinh_common_ _n(asinh_common_)
#define acosh_common_ _n(acosh_common_)
#define atanh_common_ _n(atanh_common_)
#define cis_common_ _n(cis_common_)
#define atan2_common_ _n(atan2_common_)
#define atan_optional_common_ _n(atan_optional_common_)
#define log_natural_common_ _n(log_natural_common_)
#define log_base_common_ _n(log_base_common_)
#define log_common_ _n(log_common_)
#define phase_common_ _n(phase_common_)

int exp_common_(addr pos, addr *ret);
int sin_common_(addr pos, addr *ret);
int cos_common_(addr pos, addr *ret);
int tan_common_(addr pos, addr *ret);
int sinh_common_(addr pos, addr *ret);
int cosh_common_(addr pos, addr *ret);
int tanh_common_(addr pos, addr *ret);
int asin_common_(addr pos, addr *ret);
int acos_common_(addr pos, addr *ret);
int atan_common_(addr pos, addr *ret);
int asinh_common_(addr pos, addr *ret);
int acosh_common_(addr pos, addr *ret);
int atanh_common_(addr pos, addr *ret);

int cis_common_(addr pos, addr *ret);
int atan2_common_(addr left, addr right, addr *ret);
int atan_optional_common_(addr var, addr opt, addr *ret);
int log_natural_common_(addr value, addr *ret);
int log_base_common_(addr value, addr base, addr *ret);
int log_common_(addr value, addr base, addr *ret);
int phase_common_(addr pos, addr *ret);

#endif


/************************************************************
 *  math_gcd.h
 ************************************************************/
#ifndef __MATH_GCD_HEADER__
#define __MATH_GCD_HEADER__


#define gcd_number_ _n(gcd_number_)
#define lcm_number_ _n(lcm_number_)

int gcd_number_(LocalRoot local, addr args, addr *ret);
int lcm_number_(LocalRoot local, addr args, addr *ret);

#endif


/************************************************************
 *  math_isqrt.h
 ************************************************************/
#ifndef __MATH_ISQRT_HEADER__
#define __MATH_ISQRT_HEADER__


#define isqrt_number_common_ _n(isqrt_number_common_)
int isqrt_number_common_(LocalRoot local, addr var, addr *ret);

#endif


/************************************************************
 *  math_power.h
 ************************************************************/
#ifndef __MATH_POWER_HEADER__
#define __MATH_POWER_HEADER__


#define expt_common_ _n(expt_common_)
int expt_common_(LocalRoot local, addr *ret, addr base, addr power);

#endif


/************************************************************
 *  real_ceiling.h
 ************************************************************/
#ifndef __REAL_CEILING_HEADER__
#define __REAL_CEILING_HEADER__


#define ceiling1_common_ _n(ceiling1_common_)
#define ceiling2_common_ _n(ceiling2_common_)
#define ceiling_common_ _n(ceiling_common_)
#define fceiling1_common_ _n(fceiling1_common_)
#define fceiling2_common_ _n(fceiling2_common_)
#define fceiling_common_ _n(fceiling_common_)

int ceiling1_common_(LocalRoot local, addr *quot, addr *rem, addr left);
int ceiling2_common_(LocalRoot local, addr *quot, addr *rem, addr left, addr right);
int ceiling_common_(LocalRoot local, addr var, addr div, addr *ret1, addr *ret2);
int fceiling1_common_(LocalRoot local, addr *quot, addr *rem, addr left);
int fceiling2_common_(LocalRoot local, addr *quot, addr *rem, addr left, addr right);
int fceiling_common_(LocalRoot local, addr var, addr div, addr *ret1, addr *ret2);

#endif


/************************************************************
 *  real_common.h
 ************************************************************/
#ifndef __REAL_COMMON_HEADER__
#define __REAL_COMMON_HEADER__


#define double_float_least_positive _n(double_float_least_positive)
#define double_float_least_positive_normalized _n(double_float_least_positive_normalized)
#define long_float_least_positive _n(long_float_least_positive)
#define long_float_least_positive_normalized _n(long_float_least_positive_normalized)
#define double_float_least_negative _n(double_float_least_negative)
#define double_float_least_negative_normalized _n(double_float_least_negative_normalized)
#define long_float_least_negative _n(long_float_least_negative)
#define long_float_least_negative_normalized _n(long_float_least_negative_normalized)
#define double_float_epsilon _n(double_float_epsilon)
#define double_float_negative_epsilon _n(double_float_negative_epsilon)
#define long_float_epsilon _n(long_float_epsilon)
#define long_float_negative_epsilon _n(long_float_negative_epsilon)
#define build_real_common _n(build_real_common)
#define float_common_ _n(float_common_)

/* constant */
void double_float_least_positive(addr *ret);
void double_float_least_positive_normalized(addr *ret);
void long_float_least_positive(addr *ret);
void long_float_least_positive_normalized(addr *ret);
void double_float_least_negative(addr *ret);
void double_float_least_negative_normalized(addr *ret);
void long_float_least_negative(addr *ret);
void long_float_least_negative_normalized(addr *ret);
void double_float_epsilon(addr *ret);
void double_float_negative_epsilon(addr *ret);
void long_float_epsilon(addr *ret);
void long_float_negative_epsilon(addr *ret);
void build_real_common(void);

/* common-lisp */
int float_common_(addr *ret, addr var, addr type);

#endif


/************************************************************
 *  real_decode.h
 ************************************************************/
#ifndef __REAL_DECODE_HEADER__
#define __REAL_DECODE_HEADER__


#define decode_float_common_ _n(decode_float_common_)
#define scale_float_common_ _n(scale_float_common_)
#define float_radix_common _n(float_radix_common)
#define float_sign_common_ _n(float_sign_common_)
#define float_digits_common_ _n(float_digits_common_)
#define float_precision_common_ _n(float_precision_common_)
#define integer_decode_float_common_ _n(integer_decode_float_common_)
#define rational_common_ _n(rational_common_)
#define rationalize_common_ _n(rationalize_common_)

int decode_float_common_(addr pos, addr *rsig, addr *rexp, addr *sign);
int scale_float_common_(addr pos, addr scale, addr *ret);
void float_radix_common(addr pos, addr *ret);
int float_sign_common_(addr pos, addr opt, addr *ret);
int float_digits_common_(addr pos, addr *ret);
int float_precision_common_(Execute ptr, addr pos, addr *ret);
int integer_decode_float_common_(Execute ptr,
		addr pos, addr *ret, addr *rexp, addr *rsign);
int rational_common_(Execute ptr, addr pos, addr *ret);
int rationalize_common_(Execute ptr, addr pos, addr *ret);

#endif


/************************************************************
 *  real_division.h
 ************************************************************/
#ifndef __REAL_DIVISION_HEADER__
#define __REAL_DIVISION_HEADER__


#define float_floor_s_ _n(float_floor_s_)
#define float_floor_d_ _n(float_floor_d_)
#define float_floor_l_ _n(float_floor_l_)
#define float_floor1_s_ _n(float_floor1_s_)
#define float_floor1_d_ _n(float_floor1_d_)
#define float_floor1_l_ _n(float_floor1_l_)
#define float_ceiling_s_ _n(float_ceiling_s_)
#define float_ceiling_d_ _n(float_ceiling_d_)
#define float_ceiling_l_ _n(float_ceiling_l_)
#define float_ceiling1_s_ _n(float_ceiling1_s_)
#define float_ceiling1_d_ _n(float_ceiling1_d_)
#define float_ceiling1_l_ _n(float_ceiling1_l_)
#define float_truncate_s_ _n(float_truncate_s_)
#define float_truncate_d_ _n(float_truncate_d_)
#define float_truncate_l_ _n(float_truncate_l_)
#define float_truncate1_s_ _n(float_truncate1_s_)
#define float_truncate1_d_ _n(float_truncate1_d_)
#define float_truncate1_l_ _n(float_truncate1_l_)
#define float_round_s_ _n(float_round_s_)
#define float_round_d_ _n(float_round_d_)
#define float_round_l_ _n(float_round_l_)
#define float_round1_s_ _n(float_round1_s_)
#define float_round1_d_ _n(float_round1_d_)
#define float_round1_l_ _n(float_round1_l_)
#define float_floor_f_ _n(float_floor_f_)
#define float_ceiling_f_ _n(float_ceiling_f_)
#define float_truncate_f_ _n(float_truncate_f_)
#define float_round_f_ _n(float_round_f_)
#define float_floor_fixnum_ _n(float_floor_fixnum_)
#define float_ceiling_fixnum_ _n(float_ceiling_fixnum_)
#define float_truncate_fixnum_ _n(float_truncate_fixnum_)
#define float_round_fixnum_ _n(float_round_fixnum_)
#define float_ffloor_fixnum_ _n(float_ffloor_fixnum_)
#define float_fceiling_fixnum_ _n(float_fceiling_fixnum_)
#define float_ftruncate_fixnum_ _n(float_ftruncate_fixnum_)
#define float_fround_fixnum_ _n(float_fround_fixnum_)
#define float_floor_bignum_ _n(float_floor_bignum_)
#define float_ceiling_bignum_ _n(float_ceiling_bignum_)
#define float_truncate_bignum_ _n(float_truncate_bignum_)
#define float_round_bignum_ _n(float_round_bignum_)
#define float_ffloor_bignum_ _n(float_ffloor_bignum_)
#define float_fceiling_bignum_ _n(float_fceiling_bignum_)
#define float_ftruncate_bignum_ _n(float_ftruncate_bignum_)
#define float_fround_bignum_ _n(float_fround_bignum_)
#define float_floor1_ratio_ _n(float_floor1_ratio_)
#define float_ceiling1_ratio_ _n(float_ceiling1_ratio_)
#define float_truncate1_ratio_ _n(float_truncate1_ratio_)
#define float_round1_ratio_ _n(float_round1_ratio_)
#define float_ffloor1_ratio_ _n(float_ffloor1_ratio_)
#define float_fceiling1_ratio_ _n(float_fceiling1_ratio_)
#define float_ftruncate1_ratio_ _n(float_ftruncate1_ratio_)
#define float_fround1_ratio_ _n(float_fround1_ratio_)
#define float_floor_br_ratio_ _n(float_floor_br_ratio_)
#define float_ceiling_br_ratio_ _n(float_ceiling_br_ratio_)
#define float_truncate_br_ratio_ _n(float_truncate_br_ratio_)
#define float_round_br_ratio_ _n(float_round_br_ratio_)
#define float_ffloor_br_ratio_ _n(float_ffloor_br_ratio_)
#define float_fceiling_br_ratio_ _n(float_fceiling_br_ratio_)
#define float_ftruncate_br_ratio_ _n(float_ftruncate_br_ratio_)
#define float_fround_br_ratio_ _n(float_fround_br_ratio_)
#define float_floor_rb_ratio_ _n(float_floor_rb_ratio_)
#define float_ceiling_rb_ratio_ _n(float_ceiling_rb_ratio_)
#define float_truncate_rb_ratio_ _n(float_truncate_rb_ratio_)
#define float_round_rb_ratio_ _n(float_round_rb_ratio_)
#define float_ffloor_rb_ratio_ _n(float_ffloor_rb_ratio_)
#define float_fceiling_rb_ratio_ _n(float_fceiling_rb_ratio_)
#define float_ftruncate_rb_ratio_ _n(float_ftruncate_rb_ratio_)
#define float_fround_rb_ratio_ _n(float_fround_rb_ratio_)
#define float_floor_rr_ratio_ _n(float_floor_rr_ratio_)
#define float_ceiling_rr_ratio_ _n(float_ceiling_rr_ratio_)
#define float_truncate_rr_ratio_ _n(float_truncate_rr_ratio_)
#define float_round_rr_ratio_ _n(float_round_rr_ratio_)
#define float_ffloor_rr_ratio_ _n(float_ffloor_rr_ratio_)
#define float_fceiling_rr_ratio_ _n(float_fceiling_rr_ratio_)
#define float_ftruncate_rr_ratio_ _n(float_ftruncate_rr_ratio_)
#define float_fround_rr_ratio_ _n(float_fround_rr_ratio_)
#define float_mod_fixnum_ _n(float_mod_fixnum_)
#define float_mod_bignum_ _n(float_mod_bignum_)
#define float_mod_br_ratio_ _n(float_mod_br_ratio_)
#define float_mod_rb_ratio_ _n(float_mod_rb_ratio_)
#define float_mod_rr_ratio_ _n(float_mod_rr_ratio_)
#define mod_number_common_ _n(mod_number_common_)
#define float_rem_fixnum_ _n(float_rem_fixnum_)
#define float_rem_bignum_ _n(float_rem_bignum_)
#define float_rem_br_ratio_ _n(float_rem_br_ratio_)
#define float_rem_rb_ratio_ _n(float_rem_rb_ratio_)
#define float_rem_rr_ratio_ _n(float_rem_rr_ratio_)
#define rem_number_common_ _n(rem_number_common_)
#define single_float_integer_heap _n(single_float_integer_heap)
#define double_float_integer_heap _n(double_float_integer_heap)
#define long_float_integer_heap _n(long_float_integer_heap)

/*
 *  float
 */
int float_floor_s_(single_float a, single_float b, single_float *q, single_float *r);
int float_floor_d_(double_float a, double_float b, double_float *q, double_float *r);
int float_floor_l_(long_float a, long_float b, long_float *q, long_float *r);

int float_floor1_s_(single_float a, single_float *q, single_float *r);
int float_floor1_d_(double_float a, double_float *q, double_float *r);
int float_floor1_l_(long_float a, long_float *q, long_float *r);

int float_ceiling_s_(single_float a, single_float b, single_float *q, single_float *r);
int float_ceiling_d_(double_float a, double_float b, double_float *q, double_float *r);
int float_ceiling_l_(long_float a, long_float b, long_float *q, long_float *r);

int float_ceiling1_s_(single_float a, single_float *q, single_float *r);
int float_ceiling1_d_(double_float a, double_float *q, double_float *r);
int float_ceiling1_l_(long_float a, long_float *q, long_float *r);

int float_truncate_s_(single_float a, single_float b,
		single_float *q, single_float *r);
int float_truncate_d_(double_float a, double_float b,
		double_float *q, double_float *r);
int float_truncate_l_(long_float a, long_float b,
		long_float *q, long_float *r);

int float_truncate1_s_(single_float a, single_float *q, single_float *r);
int float_truncate1_d_(double_float a, double_float *q, double_float *r);
int float_truncate1_l_(long_float a, long_float *q, long_float *r);

int float_round_s_(single_float a, single_float b, single_float *q, single_float *r);
int float_round_d_(double_float a, double_float b, double_float *q, double_float *r);
int float_round_l_(long_float a, long_float b, long_float *q, long_float *r);

int float_round1_s_(single_float a, single_float *q, single_float *r);
int float_round1_d_(double_float a, double_float *q, double_float *r);
int float_round1_l_(long_float a, long_float *q, long_float *r);


/*
 *  fixnum
 */
int float_floor_f_(fixnum a, fixnum b, fixnum *quot, fixnum *rem);
int float_ceiling_f_(fixnum a, fixnum b, fixnum *quot, fixnum *rem);
int float_truncate_f_(fixnum a, fixnum b, fixnum *quot, fixnum *rem);
int float_round_f_(fixnum a, fixnum b, fixnum *quot, fixnum *rem);
int float_floor_fixnum_(addr *quot, addr *rem, fixnum a, fixnum b);
int float_ceiling_fixnum_(addr *quot, addr *rem, fixnum a, fixnum b);
int float_truncate_fixnum_(addr *quot, addr *rem, fixnum a, fixnum b);
int float_round_fixnum_(addr *quot, addr *rem, fixnum a, fixnum b);

int float_ffloor_fixnum_(addr *quot, addr *rem, fixnum a, fixnum b);
int float_fceiling_fixnum_(addr *quot, addr *rem, fixnum a, fixnum b);
int float_ftruncate_fixnum_(addr *quot, addr *rem, fixnum a, fixnum b);
int float_fround_fixnum_(addr *quot, addr *rem, fixnum a, fixnum b);


/*
 *  bignum
 */
int float_floor_bignum_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_ceiling_bignum_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_truncate_bignum_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_round_bignum_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);

int float_ffloor_bignum_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_fceiling_bignum_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_ftruncate_bignum_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_fround_bignum_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);


/*
 *  ratio
 */
int float_floor1_ratio_(LocalRoot local, addr *quot, addr *rem, addr pos);
int float_ceiling1_ratio_(LocalRoot local, addr *quot, addr *rem, addr pos);
int float_truncate1_ratio_(LocalRoot local, addr *quot, addr *rem, addr pos);
int float_round1_ratio_(LocalRoot local, addr *quot, addr *rem, addr pos);

int float_ffloor1_ratio_(LocalRoot local, addr *quot, addr *rem, addr pos);
int float_fceiling1_ratio_(LocalRoot local, addr *quot, addr *rem, addr pos);
int float_ftruncate1_ratio_(LocalRoot local, addr *quot, addr *rem, addr pos);
int float_fround1_ratio_(LocalRoot local, addr *quot, addr *rem, addr pos);

int float_floor_br_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_ceiling_br_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_truncate_br_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_round_br_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_ffloor_br_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_fceiling_br_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_ftruncate_br_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_fround_br_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);

int float_floor_rb_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_ceiling_rb_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_truncate_rb_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_round_rb_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_ffloor_rb_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_fceiling_rb_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_ftruncate_rb_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_fround_rb_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);

int float_floor_rr_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_ceiling_rr_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_truncate_rr_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_round_rr_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_ffloor_rr_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_fceiling_rr_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_ftruncate_rr_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);
int float_fround_rr_ratio_(LocalRoot local, addr *quot, addr *rem, addr a, addr b);


/*
 *  mod, rem
 */
int float_mod_fixnum_(addr *ret, fixnum a, fixnum b);
int float_mod_bignum_(LocalRoot local, addr *ret, addr a, addr b);
int float_mod_br_ratio_(LocalRoot local, addr *ret, addr a, addr b);
int float_mod_rb_ratio_(LocalRoot local, addr *ret, addr a, addr b);
int float_mod_rr_ratio_(LocalRoot local, addr *ret, addr a, addr b);
int mod_number_common_(LocalRoot local, addr a, addr b, addr *ret);

int float_rem_fixnum_(addr *ret, fixnum a, fixnum b);
int float_rem_bignum_(LocalRoot local, addr *ret, addr a, addr b);
int float_rem_br_ratio_(LocalRoot local, addr *ret, addr a, addr b);
int float_rem_rb_ratio_(LocalRoot local, addr *ret, addr a, addr b);
int float_rem_rr_ratio_(LocalRoot local, addr *ret, addr a, addr b);
int rem_number_common_(LocalRoot local, addr a, addr b, addr *ret);


/*
 *  integer-heap
 */
void single_float_integer_heap(LocalRoot local, addr *ret, single_float v);
void double_float_integer_heap(LocalRoot local, addr *ret, double_float v);
void long_float_integer_heap(LocalRoot local, addr *ret, long_float v);

#endif


/************************************************************
 *  real_floor.h
 ************************************************************/
#ifndef __REAL_FLOOR_HEADER__
#define __REAL_FLOOR_HEADER__


#define floor1_common_ _n(floor1_common_)
#define floor2_common_ _n(floor2_common_)
#define floor_common_ _n(floor_common_)
#define ffloor1_common_ _n(ffloor1_common_)
#define ffloor2_common_ _n(ffloor2_common_)
#define ffloor_common_ _n(ffloor_common_)
#define mod_rational_common_ _n(mod_rational_common_)

int floor1_common_(LocalRoot local, addr *quot, addr *rem, addr left);
int floor2_common_(LocalRoot local, addr *quot, addr *rem, addr left, addr right);
int floor_common_(LocalRoot local, addr var, addr div, addr *ret1, addr *ret2);
int ffloor1_common_(LocalRoot local, addr *quot, addr *rem, addr left);
int ffloor2_common_(LocalRoot local, addr *quot, addr *rem, addr left, addr right);
int ffloor_common_(LocalRoot local, addr var, addr div, addr *ret1, addr *ret2);
int mod_rational_common_(LocalRoot local, addr left, addr right, addr *ret);

#endif


/************************************************************
 *  real_round.h
 ************************************************************/
#ifndef __REAL_ROUND_HEADER__
#define __REAL_ROUND_HEADER__


#define round1_common_ _n(round1_common_)
#define round2_common_ _n(round2_common_)
#define round_common_ _n(round_common_)
#define fround1_common_ _n(fround1_common_)
#define fround2_common_ _n(fround2_common_)
#define fround_common_ _n(fround_common_)

int round1_common_(LocalRoot local, addr *quot, addr *rem, addr left);
int round2_common_(LocalRoot local, addr *quot, addr *rem, addr left, addr right);
int round_common_(LocalRoot local, addr var, addr div, addr *ret1, addr *ret2);
int fround1_common_(LocalRoot local, addr *quot, addr *rem, addr left);
int fround2_common_(LocalRoot local, addr *quot, addr *rem, addr left, addr right);
int fround_common_(LocalRoot local, addr var, addr div, addr *ret1, addr *ret2);

#endif


/************************************************************
 *  mop_common.h
 ************************************************************/
#ifndef __MOP_COMMON_HEADER__
#define __MOP_COMMON_HEADER__


#define init_mop_class _n(init_mop_class)
#define init_mop_generic _n(init_mop_generic)
#define init_mop_protocols _n(init_mop_protocols)
#define build_mop_class_ _n(build_mop_class_)
#define build_mop_generic_ _n(build_mop_generic_)
#define build_mop_protocols_ _n(build_mop_protocols_)
#define init_metaobject_protocol _n(init_metaobject_protocol)
#define build_metaobject_protocol _n(build_metaobject_protocol)

void init_mop_class(void);
void init_mop_generic(void);
void init_mop_protocols(void);

int build_mop_class_(Execute ptr);
int build_mop_generic_(Execute ptr);
int build_mop_protocols_(Execute ptr);

void init_metaobject_protocol(void);
void build_metaobject_protocol(void);

#endif


/************************************************************
 *  package_delete.h
 ************************************************************/
#ifndef __PACKAGE_DELETE_HEADER__
#define __PACKAGE_DELETE_HEADER__


#define delete_package_ _n(delete_package_)
int delete_package_(addr pos, int *ret);

#endif


/************************************************************
 *  package_defpackage.h
 ************************************************************/
#ifndef __PACKAEG_DEFPACKAGE_HEADER__
#define __PACKAEG_DEFPACKAGE_HEADER__


#define defpackage_common_ _n(defpackage_common_)
#define defpackage_execute_ _n(defpackage_execute_)

int defpackage_common_(addr form, addr env, addr *ret);
int defpackage_execute_(Execute ptr, addr var, addr rest, addr *ret);

#endif


/************************************************************
 *  sequence_duplicates.h
 ************************************************************/
#ifndef __SEQUENCE_DUPLICATES_HEADER__
#define __SEQUENCE_DUPLICATES_HEADER__


#define remove_duplicates_common_ _n(remove_duplicates_common_)
#define delete_duplicates_common_ _n(delete_duplicates_common_)

int remove_duplicates_common_(Execute ptr, addr *ret, addr pos, addr rest);
int delete_duplicates_common_(Execute ptr, addr *ret, addr pos, addr rest);

#endif


/************************************************************
 *  sequence_find.h
 ************************************************************/
#ifndef __SEQUENCE_HEADER_FIND__
#define __SEQUENCE_HEADER_FIND__


#define find_common_ _n(find_common_)
#define find_if_common_ _n(find_if_common_)
#define find_if_not_common_ _n(find_if_not_common_)
#define position_common_ _n(position_common_)
#define position_if_common_ _n(position_if_common_)
#define position_if_not_common_ _n(position_if_not_common_)
#define search_common_ _n(search_common_)
#define mismatch_common_ _n(mismatch_common_)

int find_common_(Execute ptr, addr *ret, addr item, addr pos, addr rest);
int find_if_common_(Execute ptr, addr *ret, addr call, addr pos, addr rest);
int find_if_not_common_(Execute ptr, addr *ret, addr call, addr pos, addr rest);
int position_common_(Execute ptr, addr *ret, addr item, addr pos, addr rest);
int position_if_common_(Execute ptr, addr *ret, addr call, addr pos, addr rest);
int position_if_not_common_(Execute ptr, addr *ret, addr call, addr pos, addr rest);
int search_common_(Execute ptr, addr *ret, addr pos1, addr pos2, addr rest);
int mismatch_common_(Execute ptr, addr *ret, addr pos1, addr pos2, addr rest);

#endif


/************************************************************
 *  sequence_make.h
 ************************************************************/
#ifndef __SEQUENCE_MAKE_HEADER__
#define __SEQUENCE_MAKE_HEADER__


#define make_sequence_common_ _n(make_sequence_common_)

int make_sequence_common_(Execute ptr, addr *ret, addr type, addr size, addr rest);

#endif


/************************************************************
 *  sequence_map.h
 ************************************************************/
#ifndef __SEQUENCE_MAP_HEADER__
#define __SEQUENCE_MAP_HEADER__


#define map_common_ _n(map_common_)
#define map_into_common_ _n(map_into_common_)

int map_common_(Execute ptr, addr *ret, addr type, addr call, addr rest);
int map_into_common_(Execute ptr, addr var, addr call, addr rest);

#endif


/************************************************************
 *  sequence_merge.h
 ************************************************************/
#ifndef __SEQUENCE_MERGE_HEADER__
#define __SEQUENCE_MERGE_HEADER__


#define merge_common_ _n(merge_common_)

int merge_common_(Execute ptr,
		addr type, addr pos1, addr pos2, addr call, addr rest, addr *ret);

#endif


/************************************************************
 *  sequence_remove.h
 ************************************************************/
#ifndef __SEQUENCE_REMOVE_HEADER__
#define __SEQUENCE_REMOVE_HEADER__


#define remove_common_ _n(remove_common_)
#define remove_if_common_ _n(remove_if_common_)
#define remove_if_not_common_ _n(remove_if_not_common_)
#define delete_common_ _n(delete_common_)
#define delete_if_common_ _n(delete_if_common_)
#define delete_if_not_common_ _n(delete_if_not_common_)

int remove_common_(Execute ptr, addr *ret, addr item, addr pos, addr rest);
int remove_if_common_(Execute ptr, addr *ret, addr call, addr pos, addr rest);
int remove_if_not_common_(Execute ptr, addr *ret, addr call, addr pos, addr rest);
int delete_common_(Execute ptr, addr *ret, addr item, addr pos, addr rest);
int delete_if_common_(Execute ptr, addr *ret, addr call, addr pos, addr rest);
int delete_if_not_common_(Execute ptr, addr *ret, addr call, addr pos, addr rest);

#endif


/************************************************************
 *  sequence_substitute.h
 ************************************************************/
#ifndef __SEQUENCE_SUBSTITUTE_HEADER__
#define __SEQUENCE_SUBSTITUTE_HEADER__


#define boolean_substitute_sequence_ _n(boolean_substitute_sequence_)
#define substitute_common_ _n(substitute_common_)
#define substitute_if_common_ _n(substitute_if_common_)
#define substitute_if_not_common_ _n(substitute_if_not_common_)
#define nsubstitute_common_ _n(nsubstitute_common_)
#define nsubstitute_if_common_ _n(nsubstitute_if_common_)
#define nsubstitute_if_not_common_ _n(nsubstitute_if_not_common_)

int boolean_substitute_sequence_(struct count_struct *str, int *ret, addr pos);
int substitute_common_(Execute ptr,
		addr *ret, addr item1, addr item2, addr pos, addr rest);
int substitute_if_common_(Execute ptr,
		addr *ret, addr item, addr call, addr pos, addr rest);
int substitute_if_not_common_(Execute ptr,
		addr *ret, addr item, addr call, addr pos, addr rest);
int nsubstitute_common_(Execute ptr,
		addr item1, addr item2, addr pos, addr rest);
int nsubstitute_if_common_(Execute ptr,
		addr item, addr call, addr pos, addr rest);
int nsubstitute_if_not_common_(Execute ptr,
		addr item, addr call, addr pos, addr rest);

#endif


/************************************************************
 *  prompt_for.h
 ************************************************************/
#ifndef __PROMPT_FOR_HEADER__
#define __PROMPT_FOR_HEADER__


#define prompt_for_stream_ _n(prompt_for_stream_)
#define prompt_string_stream_ _n(prompt_string_stream_)
#define yes_or_no_p_common_ _n(yes_or_no_p_common_)

int prompt_for_stream_(Execute ptr, addr check, addr prompt, addr *ret);
int prompt_string_stream_(Execute ptr, addr prompt, int errorp, addr *ret);
int yes_or_no_p_common_(Execute ptr, addr args, int exactp, int *ret);

#endif


/************************************************************
 *  stream_concat.h
 ************************************************************/
#ifndef __STREAM_CONCAT_HEADER__
#define __STREAM_CONCAT_HEADER__


#define open_concatenated_stream_ _n(open_concatenated_stream_)
#define push_concatenated_stream _n(push_concatenated_stream)
#define get_concatenated_stream _n(get_concatenated_stream)
#define init_stream_concatenated _n(init_stream_concatenated)

int open_concatenated_stream_(addr *stream, addr list);
void push_concatenated_stream(addr stream, addr input);
void get_concatenated_stream(addr stream, addr *ret);
void init_stream_concatenated(void);

#endif


/************************************************************
 *  stream_synonym.h
 ************************************************************/
#ifndef __STREAM_SYNONYM_HEADER__
#define __STREAM_SYNONYM_HEADER__


#define open_synonym_stream_ _n(open_synonym_stream_)
#define get_synonym_stream _n(get_synonym_stream)
#define set_synonym_stream _n(set_synonym_stream)
#define init_stream_synonym _n(init_stream_synonym)

int open_synonym_stream_(addr *stream, addr symbol);
void get_synonym_stream(addr stream, addr *ret);
void set_synonym_stream(addr stream, addr symbol);
void init_stream_synonym(void);

#endif


/************************************************************
 *  stream_twoway.h
 ************************************************************/
#ifndef __STREAM_TWOWAY_HEADER__
#define __STREAM_TWOWAY_HEADER__


#define open_twoway_stream _n(open_twoway_stream)
#define get_twoway_input_stream _n(get_twoway_input_stream)
#define set_twoway_input_stream _n(set_twoway_input_stream)
#define get_twoway_output_stream _n(get_twoway_output_stream)
#define set_twoway_output_stream _n(set_twoway_output_stream)
#define init_stream_twoway _n(init_stream_twoway)

void open_twoway_stream(addr *stream, addr input, addr output);
void get_twoway_input_stream(addr stream, addr *ret);
void set_twoway_input_stream(addr stream, addr input);
void get_twoway_output_stream(addr stream, addr *ret);
void set_twoway_output_stream(addr stream, addr output);
void init_stream_twoway(void);

#endif


/************************************************************
 *  type_coerce.h
 ************************************************************/
#ifndef __TYPE_COERCE_HEADER__
#define __TYPE_COERCE_HEADER__


#define init_type_coerce _n(init_type_coerce)
#define coerce_common_ _n(coerce_common_)

void init_type_coerce(void);
int coerce_common_(Execute ptr, addr pos, addr type, addr *ret);

#endif


/************************************************************
 *  compile_read.h
 ************************************************************/
#ifndef __COMPILE_READ_HEADER__
#define __COMPILE_READ_HEADER__


#define faslread_header_ _n(faslread_header_)
#define faslread_footer_ _n(faslread_footer_)
#define faslread_value_ _n(faslread_value_)
#define init_compile_read _n(init_compile_read)

int faslread_header_(addr input, int *ret);
int faslread_footer_(addr input, int *ret);
int faslread_value_(Execute ptr, addr stream, addr *ret);
void init_compile_read(void);

#endif


/************************************************************
 *  compile_write.h
 ************************************************************/
#ifndef __COMPILE_WRITE_HEADER__
#define __COMPILE_WRITE_HEADER__


#define faslwrite_header_ _n(faslwrite_header_)
#define faslwrite_footer_ _n(faslwrite_footer_)
#define faslwrite_break_ _n(faslwrite_break_)
#define faslwrite_value_ _n(faslwrite_value_)
#define init_compile_write _n(init_compile_write)

int faslwrite_header_(addr stream);
int faslwrite_footer_(addr stream);
int faslwrite_break_(addr stream);
int faslwrite_value_(Execute ptr, addr stream, addr pos);
void init_compile_write(void);

#endif


/************************************************************
 *  compile_faslcode.h
 ************************************************************/
#ifndef __COMPILE_FASLCODE_HEADER__
#define __COMPILE_FASLCODE_HEADER__

enum FaslCode {
	FaslCode_error = 0,
	FaslCode_code,
	FaslCode_unbound,
	FaslCode_nil,
	FaslCode_t,
	FaslCode_type,
	FaslCode_clos,
	FaslCode_cons,
	FaslCode_array,
	FaslCode_vector2,
	FaslCode_vector4,
	FaslCode_vector8,
	FaslCode_character,
	FaslCode_character7,
	FaslCode_string,
	FaslCode_string7,
	FaslCode_hashtable,
	FaslCode_gensym,
	FaslCode_symbol,
	FaslCode_fixnum,
	FaslCode_bignum,
	FaslCode_ratio,
	FaslCode_single_float,
	FaslCode_double_float,
	FaslCode_long_float,
	FaslCode_complex,
	FaslCode_callname,
	FaslCode_index,
	FaslCode_package,
	FaslCode_random_state,
	FaslCode_pathname,
	FaslCode_quote,
	FaslCode_bitvector,
	FaslCode_load,
	FaslCode_paper,
	FaslCode_value, /* end of value */

	/* code */
	FaslCode_nop,
	FaslCode_begin,
	FaslCode_begin_call,
	FaslCode_end,
	FaslCode_escape,
	FaslCode_escape_not,
	FaslCode_save,
	FaslCode_restore,
	FaslCode_normal,
	FaslCode_revert,
	FaslCode_revert_goto,

	FaslCode_set,
	FaslCode_push,
	FaslCode_push_result,
	FaslCode_push_values,
	FaslCode_nil_set,
	FaslCode_nil_push,
	FaslCode_t_set,
	FaslCode_t_push,

	FaslCode_lexical,
	FaslCode_lexical_set,
	FaslCode_lexical_push,
	FaslCode_lexical_rem,
	FaslCode_special_set,
	FaslCode_special_push,
	FaslCode_special_rem,

	FaslCode_declaim_special,
	FaslCode_declaim_type_value,
	FaslCode_declaim_type_function,
	FaslCode_declaim_inline,
	FaslCode_declaim_notinline,
	FaslCode_declaim_compilation,
	FaslCode_declaim_debug,
	FaslCode_declaim_safety,
	FaslCode_declaim_space,
	FaslCode_declaim_speed,
	FaslCode_declaim_declaration,

	FaslCode_type_result,
	FaslCode_type_lexical,
	FaslCode_type_special,
	FaslCode_type_global,
	FaslCode_type_function,
	FaslCode_type_setf,
	FaslCode_let_lexical,
	FaslCode_let_special,
	FaslCode_leta_special,

	FaslCode_setq_lexical,
	FaslCode_setq_special,
	FaslCode_setq_global,

	FaslCode_function_set,
	FaslCode_function_push,
	FaslCode_setf_set,
	FaslCode_setf_push,

	FaslCode_defmacro,
	FaslCode_deftype,
	FaslCode_define_compiler_macro,
	FaslCode_defun,

	FaslCode_call_name,
	FaslCode_call_result,
	FaslCode_call_type,
	FaslCode_call_key,
	FaslCode_call_function,
	FaslCode_call_setf,
	FaslCode_call_lexical,

	FaslCode_values_nil,
	FaslCode_values_set,
	FaslCode_the_set,
	FaslCode_the_push,

	FaslCode_if_unbound,
	FaslCode_if_nil,
	FaslCode_if_t,
	FaslCode_goto,
	FaslCode_go,
	FaslCode_return_from,
	FaslCode_catch,
	FaslCode_throw_operator,
	FaslCode_taginfo,
	FaslCode_blockinfo,

	FaslCode_handler_bind,
	FaslCode_handler_case,
	FaslCode_restart_bind,
	FaslCode_restart_case,
	FaslCode_restart_progn,

	FaslCode_funcall,
	FaslCode_nth_value,
	FaslCode_progv,

	FaslCode_pop,
	FaslCode_pop_unbound,
	FaslCode_getf,
	FaslCode_rest_copy,
	FaslCode_rest_bind,
	FaslCode_allow_other_keys,
	FaslCode_rest_null,
	FaslCode_whole,

	FaslCode_lambda,
	FaslCode_lambda_name,
	FaslCode_lambda_type,
	FaslCode_lambda_doc,
	FaslCode_lambda_form,
	FaslCode_lambda_defun,
	FaslCode_lambda_closure,
	FaslCode_lambda_lexical,
	FaslCode_lambda_cache,
	FaslCode_lambda_cache_set,
	FaslCode_macro,
	FaslCode_macro_special,
	FaslCode_macro_env,
	FaslCode_macro_whole,

	FaslCode_labels_make,
	FaslCode_labels_lambda,

	FaslCode_bind1_type,
	FaslCode_bind1_special,
	FaslCode_bind1_lexical,
	FaslCode_bind2_type,
	FaslCode_bind2_special,
	FaslCode_bind2_lexical,

	FaslCode_load_alloc,
	FaslCode_load_gensym,
	FaslCode_load_set,
	FaslCode_reference_set,
	FaslCode_reference_push,

	FaslCode_step,
	FaslCode_step_off,
	FaslCode_step_begin,
	FaslCode_step_end,

	FaslCode_optcode_result_type,
	FaslCode_optcode_car0_set,
	FaslCode_optcode_car0_push,
	FaslCode_optcode_car1_set,
	FaslCode_optcode_car1_push,
	FaslCode_optcode_cdr0_set,
	FaslCode_optcode_cdr0_push,
	FaslCode_optcode_cdr1_set,
	FaslCode_optcode_cdr1_push,
	FaslCode_optcode_cons,

	/* size */
	FaslCode_size,

	/* end */
	FaslCode_break = 0xFE,
	FaslCode_eof = 0xFF
};

#endif


/************************************************************
 *  compile_typedef.h
 ************************************************************/
#ifndef __COMPILE_TYPEDEF__
#define __COMPILE_TYPEDEF__


#define CompileWrite _n(CompileWrite)
#define CompileRead _n(CompileRead)
#define get_compile_write _n(get_compile_write)
#define get_compile_read _n(get_compile_read)
#define init_compile_typedef _n(init_compile_typedef)

extern enum FaslCode CompileWrite[p_size_code];
extern constindex CompileRead[FaslCode_size];

#ifdef LISP_DEBUG
#define GetCompileWrite(x)	get_compile_write(x)
#define GetCompileRead(x)	get_compile_read(x)
#else
#define GetCompileWrite(x)	CompileWrite[x]
#define GetCompileRead(x)	CompileRead[x]
#endif

enum FaslCode get_compile_write(pointer id);
constindex get_compile_read(enum FaslCode id);
void init_compile_typedef(void);

#endif


/************************************************************
 *  compile_array.h
 ************************************************************/
#ifndef __COMPILE_ARRAY_HEADER__
#define __COMPILE_ARRAY_HEADER__


#define faslwrite_value_array_ _n(faslwrite_value_array_)
#define faslread_value_array_ _n(faslread_value_array_)

int faslwrite_value_array_(Execute ptr, addr stream, addr pos);
int faslread_value_array_(Execute ptr, addr stream, addr *ret);

#endif


/************************************************************
 *  compile_stream.h
 ************************************************************/
#ifndef __COMPILE_STREAM_HEADER__
#define __COMPILE_STREAM_HEADER__


#define faslwrite_buffer_ _n(faslwrite_buffer_)
#define faslwrite_type_ _n(faslwrite_type_)
#define faslwrite_status_ _n(faslwrite_status_)
#define faslwrite_type_status_ _n(faslwrite_type_status_)
#define faslwrite_byte_ _n(faslwrite_byte_)
#define faslwrite_size_ _n(faslwrite_size_)

#define faslread_buffer_check_ _n(faslread_buffer_check_)
#define faslread_buffer_ _n(faslread_buffer_)
#define faslread_type_ _n(faslread_type_)
#define faslread_type_check_ _n(faslread_type_check_)
#define faslread_status_ _n(faslread_status_)
#define faslread_status_update _n(faslread_status_update)
#define faslread_byte_ _n(faslread_byte_)
#define faslread_size_ _n(faslread_size_)

#define faslread_variable_(stream, value, ret) \
	faslread_buffer_check_(stream, &(value), sizeoft(value), (ret))

struct faslstatus {
	byte status, user;
};
typedef struct faslstatus FaslStatus;

int faslwrite_buffer_(addr stream, const void *ptr, size_t size);
int faslwrite_type_(addr stream, enum FaslCode code);
int faslwrite_status_(addr stream, addr pos);
int faslwrite_type_status_(addr stream, addr pos, enum FaslCode code);
int faslwrite_byte_(addr stream, byte value);
int faslwrite_size_(addr stream, size_t value);

int faslread_buffer_check_(addr stream, void *ptr, size_t size, int *ret);
int faslread_buffer_(addr stream, void *ptr, size_t size);
int faslread_type_(addr stream, enum FaslCode *ret);
int faslread_type_check_(addr stream, enum FaslCode value);
int faslread_status_(addr stream, FaslStatus *ret);
void faslread_status_update(addr pos, FaslStatus status);
int faslread_byte_(addr stream, byte *ret);
int faslread_size_(addr stream, size_t *ret);

#endif


/************************************************************
 *  compile_eval.h
 ************************************************************/
#ifndef __COMPILE_EVAL_HEADER__
#define __COMPILE_EVAL_HEADER__


#define compile_eval_value_ _n(compile_eval_value_)
#define compile_load_stream_ _n(compile_load_stream_)
#define compile_partial_ _n(compile_partial_)
#define compile_instance_ _n(compile_instance_)

int compile_eval_value_(Execute ptr, addr pos);
int compile_load_stream_(Execute ptr, addr stream);
int compile_partial_(Execute ptr, addr pos, addr *ret, addr *rtype);
int compile_instance_(Execute ptr, addr pos, addr make, addr init);

#endif


/************************************************************
 *  eval_object.h
 ************************************************************/
#ifndef __EVAL_OBJECT_HEADER__
#define __EVAL_OBJECT_HEADER__


#define eval_heap _n(eval_heap)
#define eval_local _n(eval_local)
#define eval_alloc _n(eval_alloc)
#define refeval _n(refeval)
#define geteval _n(geteval)
#define seteval _n(seteval)
#define refevaltype _n(refevaltype)
#define getevaltype _n(getevaltype)
#define setevaltype _n(setevaltype)
#define eval_p _n(eval_p)
#define eval_declare_p _n(eval_declare_p)
#define eval_declare_nil_p _n(eval_declare_nil_p)
#define eval_parse_p _n(eval_parse_p)
#define eval_scope_p _n(eval_scope_p)
#define eval_stack_p _n(eval_stack_p)
#define eval_table_p _n(eval_table_p)
#define eval_tablevalue_p _n(eval_tablevalue_p)
#define eval_tablefunction_p _n(eval_tablefunction_p)
#define eval_tabletagbody_p _n(eval_tabletagbody_p)
#define eval_tableblock_p _n(eval_tableblock_p)
#define eval_tablecall_p _n(eval_tablecall_p)
#define eval_code_p _n(eval_code_p)

enum EVAL_TYPE {
	EVAL_TYPE_DECLARE,
	EVAL_TYPE_PARSE,
	EVAL_TYPE_STACK,
	EVAL_TYPE_SCOPE,
	EVAL_TYPE_TABLE,
	EVAL_TYPE_TABLEVALUE,
	EVAL_TYPE_TABLEFUNCTION,
	EVAL_TYPE_TABLETAGBODY,
	EVAL_TYPE_TABLEBLOCK,
	EVAL_TYPE_TABLECALL,
	EVAL_TYPE_CODE,
	EVAL_TYPE_SIZE
};

#define RefEval_Low(p,i)		RefArraySS((p),(i))
#define GetEval_Low(p,i,v)		GetArraySS((p),(i),(v))
#define SetEval_Low(p,i,v)		SetArraySS((p),(i),(v))
#define RefEvalType_Low(p)		((enum EVAL_TYPE)GetUser(p))
#define GetEvalType_Low(p,v)	(*(v) = RefEvalType_Low(p))
#define SetEvalType_Low(p,v)	SetUser((p), (byte)(v))

#ifdef LISP_DEBUG
#define RefEval(p,i)		refeval(p,i)
#define GetEval(p,i,v)		geteval(p,i,v)
#define SetEval(p,i,v)		seteval(p,i,v)
#define RefEvalType(p)		refevaltype(p)
#define GetEvalType(p,v)	getevaltype(p,v)
#define SetEvalType(p,v)	setevaltype(p,v)
#else
#define RefEval(p,i)		RefEval_Low(p,i)
#define GetEval(p,i,v)		GetEval_Low(p,i,v)
#define SetEval(p,i,v)		SetEval_Low(p,i,v)
#define RefEvalType(p)		RefEvalType_Low(p)
#define GetEvalType(p,v)	GetEvalType_Low(p,v)
#define SetEvalType(p,v)	SetEvalType_Low(p,v)
#endif

#define LenBodyEval			LenBodySS
#define PtrEvalBody(x,y)	PtrBodySSa(x,y)
#define PtrEvalBodyAny(x)	PtrBodySS(x)

void eval_heap(addr *ret,
		enum EVAL_TYPE type, byte array, byte body);
void eval_local(LocalRoot local, addr *ret,
		enum EVAL_TYPE type, byte array, byte body);
void eval_alloc(LocalRoot local, addr *ret,
		enum EVAL_TYPE type, byte array, byte body);

addr refeval(addr pos, size_t index);
void geteval(addr pos, size_t index, addr *ret);
void seteval(addr pos, size_t index, addr value);
enum EVAL_TYPE refevaltype(addr pos);
void getevaltype(addr pos, enum EVAL_TYPE *ret);
void setevaltype(addr pos, enum EVAL_TYPE value);

int eval_p(addr pos);
int eval_declare_p(addr pos);
int eval_declare_nil_p(addr pos);
int eval_parse_p(addr pos);
int eval_scope_p(addr pos);
int eval_stack_p(addr pos);
int eval_table_p(addr pos);
int eval_tablevalue_p(addr pos);
int eval_tablefunction_p(addr pos);
int eval_tabletagbody_p(addr pos);
int eval_tableblock_p(addr pos);
int eval_tablecall_p(addr pos);
int eval_code_p(addr pos);

#endif


/************************************************************
 *  eval_stack.h
 ************************************************************/
#ifndef __EVAL_STACK_HEADER__
#define __EVAL_STACK_HEADER__


#define eval_stack_alloc _n(eval_stack_alloc)
#define eval_stack_local _n(eval_stack_local)
#define eval_stack_heap _n(eval_stack_heap)
#define structevalstack _n(structevalstack)
#define refevalstacktype _n(refevalstacktype)
#define getevalstacktype _n(getevalstacktype)
#define setevalstacktype _n(setevalstacktype)
#define getevalstacknext _n(getevalstacknext)
#define setevalstacknext _n(setevalstacknext)
#define getevalstacktable _n(getevalstacktable)
#define setevalstacktable _n(setevalstacktable)
#define getevalstackscope _n(getevalstackscope)
#define setevalstackscope _n(setevalstackscope)
#define getevalstacklexical _n(getevalstacklexical)
#define setevalstacklexical _n(setevalstacklexical)
#define eval_stack_lambda_lexical_p _n(eval_stack_lambda_lexical_p)
#define getstack_eval_ _n(getstack_eval_)
#define getglobal_eval_ _n(getglobal_eval_)
#define newstack_eval_ _n(newstack_eval_)
#define freestack_eval_ _n(freestack_eval_)
#define begin_eval_stack_ _n(begin_eval_stack_)
#define free_eval_stack _n(free_eval_stack)
#define globalp_stack_eval _n(globalp_stack_eval)
#define increment_stack_eval _n(increment_stack_eval)
#define getlexical_stack_eval _n(getlexical_stack_eval)
#define getlexical_index_heap _n(getlexical_index_heap)
#define apply_declaim_stack_ _n(apply_declaim_stack_)
#define apply_declare_stack _n(apply_declare_stack)
#define apply_declare_value_stack_ _n(apply_declare_value_stack_)
#define apply_declare_let_stack_ _n(apply_declare_let_stack_)
#define apply_declare_function_stack _n(apply_declare_function_stack)
#define getvalue_scope_evalstack _n(getvalue_scope_evalstack)
#define setvalue_scope_evalstack _n(setvalue_scope_evalstack)
#define getfunction_scope_evalstack _n(getfunction_scope_evalstack)
#define setfunction_scope_evalstack _n(setfunction_scope_evalstack)
#define gettagbody_scope_evalstack _n(gettagbody_scope_evalstack)
#define settagbody_scope_evalstack _n(settagbody_scope_evalstack)
#define getblock_scope_evalstack _n(getblock_scope_evalstack)
#define setblock_scope_evalstack _n(setblock_scope_evalstack)
#define setvalue_lexical_evalstack _n(setvalue_lexical_evalstack)
#define setfunction_lexical_evalstack _n(setfunction_lexical_evalstack)
#define settagbody_lexical_evalstack _n(settagbody_lexical_evalstack)
#define setblock_lexical_evalstack _n(setblock_lexical_evalstack)
#define find_plistlist_evalstack _n(find_plistlist_evalstack)
#define find_special_evalstack _n(find_special_evalstack)
#define find_global_special_evalstack _n(find_global_special_evalstack)
#define push_global_special_evalstack _n(push_global_special_evalstack)

enum EVAL_STACK {
	EVAL_STACK_NEXT,
	EVAL_STACK_TABLE,
	EVAL_STACK_SCOPE,
	EVAL_STACK_LEXICAL,
	EVAL_STACK_SIZE
};

enum EVAL_STACK_MODE {
	EVAL_STACK_MODE_NIL,
	EVAL_STACK_MODE_LEXICAL,
	EVAL_STACK_MODE_LAMBDA,
	EVAL_STACK_MODE_SIZE
};

struct eval_stack {
	unsigned globalp : 1;
	enum EVAL_STACK_MODE type;
	LocalStack stack;
	OptimizeType optimize[EVAL_OPTIMIZE_SIZE];
	size_t lexical;
};

#define PtrEvalStack(x)					PtrEvalBody(x, EVAL_STACK_SIZE)
#define StructEvalStack_Low(x)			((struct eval_stack *)PtrEvalStack(x))
#define RefEvalStackType_Low(x)			(StructEvalStack_Low(x)->type)
#define GetEvalStackType_Low(x,v)		(*(v) = RefEvalStackType_Low(x))
#define SetEvalStackType_Low(x,v)		(RefEvalStackType_Low(x) = (v))
#define GetEvalStackNext_Low(x,v)		GetEval((x),EVAL_STACK_NEXT,(v))
#define SetEvalStackNext_Low(x,v)		SetEval((x),EVAL_STACK_NEXT,(v))
#define GetEvalStackTable_Low(x,v)		GetEval((x),EVAL_STACK_TABLE,(v))
#define SetEvalStackTable_Low(x,v)		SetEval((x),EVAL_STACK_TABLE,(v))
#define GetEvalStackScope_Low(x,v)		GetEval((x),EVAL_STACK_SCOPE,(v))
#define SetEvalStackScope_Low(x,v)		SetEval((x),EVAL_STACK_SCOPE,(v))
#define GetEvalStackLexical_Low(x,v)	GetEval((x),EVAL_STACK_LEXICAL,(v))
#define SetEvalStackLexical_Low(x,v)	SetEval((x),EVAL_STACK_LEXICAL,(v))

#ifdef LISP_DEBUG
#define StructEvalStack(x)				structevalstack(x)
#define RefEvalStackType(x)				refevalstacktype(x)
#define GetEvalStackType(x,v)			getevalstacktype(x,v)
#define SetEvalStackType(x,v)			setevalstacktype(x,v)
#define GetEvalStackNext(x,v)			getevalstacknext(x,v)
#define SetEvalStackNext(x,v)			setevalstacknext(x,v)
#define GetEvalStackTable(x,v)			getevalstacktable(x,v)
#define SetEvalStackTable(x,v)			setevalstacktable(x,v)
#define GetEvalStackScope(x,v)			getevalstackscope(x,v)
#define SetEvalStackScope(x,v)			setevalstackscope(x,v)
#define GetEvalStackLexical(x,v)		getevalstacklexical(x,v)
#define SetEvalStackLexical(x,v)		setevalstacklexical(x,v)
#else
#define StructEvalStack(x)				StructEvalStack_Low(x)
#define RefEvalStackType(x)				RefEvalStackType_Low(x)
#define GetEvalStackType(x,v)			GetEvalStackType_Low(x,v)
#define SetEvalStackType(x,v)			SetEvalStackType_Low(x,v)
#define GetEvalStackNext(x,v)			GetEvalStackNext_Low(x,v)
#define SetEvalStackNext(x,v)			SetEvalStackNext_Low(x,v)
#define GetEvalStackTable(x,v)			GetEvalStackTable_Low(x,v)
#define SetEvalStackTable(x,v)			SetEvalStackTable_Low(x,v)
#define GetEvalStackScope(x,v)			GetEvalStackScope_Low(x,v)
#define SetEvalStackScope(x,v)			SetEvalStackScope_Low(x,v)
#define GetEvalStackLexical(x,v)		GetEvalStackLexical_Low(x,v)
#define SetEvalStackLexical(x,v)		SetEvalStackLexical_Low(x,v)
#endif

#define newstack_nil_(p,r) newstack_eval_((p), EVAL_STACK_MODE_NIL,(r))
#define newstack_lexical_(p,r) newstack_eval_((p), EVAL_STACK_MODE_LEXICAL,(r))
#define newstack_lambda_(p,r) newstack_eval_((p), EVAL_STACK_MODE_LAMBDA,(r))

void eval_stack_alloc(LocalRoot local, addr *ret, enum EVAL_STACK_MODE type);
void eval_stack_local(LocalRoot local, addr *ret, enum EVAL_STACK_MODE type);
void eval_stack_heap(addr *ret, enum EVAL_STACK_MODE type);

struct eval_stack *structevalstack(addr pos);
enum EVAL_STACK_MODE refevalstacktype(addr pos);
void getevalstacktype(addr pos, enum EVAL_STACK_MODE *ret);
void setevalstacktype(addr pos, enum EVAL_STACK_MODE value);
void getevalstacknext(addr pos, addr *ret);
void setevalstacknext(addr pos, addr value);
void getevalstacktable(addr pos, addr *ret);
void setevalstacktable(addr pos, addr value);
void getevalstackscope(addr pos, addr *ret);
void setevalstackscope(addr pos, addr value);
void getevalstacklexical(addr pos, addr *ret);
void setevalstacklexical(addr pos, addr value);

int eval_stack_lambda_lexical_p(addr stack);
int getstack_eval_(Execute ptr, addr *ret);
int getglobal_eval_(Execute ptr, addr *ret);
int newstack_eval_(Execute ptr, enum EVAL_STACK_MODE type, addr *ret);
int freestack_eval_(Execute ptr, addr scope);
int begin_eval_stack_(Execute ptr);
void free_eval_stack(Execute ptr);
int globalp_stack_eval(addr pos);
size_t increment_stack_eval(addr pos);
size_t getlexical_stack_eval(addr pos);
void getlexical_index_heap(addr stack, addr *ret);

int apply_declaim_stack_(Execute ptr, addr declare);
void apply_declare_stack(LocalRoot local, addr stack, addr declare);
int apply_declare_value_stack_(Execute ptr, addr stack, addr symbol, addr declare);
int apply_declare_let_stack_(Execute ptr, addr stack, addr symbol, addr declare);
void apply_declare_function_stack(LocalRoot local, addr stack, addr call, addr declare);

/* table */
int getvalue_scope_evalstack(addr stack, addr pos, addr *ret);
void setvalue_scope_evalstack(addr stack, addr pos);
int getfunction_scope_evalstack(addr stack, addr pos, addr *ret);
void setfunction_scope_evalstack(addr stack, addr pos);
int gettagbody_scope_evalstack(addr stack, addr pos, addr *ret);
void settagbody_scope_evalstack(addr stack, addr pos);
int getblock_scope_evalstack(addr stack, addr pos, addr *ret);
void setblock_scope_evalstack(addr stack, addr pos);

void setvalue_lexical_evalstack(addr stack, addr pos);
void setfunction_lexical_evalstack(addr stack, addr pos);
void settagbody_lexical_evalstack(addr stack, addr pos);
void setblock_lexical_evalstack(addr stack, addr pos);

int find_plistlist_evalstack(addr stack, addr key, addr symbol);
int find_special_evalstack(addr stack, addr symbol);

int find_global_special_evalstack(addr stack, addr symbol, addr *ret);
void push_global_special_evalstack(addr stack, addr value);

#endif


/************************************************************
 *  load_depend.h
 ************************************************************/
#ifndef __LOAD_DEPEND_HEADER__
#define __LOAD_DEPEND_HEADER__


#define get_depend_root_ _n(get_depend_root_)

#define load_depend_heap _n(load_depend_heap)
#define get_stream_load_depend _n(get_stream_load_depend)
#define get_index_load_depend _n(get_index_load_depend)
#define begin_load_push _n(begin_load_push)
#define end_load_push_ _n(end_load_push_)
#define push_load_push_ _n(push_load_push_)

#define load_depend_code_ _n(load_depend_code_)
#define load_depend_partial_ _n(load_depend_partial_)
#define load_depend_instance_ _n(load_depend_instance_)
#define compile_depend_make_ _n(compile_depend_make_)

#define init_load_depend _n(init_load_depend)
#define disable_load_depend _n(disable_load_depend)

int get_depend_root_(Execute ptr, addr *ret);

void load_depend_heap(addr *ret, addr stream, addr value, addr index);
void get_stream_load_depend(addr pos, addr *ret);
void get_index_load_depend(addr pos, addr *ret);
void begin_load_push(Execute ptr);
int end_load_push_(Execute ptr, addr code);
int push_load_push_(Execute ptr, addr code);

int load_depend_code_(Execute ptr, addr stream, addr value);
int load_depend_partial_(Execute ptr, addr stream, addr value, addr *ret);
int load_depend_instance_(Execute ptr, addr instance, addr make, addr init);
int compile_depend_make_(Execute ptr, addr stream, addr code);

void init_load_depend(Execute ptr);
void disable_load_depend(Execute ptr);

#endif


/************************************************************
 *  load_gensym.h
 ************************************************************/
#ifndef __LOAD_GENSYM_HEADER__
#define __LOAD_GENSYM_HEADER__


#define init_load_gensym _n(init_load_gensym)
#define disable_load_gensym _n(disable_load_gensym)
#define list_load_gensym_ _n(list_load_gensym_)
#define load_value_ _n(load_value_)
#define load_value_code_ _n(load_value_code_)

void init_load_gensym(Execute ptr);
void disable_load_gensym(Execute ptr);
int list_load_gensym_(Execute ptr, addr *ret);
int load_value_(Execute ptr, addr pos);
int load_value_code_(Execute ptr, addr code);

#endif


/************************************************************
 *  load_time_value.h
 ************************************************************/
#ifndef __LOAD_TIME_VALUE_HEADER__
#define __LOAD_TIME_VALUE_HEADER__


#define intern_load_table_ _n(intern_load_table_)
#define get_load_table_ _n(get_load_table_)
#define get_index_load_table_ _n(get_index_load_table_)
#define incf_load_size_ _n(incf_load_size_)
#define get_load_size_ _n(get_load_size_)

#define parse_load_time_value_ _n(parse_load_time_value_)
#define copy_eval_load_time_value _n(copy_eval_load_time_value)
#define scope_load_time_value_ _n(scope_load_time_value_)

#define init_load_time_value _n(init_load_time_value)
#define disable_load_time_value _n(disable_load_time_value)

/* special */
int intern_load_table_(Execute ptr, addr pos, addr value);
int get_load_table_(Execute ptr, addr pos, addr *ret);
int get_index_load_table_(Execute ptr, addr pos, size_t *ret);
int incf_load_size_(Execute ptr, addr *ret);
int get_load_size_(Execute ptr, addr *ret);

/* eval */
int parse_load_time_value_(Execute ptr, addr *ret, addr form);
void copy_eval_load_time_value(LocalRoot local, addr *ret, addr eval);
int scope_load_time_value_(Execute ptr, addr *ret, addr eval);

/* initialize */
void init_load_time_value(Execute ptr);
void disable_load_time_value(Execute ptr);

#endif


/************************************************************
 *  optimize.h
 ************************************************************/
#ifndef __OPTIMIZE_HEADER__
#define __OPTIMIZE_HEADER__


#define save_optimize_value _n(save_optimize_value)
#define rollback_optimize_value _n(rollback_optimize_value)
#define optimize_declare_value _n(optimize_declare_value)
#define optimize_speed_on _n(optimize_speed_on)
#define optimize_evaltype _n(optimize_evaltype)
#define optimize_evaltype_on _n(optimize_evaltype_on)
#define optimize_initialize _n(optimize_initialize)
#define optimize_extract_ _n(optimize_extract_)

struct optimize_value {
	OptimizeType declaim[EVAL_OPTIMIZE_SIZE];
	OptimizeType local[EVAL_OPTIMIZE_SIZE];
};

struct optimize_struct {
	Execute ptr;
	LocalRoot local;
	int update;
	addr pos;
	struct optimize_value value;
};

typedef struct optimize_struct OptimizeInfo;
typedef int (*optimize_call)(struct optimize_struct *, int *);

void save_optimize_value(const struct optimize_struct *str,
		struct optimize_value *save);
void rollback_optimize_value(struct optimize_struct *str,
		const struct optimize_value *save);

int optimize_declare_value(struct optimize_struct *str, enum EVAL_OPTIMIZE index);
int optimize_speed_on(struct optimize_struct *str);
int optimize_evaltype(addr pos, EvalParse type);
int optimize_evaltype_on(struct optimize_struct *str, EvalParse type);
void optimize_initialize(struct optimize_struct *str, Execute ptr, addr pos);
int optimize_extract_(struct optimize_struct *str, optimize_call call);

#endif


/************************************************************
 *  optimize_parse.h
 ************************************************************/
#ifndef __OPTIMIZE_PARSE_HEADER__
#define __OPTIMIZE_PARSE_HEADER__


#define checkparse_inplace_ _n(checkparse_inplace_)
#define optparse_inplace_ _n(optparse_inplace_)
#define checkparse_implicit_declare_ _n(checkparse_implicit_declare_)
#define optparse_implicit_declare_ _n(optparse_implicit_declare_)
#define optimize_value_and_function _n(optimize_value_and_function)
#define optimize_value_only _n(optimize_value_only)
#define checkparse_implicit_all_ _n(checkparse_implicit_all_)
#define optparse_implicit_all_ _n(optparse_implicit_all_)
#define optparse_run_ _n(optparse_run_)
#define optimize_parse_ _n(optimize_parse_)

#define Return_or_optparse(call, str, ret) { \
	Return(call(str, ret)); \
	if (*ret) { \
		return 0;\
	} \
}
#define Return_check_optparse(call, str, ret) { \
	Return(call(str, ret)); \
	if (*ret == 0) { \
		return 0; \
	} \
};

int checkparse_inplace_(OptimizeInfo *str, addr pos, int *ret);
int optparse_inplace_(OptimizeInfo *str, addr pos, addr *value, int *ret);
int checkparse_implicit_declare_(OptimizeInfo *str,
		addr decl, addr cons, int *ret);
int optparse_implicit_declare_(OptimizeInfo *str,
		addr decl, addr cons, addr *value, int *ret);
int optimize_value_and_function(addr pos);
int optimize_value_only(addr pos);
int checkparse_implicit_all_(OptimizeInfo *str, addr list, int *ret);
int optparse_implicit_all_(OptimizeInfo *str, addr list, addr *value, int *ret);
int optparse_run_(OptimizeInfo *str, int *ret, int (*call)(OptimizeInfo *));
int optimize_parse_(Execute ptr, addr pos, addr *value, int *ret);

#endif


/************************************************************
 *  parse_function.h
 ************************************************************/
#ifndef __PARSE_FUNCTION_HEADER__
#define __PARSE_FUNCTION_HEADER__


#define parse_declare_body_ _n(parse_declare_body_)
#define parse_macrolet_args_ _n(parse_macrolet_args_)
#define parse_symbol_macrolet_args_ _n(parse_symbol_macrolet_args_)
#define parse_execute_ _n(parse_execute_)
#define parse_compiler_macro_p _n(parse_compiler_macro_p)
#define parse_eval_when_list_ _n(parse_eval_when_list_)
#define parse_eval_when_process _n(parse_eval_when_process)
#define parse_ordinary_ _n(parse_ordinary_)
#define localhold_parse_self_(h,p,x) localhold_parse_execute_((h),(p),&(x),(x))
#define parse_self_(p, x) parse_execute_((p), &(x), (x))

int parse_declare_body_(Execute ptr, addr cons, addr *retdecl, addr *retbody);
int parse_macrolet_args_(Execute ptr, addr args);
int parse_symbol_macrolet_args_(Execute ptr, addr args, addr decl);
int parse_execute_(Execute ptr, addr *ret, addr pos);

int parse_compiler_macro_p(Execute ptr, addr *ret, addr cons);
int parse_eval_when_list_(addr list, addr *rcompile, addr *rload, addr *rexec);
int parse_eval_when_process(Execute ptr,
		addr compile, addr load, addr exec, addr toplevel, addr mode);
int parse_ordinary_(Execute ptr, addr *ret, addr args);

#endif


/************************************************************
 *  parse_object.h
 ************************************************************/
#ifndef __PARSE_OBJECT_HEADER__
#define __PARSE_OBJECT_HEADER__


#define structevalparse _n(structevalparse)
#define refevalparse _n(refevalparse)
#define getevalparse _n(getevalparse)
#define setevalparse _n(setevalparse)
#define refevalparsetype _n(refevalparsetype)
#define getevalparsetype _n(getevalparsetype)
#define setevalparsetype _n(setevalparsetype)
#define eval_parse_alloc _n(eval_parse_alloc)
#define eval_parse_local _n(eval_parse_local)
#define eval_parse_heap _n(eval_parse_heap)
#define eval_single_parse_alloc _n(eval_single_parse_alloc)
#define eval_single_parse_local _n(eval_single_parse_local)
#define eval_single_parse_heap _n(eval_single_parse_heap)
#define eval_parse2_alloc _n(eval_parse2_alloc)
#define eval_parse2_local _n(eval_parse2_local)
#define eval_parse2_heap _n(eval_parse2_heap)

struct parse_struct {
	EvalParse type;
};

#define StructEvalParse_Low(x)		((struct parse_struct *)PtrEvalBodyAny(x))
#define RefEvalParse_Low(x,i)		RefEval((x),(i))
#define GetEvalParse_Low(x,i,v)		GetEval((x),(i),(v))
#define SetEvalParse_Low(x,i,v)		SetEval((x),(i),(v))
#define RefEvalParseType_Low(x)		(StructEvalParse_Low(x)->type)
#define GetEvalParseType_Low(x,v)	(*(v) = RefEvalParseType_Low(x))
#define SetEvalParseType_Low(x,v)	(RefEvalParseType_Low(x) = (v))

#ifdef LISP_DEBUG
#define StructEvalParse(x)			structevalparse(x)
#define RefEvalParse(x,i)			refevalparse(x,i)
#define GetEvalParse(x,i,v)			getevalparse(x,i,v)
#define SetEvalParse(x,i,v)			setevalparse(x,i,v)
#define RefEvalParseType(x)			refevalparsetype(x)
#define GetEvalParseType(x,v)		getevalparsetype(x,v)
#define SetEvalParseType(x,v)		setevalparsetype(x,v)
#else
#define StructEvalParse(x)			StructEvalParse_Low(x)
#define RefEvalParse(x,i)			RefEvalParse_Low(x,i)
#define GetEvalParse(x,i,v)			GetEvalParse_Low(x,i,v)
#define SetEvalParse(x,i,v)			SetEvalParse_Low(x,i,v)
#define RefEvalParseType(x)			RefEvalParseType_Low(x)
#define GetEvalParseType(x,v)		GetEvalParseType_Low(x,v)
#define SetEvalParseType(x,v)		SetEvalParseType_Low(x,v)
#endif

struct parse_struct *structevalparse(addr pos);
addr refevalparse(addr pos, size_t index);
void getevalparse(addr pos, size_t index, addr *ret);
void setevalparse(addr pos, size_t index, addr value);
EvalParse refevalparsetype(addr pos);
void getevalparsetype(addr pos, EvalParse *ret);
void setevalparsetype(addr pos, EvalParse value);

void eval_parse_alloc(LocalRoot local, addr *ret, EvalParse type, byte array);
void eval_parse_local(LocalRoot local, addr *ret, EvalParse type, byte array);
void eval_parse_heap(addr *ret, EvalParse type, byte array);

void eval_single_parse_alloc(LocalRoot local, addr *ret, EvalParse type, addr value);
void eval_single_parse_local(LocalRoot local, addr *ret, EvalParse type, addr value);
void eval_single_parse_heap(addr *ret, EvalParse type, addr value);
void eval_parse2_alloc(LocalRoot local, addr *ret, EvalParse type, addr x, addr y);
void eval_parse2_local(LocalRoot local, addr *ret, EvalParse type, addr x, addr y);
void eval_parse2_heap(addr *ret, EvalParse type, addr x, addr y);

#endif


/************************************************************
 *  scope_declare.h
 ************************************************************/
#ifndef __SCOPE_DECLARE_HEADER__
#define __SCOPE_DECLARE_HEADER__


#define specialp_tablevalue_ _n(specialp_tablevalue_)
#define find_tablevalue _n(find_tablevalue)
#define find_tablefunction _n(find_tablefunction)
#define globalp_tablefunction_ _n(globalp_tablefunction_)
#define apply_declare_ _n(apply_declare_)

int specialp_tablevalue_(Execute ptr, addr stack, addr symbol, int *ret);
int find_tablevalue(addr stack, addr symbol, addr *ret);
int find_tablefunction(addr stack, addr call, addr *ret);
int globalp_tablefunction_(Execute ptr, addr stack, addr call, int *ret);
int apply_declare_(Execute ptr, addr stack, addr decl, addr *ret);

#endif


/************************************************************
 *  stream_memory.h
 ************************************************************/
#ifndef __STREAM_MEMORY_HEADER__
#define __STREAM_MEMORY_HEADER__


#define INPUT_MEMORY_UNREAD_SIZE	16

#define open_input_memory_stream_ _n(open_input_memory_stream_)
#define open_output_memory_stream_ _n(open_output_memory_stream_)
#define open_io_memory_stream_ _n(open_io_memory_stream_)
#define memory_stream_heap_ _n(memory_stream_heap_)
#define clear_memory_stream_ _n(clear_memory_stream_)
#define getsize_memory_stream _n(getsize_memory_stream)
#define getarray_memory_stream _n(getarray_memory_stream)
#define getcache_memory_stream _n(getcache_memory_stream)
#define gettype_memory_stream _n(gettype_memory_stream)
#define settype_memory_stream_ _n(settype_memory_stream_)
#define init_stream_memory_input _n(init_stream_memory_input)
#define init_stream_memory_output _n(init_stream_memory_output)
#define init_stream_memory_io _n(init_stream_memory_io)

#define read_byte_memory_stream _n(read_byte_memory_stream)
#define write_byte_memory_stream _n(write_byte_memory_stream)
#define file_length_memory_stream _n(file_length_memory_stream)
#define file_position_memory_stream _n(file_position_memory_stream)
#define file_position_start_memory_stream _n(file_position_start_memory_stream)
#define file_position_end_memory_stream _n(file_position_end_memory_stream)
#define file_position_set_memory_stream _n(file_position_set_memory_stream)

int open_input_memory_stream_(addr *ret, addr input,
		size_t cell, size_t array, int cache);
int open_output_memory_stream_(addr *ret, addr input,
		size_t cell, size_t array, int cache);
int open_io_memory_stream_(addr *ret, addr input,
		size_t cell, size_t array, int cache);
int memory_stream_heap_(addr stream, addr *ret);
int clear_memory_stream_(addr stream);
void getsize_memory_stream(addr stream, size_t *ret);
void getarray_memory_stream(addr stream, size_t *ret);
int getcache_memory_stream(addr stream);
void gettype_memory_stream(addr stream, addr *ret);
int settype_memory_stream_(addr stream, addr value);

void init_stream_memory_input(void);
void init_stream_memory_output(void);
void init_stream_memory_io(void);

/* file-buffering */
int read_byte_memory_stream(addr stream, byte *value, int *ret);
int write_byte_memory_stream(addr stream, byte value);
int file_length_memory_stream(addr stream, size_t *ret);
int file_position_memory_stream(addr stream, size_t *ret);
int file_position_start_memory_stream(addr stream);
int file_position_end_memory_stream(addr stream);
int file_position_set_memory_stream(addr stream, size_t value);

#endif


/************************************************************
 *  load_instance.h
 ************************************************************/
#ifndef __LOAD_INSTANCE_HEADER__
#define __LOAD_INSTANCE_HEADER__


#define intern_load_instance_ _n(intern_load_instance_)

int intern_load_instance_(Execute ptr, addr pos);

#endif


/************************************************************
 *  compile_load.h
 ************************************************************/
#ifndef __COMPILE_LOAD_HEADER__
#define __COMPILE_LOAD_HEADER__


#define eval_compile_load_ _n(eval_compile_load_)

int eval_compile_load_(Execute ptr, addr stream);

#endif


/************************************************************
 *  compile_type.h
 ************************************************************/
#ifndef __COMPILE_TYPE_HEADER__
#define __COMPILE_TYPE_HEADER__


#define faslwrite_value_type_ _n(faslwrite_value_type_)
#define faslread_value_type_ _n(faslread_value_type_)

int faslwrite_value_type_(Execute ptr, addr stream, addr pos);
int faslread_value_type_(Execute ptr, addr stream, addr *ret);

#endif


/************************************************************
 *  compile_value.h
 ************************************************************/
#ifndef __COMPILE_VALUE_HEADER__
#define __COMPILE_VALUE_HEADER__


#define faslwrite_value_nil_ _n(faslwrite_value_nil_)
#define faslwrite_value_t_ _n(faslwrite_value_t_)
#define faslwrite_value_clos_ _n(faslwrite_value_clos_)
#define faslwrite_value_cons_ _n(faslwrite_value_cons_)
#define faslwrite_value_vector_ _n(faslwrite_value_vector_)
#define faslwrite_value_character_ _n(faslwrite_value_character_)
#define faslwrite_value_string_ _n(faslwrite_value_string_)
#define faslwrite_value_symbol_ _n(faslwrite_value_symbol_)
#define faslwrite_value_hashtable_ _n(faslwrite_value_hashtable_)
#define faslwrite_value_fixnum_ _n(faslwrite_value_fixnum_)
#define faslwrite_value_bignum_ _n(faslwrite_value_bignum_)
#define faslwrite_value_ratio_ _n(faslwrite_value_ratio_)
#define faslwrite_value_single_float_ _n(faslwrite_value_single_float_)
#define faslwrite_value_double_float_ _n(faslwrite_value_double_float_)
#define faslwrite_value_long_float_ _n(faslwrite_value_long_float_)
#define faslwrite_value_complex_ _n(faslwrite_value_complex_)
#define faslwrite_value_callname_ _n(faslwrite_value_callname_)
#define faslwrite_value_index_ _n(faslwrite_value_index_)
#define faslwrite_value_package_ _n(faslwrite_value_package_)
#define faslwrite_value_random_state_ _n(faslwrite_value_random_state_)
#define faslwrite_value_pathname_ _n(faslwrite_value_pathname_)
#define faslwrite_value_quote_ _n(faslwrite_value_quote_)
#define faslwrite_value_bitvector_ _n(faslwrite_value_bitvector_)
#define faslwrite_value_load_time_value_ _n(faslwrite_value_load_time_value_)
#define faslwrite_value_paper_ _n(faslwrite_value_paper_)

#define faslread_value_nil_ _n(faslread_value_nil_)
#define faslread_value_t_ _n(faslread_value_t_)
#define faslread_value_clos_ _n(faslread_value_clos_)
#define faslread_value_cons_ _n(faslread_value_cons_)
#define faslread_value_vector2_ _n(faslread_value_vector2_)
#define faslread_value_vector4_ _n(faslread_value_vector4_)
#define faslread_value_vector8_ _n(faslread_value_vector8_)
#define faslread_value_character_ _n(faslread_value_character_)
#define faslread_value_character7_ _n(faslread_value_character7_)
#define faslread_value_string_ _n(faslread_value_string_)
#define faslread_value_string7_ _n(faslread_value_string7_)
#define faslread_value_gensym_ _n(faslread_value_gensym_)
#define faslread_value_symbol_ _n(faslread_value_symbol_)
#define faslread_value_hashtable_ _n(faslread_value_hashtable_)
#define faslread_value_fixnum_ _n(faslread_value_fixnum_)
#define faslread_value_bignum_ _n(faslread_value_bignum_)
#define faslread_value_ratio_ _n(faslread_value_ratio_)
#define faslread_value_single_float_ _n(faslread_value_single_float_)
#define faslread_value_double_float_ _n(faslread_value_double_float_)
#define faslread_value_long_float_ _n(faslread_value_long_float_)
#define faslread_value_complex_ _n(faslread_value_complex_)
#define faslread_value_callname_ _n(faslread_value_callname_)
#define faslread_value_index_ _n(faslread_value_index_)
#define faslread_value_package_ _n(faslread_value_package_)
#define faslread_value_random_state_ _n(faslread_value_random_state_)
#define faslread_value_pathname_ _n(faslread_value_pathname_)
#define faslread_value_quote_ _n(faslread_value_quote_)
#define faslread_value_bitvector_ _n(faslread_value_bitvector_)
#define faslread_value_load_time_value_ _n(faslread_value_load_time_value_)
#define faslread_value_paper_ _n(faslread_value_paper_)

int faslwrite_value_nil_(Execute ptr, addr stream, addr pos);
int faslwrite_value_t_(Execute ptr, addr stream, addr pos);
int faslwrite_value_clos_(Execute ptr, addr stream, addr pos);
int faslwrite_value_cons_(Execute ptr, addr stream, addr pos);
int faslwrite_value_vector_(Execute ptr, addr stream, addr pos);
int faslwrite_value_character_(Execute ptr, addr stream, addr pos);
int faslwrite_value_string_(Execute ptr, addr stream, addr pos);
int faslwrite_value_symbol_(Execute ptr, addr stream, addr pos);
int faslwrite_value_hashtable_(Execute ptr, addr stream, addr pos);
int faslwrite_value_fixnum_(Execute ptr, addr stream, addr pos);
int faslwrite_value_bignum_(Execute ptr, addr stream, addr pos);
int faslwrite_value_ratio_(Execute ptr, addr stream, addr pos);
int faslwrite_value_single_float_(Execute ptr, addr stream, addr pos);
int faslwrite_value_double_float_(Execute ptr, addr stream, addr pos);
int faslwrite_value_long_float_(Execute ptr, addr stream, addr pos);
int faslwrite_value_complex_(Execute ptr, addr stream, addr pos);
int faslwrite_value_callname_(Execute ptr, addr stream, addr pos);
int faslwrite_value_index_(Execute ptr, addr stream, addr pos);
int faslwrite_value_package_(Execute ptr, addr stream, addr pos);
int faslwrite_value_random_state_(Execute ptr, addr stream, addr pos);
int faslwrite_value_pathname_(Execute ptr, addr stream, addr pos);
int faslwrite_value_quote_(Execute ptr, addr stream, addr pos);
int faslwrite_value_bitvector_(Execute ptr, addr stream, addr pos);
int faslwrite_value_load_time_value_(Execute ptr, addr stream, addr pos);
int faslwrite_value_paper_(Execute ptr, addr stream, addr pos);

int faslread_value_nil_(Execute ptr, addr stream, addr *ret);
int faslread_value_t_(Execute ptr, addr stream, addr *ret);
int faslread_value_clos_(Execute ptr, addr stream, addr *ret);
int faslread_value_cons_(Execute ptr, addr stream, addr *ret);
int faslread_value_vector2_(Execute ptr, addr stream, addr *ret);
int faslread_value_vector4_(Execute ptr, addr stream, addr *ret);
#ifdef LISP_ARCH_64BIT
int faslread_value_vector8_(Execute ptr, addr stream, addr *ret);
#endif
int faslread_value_character_(Execute ptr, addr stream, addr *ret);
int faslread_value_character7_(Execute ptr, addr stream, addr *ret);
int faslread_value_string_(Execute ptr, addr stream, addr *ret);
int faslread_value_string7_(Execute ptr, addr stream, addr *ret);
int faslread_value_gensym_(Execute ptr, addr stream, addr *ret);
int faslread_value_symbol_(Execute ptr, addr stream, addr *ret);
int faslread_value_hashtable_(Execute ptr, addr stream, addr *ret);
int faslread_value_fixnum_(Execute ptr, addr stream, addr *ret);
int faslread_value_bignum_(Execute ptr, addr stream, addr *ret);
int faslread_value_ratio_(Execute ptr, addr stream, addr *ret);
int faslread_value_single_float_(Execute ptr, addr stream, addr *ret);
int faslread_value_double_float_(Execute ptr, addr stream, addr *ret);
int faslread_value_long_float_(Execute ptr, addr stream, addr *ret);
int faslread_value_complex_(Execute ptr, addr stream, addr *ret);
int faslread_value_callname_(Execute ptr, addr stream, addr *ret);
int faslread_value_index_(Execute ptr, addr stream, addr *ret);
int faslread_value_package_(Execute ptr, addr stream, addr *ret);
int faslread_value_random_state_(Execute ptr, addr stream, addr *ret);
int faslread_value_pathname_(Execute ptr, addr stream, addr *ret);
int faslread_value_quote_(Execute ptr, addr stream, addr *ret);
int faslread_value_bitvector_(Execute ptr, addr stream, addr *ret);
int faslread_value_load_time_value_(Execute ptr, addr stream, addr *ret);
int faslread_value_paper_(Execute ptr, addr stream, addr *ret);

#endif


/************************************************************
 *  paper.h
 ************************************************************/
#ifndef __PAPER_HEADER__
#define __PAPER_HEADER__


#define paper_array_alloc _n(paper_array_alloc)
#define paper_array_local _n(paper_array_local)
#define paper_array_heap _n(paper_array_heap)
#define paper_body_alloc _n(paper_body_alloc)
#define paper_body_local _n(paper_body_local)
#define paper_body_heap _n(paper_body_heap)
#define paper_arraybody_alloc_ _n(paper_arraybody_alloc_)
#define paper_arraybody_local_ _n(paper_arraybody_local_)
#define paper_arraybody_heap_ _n(paper_arraybody_heap_)
#define paperp _n(paperp)
#define paper_array_p _n(paper_array_p)
#define paper_body_p _n(paper_body_p)
#define paper_copy_body_alloc _n(paper_copy_body_alloc)
#define paper_get_type _n(paper_get_type)
#define paper_set_type _n(paper_set_type)
#define paper_len_array _n(paper_len_array)
#define paper_len_body _n(paper_len_body)
#define paper_get_array _n(paper_get_array)
#define paper_set_array _n(paper_set_array)
#define paper_get_body _n(paper_get_body)
#define paper_set_body _n(paper_set_body)
#define paper_ptr_body_unsafe _n(paper_ptr_body_unsafe)
#define paper_get_memory _n(paper_get_memory)
#define paper_set_memory _n(paper_set_memory)
#define paper_length_body_ _n(paper_length_body_)
#define paper_length_array_ _n(paper_length_array_)
#define paper_list_body_ _n(paper_list_body_)
#define paper_list_array_ _n(paper_list_array_)
#define paper_vector_body_ _n(paper_vector_body_)
#define paper_vector_array_ _n(paper_vector_array_)
#define paper_get_type_ _n(paper_get_type_)
#define paper_set_type_ _n(paper_set_type_)
#define paper_get_array_ _n(paper_get_array_)
#define paper_set_array_ _n(paper_set_array_)
#define paper_get_body_ _n(paper_get_body_)
#define paper_set_body_ _n(paper_set_body_)

void paper_array_alloc(LocalRoot local, addr *ret, size_t array);
void paper_array_local(LocalRoot local, addr *ret, size_t array);
void paper_array_heap(addr *ret, size_t array);
void paper_body_alloc(LocalRoot local, addr *ret, size_t body);
void paper_body_local(LocalRoot local, addr *ret, size_t body);
void paper_body_heap(addr *ret, size_t body);
int paper_arraybody_alloc_(LocalRoot local, addr *ret, size_t array, size_t body);
int paper_arraybody_local_(LocalRoot local, addr *ret, size_t array, size_t body);
int paper_arraybody_heap_(addr *ret, size_t array, size_t body);
int paperp(addr pos);
int paper_array_p(addr pos);
int paper_body_p(addr pos);
void paper_copy_body_alloc(LocalRoot local, addr *ret, addr pos);
void paper_get_type(addr pos, byte *ret);
void paper_set_type(addr pos, byte value);
void paper_len_array(addr pos, size_t *ret);
void paper_len_body(addr pos, size_t *ret);
void paper_get_array(addr pos, size_t index, addr *ret);
void paper_set_array(addr pos, size_t index, addr value);
void paper_get_body(addr pos, size_t index, byte *ret);
void paper_set_body(addr pos, size_t index, byte value);
void paper_ptr_body_unsafe(addr pos, void **ret);
void paper_get_memory(addr pos, size_t a, size_t b, void *ptr, size_t *ret);
void paper_set_memory(addr pos, size_t a, size_t b, const void *ptr, size_t *ret);

/* syscall */
int paper_length_body_(addr pos, addr *ret);
int paper_length_array_(addr pos, addr *ret);
int paper_list_body_(addr pos, addr *ret);
int paper_list_array_(addr pos, addr *ret);
int paper_vector_body_(addr pos, addr *ret);
int paper_vector_array_(addr pos, addr *ret);
int paper_get_type_(addr pos, addr *ret);
int paper_set_type_(addr pos, addr second);
int paper_get_array_(addr pos, addr index, addr *ret);
int paper_set_array_(addr pos, addr index, addr value);
int paper_get_body_(addr pos, addr index, addr *ret);
int paper_set_body_(addr pos, addr index, addr value);

#endif


/************************************************************
 *  quote.h
 ************************************************************/
#ifndef __QUOTE_HEADER__
#define __QUOTE_HEADER__


#define quote2_heap _n(quote2_heap)
#define quote_back_heap_ _n(quote_back_heap_)
#define quote_comma_heap _n(quote_comma_heap)
#define quote_atsign_heap _n(quote_atsign_heap)
#define quote_dot_heap _n(quote_dot_heap)
#define getvalue_quote _n(getvalue_quote)
#define getprint_quote _n(getprint_quote)
#define quotep _n(quotep)
#define quote_back_p _n(quote_back_p)
#define quote_comma_p _n(quote_comma_p)
#define quote_atsign_p _n(quote_atsign_p)
#define quote_dot_p _n(quote_dot_p)
#define quote_quote_p _n(quote_quote_p)
#define quote_append_p _n(quote_append_p)
#define quote_nconc_p _n(quote_nconc_p)
#define quote_list_p _n(quote_list_p)
#define quote_lista_p _n(quote_lista_p)
#define quote_clobberable_p _n(quote_clobberable_p)

enum QuoteType {
	QuoteType_Back,
	QuoteType_Comma,
	QuoteType_AtSign,
	QuoteType_Dot,
	QuoteExecute_Quote,
	QuoteExecute_Append,
	QuoteExecute_Nconc,
	QuoteExecute_List,
	QuoteExecute_Lista,
	QuoteExecute_Clobberable,
	QuoteType_Size
};

enum QuoteIndex {
	QuoteIndex_Value,
	QuoteIndex_Print,
	QuoteIndex_Size
};

#define RefQuote			RefArrayA2
#define GetQuote			GetArrayA2
#define SetQuote			SetArrayA2
#define RefQuoteType(x)		((enum QuoteType)GetUser(x))
#define GetQuoteType(x,v)	(*(v) = (enum QuoteType)GetUser(x))
#define SetQuoteType(x,v)	SetUser((x), (byte)(v))

void quote2_heap(addr *ret, enum QuoteType type, addr value, addr print);
int quote_back_heap_(addr *ret, addr form);
void quote_comma_heap(addr *ret, addr form);
void quote_atsign_heap(addr *ret, addr form);
void quote_dot_heap(addr *ret, addr form);
void getvalue_quote(addr pos, addr *ret);
void getprint_quote(addr pos, addr *ret);

int quotep(addr pos);
int quote_back_p(addr pos);
int quote_comma_p(addr pos);
int quote_atsign_p(addr pos);
int quote_dot_p(addr pos);
int quote_quote_p(addr pos);
int quote_append_p(addr pos);
int quote_nconc_p(addr pos);
int quote_list_p(addr pos);
int quote_lista_p(addr pos);
int quote_clobberable_p(addr pos);

#endif


/************************************************************
 *  eval_main.h
 ************************************************************/
#ifndef __EVAL_MAIN_HEADER__
#define __EVAL_MAIN_HEADER__


#define eval_loop_output_ _n(eval_loop_output_)
#define eval_custom_loop_ _n(eval_custom_loop_)
#define eval_main_loop_ _n(eval_main_loop_)
#define eval_main_loop_toplevel_ _n(eval_main_loop_toplevel_)
#define eval_main_string_ _n(eval_main_string_)
#define eval_main_load_ _n(eval_main_load_)

typedef int (*eval_loop_calltype)(Execute, addr, addr, int *exit, int *exec);

int eval_loop_output_(Execute ptr, addr stream);
int eval_custom_loop_(Execute ptr, addr stream, eval_loop_calltype call, int *ret);
int eval_main_loop_(Execute ptr);
int eval_main_loop_toplevel_(Execute ptr);
int eval_main_string_(Execute ptr, addr eval);
int eval_main_load_(Execute ptr, addr file, int exists, int *ret);

#endif


/************************************************************
 *  control_callbind.h
 ************************************************************/
#ifndef __CONTROL_CALLBIND_HEADER__
#define __CONTROL_CALLBIND_HEADER__


#define call_compiled_function_ _n(call_compiled_function_)
#define call_callbind_function_ _n(call_callbind_function_)
#define init_callbind_control _n(init_callbind_control)

int call_compiled_function_(Execute ptr, addr compiled);
int call_callbind_function_(Execute ptr, addr name, struct callbind_struct *str);
void init_callbind_control(void);

#endif


/************************************************************
 *  main_typedef.h
 ************************************************************/
#ifndef __LISP_MAIN_TYPEDEF_HEADER__
#define __LISP_MAIN_TYPEDEF_HEADER__


struct lispstringu_struct {
	unicode *ptr;
	size_t size;
};
typedef struct lispstringu_struct *lispstringu;

struct lisparrayu_struct {
	lispstringu *ptr;
	size_t size;
};
typedef struct lisparrayu_struct *lisparrayu;

struct lispkeyvalueu {
	lispstringu key, value;
};

struct lisptableu_struct {
	struct lispkeyvalueu *table;
	size_t size;
};
typedef struct lisptableu_struct *lisptableu;

#endif


/************************************************************
 *  main_argv.h
 ************************************************************/
#ifndef __LISP_MAIN_ARGV_HEADER__
#define __LISP_MAIN_ARGV_HEADER__


enum lispargv_execute {
	lispargv_load,
	lispargv_eval,
	lispargv_script,
	lispargv_minusminus
};

struct lispargv_string {
	enum lispargv_execute type;
	lispstringu value;
};

struct lispargv_input {
	struct lispargv_string *data;
	size_t size;
};

struct lispargv {
	/* mode */
	unsigned mode_help : 1;
	unsigned mode_version : 1;
	unsigned mode_core : 1;
	unsigned mode_standalone : 1;
	unsigned mode_degrade : 1;
	/* args */
	unsigned version_script : 1;
	unsigned nocore : 1;
	unsigned noinit : 1;
	unsigned debugger : 1;
	unsigned debuggerp : 1;
	unsigned quit : 1;
	unsigned reload : 1;
	unsigned terme_bright : 1;
	unsigned terme_dark : 1;
	unsigned terme_color : 1;
	unsigned terme_monochrome : 1;
	size_t heap, local, index, start;
	lispstringu core;
	lispstringu init;
	lisparrayu argv;
	lisptableu env;
	lispstringu reload_core;
	struct lispargv_input *input;
	int (*call)(void *);
	void *call_ptr;
};

void lispargv_free(struct lispargv *ptr);
struct lispargv *lispargv_main(int argc, char *argv[], char *env[]);
struct lispargv *lispargv_main_force(int argc, char *argv[], char *env[]);
#ifdef LISP_WINMAIN_WIDE
struct lispargv *lispargv_windows(void);
#endif

#endif


/************************************************************
 *  core.h
 ************************************************************/
#ifndef __CORE_HEADER__
#define __CORE_HEADER__


#define savecore_execute_ _n(savecore_execute_)
#define save_core _n(save_core)
#define load_core _n(load_core)
#define save_and_load_core_ _n(save_and_load_core_)

int savecore_execute_(Execute ptr, addr output, addr input, int exitp);
int save_core(Execute ptr);
int load_core(const unicode *name, size_t size);
int save_and_load_core_(Execute ptr, struct lispargv *argv, int *ret);

#endif


/************************************************************
 *  main_string.h
 ************************************************************/
#ifndef __LISP_MAIN_STRING_HEADER__
#define __LISP_MAIN_STRING_HEADER__


#define getsize_stringu _n(getsize_stringu)
#define make_stringu _n(make_stringu)
#define char_stringu _n(char_stringu)
#define wchar_stringu _n(wchar_stringu)
#define copy_stringu _n(copy_stringu)
#define concatchar_stringu _n(concatchar_stringu)
#define output_stringu _n(output_stringu)
#define free_stringu _n(free_stringu)
#define equal_stringu _n(equal_stringu)
#define equalchar_stringu _n(equalchar_stringu)
#define arrayu_argv_utf8 _n(arrayu_argv_utf8)
#define arrayu_argv_utf16 _n(arrayu_argv_utf16)
#define free_arrayu _n(free_arrayu)
#define free_tableu _n(free_tableu)
#define tableu_env_main _n(tableu_env_main)
#define tableu_env_windows _n(tableu_env_windows)
#define findchar_tableu _n(findchar_tableu)

/* lispstringu */
int getsize_stringu(lispstringu str, size_t *ret);
lispstringu make_stringu(size_t size);
lispstringu char_stringu(const char *str);
lispstringu wchar_stringu(const byte16 *str);
lispstringu copy_stringu(lispstringu ptr);
lispstringu concatchar_stringu(lispstringu a, const char *b);
void output_stringu(lispstringu ptr, FILE *file);
void free_stringu(lispstringu ptr);
int equal_stringu(lispstringu a, lispstringu b);
int equalchar_stringu(lispstringu a, const char *b);
/* lisparrayu */
lisparrayu arrayu_argv_utf8(int argc, const byte *const *argv);
lisparrayu arrayu_argv_utf16(int argc, const byte16 *const *argv);
void free_arrayu(lisparrayu ptr);
/* lisptableu */
void free_tableu(lisptableu ptr);
lisptableu tableu_env_main(const byte *const *env);
lisptableu tableu_env_windows(const byte16 *env);
lispstringu findchar_tableu(lisptableu env, const char *key);

#endif


/************************************************************
 *  core_store.h
 ************************************************************/
#ifndef __CORE_STORE_HEADER__
#define __CORE_STORE_HEADER__


#define load_store_init _n(load_store_init)
#define load_store_push _n(load_store_push)
#define load_store_error _n(load_store_error)
#define load_store_exec _n(load_store_exec)

int load_store_init(void);
int load_store_push(addr pos);
void load_store_error(void);
void load_store_exec(void);

#endif


/************************************************************
 *  type_symbol.h
 ************************************************************/
#ifndef __TYPE_SYMBOL_HEADER__
#define __TYPE_SYMBOL_HEADER__


#define build_type_symbol _n(build_type_symbol)
#define init_type_symbol _n(init_type_symbol)
#define find_symbol_type _n(find_symbol_type)
#define getdeclname _n(getdeclname)
#define type_symbol_p _n(type_symbol_p)

void build_type_symbol(void);
void init_type_symbol(void);
int find_symbol_type(Execute ptr, addr *ret, addr symbol, addr env);
constindex getdeclname(enum LISPDECL type);
int type_symbol_p(addr symbol);

#endif


/************************************************************
 *  degrade.h
 ************************************************************/
#ifndef __DEGRADE_HEADER__
#define __DEGRADE_HEADER__


#ifdef LISP_DEGRADE

#define degrade_execute _n(degrade_execute)
#define DegradeCount _n(DegradeCount)
#define DegradeError _n(DegradeError)
#define degrade_code _n(degrade_code)
#define degrade_printf _n(degrade_printf)
#define degrade_test _n(degrade_test)
#define degrade_title _n(degrade_title)
#define degrade_testcheck _n(degrade_testcheck)
#define degrade_increment _n(degrade_increment)
#define degrade_output_null _n(degrade_output_null)

extern int DegradeCount;
extern int DegradeError;
int degrade_code(void (*init)(Execute), int (*call)(void));
int degrade_printf(const char *fmt, ...);
int degrade_test(int check, const char *name);
void degrade_title(const char *name);
int degrade_testcheck(int check);
void degrade_increment(void);
void degrade_output_null(Execute ptr);

#define DegradeTitle		degrade_title(__FILE__)
#define DegradeCode(x)		degrade_code(testinit_##x, testcase_##x)
#define DegradeCheck(x)		{ if (x()) { degrade_increment(); return; } }
#define TestCheck(x)		{ if (degrade_testcheck((x) != 0)) return 1; }
#define TestBreak(x)		TestCheck(x())
#define RETURN				{ return 0; error: return 1; }

#define test(x, y) { \
	if (degrade_test((x) != 0, (y))) { \
		goto error; \
	} \
}

#endif
#endif


/************************************************************
 *  document_call.h
 ************************************************************/
#ifndef __DOCUMENT_CALL_HEADER__
#define __DOCUMENT_CALL_HEADER__


#define document_function_get_ _n(document_function_get_)
#define document_function_set_ _n(document_function_set_)
#define document_function_setf_get_ _n(document_function_setf_get_)
#define document_function_setf_set_ _n(document_function_setf_set_)
#define document_function_symbol_get_ _n(document_function_symbol_get_)
#define document_function_symbol_set_ _n(document_function_symbol_set_)
#define document_compiler_macro_symbol_get_ _n(document_compiler_macro_symbol_get_)
#define document_compiler_macro_symbol_set_ _n(document_compiler_macro_symbol_set_)
#define document_compiler_macro_setf_get_ _n(document_compiler_macro_setf_get_)
#define document_compiler_macro_setf_set_ _n(document_compiler_macro_setf_set_)
#define document_defsetf_symbol_get_ _n(document_defsetf_symbol_get_)
#define document_defsetf_symbol_set_ _n(document_defsetf_symbol_set_)
#define document_method_combination_get_ _n(document_method_combination_get_)
#define document_method_combination_set_ _n(document_method_combination_set_)
#define document_method_combination_symbol_get_ _n(document_method_combination_symbol_get_)
#define document_method_combination_symbol_set_ _n(document_method_combination_symbol_set_)
#define document_standard_method_get_ _n(document_standard_method_get_)
#define document_standard_method_set_ _n(document_standard_method_set_)
#define document_package_get_ _n(document_package_get_)
#define document_package_set_ _n(document_package_set_)
#define document_standard_class_get_ _n(document_standard_class_get_)
#define document_standard_class_set_ _n(document_standard_class_set_)
#define document_structure_class_get_ _n(document_structure_class_get_)
#define document_structure_class_set_ _n(document_structure_class_set_)
#define document_type_symbol_get_ _n(document_type_symbol_get_)
#define document_type_symbol_set_ _n(document_type_symbol_set_)
#define document_structure_symbol_get_ _n(document_structure_symbol_get_)
#define document_structure_symbol_set_ _n(document_structure_symbol_set_)
#define document_variable_symbol_get_ _n(document_variable_symbol_get_)
#define document_variable_symbol_set_ _n(document_variable_symbol_set_)

int document_function_get_(addr pos, addr *ret);
int document_function_set_(addr pos, addr value);
int document_function_setf_get_(addr pos, addr *ret);
int document_function_setf_set_(addr pos, addr value);
int document_function_symbol_get_(addr pos, addr *ret);
int document_function_symbol_set_(addr pos, addr value);
int document_compiler_macro_symbol_get_(addr pos, addr *ret);
int document_compiler_macro_symbol_set_(addr pos, addr value);
int document_compiler_macro_setf_get_(addr pos, addr *ret);
int document_compiler_macro_setf_set_(addr pos, addr value);
int document_defsetf_symbol_get_(addr pos, addr *ret);
int document_defsetf_symbol_set_(addr pos, addr value);
int document_method_combination_get_(addr pos, addr *ret);
int document_method_combination_set_(addr pos, addr value);
int document_method_combination_symbol_get_(addr pos, addr *ret);
int document_method_combination_symbol_set_(addr pos, addr value);
int document_standard_method_get_(addr pos, addr *ret);
int document_standard_method_set_(addr pos, addr value);
int document_package_get_(addr pos, addr *ret);
int document_package_set_(addr pos, addr value);
int document_standard_class_get_(addr pos, addr *ret);
int document_standard_class_set_(addr pos, addr value);
int document_structure_class_get_(addr pos, addr *ret);
int document_structure_class_set_(addr pos, addr value);
int document_type_symbol_get_(Execute ptr, addr pos, addr doc_type, addr *ret);
int document_type_symbol_set_(Execute ptr, addr pos, addr doc_type, addr value);
int document_structure_symbol_get_(addr pos, addr *ret);
int document_structure_symbol_set_(addr pos, addr value);
int document_variable_symbol_get_(addr pos, addr *ret);
int document_variable_symbol_set_(addr pos, addr value);

#endif


/************************************************************
 *  document_search.h
 ************************************************************/
#ifndef __DOCUMENT_SEARCH_HEADER__
#define __DOCUMENT_SEARCH_HEADER__


#define document_function_ _n(document_function_)
#define document_variable_ _n(document_variable_)
#define document_type_ _n(document_type_)

int document_function_(addr pos, addr *ret);
int document_variable_(addr pos, addr *ret);
int document_type_(addr pos, addr *ret);

#endif


/************************************************************
 *  structure_access.h
 ************************************************************/
#ifndef __STRUCTURE_ACCESS_HEADER__
#define __STRUCTURE_ACCESS_HEADER__


#define stdget_structure_name_ _n(stdget_structure_name_)
#define stdset_structure_name_ _n(stdset_structure_name_)
#define stdget_structure_direct_slots_ _n(stdget_structure_direct_slots_)
#define stdset_structure_direct_slots_ _n(stdset_structure_direct_slots_)
#define stdget_structure_slots_ _n(stdget_structure_slots_)
#define stdset_structure_slots_ _n(stdset_structure_slots_)
#define stdget_structure_documentation_ _n(stdget_structure_documentation_)
#define stdset_structure_documentation_ _n(stdset_structure_documentation_)
#define stdget_structure_include_ _n(stdget_structure_include_)
#define stdset_structure_include_ _n(stdset_structure_include_)
#define stdget_structure_precedence_list_ _n(stdget_structure_precedence_list_)
#define stdset_structure_precedence_list_ _n(stdset_structure_precedence_list_)
#define stdget_structure_value_ _n(stdget_structure_value_)
#define stdset_structure_value_ _n(stdset_structure_value_)
#define stdget_structure_predicate_ _n(stdget_structure_predicate_)
#define stdset_structure_predicate_ _n(stdset_structure_predicate_)
#define stdget_structure_access_ _n(stdget_structure_access_)
#define stdset_structure_access_ _n(stdset_structure_access_)
#define stdget_structure_copier_ _n(stdget_structure_copier_)
#define stdset_structure_copier_ _n(stdset_structure_copier_)
#define stdget_structure_constructor_ _n(stdget_structure_constructor_)
#define stdset_structure_constructor_ _n(stdset_structure_constructor_)

int stdget_structure_name_(addr pos, addr *ret);
int stdset_structure_name_(addr pos, addr value);
int stdget_structure_direct_slots_(addr pos, addr *ret);
int stdset_structure_direct_slots_(addr pos, addr value);
int stdget_structure_slots_(addr pos, addr *ret);
int stdset_structure_slots_(addr pos, addr value);
int stdget_structure_documentation_(addr pos, addr *ret);
int stdset_structure_documentation_(addr pos, addr value);
int stdget_structure_include_(addr pos, addr *ret);
int stdset_structure_include_(addr pos, addr value);
int stdget_structure_precedence_list_(addr pos, addr *ret);
int stdset_structure_precedence_list_(addr pos, addr value);
int stdget_structure_value_(addr pos, addr *ret);
int stdset_structure_value_(addr pos, addr value);
int stdget_structure_predicate_(addr pos, addr *ret);
int stdset_structure_predicate_(addr pos, addr value);
int stdget_structure_access_(addr pos, addr *ret);
int stdset_structure_access_(addr pos, addr value);
int stdget_structure_copier_(addr pos, addr *ret);
int stdset_structure_copier_(addr pos, addr value);
int stdget_structure_constructor_(addr pos, addr *ret);
int stdset_structure_constructor_(addr pos, addr value);

#endif


/************************************************************
 *  document_contents.h
 ************************************************************/
#ifndef __DOCUMENT_CONTENTS_HEADER__
#define __DOCUMENT_CONTENTS_HEADER__


struct DocumentStruct {
	const char *key, *value;
};

struct DocumentPackage {
	const char *package;
	struct DocumentStruct *list;
	size_t size;
};

#define Document_FUNCTION _n(Document_FUNCTION)
#define Document_VARIABLE _n(Document_VARIABLE)
#define Document_TYPE _n(Document_TYPE)

extern struct DocumentPackage Document_FUNCTION[];
extern struct DocumentPackage Document_VARIABLE[];
extern struct DocumentPackage Document_TYPE[];

#endif


/************************************************************
 *  unicode.h
 ************************************************************/
#ifndef __UNICODE_HEADER__
#define __UNICODE_HEADER__


#define string8_size_alloc_ _n(string8_size_alloc_)
#define string8_size_local_ _n(string8_size_local_)
#define string8_size_heap_ _n(string8_size_heap_)
#define string8_null_alloc_ _n(string8_null_alloc_)
#define string8_null_local_ _n(string8_null_local_)
#define string8_null_heap_ _n(string8_null_heap_)
#define string8_null_char1_heap_ _n(string8_null_char1_heap_)
#define string16_size_alloc_ _n(string16_size_alloc_)
#define string16_size_local_ _n(string16_size_local_)
#define string16_size_heap_ _n(string16_size_heap_)
#define string16_null_alloc_ _n(string16_null_alloc_)
#define string16_null_local_ _n(string16_null_local_)
#define string16_null_heap_ _n(string16_null_heap_)
#define string32_size_alloc_ _n(string32_size_alloc_)
#define string32_size_local_ _n(string32_size_local_)
#define string32_size_heap_ _n(string32_size_heap_)
#define string32_null_alloc_ _n(string32_null_alloc_)
#define string32_null_local_ _n(string32_null_local_)
#define string32_null_heap_ _n(string32_null_heap_)

int string8_size_alloc_(LocalRoot local, addr *ret, const char *name, size_t len);
int string8_size_local_(LocalRoot local, addr *ret, const char *name, size_t len);
int string8_size_heap_(addr *ret, const char *name, size_t len);
int string8_null_alloc_(LocalRoot local, addr *ret, const char *name);
int string8_null_local_(LocalRoot local, addr *ret, const char *name);
int string8_null_heap_(addr *ret, const char *name);
int string8_null_char1_heap_(addr *ret, const char *name, unicode c);

int string16_size_alloc_(LocalRoot local, addr *ret, const byte16 *name, size_t len);
int string16_size_local_(LocalRoot local, addr *ret, const byte16 *name, size_t len);
int string16_size_heap_(addr *ret, const byte16 *name, size_t len);
int string16_null_alloc_(LocalRoot local, addr *ret, const byte16 *name);
int string16_null_local_(LocalRoot local, addr *ret, const byte16 *name);
int string16_null_heap_(addr *ret, const byte16 *name);

int string32_size_alloc_(LocalRoot local, addr *ret, const unicode *name, size_t len);
int string32_size_local_(LocalRoot local, addr *ret, const unicode *name, size_t len);
int string32_size_heap_(addr *ret, const unicode *name, size_t len);
int string32_null_alloc_(LocalRoot local, addr *ret, const unicode *name);
int string32_null_local_(LocalRoot local, addr *ret, const unicode *name);
int string32_null_heap_(addr *ret, const unicode *name);

#endif


/************************************************************
 *  eastasian.h
 ************************************************************/
#ifndef __EASTASIAN_HEADER__
#define __EASTASIAN_HEADER__


#define eastasian_length_ _n(eastasian_length_)
#define eastasian_set_syscall_ _n(eastasian_set_syscall_)
#define eastasian_get_syscall_ _n(eastasian_get_syscall_)
#define eastasian_width_syscall_ _n(eastasian_width_syscall_)

int eastasian_length_(addr pos, size_t *ret, int *rerrp);
int eastasian_set_syscall_(addr pos, addr value, addr errorp, addr *ret);
int eastasian_get_syscall_(addr pos, addr *retsize, addr *retsymbol);
int eastasian_width_syscall_(addr pos, addr *ret, addr *retbool);

#endif


/************************************************************
 *  encode_unicode.h
 ************************************************************/
#ifndef __ENCODE_UNICODE_HEADER__
#define __ENCODE_UNICODE_HEADER__


#define read_utf8_normal _n(read_utf8_normal)
#define read_utf8_nonblock _n(read_utf8_nonblock)
#define read_utf8_buffer _n(read_utf8_buffer)
#define read_utf16_normal _n(read_utf16_normal)
#define read_utf16_nonblock _n(read_utf16_nonblock)
#define read_utf32_normal _n(read_utf32_normal)
#define read_utf32_nonblock _n(read_utf32_nonblock)
#define encode_utf8 _n(encode_utf8)
#define encode_utf16a _n(encode_utf16a)
#define encode_utf16b _n(encode_utf16b)
#define encode_utf16 _n(encode_utf16)
#define encode_utf32check _n(encode_utf32check)
#define encode_utf32 _n(encode_utf32)

int read_utf8_normal(filestream fm, unicode *ret);
int read_utf8_nonblock(filestream fm, unicode *ret, int *hang);
int read_utf8_buffer(unicode *dst, const byte *src, size_t size, size_t *ret);

int read_utf16_normal(filestream fm, unicode *ret, int be);
int read_utf16_nonblock(filestream fm, unicode *ret, int *hang, int be);

int read_utf32_normal(filestream fm, unicode *ret, int be);
int read_utf32_nonblock(filestream fm, unicode *ret, int *hang, int be);

int encode_utf8(unicode u, byte *dst, size_t *ret);
int encode_utf16a(unicode u, byte16 *surrogate, byte16 *code);
int encode_utf16b(unicode u, byte16 *dst, size_t *ret);
int encode_utf16(unicode u, int big_endian_p, byte *dst, size_t *ret);
int encode_utf32check(unicode u);
int encode_utf32(unicode u, int big_endian_p, byte *dst, size_t *ret);

#endif


/************************************************************
 *  ratio_multi.h
 ************************************************************/
#ifndef __RATIO_MULTI_HEADER__
#define __RATIO_MULTI_HEADER__


#define multi_rf_ratio_local _n(multi_rf_ratio_local)
#define multi_rf_real_local _n(multi_rf_real_local)
#define multi_rf_real_common _n(multi_rf_real_common)
#define multi_rb_ratio_local _n(multi_rb_ratio_local)
#define multi_rb_real_local _n(multi_rb_real_local)
#define multi_rb_real_common _n(multi_rb_real_common)
#define multi_rr_ratio_local _n(multi_rr_ratio_local)
#define multi_rr_real_local _n(multi_rr_real_local)
#define multi_rr_real_common _n(multi_rr_real_common)
#define div_rf_ratio_local_ _n(div_rf_ratio_local_)
#define div_rf_real_local_ _n(div_rf_real_local_)
#define div_rf_real_common_ _n(div_rf_real_common_)
#define div_fr_ratio_local_ _n(div_fr_ratio_local_)
#define div_fr_real_local_ _n(div_fr_real_local_)
#define div_fr_real_common_ _n(div_fr_real_common_)
#define div_rb_ratio_local_ _n(div_rb_ratio_local_)
#define div_rb_real_local_ _n(div_rb_real_local_)
#define div_rb_real_common_ _n(div_rb_real_common_)
#define div_br_ratio_local_ _n(div_br_ratio_local_)
#define div_br_real_local_ _n(div_br_real_local_)
#define div_br_real_common_ _n(div_br_real_common_)
#define div_rr_ratio_local_ _n(div_rr_ratio_local_)
#define div_rr_real_local_ _n(div_rr_real_local_)
#define div_rr_real_common_ _n(div_rr_real_common_)
#define div_ff_real_local_ _n(div_ff_real_local_)
#define div_ff_real_common_ _n(div_ff_real_common_)
#define div_fb_real_local_ _n(div_fb_real_local_)
#define div_fb_real_common_ _n(div_fb_real_common_)
#define div_bf_real_local_ _n(div_bf_real_local_)
#define div_bf_real_common_ _n(div_bf_real_common_)
#define div_bb_real_local_ _n(div_bb_real_local_)
#define div_bb_real_common_ _n(div_bb_real_common_)
#define inverse_fixnum_ratio_local_ _n(inverse_fixnum_ratio_local_)
#define inverse_bignum_ratio_local_ _n(inverse_bignum_ratio_local_)
#define inverse_ratio_local_ _n(inverse_ratio_local_)
#define inverse_fixnum_common_ _n(inverse_fixnum_common_)
#define inverse_bignum_common_ _n(inverse_bignum_common_)
#define inverse_ratio_common_ _n(inverse_ratio_common_)

void multi_rf_ratio_local(LocalRoot local, addr left, addr right, addr *ret);
void multi_rf_real_local(LocalRoot local, addr left, addr right, addr *ret);
void multi_rf_real_common(LocalRoot local, addr left, addr right, addr *ret);
#define multi_fr_ratio_local(m,a,b,r) multi_rf_ratio_local((m),(b),(a),(r))
#define multi_fr_real_local(m,a,b,r) multi_rf_real_local((m),(b),(a),(r))
#define multi_fr_real_common(m,a,b,r) multi_rf_real_common((m),(b),(a),(r))
void multi_rb_ratio_local(LocalRoot local, addr left, addr right, addr *ret);
void multi_rb_real_local(LocalRoot local, addr left, addr right, addr *ret);
void multi_rb_real_common(LocalRoot local, addr left, addr right, addr *ret);
#define multi_br_ratio_local(m,a,b,r) multi_rb_ratio_local((m),(b),(a),(r))
#define multi_br_real_local(m,a,b,r) multi_rb_real_local((m),(b),(a),(r))
#define multi_br_real_common(m,a,b,r) multi_rb_real_common((m),(b),(a),(r))
void multi_rr_ratio_local(LocalRoot local, addr left, addr right, addr *ret);
void multi_rr_real_local(LocalRoot local, addr left, addr right, addr *ret);
void multi_rr_real_common(LocalRoot local, addr left, addr right, addr *ret);

int div_rf_ratio_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_rf_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_rf_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_fr_ratio_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_fr_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_fr_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_rb_ratio_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_rb_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_rb_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_br_ratio_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_br_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_br_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_rr_ratio_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_rr_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_rr_real_common_(LocalRoot local, addr left, addr right, addr *ret);

int div_ff_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_ff_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_fb_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_fb_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_bf_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_bf_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_bb_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_bb_real_common_(LocalRoot local, addr left, addr right, addr *ret);

int inverse_fixnum_ratio_local_(LocalRoot local, addr pos, addr *ret);
int inverse_bignum_ratio_local_(LocalRoot local, addr pos, addr *ret);
int inverse_ratio_local_(LocalRoot local, addr pos, addr *ret);
int inverse_fixnum_common_(addr left, addr *ret);
int inverse_bignum_common_(addr left, addr *ret);
int inverse_ratio_common_(LocalRoot local, addr left, addr *ret);

#endif


/************************************************************
 *  eval_copy.h
 ************************************************************/
#ifndef __EVAL_COPY_HEADER__
#define __EVAL_COPY_HEADER__


#define copy_eval_parse_alloc _n(copy_eval_parse_alloc)
#define copy_eval_parse_local _n(copy_eval_parse_local)
#define copy_eval_parse_heap _n(copy_eval_parse_heap)
#define copy_eval_parse _n(copy_eval_parse)
#define init_eval_copy _n(init_eval_copy)

void copy_eval_parse_alloc(LocalRoot local, addr *ret, addr eval);
void copy_eval_parse_local(LocalRoot local, addr *ret, addr eval);
void copy_eval_parse_heap(addr *ret, addr eval);
void copy_eval_parse(LocalRoot local, addr *ret, addr pos);
void init_eval_copy(void);

#endif


/************************************************************
 *  extern_control.h
 ************************************************************/
#ifndef __LISP_EXTERN_CONTROL_HEADER__
#define __LISP_EXTERN_CONTROL_HEADER__


/* control */
void lisp_push_control(addr *ret);
int lisp_pop_control_(addr control);

/* special */
int lisp_push_special_(addr symbol, addr value);
int lisp_push_special8_(const void *name, addr value);
int lisp_push_special16_(const void *name, addr value);
int lisp_push_special32_(const void *name, addr value);
int lisp0_get_special_(addr *ret, addr symbol);
int lisp0_get_special8_(addr *ret, const void *name);
int lisp0_get_special16_(addr *ret, const void *name);
int lisp0_get_special32_(addr *ret, const void *name);
int lisp_get_special_(addr x, addr symbol);
int lisp_get_special8_(addr x, const void *name);
int lisp_get_special16_(addr x, const void *name);
int lisp_get_special32_(addr x, const void *name);
int lisp_set_special_(addr symbol, addr value);
int lisp_set_special8_(const void *name, addr value);
int lisp_set_special16_(const void *name, addr value);
int lisp_set_special32_(const void *name, addr value);

/* defvar */
int lisp_defvar_(addr symbol);
int lisp_defvar8_(const void *str);
int lisp_defvar16_(const void *str);
int lisp_defvar32_(const void *str);

/* catch / throw */
void lisp_catch(addr symbol);
int lisp_throw_(addr symbol);

/* handler */
int lisp_handler_bind_(addr name, addr call);
int lisp_handler_case_(addr name, addr call);
void lisp_handler_reverse(void);

/* restart */
void lisp0_restart_make(addr *ret, addr name, addr call, int casep);
void lisp_restart_make(addr x, addr name, addr call, int casep);
void lisp_restart_interactive(addr restart, addr call);
void lisp_restart_report(addr restart, addr call);
void lisp_restart_test(addr restart, addr call);
void lisp_restart_push(addr restart);
void lisp_restart_reverse(void);

#endif


/************************************************************
 *  extern_develop.h
 ************************************************************/
#ifndef __EXTERN_DEVELOP_HEADER__
#define __EXTERN_DEVELOP_HEADER__


/* error */
void lisp_abort_type(addr value, constindex index);
#define Lisp_abort_type(x,y) lisp_abort_type((x), CONSTANT_COMMON_##y)

/* list */
void lisp0_list_va_alloc(LocalRoot local, addr *ret, va_list args);
void lisp0_lista_va_alloc(LocalRoot local, addr *ret, va_list args);

#endif


/************************************************************
 *  extern_error.h
 ************************************************************/
#ifndef __LISP_EXTERN_ERROR_HEADER__
#define __LISP_EXTERN_ERROR_HEADER__


/* abort */
void lisp_abort(void);
void lisp_abortf(const char *fmt, ...);
void lisp_abort8(const void *fmt, ...);
void lisp_abort16(const void *fmt, ...);
void lisp_abort32(const void *fmt, ...);
lisp_abort_calltype lisp_set_abort_handler(lisp_abort_calltype call);
lisp_abort_calltype lisp_set_abort_setjmp_handler(void);

/* signal */
int lisp_signal_(addr condition);
int lisp_error_(addr condition);

/* error */
int lisp_error8_(const void *str, ...);
int lisp_error16_(const void *str, ...);
int lisp_error32_(const void *str, ...);

/* warn */
int lisp_warn8_(const void *str, ...);
int lisp_warn16_(const void *str, ...);
int lisp_warn32_(const void *str, ...);

#endif


/************************************************************
 *  extern_object.h
 ************************************************************/
#ifndef __LISP_EXTERN_OBJECT_HEADER__
#define __LISP_EXTERN_OBJECT_HEADER__


/* object */
int lisp0_character_(addr *ret, unicode value);
void lisp0_fixnum(addr *ret, fixnum value);
int lisp0_float_(addr *ret, float value);
int lisp0_double_(addr *ret, double value);
int lisp0_long_double_(addr *ret, long double value);

int lisp_character_(addr x, unicode value);
void lisp_fixnum(addr x, fixnum value);
int lisp_float_(addr x, float value);
int lisp_double_(addr x, double value);
int lisp_long_double_(addr x, long double value);

int lisp_zero_p(addr value);
int lisp_plus_p(addr value);
int lisp_minus_p(addr value);
void lisp_get_character(addr pos, unicode *ret);
void lisp_get_fixnum(addr pos, fixnum *ret);
int lisp_get_float_(addr pos, float *ret);
int lisp_get_double_(addr pos, double *ret);
int lisp_get_long_double_(addr pos, long double *ret);

/* package */
int lisp0_package_(addr *ret, addr pos);
int lisp0_package8_(addr *ret, const void *str);
int lisp0_package16_(addr *ret, const void *str);
int lisp0_package32_(addr *ret, const void *str);
int lisp_package_(addr x, addr pos);
int lisp_package8_(addr x, const void *str);
int lisp_package16_(addr x, const void *str);
int lisp_package32_(addr x, const void *str);

int lisp_in_package_(addr pos);
int lisp_in_package8_(const void *str);
int lisp_in_package16_(const void *str);
int lisp_in_package32_(const void *str);
int lisp_push_and_in_package_(addr pos);
int lisp_push_and_in_package8_(const void *str);
int lisp_push_and_in_package16_(const void *str);
int lisp_push_and_in_package32_(const void *str);

/* intern */
int lisp0_intern_(addr *ret, addr package, addr name);
int lisp0_intern8_(addr *ret, const void *package, const void *name);
int lisp0_intern16_(addr *ret, const void *package, const void *name);
int lisp0_intern32_(addr *ret, const void *package, const void *name);
int lisp_intern_(addr x, addr package, addr name);
int lisp_intern8_(addr x, const void *package, const void *name);
int lisp_intern16_(addr x, const void *package, const void *name);
int lisp_intern32_(addr x, const void *package, const void *name);

/* reader */
int lisp0_reader_(addr *ret, addr str);
int lisp0_reader8_(addr *ret, const void *str);
int lisp0_reader16_(addr *ret, const void *str);
int lisp0_reader32_(addr *ret, const void *str);
int lisp_reader_(addr x, addr str);
int lisp_reader8_(addr x, const void *str);
int lisp_reader16_(addr x, const void *str);
int lisp_reader32_(addr x, const void *str);

/* pathname */
int lisp0_pathname_(addr *ret, addr name);
int lisp0_pathname8_(addr *ret, const void *str);
int lisp0_pathname16_(addr *ret, const void *str);
int lisp0_pathname32_(addr *ret, const void *str);
int lisp0_namestring_(addr *ret, addr path);
int lisp_pathname_(addr x, addr name);
int lisp_pathname8_(addr x, const void *str);
int lisp_pathname16_(addr x, const void *str);
int lisp_pathname32_(addr x, const void *str);
int lisp_namestring_(addr x, addr path);

/* paper */
int lisp0_paper_(addr *ret, size_t array, size_t body);
int lisp_paper_(addr x, size_t array, size_t body);
int lisp_paper_gettype_(addr x, byte *ret);
int lisp_paper_settype_(addr x, byte value);
int lisp_paper_lenarray_(addr x, size_t *ret);
int lisp_paper_lenbody_(addr x, size_t *ret);
int lisp0_paper_getarray_(addr *ret, addr pos, size_t index);
int lisp_paper_getarray_(addr x, addr pos, size_t index);
int lisp_paper_setarray_(addr x, size_t index, addr value);
int lisp_paper_getbody_(addr x, size_t index, byte *ret);
int lisp_paper_setbody_(addr x, size_t index, byte value);
int lisp_paper_getmemory_(addr x, size_t a, size_t b, void *output, size_t *ret);
int lisp_paper_setmemory_(addr x, size_t a, size_t b, const void *input, size_t *ret);
int lisp_paper_body_unsafe_(addr x, byte **ptr, size_t *ret);

#endif


/************************************************************
 *  extern_sequence.h
 ************************************************************/
#ifndef __LISP_EXTERN_SEQUENCE_HEADER__
#define __LISP_EXTERN_SEQUENCE_HEADER__


/* sequence */
void lisp0_cons(addr *ret, addr car, addr cdr);
void lisp_cons(addr x, addr car, addr cdr);
void lisp0_vector(addr *ret, size_t size);
void lisp_vector(addr x, size_t size);

void lisp0_list_va(addr *ret, va_list args);
void lisp0_lista_va(addr *ret, va_list args);
void lisp0_list(addr *ret, ...);
void lisp_list(addr x, ...);
void lisp0_lista(addr *ret, ...);
void lisp_lista(addr x, ...);

int lisp0_getelt_(addr *ret, addr pos, size_t index);
int lisp_getelt_(addr x, addr pos, size_t index);
int lisp_setelt_(addr pos, size_t index, addr value);
int lisp_length_(addr pos, size_t *ret);

int lisp0_reverse_(addr *ret, addr pos);
int lisp0_nreverse_(addr *ret, addr pos);
int lisp_reverse_(addr x, addr pos);
int lisp_nreverse_(addr x, addr pos);

/* cons */
void lisp0_car(addr *ret, addr list);
void lisp0_cdr(addr *ret, addr list);
void lisp0_carcdr(addr *car, addr *cdr, addr list);
void lisp_car(addr x, addr list);
void lisp_cdr(addr x, addr list);
void lisp_carcdr(addr x, addr y, addr list);

void lisp_setf_car(addr cons, addr value);
void lisp_setf_cdr(addr cons, addr value);
void lisp_setf_carcdr(addr cons, addr car, addr cdr);

/* string */
int lisp0_string8_(addr *ret, const void *str);
int lisp0_string16_(addr *ret, const void *str);
int lisp0_string32_(addr *ret, const void *str);
int lisp_string8_(addr x, const void *str);
int lisp_string16_(addr x, const void *str);
int lisp_string32_(addr x, const void *str);
int lisp_string_getc_(addr pos, size_t i, unicode *c);

/* strvect */
int lisp_strvect_getc(addr pos, size_t i, unicode *c);
int lisp_strvect_length(addr pos, size_t *ret);

#endif


/************************************************************
 *  extern_type.h
 ************************************************************/
#ifndef __LISP_EXTERN_TYPE_HEADER__
#define __LISP_EXTERN_TYPE_HEADER__


/* hold */
int lisp_hold_p(addr x);
void lisp_hold_value(addr x, addr *ret);
void lisp_hold_set(addr x, addr value);
addr Lisp_holdv(addr x);
void lisp_hold(addr *ret, addr value);
addr Lisp_hold(void);

/* nil, t */
void lisp0_nil(addr *ret);
void lisp0_t(addr *ret);
void lisp_nil(addr x);
void lisp_t(addr x);
addr Lisp_nil(void);
addr Lisp_t(void);

/* type */
int lisp_nil_p(addr x);
int lisp_t_p(addr x);
int lisp_null_p(addr x);
int lisp_character_p(addr x);
int lisp_cons_p(addr x);
int lisp_list_p(addr x);
int lisp_string_p(addr x);
int lisp_strvect_p(addr x);
int lisp_symbol_p(addr x);
int lisp_array_p(addr x);
int lisp_vector_p(addr x);

int lisp_fixnum_p(addr x);
int lisp_bignum_p(addr x);
int lisp_integer_p(addr x);
int lisp_ratio_p(addr x);
int lisp_rational_p(addr x);
int lisp_single_float_p(addr x);
int lisp_double_float_p(addr x);
int lisp_long_float_p(addr x);
int lisp_float_p(addr x);
int lisp_real_p(addr x);
int lisp_complex_p(addr x);
int lisp_number_p(addr x);

int lisp_clos_p(addr x);
int lisp_hashtable_p(addr x);
int lisp_readtable_p(addr x);
int lisp_control_p(addr x);
int lisp_callname_p(addr x);
int lisp_function_p(addr x);
int lisp_package_p(addr x);
int lisp_random_state_p(addr x);
int lisp_pathname_p(addr x);
int lisp_stream_p(addr x);
int lisp_restart_p(addr x);
int lisp_environment_p(addr x);
int lisp_bitvector_p(addr x);
int lisp_print_dispatch_p(addr x);
int lisp_paper_p(addr x);

#endif


/************************************************************
 *  extern_init.h
 ************************************************************/
#ifndef __EXTERN_INIT_HEADER__
#define __EXTERN_INIT_HEADER__


FILE *lisperror_stream(void);
int lisperror_noeol(const char *fmt, ...);
int lisperror_va(const char *fmt, va_list args);
int lisperror(const char *fmt, ...);

#endif


/************************************************************
 *  extern_typedef.h
 ************************************************************/
#ifndef __LISP_EXTERN_TYPEDEF_HEADER__
#define __LISP_EXTERN_TYPEDEF_HEADER__


enum lisp_escape {
	lisp_escape_normal,
	lisp_escape_tagbody,
	lisp_escape_block,
	lisp_escape_catch,
	lisp_escape_handler_case,
	lisp_escape_restart_case
};

enum LispEastAsianType {
	LispEastAsianType_error,
	LispEastAsianType_N,
	LispEastAsianType_A,
	LispEastAsianType_H,
	LispEastAsianType_W,
	LispEastAsianType_F,
	LispEastAsianType_NA
};

typedef int (*lisp_calltype_macro)(addr form, addr env);
typedef int (*lisp_calltype_rest)(addr args);
typedef int (*lisp_calltype_dynamic)(addr args);
typedef int (*lisp_calltype_any)(void);
typedef int (*lisp_calltype_empty)(void);
typedef int (*lisp_calltype_var1)(addr);
typedef int (*lisp_calltype_var2)(addr, addr);
typedef int (*lisp_calltype_var3)(addr, addr, addr);
typedef int (*lisp_calltype_var4)(addr, addr, addr, addr);
typedef int (*lisp_calltype_var5)(addr, addr, addr, addr, addr);
typedef int (*lisp_calltype_var6)(addr, addr, addr, addr, addr, addr);
typedef int (*lisp_calltype_opt1)(addr);
typedef int (*lisp_calltype_opt2)(addr, addr);
typedef int (*lisp_calltype_opt3)(addr, addr, addr);
typedef int (*lisp_calltype_var1opt1)(addr, addr);
typedef int (*lisp_calltype_var1opt2)(addr, addr, addr);
typedef int (*lisp_calltype_var1opt3)(addr, addr, addr, addr);
typedef int (*lisp_calltype_var2opt1)(addr, addr, addr);
typedef int (*lisp_calltype_var2opt2)(addr, addr, addr, addr);
typedef int (*lisp_calltype_var2opt3)(addr, addr, addr, addr, addr);
typedef int (*lisp_calltype_var3opt1)(addr, addr, addr, addr);
typedef int (*lisp_calltype_var3opt2)(addr, addr, addr, addr, addr);
typedef int (*lisp_calltype_var3opt3)(addr, addr, addr, addr, addr, addr);
typedef int (*lisp_calltype_var1rest)(addr, addr);
typedef int (*lisp_calltype_var2rest)(addr, addr, addr);
typedef int (*lisp_calltype_var3rest)(addr, addr, addr, addr);
typedef int (*lisp_calltype_var1dynamic)(addr, addr);
typedef int (*lisp_calltype_var2dynamic)(addr, addr, addr);
typedef int (*lisp_calltype_var3dynamic)(addr, addr, addr, addr);

#endif


/************************************************************
 *  extern_execute.h
 ************************************************************/
#ifndef __LISP_EXTERN_EXECUTE_HEADER__
#define __LISP_EXTERN_EXECUTE_HEADER__


/* eval */
int lisp0_eval_(addr *ret, addr pos);
int lisp0_eval8_(addr *ret, const void *str);
int lisp0_eval16_(addr *ret, const void *str);
int lisp0_eval32_(addr *ret, const void *str);
int lisp_eval_(addr x, addr pos);
int lisp_eval8_(addr x, const void *str);
int lisp_eval16_(addr x, const void *str);
int lisp_eval32_(addr x, const void *str);

/* call */
int lisp0_call_(addr *ret, addr call, addr args);
int lisp_call_(addr x, addr call, addr args);

/* funcall */
int lisp0_funcall_(addr *ret, addr call, ...);
int lisp0_funcall8_(addr *ret, const void *str, ...);
int lisp0_funcall16_(addr *ret, const void *str, ...);
int lisp0_funcall32_(addr *ret, const void *str, ...);
int lisp_funcall_(addr x, addr call, ...);
int lisp_funcall8_(addr x, const void *str, ...);
int lisp_funcall16_(addr x, const void *str, ...);
int lisp_funcall32_(addr x, const void *str, ...);

/* apply */
int lisp0_apply_(addr *ret, addr call, ...);
int lisp0_apply8_(addr *ret, const void *str, ...);
int lisp0_apply16_(addr *ret, const void *str, ...);
int lisp0_apply32_(addr *ret, const void *str, ...);
int lisp_apply_(addr x, addr call, ...);
int lisp_apply8_(addr x, const void *str, ...);
int lisp_apply16_(addr x, const void *str, ...);
int lisp_apply32_(addr x, const void *str, ...);

/* lowlevel */
int lisp_eval_control_(addr eval);
int lisp_eval_string_control_(addr eval);
int lisp_call_control_(addr call, addr args);
int lisp_funcall_control_(addr call, ...);
int lisp_apply_control_(addr call, ...);

/* values */
void lisp0_result_control(addr *ret);
void lisp0_result2_control(addr *ret1, addr *ret2);
void lisp0_values_control(addr *ret);
void lisp0_nth_value_control(addr *ret, size_t index);
void lisp_result_control(addr x);
void lisp_result2_control(addr x, addr y);
void lisp_values_control(addr x);
void lisp_nth_value_control(addr x, size_t index);
void lisp_set_result_control(addr value);
void lisp_set_values_control(addr first, ...);
void lisp_set_values_nil_control(void);
void lisp_set_values_list_control(addr list);

/* escape */
int lisp_equal_control(addr control);
int lisp_break_control(void);
int lisp_escape_control(void);
void lisp_reset_control(void);
enum lisp_escape lisp_escape_type_control(void);
void lisp_save_control(addr *ret);
void lisp_rollback_control(addr value);

/* system */
int lisp_eval_loop_(void);

#endif


/************************************************************
 *  extern_function.h
 ************************************************************/
#ifndef __LISP_EXTERN_FUNCTION_HEADER__
#define __LISP_EXTERN_FUNCTION_HEADER__


/* function */
void lisp0_get_function(addr *ret, addr symbol);
void lisp0_get_setf(addr *ret, addr symbol);
void lisp_get_function(addr x, addr symbol);
void lisp_get_setf(addr x, addr symbol);

int lisp0_get_function_(addr *ret, addr value);
int lisp0_get_function8_(addr *ret, const void *str);
int lisp0_get_function16_(addr *ret, const void *str);
int lisp0_get_function32_(addr *ret, const void *str);
int lisp_get_function_(addr x, addr value);
int lisp_get_function8_(addr x, const void *str);
int lisp_get_function16_(addr x, const void *str);
int lisp_get_function32_(addr x, const void *str);

int lisp0_get_setf_(addr *ret, addr value);
int lisp0_get_setf8_(addr *ret, const void *str);
int lisp0_get_setf16_(addr *ret, const void *str);
int lisp0_get_setf32_(addr *ret, const void *str);
int lisp_get_setf_(addr x, addr value);
int lisp_get_setf8_(addr x, const void *str);
int lisp_get_setf16_(addr x, const void *str);
int lisp_get_setf32_(addr x, const void *str);

/* compiled */
void lisp_compiled_macro(int index, lisp_calltype_macro call);
void lisp_compiled_rest(int index, lisp_calltype_rest call);
void lisp_compiled_dynamic(int index, lisp_calltype_dynamic call);
void lisp_compiled_any(int index, lisp_calltype_any call);
void lisp_compiled_empty(int index, lisp_calltype_empty call);
void lisp_compiled_var1(int index, lisp_calltype_var1 call);
void lisp_compiled_var2(int index, lisp_calltype_var2 call);
void lisp_compiled_var3(int index, lisp_calltype_var3 call);
void lisp_compiled_var4(int index, lisp_calltype_var4 call);
void lisp_compiled_var5(int index, lisp_calltype_var5 call);
void lisp_compiled_var6(int index, lisp_calltype_var6 call);
void lisp_compiled_opt1(int index, lisp_calltype_opt1 call);
void lisp_compiled_opt2(int index, lisp_calltype_opt2 call);
void lisp_compiled_opt3(int index, lisp_calltype_opt3 call);
void lisp_compiled_var1opt1(int index, lisp_calltype_var1opt1 call);
void lisp_compiled_var1opt2(int index, lisp_calltype_var1opt2 call);
void lisp_compiled_var1opt3(int index, lisp_calltype_var1opt3 call);
void lisp_compiled_var2opt1(int index, lisp_calltype_var2opt1 call);
void lisp_compiled_var2opt2(int index, lisp_calltype_var2opt2 call);
void lisp_compiled_var2opt3(int index, lisp_calltype_var2opt3 call);
void lisp_compiled_var3opt1(int index, lisp_calltype_var3opt1 call);
void lisp_compiled_var3opt2(int index, lisp_calltype_var3opt2 call);
void lisp_compiled_var3opt3(int index, lisp_calltype_var3opt3 call);
void lisp_compiled_var1rest(int index, lisp_calltype_var1rest call);
void lisp_compiled_var2rest(int index, lisp_calltype_var2rest call);
void lisp_compiled_var3rest(int index, lisp_calltype_var3rest call);
void lisp_compiled_var1dynamic(int index, lisp_calltype_var1dynamic call);
void lisp_compiled_var2dynamic(int index, lisp_calltype_var2dynamic call);
void lisp_compiled_var3dynamic(int index, lisp_calltype_var3dynamic call);

int lisp0_compiled_function_(addr *ret, int index, addr symbol);
int lisp0_compiled_function8_(addr *ret, int index, const void *str);
int lisp0_compiled_function16_(addr *ret, int index, const void *str);
int lisp0_compiled_function32_(addr *ret, int index, const void *str);
int lisp_compiled_function_(addr x, int index, addr symbol);
int lisp_compiled_function8_(addr x, int index, const void *str);
int lisp_compiled_function16_(addr x, int index, const void *str);
int lisp_compiled_function32_(addr x, int index, const void *str);
int lisp_compiled_defun_(int index, addr symbol);
int lisp_compiled_defun8_(int index, const void *str);
int lisp_compiled_defun16_(int index, const void *str);
int lisp_compiled_defun32_(int index, const void *str);
int lisp_compiled_defun_setf_(int index, addr symbol);
int lisp_compiled_defun_setf8_(int index, const void *str);
int lisp_compiled_defun_setf16_(int index, const void *str);
int lisp_compiled_defun_setf32_(int index, const void *str);

void lisp_compiled_setvalue(addr pos, addr value);
void lisp_compiled_getvalue(addr *ret);

#endif


/************************************************************
 *  extern_instance.h
 ************************************************************/
#ifndef __LISP_EXTERN_INSTANCE_HEADER__
#define __LISP_EXTERN_INSTANCE_HEADER__


/* find-class */
void lisp0_find_class(addr *ret, addr symbol);
int lisp0_find_class_(addr *ret, addr symbol);
int lisp0_find_class8_(addr *ret, const void *str);
int lisp0_find_class16_(addr *ret, const void *str);
int lisp0_find_class32_(addr *ret, const void *str);
void lisp_find_class(addr x, addr symbol);
int lisp_find_class_(addr x, addr symbol);
int lisp_find_class8_(addr x, const void *str);
int lisp_find_class16_(addr x, const void *str);
int lisp_find_class32_(addr x, const void *str);

/* make-instance */
int lisp0_instance_(addr *ret, addr clos, ...);
int lisp0_instance8_(addr *ret, const void *clos, ...);
int lisp0_instance16_(addr *ret, const void *clos, ...);
int lisp0_instance32_(addr *ret, const void *clos, ...);
int lisp_instance_(addr x, addr clos, ...);
int lisp_instance8_(addr x, const void *clos, ...);
int lisp_instance16_(addr x, const void *clos, ...);
int lisp_instance32_(addr x, const void *clos, ...);

/* slot-exists-p */
int lisp_slot_exists_(addr instance, addr symbol, int *ret);
int lisp_slot_exists8_(addr instance, const void *str, int *ret);
int lisp_slot_exists16_(addr instance, const void *str, int *ret);
int lisp_slot_exists32_(addr instance, const void *str, int *ret);

/* slot-boundp */
int lisp_slot_boundp_(addr instance, addr symbol, int *ret);
int lisp_slot_boundp8_(addr instance, const void *str, int *ret);
int lisp_slot_boundp16_(addr instance, const void *str, int *ret);
int lisp_slot_boundp32_(addr instance, const void *str, int *ret);

/* slot-makunbound */
int lisp_slot_makunbound_(addr instance, addr symbol);
int lisp_slot_makunbound8_(addr instance, const void *str);
int lisp_slot_makunbound16_(addr instance, const void *str);
int lisp_slot_makunbound32_(addr instance, const void *str);

/* slot-value */
int lisp0_slot_value_(addr *ret, addr instance, addr symbol);
int lisp0_slot_value8_(addr *ret, addr instance, const void *str);
int lisp0_slot_value16_(addr *ret, addr instance, const void *str);
int lisp0_slot_value32_(addr *ret, addr instance, const void *str);
int lisp_slot_value_(addr x, addr instance, addr symbol);
int lisp_slot_value8_(addr x, addr instance, const void *str);
int lisp_slot_value16_(addr x, addr instance, const void *str);
int lisp_slot_value32_(addr x, addr instance, const void *str);

/* setf slot-value */
int lisp_slot_setf_(addr instance, addr symbol, addr value);
int lisp_slot_setf8_(addr instance, const void *str, addr value);
int lisp_slot_setf16_(addr instance, const void *str, addr value);
int lisp_slot_setf32_(addr instance, const void *str, addr value);

#endif


/************************************************************
 *  extern_print.h
 ************************************************************/
#ifndef __LISP_EXTERN_PRINT_HEADER__
#define __LISP_EXTERN_PRINT_HEADER__


/* format */
int lisp_format8_(addr stream, const void *str, ...);
int lisp_format16_(addr stream, const void *str, ...);
int lisp_format32_(addr stream, const void *str, ...);

/* stdout */
int lisp_stdout8_(const void *str, ...);
int lisp_stdout16_(const void *str, ...);
int lisp_stdout32_(const void *str, ...);

/* stderr */
int lisp_stderr8_(const void *str, ...);
int lisp_stderr16_(const void *str, ...);
int lisp_stderr32_(const void *str, ...);

/* stringf */
int lisp0_stringf8_(addr *ret, const void *str, ...);
int lisp0_stringf16_(addr *ret, const void *str, ...);
int lisp0_stringf32_(addr *ret, const void *str, ...);
int lisp_stringf8_(addr x, const void *str, ...);
int lisp_stringf16_(addr x, const void *str, ...);
int lisp_stringf32_(addr x, const void *str, ...);

#endif


/************************************************************
 *  extern_stream.h
 ************************************************************/
#ifndef __LISP_EXTERN_STREAM_HEADER__
#define __LISP_EXTERN_STREAM_HEADER__


/* stream object */
void lisp0_stream_define(addr *ret, int index, size_t size);
void lisp_stream_define(addr x, int index, size_t size);
void lisp_stream_memory(addr stream, void **ret);
void lisp0_getinfo_stream(addr *ret, addr stream);
void lisp_getinfo_stream(addr x, addr stream);
void lisp_setinfo_stream(addr stream, addr value);

void lisp_stream_calltype_close(int, lisp_streamtype_close);
void lisp_stream_calltype_read_byte(int, lisp_streamtype_read_byte);
void lisp_stream_calltype_unread_byte(int, lisp_streamtype_unread_byte);
void lisp_stream_calltype_write_byte(int, lisp_streamtype_write_byte);
void lisp_stream_calltype_read_char(int, lisp_streamtype_read_char);
void lisp_stream_calltype_read_hang(int, lisp_streamtype_read_hang);
void lisp_stream_calltype_unread_char(int, lisp_streamtype_unread_char);
void lisp_stream_calltype_write_char(int, lisp_streamtype_write_char);
void lisp_stream_calltype_getleft(int, lisp_streamtype_getleft);
void lisp_stream_calltype_setleft(int, lisp_streamtype_setleft);
void lisp_stream_calltype_inputp(int, lisp_streamtype_inputp);
void lisp_stream_calltype_outputp(int, lisp_streamtype_outputp);
void lisp_stream_calltype_interactivep(int, lisp_streamtype_interactivep);
void lisp_stream_calltype_characterp(int, lisp_streamtype_characterp);
void lisp_stream_calltype_binaryp(int, lisp_streamtype_binaryp);
void lisp_stream_calltype_element_type(int, lisp_streamtype_element_type);
void lisp_stream_calltype_external_format(int, lisp_streamtype_external_format);
void lisp_stream_calltype_file_length(int, lisp_streamtype_file_length);
void lisp_stream_calltype_file_position(int, lisp_streamtype_file_position);
void lisp_stream_calltype_file_position_start(int, lisp_streamtype_file_position_start);
void lisp_stream_calltype_file_position_end(int, lisp_streamtype_file_position_end);
void lisp_stream_calltype_file_position_set(int, lisp_streamtype_file_position_set);
void lisp_stream_calltype_file_charlen(int, lisp_streamtype_file_charlen);
void lisp_stream_calltype_file_strlen(int, lisp_streamtype_file_strlen);
void lisp_stream_calltype_listen(int, lisp_streamtype_listen);
void lisp_stream_calltype_clear_input(int, lisp_streamtype_clear_input);
void lisp_stream_calltype_finish_output(int, lisp_streamtype_finish_output);
void lisp_stream_calltype_force_output(int, lisp_streamtype_force_output);
void lisp_stream_calltype_clear_output(int, lisp_streamtype_clear_output);
void lisp_stream_calltype_exitpoint(int, lisp_streamtype_exitpoint);
void lisp_stream_calltype_termsize(int, lisp_streamtype_termsize);

void lisp_stream_calltype_error_close(int);
void lisp_stream_calltype_error_read_byte(int);
void lisp_stream_calltype_error_unread_byte(int);
void lisp_stream_calltype_error_write_byte(int);
void lisp_stream_calltype_error_read_char(int);
void lisp_stream_calltype_error_read_hang(int);
void lisp_stream_calltype_error_unread_char(int);
void lisp_stream_calltype_error_write_char(int);
void lisp_stream_calltype_error_getleft(int);
void lisp_stream_calltype_error_setleft(int);
void lisp_stream_calltype_error_inputp(int);
void lisp_stream_calltype_error_outputp(int);
void lisp_stream_calltype_error_interactivep(int);
void lisp_stream_calltype_error_characterp(int);
void lisp_stream_calltype_error_binaryp(int);
void lisp_stream_calltype_error_element_type(int);
void lisp_stream_calltype_error_external_format(int);
void lisp_stream_calltype_error_file_length(int);
void lisp_stream_calltype_error_file_position(int);
void lisp_stream_calltype_error_file_position_start(int);
void lisp_stream_calltype_error_file_position_end(int);
void lisp_stream_calltype_error_file_position_set(int);
void lisp_stream_calltype_error_file_charlen(int);
void lisp_stream_calltype_error_file_strlen(int);
void lisp_stream_calltype_error_listen(int);
void lisp_stream_calltype_error_clear_input(int);
void lisp_stream_calltype_error_finish_output(int);
void lisp_stream_calltype_error_force_output(int);
void lisp_stream_calltype_error_clear_output(int);
void lisp_stream_calltype_error_exitpoint(int);
void lisp_stream_calltype_error_termsize(int);

#endif


/************************************************************
 *  extern_unicode.h
 ************************************************************/
#ifndef __LISP_EXTERN_UNICODE_HEADER__
#define __LISP_EXTERN_UNICODE_HEADER__


/* eastasian */
int lisp_eastasian_set(enum LispEastAsianType type, unsigned width);
int lisp_eastasian_get(enum LispEastAsianType type, unsigned *ret);
enum LispEastAsianType lisp_eastasian_type_unicode(unicode c);
enum LispEastAsianType lisp_eastasian_type_character(addr value);

unsigned lisp_eastasian_unicode(unicode c);
int lisp_eastasian_character_(addr value, unsigned *ret);
int lisp_eastasian_string_(addr value, size_t *ret);
int lisp_eastasian_width_(addr value, size_t *ret);

int lisp_unicode_count(void);

int lisp_utf8_encode(unicode c, void *ptr, size_t *ret);
int lisp_utf16_range(unicode c);
int lisp_utf16_high(unicode c);
int lisp_utf16_low(unicode c);
unicode lisp_utf16_merge(byte16 first, byte16 second);

#endif


/************************************************************
 *  extern_dlfile.h
 ************************************************************/
/*  Auto generated by mk.dlfile.lisp  */
#ifndef __LISP_EXTERN_DLFILE_HEADER__
#define __LISP_EXTERN_DLFILE_HEADER__

enum lisp_dlfile_calltype {
    /* variable */
    lispdl_nil,
    lispdl_t,

    /* extern_type.h */
    lispdl_lisp_hold_p,
    lispdl_lisp_hold_value,
    lispdl_lisp_hold_set,
    lispdl_Lisp_holdv,
    lispdl_lisp_hold,
    lispdl_Lisp_hold,
    lispdl_lisp0_nil,
    lispdl_lisp0_t,
    lispdl_lisp_nil,
    lispdl_lisp_t,
    lispdl_Lisp_nil,
    lispdl_Lisp_t,
    lispdl_lisp_nil_p,
    lispdl_lisp_t_p,
    lispdl_lisp_null_p,
    lispdl_lisp_character_p,
    lispdl_lisp_cons_p,
    lispdl_lisp_list_p,
    lispdl_lisp_string_p,
    lispdl_lisp_strvect_p,
    lispdl_lisp_symbol_p,
    lispdl_lisp_array_p,
    lispdl_lisp_vector_p,
    lispdl_lisp_fixnum_p,
    lispdl_lisp_bignum_p,
    lispdl_lisp_integer_p,
    lispdl_lisp_ratio_p,
    lispdl_lisp_rational_p,
    lispdl_lisp_single_float_p,
    lispdl_lisp_double_float_p,
    lispdl_lisp_long_float_p,
    lispdl_lisp_float_p,
    lispdl_lisp_real_p,
    lispdl_lisp_complex_p,
    lispdl_lisp_number_p,
    lispdl_lisp_clos_p,
    lispdl_lisp_hashtable_p,
    lispdl_lisp_readtable_p,
    lispdl_lisp_control_p,
    lispdl_lisp_callname_p,
    lispdl_lisp_function_p,
    lispdl_lisp_package_p,
    lispdl_lisp_random_state_p,
    lispdl_lisp_pathname_p,
    lispdl_lisp_stream_p,
    lispdl_lisp_restart_p,
    lispdl_lisp_environment_p,
    lispdl_lisp_bitvector_p,
    lispdl_lisp_print_dispatch_p,
    lispdl_lisp_paper_p,

    /* extern_sequence.h */
    lispdl_lisp0_cons,
    lispdl_lisp_cons,
    lispdl_lisp0_vector,
    lispdl_lisp_vector,
    lispdl_lisp0_list_va,
    lispdl_lisp0_lista_va,
    lispdl_lisp0_list,
    lispdl_lisp_list,
    lispdl_lisp0_lista,
    lispdl_lisp_lista,
    lispdl_lisp0_getelt_,
    lispdl_lisp_getelt_,
    lispdl_lisp_setelt_,
    lispdl_lisp_length_,
    lispdl_lisp0_reverse_,
    lispdl_lisp0_nreverse_,
    lispdl_lisp_reverse_,
    lispdl_lisp_nreverse_,
    lispdl_lisp0_car,
    lispdl_lisp0_cdr,
    lispdl_lisp0_carcdr,
    lispdl_lisp_car,
    lispdl_lisp_cdr,
    lispdl_lisp_carcdr,
    lispdl_lisp_setf_car,
    lispdl_lisp_setf_cdr,
    lispdl_lisp_setf_carcdr,
    lispdl_lisp0_string8_,
    lispdl_lisp0_string16_,
    lispdl_lisp0_string32_,
    lispdl_lisp_string8_,
    lispdl_lisp_string16_,
    lispdl_lisp_string32_,
    lispdl_lisp_string_getc_,
    lispdl_lisp_strvect_getc,
    lispdl_lisp_strvect_length,

    /* extern_object.h */
    lispdl_lisp0_character_,
    lispdl_lisp0_fixnum,
    lispdl_lisp0_float_,
    lispdl_lisp0_double_,
    lispdl_lisp0_long_double_,
    lispdl_lisp_character_,
    lispdl_lisp_fixnum,
    lispdl_lisp_float_,
    lispdl_lisp_double_,
    lispdl_lisp_long_double_,
    lispdl_lisp_zero_p,
    lispdl_lisp_plus_p,
    lispdl_lisp_minus_p,
    lispdl_lisp_get_character,
    lispdl_lisp_get_fixnum,
    lispdl_lisp_get_float_,
    lispdl_lisp_get_double_,
    lispdl_lisp_get_long_double_,
    lispdl_lisp0_package_,
    lispdl_lisp0_package8_,
    lispdl_lisp0_package16_,
    lispdl_lisp0_package32_,
    lispdl_lisp_package_,
    lispdl_lisp_package8_,
    lispdl_lisp_package16_,
    lispdl_lisp_package32_,
    lispdl_lisp_in_package_,
    lispdl_lisp_in_package8_,
    lispdl_lisp_in_package16_,
    lispdl_lisp_in_package32_,
    lispdl_lisp_push_and_in_package_,
    lispdl_lisp_push_and_in_package8_,
    lispdl_lisp_push_and_in_package16_,
    lispdl_lisp_push_and_in_package32_,
    lispdl_lisp0_intern_,
    lispdl_lisp0_intern8_,
    lispdl_lisp0_intern16_,
    lispdl_lisp0_intern32_,
    lispdl_lisp_intern_,
    lispdl_lisp_intern8_,
    lispdl_lisp_intern16_,
    lispdl_lisp_intern32_,
    lispdl_lisp0_reader_,
    lispdl_lisp0_reader8_,
    lispdl_lisp0_reader16_,
    lispdl_lisp0_reader32_,
    lispdl_lisp_reader_,
    lispdl_lisp_reader8_,
    lispdl_lisp_reader16_,
    lispdl_lisp_reader32_,
    lispdl_lisp0_pathname_,
    lispdl_lisp0_pathname8_,
    lispdl_lisp0_pathname16_,
    lispdl_lisp0_pathname32_,
    lispdl_lisp0_namestring_,
    lispdl_lisp_pathname_,
    lispdl_lisp_pathname8_,
    lispdl_lisp_pathname16_,
    lispdl_lisp_pathname32_,
    lispdl_lisp_namestring_,
    lispdl_lisp0_paper_,
    lispdl_lisp_paper_,
    lispdl_lisp_paper_gettype_,
    lispdl_lisp_paper_settype_,
    lispdl_lisp_paper_lenarray_,
    lispdl_lisp_paper_lenbody_,
    lispdl_lisp0_paper_getarray_,
    lispdl_lisp_paper_getarray_,
    lispdl_lisp_paper_setarray_,
    lispdl_lisp_paper_getbody_,
    lispdl_lisp_paper_setbody_,
    lispdl_lisp_paper_getmemory_,
    lispdl_lisp_paper_setmemory_,
    lispdl_lisp_paper_body_unsafe_,

    /* extern_init.h */
    lispdl_lisperror_stream,
    lispdl_lisperror_noeol,
    lispdl_lisperror_va,
    lispdl_lisperror,

    /* extern_execute.h */
    lispdl_lisp0_eval_,
    lispdl_lisp0_eval8_,
    lispdl_lisp0_eval16_,
    lispdl_lisp0_eval32_,
    lispdl_lisp_eval_,
    lispdl_lisp_eval8_,
    lispdl_lisp_eval16_,
    lispdl_lisp_eval32_,
    lispdl_lisp0_call_,
    lispdl_lisp_call_,
    lispdl_lisp0_funcall_,
    lispdl_lisp0_funcall8_,
    lispdl_lisp0_funcall16_,
    lispdl_lisp0_funcall32_,
    lispdl_lisp_funcall_,
    lispdl_lisp_funcall8_,
    lispdl_lisp_funcall16_,
    lispdl_lisp_funcall32_,
    lispdl_lisp0_apply_,
    lispdl_lisp0_apply8_,
    lispdl_lisp0_apply16_,
    lispdl_lisp0_apply32_,
    lispdl_lisp_apply_,
    lispdl_lisp_apply8_,
    lispdl_lisp_apply16_,
    lispdl_lisp_apply32_,
    lispdl_lisp_eval_control_,
    lispdl_lisp_eval_string_control_,
    lispdl_lisp_call_control_,
    lispdl_lisp_funcall_control_,
    lispdl_lisp_apply_control_,
    lispdl_lisp0_result_control,
    lispdl_lisp0_result2_control,
    lispdl_lisp0_values_control,
    lispdl_lisp0_nth_value_control,
    lispdl_lisp_result_control,
    lispdl_lisp_result2_control,
    lispdl_lisp_values_control,
    lispdl_lisp_nth_value_control,
    lispdl_lisp_set_result_control,
    lispdl_lisp_set_values_control,
    lispdl_lisp_set_values_nil_control,
    lispdl_lisp_set_values_list_control,
    lispdl_lisp_equal_control,
    lispdl_lisp_break_control,
    lispdl_lisp_escape_control,
    lispdl_lisp_reset_control,
    lispdl_lisp_escape_type_control,
    lispdl_lisp_save_control,
    lispdl_lisp_rollback_control,
    lispdl_lisp_eval_loop_,

    /* extern_control.h */
    lispdl_lisp_push_control,
    lispdl_lisp_pop_control_,
    lispdl_lisp_push_special_,
    lispdl_lisp_push_special8_,
    lispdl_lisp_push_special16_,
    lispdl_lisp_push_special32_,
    lispdl_lisp0_get_special_,
    lispdl_lisp0_get_special8_,
    lispdl_lisp0_get_special16_,
    lispdl_lisp0_get_special32_,
    lispdl_lisp_get_special_,
    lispdl_lisp_get_special8_,
    lispdl_lisp_get_special16_,
    lispdl_lisp_get_special32_,
    lispdl_lisp_set_special_,
    lispdl_lisp_set_special8_,
    lispdl_lisp_set_special16_,
    lispdl_lisp_set_special32_,
    lispdl_lisp_defvar_,
    lispdl_lisp_defvar8_,
    lispdl_lisp_defvar16_,
    lispdl_lisp_defvar32_,
    lispdl_lisp_catch,
    lispdl_lisp_throw_,
    lispdl_lisp_handler_bind_,
    lispdl_lisp_handler_case_,
    lispdl_lisp_handler_reverse,
    lispdl_lisp0_restart_make,
    lispdl_lisp_restart_make,
    lispdl_lisp_restart_interactive,
    lispdl_lisp_restart_report,
    lispdl_lisp_restart_test,
    lispdl_lisp_restart_push,
    lispdl_lisp_restart_reverse,

    /* extern_error.h */
    lispdl_lisp_abort,
    lispdl_lisp_abortf,
    lispdl_lisp_abort8,
    lispdl_lisp_abort16,
    lispdl_lisp_abort32,
    lispdl_lisp_set_abort_handler,
    lispdl_lisp_set_abort_setjmp_handler,
    lispdl_lisp_signal_,
    lispdl_lisp_error_,
    lispdl_lisp_error8_,
    lispdl_lisp_error16_,
    lispdl_lisp_error32_,
    lispdl_lisp_warn8_,
    lispdl_lisp_warn16_,
    lispdl_lisp_warn32_,

    /* extern_function.h */
    lispdl_lisp0_get_function,
    lispdl_lisp0_get_setf,
    lispdl_lisp_get_function,
    lispdl_lisp_get_setf,
    lispdl_lisp0_get_function_,
    lispdl_lisp0_get_function8_,
    lispdl_lisp0_get_function16_,
    lispdl_lisp0_get_function32_,
    lispdl_lisp_get_function_,
    lispdl_lisp_get_function8_,
    lispdl_lisp_get_function16_,
    lispdl_lisp_get_function32_,
    lispdl_lisp0_get_setf_,
    lispdl_lisp0_get_setf8_,
    lispdl_lisp0_get_setf16_,
    lispdl_lisp0_get_setf32_,
    lispdl_lisp_get_setf_,
    lispdl_lisp_get_setf8_,
    lispdl_lisp_get_setf16_,
    lispdl_lisp_get_setf32_,
    lispdl_lisp_compiled_macro,
    lispdl_lisp_compiled_rest,
    lispdl_lisp_compiled_dynamic,
    lispdl_lisp_compiled_any,
    lispdl_lisp_compiled_empty,
    lispdl_lisp_compiled_var1,
    lispdl_lisp_compiled_var2,
    lispdl_lisp_compiled_var3,
    lispdl_lisp_compiled_var4,
    lispdl_lisp_compiled_var5,
    lispdl_lisp_compiled_var6,
    lispdl_lisp_compiled_opt1,
    lispdl_lisp_compiled_opt2,
    lispdl_lisp_compiled_opt3,
    lispdl_lisp_compiled_var1opt1,
    lispdl_lisp_compiled_var1opt2,
    lispdl_lisp_compiled_var1opt3,
    lispdl_lisp_compiled_var2opt1,
    lispdl_lisp_compiled_var2opt2,
    lispdl_lisp_compiled_var2opt3,
    lispdl_lisp_compiled_var3opt1,
    lispdl_lisp_compiled_var3opt2,
    lispdl_lisp_compiled_var3opt3,
    lispdl_lisp_compiled_var1rest,
    lispdl_lisp_compiled_var2rest,
    lispdl_lisp_compiled_var3rest,
    lispdl_lisp_compiled_var1dynamic,
    lispdl_lisp_compiled_var2dynamic,
    lispdl_lisp_compiled_var3dynamic,
    lispdl_lisp0_compiled_function_,
    lispdl_lisp0_compiled_function8_,
    lispdl_lisp0_compiled_function16_,
    lispdl_lisp0_compiled_function32_,
    lispdl_lisp_compiled_function_,
    lispdl_lisp_compiled_function8_,
    lispdl_lisp_compiled_function16_,
    lispdl_lisp_compiled_function32_,
    lispdl_lisp_compiled_defun_,
    lispdl_lisp_compiled_defun8_,
    lispdl_lisp_compiled_defun16_,
    lispdl_lisp_compiled_defun32_,
    lispdl_lisp_compiled_defun_setf_,
    lispdl_lisp_compiled_defun_setf8_,
    lispdl_lisp_compiled_defun_setf16_,
    lispdl_lisp_compiled_defun_setf32_,
    lispdl_lisp_compiled_setvalue,
    lispdl_lisp_compiled_getvalue,

    /* extern_instance.h */
    lispdl_lisp0_find_class,
    lispdl_lisp0_find_class_,
    lispdl_lisp0_find_class8_,
    lispdl_lisp0_find_class16_,
    lispdl_lisp0_find_class32_,
    lispdl_lisp_find_class,
    lispdl_lisp_find_class_,
    lispdl_lisp_find_class8_,
    lispdl_lisp_find_class16_,
    lispdl_lisp_find_class32_,
    lispdl_lisp0_instance_,
    lispdl_lisp0_instance8_,
    lispdl_lisp0_instance16_,
    lispdl_lisp0_instance32_,
    lispdl_lisp_instance_,
    lispdl_lisp_instance8_,
    lispdl_lisp_instance16_,
    lispdl_lisp_instance32_,
    lispdl_lisp_slot_exists_,
    lispdl_lisp_slot_exists8_,
    lispdl_lisp_slot_exists16_,
    lispdl_lisp_slot_exists32_,
    lispdl_lisp_slot_boundp_,
    lispdl_lisp_slot_boundp8_,
    lispdl_lisp_slot_boundp16_,
    lispdl_lisp_slot_boundp32_,
    lispdl_lisp_slot_makunbound_,
    lispdl_lisp_slot_makunbound8_,
    lispdl_lisp_slot_makunbound16_,
    lispdl_lisp_slot_makunbound32_,
    lispdl_lisp0_slot_value_,
    lispdl_lisp0_slot_value8_,
    lispdl_lisp0_slot_value16_,
    lispdl_lisp0_slot_value32_,
    lispdl_lisp_slot_value_,
    lispdl_lisp_slot_value8_,
    lispdl_lisp_slot_value16_,
    lispdl_lisp_slot_value32_,
    lispdl_lisp_slot_setf_,
    lispdl_lisp_slot_setf8_,
    lispdl_lisp_slot_setf16_,
    lispdl_lisp_slot_setf32_,

    /* extern_print.h */
    lispdl_lisp_format8_,
    lispdl_lisp_format16_,
    lispdl_lisp_format32_,
    lispdl_lisp_stdout8_,
    lispdl_lisp_stdout16_,
    lispdl_lisp_stdout32_,
    lispdl_lisp_stderr8_,
    lispdl_lisp_stderr16_,
    lispdl_lisp_stderr32_,
    lispdl_lisp0_stringf8_,
    lispdl_lisp0_stringf16_,
    lispdl_lisp0_stringf32_,
    lispdl_lisp_stringf8_,
    lispdl_lisp_stringf16_,
    lispdl_lisp_stringf32_,

    /* extern_stream.h */
    lispdl_lisp0_stream_define,
    lispdl_lisp_stream_define,
    lispdl_lisp_stream_memory,
    lispdl_lisp0_getinfo_stream,
    lispdl_lisp_getinfo_stream,
    lispdl_lisp_setinfo_stream,
    lispdl_lisp_stream_calltype_close,
    lispdl_lisp_stream_calltype_read_byte,
    lispdl_lisp_stream_calltype_unread_byte,
    lispdl_lisp_stream_calltype_write_byte,
    lispdl_lisp_stream_calltype_read_char,
    lispdl_lisp_stream_calltype_read_hang,
    lispdl_lisp_stream_calltype_unread_char,
    lispdl_lisp_stream_calltype_write_char,
    lispdl_lisp_stream_calltype_getleft,
    lispdl_lisp_stream_calltype_setleft,
    lispdl_lisp_stream_calltype_inputp,
    lispdl_lisp_stream_calltype_outputp,
    lispdl_lisp_stream_calltype_interactivep,
    lispdl_lisp_stream_calltype_characterp,
    lispdl_lisp_stream_calltype_binaryp,
    lispdl_lisp_stream_calltype_element_type,
    lispdl_lisp_stream_calltype_external_format,
    lispdl_lisp_stream_calltype_file_length,
    lispdl_lisp_stream_calltype_file_position,
    lispdl_lisp_stream_calltype_file_position_start,
    lispdl_lisp_stream_calltype_file_position_end,
    lispdl_lisp_stream_calltype_file_position_set,
    lispdl_lisp_stream_calltype_file_charlen,
    lispdl_lisp_stream_calltype_file_strlen,
    lispdl_lisp_stream_calltype_listen,
    lispdl_lisp_stream_calltype_clear_input,
    lispdl_lisp_stream_calltype_finish_output,
    lispdl_lisp_stream_calltype_force_output,
    lispdl_lisp_stream_calltype_clear_output,
    lispdl_lisp_stream_calltype_exitpoint,
    lispdl_lisp_stream_calltype_termsize,
    lispdl_lisp_stream_calltype_error_close,
    lispdl_lisp_stream_calltype_error_read_byte,
    lispdl_lisp_stream_calltype_error_unread_byte,
    lispdl_lisp_stream_calltype_error_write_byte,
    lispdl_lisp_stream_calltype_error_read_char,
    lispdl_lisp_stream_calltype_error_read_hang,
    lispdl_lisp_stream_calltype_error_unread_char,
    lispdl_lisp_stream_calltype_error_write_char,
    lispdl_lisp_stream_calltype_error_getleft,
    lispdl_lisp_stream_calltype_error_setleft,
    lispdl_lisp_stream_calltype_error_inputp,
    lispdl_lisp_stream_calltype_error_outputp,
    lispdl_lisp_stream_calltype_error_interactivep,
    lispdl_lisp_stream_calltype_error_characterp,
    lispdl_lisp_stream_calltype_error_binaryp,
    lispdl_lisp_stream_calltype_error_element_type,
    lispdl_lisp_stream_calltype_error_external_format,
    lispdl_lisp_stream_calltype_error_file_length,
    lispdl_lisp_stream_calltype_error_file_position,
    lispdl_lisp_stream_calltype_error_file_position_start,
    lispdl_lisp_stream_calltype_error_file_position_end,
    lispdl_lisp_stream_calltype_error_file_position_set,
    lispdl_lisp_stream_calltype_error_file_charlen,
    lispdl_lisp_stream_calltype_error_file_strlen,
    lispdl_lisp_stream_calltype_error_listen,
    lispdl_lisp_stream_calltype_error_clear_input,
    lispdl_lisp_stream_calltype_error_finish_output,
    lispdl_lisp_stream_calltype_error_force_output,
    lispdl_lisp_stream_calltype_error_clear_output,
    lispdl_lisp_stream_calltype_error_exitpoint,
    lispdl_lisp_stream_calltype_error_termsize,

    /* extern_unicode.h */
    lispdl_lisp_eastasian_set,
    lispdl_lisp_eastasian_get,
    lispdl_lisp_eastasian_type_unicode,
    lispdl_lisp_eastasian_type_character,
    lispdl_lisp_eastasian_unicode,
    lispdl_lisp_eastasian_character_,
    lispdl_lisp_eastasian_string_,
    lispdl_lisp_eastasian_width_,
    lispdl_lisp_unicode_count,
    lispdl_lisp_utf8_encode,
    lispdl_lisp_utf16_range,
    lispdl_lisp_utf16_high,
    lispdl_lisp_utf16_low,
    lispdl_lisp_utf16_merge,

    /* End */
    lispdl_unbound,
    lispdl_end,
    lispdl_size
};

typedef void *lisp_dlfile_array[lispdl_size];

void lisp_dlfile_make(lisp_dlfile_array ptr);

#endif

/************************************************************
 *  main_init.h
 ************************************************************/
#ifndef __LISP_MAIN_INIT_HEADER__
#define __LISP_MAIN_INIT_HEADER__


extern int lisp_code;
extern int lisp_result;
extern FILE *lisp_stderr;

void lisp_init(void);
void lisp_free(void);
int lisp_alloc(size_t heap, size_t local);

int lisp_main_help(FILE *file);
int lisp_main_version_text(FILE *file);
int lisp_main_version_script(FILE *file);
int lisp_main_version(struct lispargv *ptr, FILE *file);
int lisp_main_degrade(struct lispargv *ptr);

int lisp_argv_init(struct lispargv *ptr);
int lisp_argv_run(struct lispargv *ptr);

#endif


/************************************************************
 *  stream_error.h
 ************************************************************/
#ifndef __STREAM_ERROR_HEADER__
#define __STREAM_ERROR_HEADER__


#define close_stream_error _n(close_stream_error)
#define read_byte_stream_error _n(read_byte_stream_error)
#define unread_byte_stream_error _n(unread_byte_stream_error)
#define write_byte_stream_error _n(write_byte_stream_error)
#define read_char_stream_error _n(read_char_stream_error)
#define read_hang_stream_error _n(read_hang_stream_error)
#define unread_char_stream_error _n(unread_char_stream_error)
#define write_char_stream_error _n(write_char_stream_error)
#define getleft_stream_error _n(getleft_stream_error)
#define setleft_stream_error _n(setleft_stream_error)
#define inputp_stream_error _n(inputp_stream_error)
#define outputp_stream_error _n(outputp_stream_error)
#define interactivep_stream_error _n(interactivep_stream_error)
#define characterp_stream_error _n(characterp_stream_error)
#define binaryp_stream_error _n(binaryp_stream_error)
#define element_type_stream_error _n(element_type_stream_error)
#define external_format_stream_error _n(external_format_stream_error)
#define file_length_stream_error _n(file_length_stream_error)
#define file_position_stream_error _n(file_position_stream_error)
#define file_position_start_stream_error _n(file_position_start_stream_error)
#define file_position_end_stream_error _n(file_position_end_stream_error)
#define file_position_set_stream_error _n(file_position_set_stream_error)
#define file_charlen_stream_error _n(file_charlen_stream_error)
#define file_strlen_stream_error _n(file_strlen_stream_error)
#define listen_stream_error _n(listen_stream_error)
#define clear_input_stream_error _n(clear_input_stream_error)
#define finish_output_stream_error _n(finish_output_stream_error)
#define force_output_stream_error _n(force_output_stream_error)
#define clear_output_stream_error _n(clear_output_stream_error)
#define exitpoint_stream_error _n(exitpoint_stream_error)
#define termsize_stream_error _n(termsize_stream_error)

int close_stream_error(addr pos, addr *ret);
int read_byte_stream_error(addr stream, addr *value, int *ret);
int unread_byte_stream_error(addr stream, byte c);
int write_byte_stream_error(addr stream, addr pos);
int read_char_stream_error(addr stream, unicode *c, int *ret);
int read_hang_stream_error(addr stream, unicode *c, int *hang, int *ret);
int unread_char_stream_error(addr stream, unicode c);
int write_char_stream_error(addr stream, unicode c);
int getleft_stream_error(addr stream, size_t *ret);
int setleft_stream_error(addr stream, size_t value);
int inputp_stream_error(addr stream, int *ret);
int outputp_stream_error(addr stream, int *ret);
int interactivep_stream_error(addr stream, int *ret);
int characterp_stream_error(addr stream, int *ret);
int binaryp_stream_error(addr stream, int *ret);
int element_type_stream_error(addr stream, addr *ret);
int external_format_stream_error(addr stream, addr *ret);
int file_length_stream_error(addr stream, addr *ret);
int file_position_stream_error(addr stream, size_t *value, int *ret);
int file_position_start_stream_error(addr stream, int *ret);
int file_position_end_stream_error(addr stream, int *ret);
int file_position_set_stream_error(addr stream, size_t value, int *ret);
int file_charlen_stream_error(addr stream, unicode u, size_t *value, int *ret);
int file_strlen_stream_error(addr stream, addr pos, size_t *value, int *ret);
int listen_stream_error(addr stream, int *ret);
int clear_input_stream_error(addr stream);
int finish_output_stream_error(addr stream);
int force_output_stream_error(addr stream);
int clear_output_stream_error(addr stream);
int exitpoint_stream_error(addr stream);
int termsize_stream_error(addr stream, size_t *value, int *ret);

#endif


/************************************************************
 *  stream_default.h
 ************************************************************/
#ifndef __STREAM_DEFAULT_HEADER__
#define __STREAM_DEFAULT_HEADER__


#define close_default_stream _n(close_default_stream)
#define read_char_default_stream _n(read_char_default_stream)
#define read_hang_default_stream _n(read_hang_default_stream)
#define unread_char_default_stream _n(unread_char_default_stream)
#define write_char_default_stream _n(write_char_default_stream)
#define getleft_default_stream _n(getleft_default_stream)
#define setleft_default_stream _n(setleft_default_stream)
#define charleft_default_stream _n(charleft_default_stream)
#define file_length_default_stream _n(file_length_default_stream)
#define file_position_default_stream _n(file_position_default_stream)
#define file_position_start_default_stream _n(file_position_start_default_stream)
#define file_position_end_default_stream _n(file_position_end_default_stream)
#define file_position_set_default_stream _n(file_position_set_default_stream)
#define finish_output_default_stream _n(finish_output_default_stream)
#define force_output_default_stream _n(force_output_default_stream)
#define clear_output_default_stream _n(clear_output_default_stream)
#define exitpoint_default_stream _n(exitpoint_default_stream)
#define termsize_default_stream _n(termsize_default_stream)

#define checkp_true_stream _n(checkp_true_stream)
#define checkp_false_stream _n(checkp_false_stream)
#define element_type_character_stream _n(element_type_character_stream)
#define element_type_io_stream _n(element_type_io_stream)
#define external_format_default_stream _n(external_format_default_stream)

int close_default_stream(addr stream, addr *ret);
int read_char_default_stream(addr stream, unicode *c, int *ret);
int read_hang_default_stream(addr stream, unicode *c, int *hang, int *ret);
int unread_char_default_stream(addr stream, unicode c);
int write_char_default_stream(addr stream, unicode c);
int getleft_default_stream(addr stream, size_t *ret);
int setleft_default_stream(addr stream, size_t value);
void charleft_default_stream(addr stream, unicode c);
int file_length_default_stream(addr stream, addr *ret);
int file_position_default_stream(addr stream, size_t *value, int *ret);
int file_position_start_default_stream(addr stream, int *ret);
int file_position_end_default_stream(addr stream, int *ret);
int file_position_set_default_stream(addr stream, size_t value, int *ret);
int finish_output_default_stream(addr stream);
int force_output_default_stream(addr stream);
int clear_output_default_stream(addr stream);
int exitpoint_default_stream(addr stream);
int termsize_default_stream(addr stream, size_t *value, int *ret);

int checkp_true_stream(addr stream, int *ret);
int checkp_false_stream(addr stream, int *ret);
int element_type_character_stream(addr stream, addr *ret);
int element_type_io_stream(addr stream, addr *ret);
int external_format_default_stream(addr stream, addr *ret);

#endif


/************************************************************
 *  stream_variable.h
 ************************************************************/
#ifndef __STREAM_VARIABLE_HEADER__
#define __STREAM_VARIABLE_HEADER__


#define Stream_close _n(Stream_close)
#define Stream_read_byte _n(Stream_read_byte)
#define Stream_unread_byte _n(Stream_unread_byte)
#define Stream_write_byte _n(Stream_write_byte)
#define Stream_read_char _n(Stream_read_char)
#define Stream_read_hang _n(Stream_read_hang)
#define Stream_unread_char _n(Stream_unread_char)
#define Stream_write_char _n(Stream_write_char)
#define Stream_getleft _n(Stream_getleft)
#define Stream_setleft _n(Stream_setleft)
#define Stream_inputp _n(Stream_inputp)
#define Stream_outputp _n(Stream_outputp)
#define Stream_interactivep _n(Stream_interactivep)
#define Stream_characterp _n(Stream_characterp)
#define Stream_binaryp _n(Stream_binaryp)
#define Stream_element_type _n(Stream_element_type)
#define Stream_external_format _n(Stream_external_format)
#define Stream_file_length _n(Stream_file_length)
#define Stream_file_position _n(Stream_file_position)
#define Stream_file_position_start _n(Stream_file_position_start)
#define Stream_file_position_end _n(Stream_file_position_end)
#define Stream_file_position_set _n(Stream_file_position_set)
#define Stream_file_charlen _n(Stream_file_charlen)
#define Stream_file_strlen _n(Stream_file_strlen)
#define Stream_listen _n(Stream_listen)
#define Stream_clear_input _n(Stream_clear_input)
#define Stream_finish_output _n(Stream_finish_output)
#define Stream_force_output _n(Stream_force_output)
#define Stream_clear_output _n(Stream_clear_output)
#define Stream_exitpoint _n(Stream_exitpoint)
#define Stream_termsize _n(Stream_termsize)

#define DefineStreamLet(x,y,z) Stream_##y[StreamType_##x] = y##_##z;
#define DefineStreamSet(x,y) Stream_##y[StreamType_##x] = y##_##x;
#define DefineStreamErr(x,y) Stream_##y[StreamType_##x] = y##_stream_error;
#define DefineStream___(x,y) Stream_##y[StreamType_##x] = y##_stream_error;
#define DefineStreamDef(x,y) Stream_##y[StreamType_##x] = y##_default_stream;
#define DefineStreamEql(x,y,z) Stream_##y[StreamType_##x] = z;
#define DefineStreamChk(x,y,z) Stream_##y[StreamType_##x] = checkp_##z##_stream;

#define PipeStreamArray(x,y) Stream_##y[StreamPipe_Index(StreamPipe_##x)]
#define PipeStreamLet(x,y,z) PipeStreamArray(x, y) = y##_##z;
#define PipeStreamSet(x,y) PipeStreamArray(x, y) = y##_##x;
#define PipeStreamErr(x,y) PipeStreamArray(x, y) = y##_stream_error;
#define PipeStream___(x,y) PipeStreamArray(x, y) = y##_stream_error;
#define PipeStreamDef(x,y) PipeStreamArray(x, y) = y##_default_stream;
#define PipeStreamEql(x,y,z) PipeStreamArray(x, y) = z;
#define PipeStreamChk(x,y,z) PipeStreamArray(x, y) = checkp_##z##_stream;

extern lisp_streamtype_close Stream_close[Stream_Size];
extern lisp_streamtype_read_byte Stream_read_byte[Stream_Size];
extern lisp_streamtype_unread_byte Stream_unread_byte[Stream_Size];
extern lisp_streamtype_write_byte Stream_write_byte[Stream_Size];
extern lisp_streamtype_read_char Stream_read_char[Stream_Size];
extern lisp_streamtype_read_hang Stream_read_hang[Stream_Size];
extern lisp_streamtype_unread_char Stream_unread_char[Stream_Size];
extern lisp_streamtype_write_char Stream_write_char[Stream_Size];
extern lisp_streamtype_getleft Stream_getleft[Stream_Size];
extern lisp_streamtype_setleft Stream_setleft[Stream_Size];
extern lisp_streamtype_inputp Stream_inputp[Stream_Size];
extern lisp_streamtype_outputp Stream_outputp[Stream_Size];
extern lisp_streamtype_interactivep Stream_interactivep[Stream_Size];
extern lisp_streamtype_characterp Stream_characterp[Stream_Size];
extern lisp_streamtype_binaryp Stream_binaryp[Stream_Size];
extern lisp_streamtype_element_type Stream_element_type[Stream_Size];
extern lisp_streamtype_external_format Stream_external_format[Stream_Size];
extern lisp_streamtype_file_length Stream_file_length[Stream_Size];
extern lisp_streamtype_file_position Stream_file_position[Stream_Size];
extern lisp_streamtype_file_position_start Stream_file_position_start[Stream_Size];
extern lisp_streamtype_file_position_end Stream_file_position_end[Stream_Size];
extern lisp_streamtype_file_position_set Stream_file_position_set[Stream_Size];
extern lisp_streamtype_file_charlen Stream_file_charlen[Stream_Size];
extern lisp_streamtype_file_strlen Stream_file_strlen[Stream_Size];
extern lisp_streamtype_listen Stream_listen[Stream_Size];
extern lisp_streamtype_clear_input Stream_clear_input[Stream_Size];
extern lisp_streamtype_finish_output Stream_finish_output[Stream_Size];
extern lisp_streamtype_force_output Stream_force_output[Stream_Size];
extern lisp_streamtype_clear_output Stream_clear_output[Stream_Size];
extern lisp_streamtype_exitpoint Stream_exitpoint[Stream_Size];
extern lisp_streamtype_termsize Stream_termsize[Stream_Size];

#endif


/************************************************************
 *  file_buffering.h
 ************************************************************/
#ifndef __FILE_BUFFERING_HEADER__
#define __FILE_BUFFERING_HEADER__


#define read_low_buffering _n(read_low_buffering)
#define write_low_buffering _n(write_low_buffering)
#define close_low_buffering _n(close_low_buffering)
#define flush_low_buffering _n(flush_low_buffering)
#define read_ready_low_buffering _n(read_ready_low_buffering)
#define file_length_low_buffering _n(file_length_low_buffering)
#define file_position_low_buffering _n(file_position_low_buffering)
#define file_position_start_low_buffering _n(file_position_start_low_buffering)
#define file_position_end_low_buffering _n(file_position_end_low_buffering)
#define file_position_set_low_buffering _n(file_position_set_low_buffering)

#define close_stream_buffering_ _n(close_stream_buffering_)
#define read_binary_buffering_ _n(read_binary_buffering_)
#define read_byte_buffering_ _n(read_byte_buffering_)
#define write_binary_buffering_ _n(write_binary_buffering_)
#define write_byte_buffering_ _n(write_byte_buffering_)
#define read_char_buffering_ _n(read_char_buffering_)
#define read_hang_buffering_ _n(read_hang_buffering_)
#define write_char_buffering_ _n(write_char_buffering_)
#define file_length_buffering_ _n(file_length_buffering_)
#define file_position_buffering_ _n(file_position_buffering_)
#define file_position_start_buffering_ _n(file_position_start_buffering_)
#define file_position_end_buffering_ _n(file_position_end_buffering_)
#define file_position_set_buffering_ _n(file_position_set_buffering_)
#define finish_output_buffering_ _n(finish_output_buffering_)
#define exitpoint_buffering_ _n(exitpoint_buffering_)

int read_low_buffering(filestream fm, byte *pos, size_t size, size_t *ret);
int write_low_buffering(filestream fm, const byte *pos, size_t size, size_t *ret);
int close_low_buffering(filestream fm);
int flush_low_buffering(filestream fm);
int read_ready_low_buffering(filestream fm);
int file_length_low_buffering(filestream fm, size_t *ret);
int file_position_low_buffering(filestream fm, size_t *ret);
int file_position_start_low_buffering(filestream fm);
int file_position_end_low_buffering(filestream fm);
int file_position_set_low_buffering(filestream fm, size_t pos);

int close_stream_buffering_(addr stream, addr *ret);
int read_binary_buffering_(addr stream, void *pos, size_t size, size_t *ret);
int read_byte_buffering_(addr stream, addr *value, int *ret);
int write_binary_buffering_(addr stream, const void *pos, size_t size, size_t *ret);
int write_byte_buffering_(addr stream, addr pos);
int read_char_buffering_(addr stream, unicode *c, int *ret);
int read_hang_buffering_(addr stream, unicode *c, int *hang, int *ret);
int write_char_buffering_(addr stream, unicode c);
int file_length_buffering_(addr file, size_t *value, int *ret);
int file_position_buffering_(addr file, size_t *value, int *ret);
int file_position_start_buffering_(addr stream, int *ret);
int file_position_end_buffering_(addr stream, int *ret);
int file_position_set_buffering_(addr stream, size_t value, int *ret);
int finish_output_buffering_(addr stream);
int exitpoint_buffering_(addr stream);

#endif


/************************************************************
 *  float_multi.h
 ************************************************************/
#ifndef __FLOAT_MULTI_HEADER__
#define __FLOAT_MULTI_HEADER__


#define multi_float_fs_alloc_ _n(multi_float_fs_alloc_)
#define multi_float_fd_alloc_ _n(multi_float_fd_alloc_)
#define multi_float_fl_alloc_ _n(multi_float_fl_alloc_)
#define multi_float_fs_local_ _n(multi_float_fs_local_)
#define multi_float_fd_local_ _n(multi_float_fd_local_)
#define multi_float_fl_local_ _n(multi_float_fl_local_)
#define multi_float_fs_heap_ _n(multi_float_fs_heap_)
#define multi_float_fd_heap_ _n(multi_float_fd_heap_)
#define multi_float_fl_heap_ _n(multi_float_fl_heap_)
#define multi_float_bs_alloc_ _n(multi_float_bs_alloc_)
#define multi_float_bd_alloc_ _n(multi_float_bd_alloc_)
#define multi_float_bl_alloc_ _n(multi_float_bl_alloc_)
#define multi_float_bs_local_ _n(multi_float_bs_local_)
#define multi_float_bd_local_ _n(multi_float_bd_local_)
#define multi_float_bl_local_ _n(multi_float_bl_local_)
#define multi_float_bs_heap_ _n(multi_float_bs_heap_)
#define multi_float_bd_heap_ _n(multi_float_bd_heap_)
#define multi_float_bl_heap_ _n(multi_float_bl_heap_)
#define multi_float_rs_alloc_ _n(multi_float_rs_alloc_)
#define multi_float_rd_alloc_ _n(multi_float_rd_alloc_)
#define multi_float_rl_alloc_ _n(multi_float_rl_alloc_)
#define multi_float_rs_local_ _n(multi_float_rs_local_)
#define multi_float_rd_local_ _n(multi_float_rd_local_)
#define multi_float_rl_local_ _n(multi_float_rl_local_)
#define multi_float_rs_heap_ _n(multi_float_rs_heap_)
#define multi_float_rd_heap_ _n(multi_float_rd_heap_)
#define multi_float_rl_heap_ _n(multi_float_rl_heap_)
#define multi_float_ss_alloc_ _n(multi_float_ss_alloc_)
#define multi_float_sd_alloc_ _n(multi_float_sd_alloc_)
#define multi_float_sl_alloc_ _n(multi_float_sl_alloc_)
#define multi_float_ds_alloc_ _n(multi_float_ds_alloc_)
#define multi_float_dd_alloc_ _n(multi_float_dd_alloc_)
#define multi_float_dl_alloc_ _n(multi_float_dl_alloc_)
#define multi_float_ls_alloc_ _n(multi_float_ls_alloc_)
#define multi_float_ld_alloc_ _n(multi_float_ld_alloc_)
#define multi_float_ll_alloc_ _n(multi_float_ll_alloc_)
#define multi_float_ss_local_ _n(multi_float_ss_local_)
#define multi_float_sd_local_ _n(multi_float_sd_local_)
#define multi_float_sl_local_ _n(multi_float_sl_local_)
#define multi_float_ds_local_ _n(multi_float_ds_local_)
#define multi_float_dd_local_ _n(multi_float_dd_local_)
#define multi_float_dl_local_ _n(multi_float_dl_local_)
#define multi_float_ls_local_ _n(multi_float_ls_local_)
#define multi_float_ld_local_ _n(multi_float_ld_local_)
#define multi_float_ll_local_ _n(multi_float_ll_local_)
#define multi_float_ss_heap_ _n(multi_float_ss_heap_)
#define multi_float_sd_heap_ _n(multi_float_sd_heap_)
#define multi_float_sl_heap_ _n(multi_float_sl_heap_)
#define multi_float_ds_heap_ _n(multi_float_ds_heap_)
#define multi_float_dd_heap_ _n(multi_float_dd_heap_)
#define multi_float_dl_heap_ _n(multi_float_dl_heap_)
#define multi_float_ls_heap_ _n(multi_float_ls_heap_)
#define multi_float_ld_heap_ _n(multi_float_ld_heap_)
#define multi_float_ll_heap_ _n(multi_float_ll_heap_)
#define inverse_single_float_alloc_ _n(inverse_single_float_alloc_)
#define inverse_double_float_alloc_ _n(inverse_double_float_alloc_)
#define inverse_long_float_alloc_ _n(inverse_long_float_alloc_)
#define inverse_single_float_local_ _n(inverse_single_float_local_)
#define inverse_double_float_local_ _n(inverse_double_float_local_)
#define inverse_long_float_local_ _n(inverse_long_float_local_)
#define inverse_single_float_heap_ _n(inverse_single_float_heap_)
#define inverse_double_float_heap_ _n(inverse_double_float_heap_)
#define inverse_long_float_heap_ _n(inverse_long_float_heap_)
#define div_float_fs_alloc_ _n(div_float_fs_alloc_)
#define div_float_fd_alloc_ _n(div_float_fd_alloc_)
#define div_float_fl_alloc_ _n(div_float_fl_alloc_)
#define div_float_fs_local_ _n(div_float_fs_local_)
#define div_float_fd_local_ _n(div_float_fd_local_)
#define div_float_fl_local_ _n(div_float_fl_local_)
#define div_float_fs_heap_ _n(div_float_fs_heap_)
#define div_float_fd_heap_ _n(div_float_fd_heap_)
#define div_float_fl_heap_ _n(div_float_fl_heap_)
#define div_float_sf_alloc_ _n(div_float_sf_alloc_)
#define div_float_df_alloc_ _n(div_float_df_alloc_)
#define div_float_lf_alloc_ _n(div_float_lf_alloc_)
#define div_float_sf_local_ _n(div_float_sf_local_)
#define div_float_df_local_ _n(div_float_df_local_)
#define div_float_lf_local_ _n(div_float_lf_local_)
#define div_float_sf_heap_ _n(div_float_sf_heap_)
#define div_float_df_heap_ _n(div_float_df_heap_)
#define div_float_lf_heap_ _n(div_float_lf_heap_)
#define div_float_bs_alloc_ _n(div_float_bs_alloc_)
#define div_float_bd_alloc_ _n(div_float_bd_alloc_)
#define div_float_bl_alloc_ _n(div_float_bl_alloc_)
#define div_float_bs_local_ _n(div_float_bs_local_)
#define div_float_bd_local_ _n(div_float_bd_local_)
#define div_float_bl_local_ _n(div_float_bl_local_)
#define div_float_bs_heap_ _n(div_float_bs_heap_)
#define div_float_bd_heap_ _n(div_float_bd_heap_)
#define div_float_bl_heap_ _n(div_float_bl_heap_)
#define div_float_sb_alloc_ _n(div_float_sb_alloc_)
#define div_float_db_alloc_ _n(div_float_db_alloc_)
#define div_float_lb_alloc_ _n(div_float_lb_alloc_)
#define div_float_sb_local_ _n(div_float_sb_local_)
#define div_float_db_local_ _n(div_float_db_local_)
#define div_float_lb_local_ _n(div_float_lb_local_)
#define div_float_sb_heap_ _n(div_float_sb_heap_)
#define div_float_db_heap_ _n(div_float_db_heap_)
#define div_float_lb_heap_ _n(div_float_lb_heap_)
#define div_float_rs_alloc_ _n(div_float_rs_alloc_)
#define div_float_rd_alloc_ _n(div_float_rd_alloc_)
#define div_float_rl_alloc_ _n(div_float_rl_alloc_)
#define div_float_rs_local_ _n(div_float_rs_local_)
#define div_float_rd_local_ _n(div_float_rd_local_)
#define div_float_rl_local_ _n(div_float_rl_local_)
#define div_float_rs_heap_ _n(div_float_rs_heap_)
#define div_float_rd_heap_ _n(div_float_rd_heap_)
#define div_float_rl_heap_ _n(div_float_rl_heap_)
#define div_float_sr_alloc_ _n(div_float_sr_alloc_)
#define div_float_dr_alloc_ _n(div_float_dr_alloc_)
#define div_float_lr_alloc_ _n(div_float_lr_alloc_)
#define div_float_sr_local_ _n(div_float_sr_local_)
#define div_float_dr_local_ _n(div_float_dr_local_)
#define div_float_lr_local_ _n(div_float_lr_local_)
#define div_float_sr_heap_ _n(div_float_sr_heap_)
#define div_float_dr_heap_ _n(div_float_dr_heap_)
#define div_float_lr_heap_ _n(div_float_lr_heap_)
#define div_float_ss_alloc_ _n(div_float_ss_alloc_)
#define div_float_sd_alloc_ _n(div_float_sd_alloc_)
#define div_float_sl_alloc_ _n(div_float_sl_alloc_)
#define div_float_ds_alloc_ _n(div_float_ds_alloc_)
#define div_float_dd_alloc_ _n(div_float_dd_alloc_)
#define div_float_dl_alloc_ _n(div_float_dl_alloc_)
#define div_float_ls_alloc_ _n(div_float_ls_alloc_)
#define div_float_ld_alloc_ _n(div_float_ld_alloc_)
#define div_float_ll_alloc_ _n(div_float_ll_alloc_)
#define div_float_ss_local_ _n(div_float_ss_local_)
#define div_float_sd_local_ _n(div_float_sd_local_)
#define div_float_sl_local_ _n(div_float_sl_local_)
#define div_float_ds_local_ _n(div_float_ds_local_)
#define div_float_dd_local_ _n(div_float_dd_local_)
#define div_float_dl_local_ _n(div_float_dl_local_)
#define div_float_ls_local_ _n(div_float_ls_local_)
#define div_float_ld_local_ _n(div_float_ld_local_)
#define div_float_ll_local_ _n(div_float_ll_local_)
#define div_float_ss_heap_ _n(div_float_ss_heap_)
#define div_float_sd_heap_ _n(div_float_sd_heap_)
#define div_float_sl_heap_ _n(div_float_sl_heap_)
#define div_float_ds_heap_ _n(div_float_ds_heap_)
#define div_float_dd_heap_ _n(div_float_dd_heap_)
#define div_float_dl_heap_ _n(div_float_dl_heap_)
#define div_float_ls_heap_ _n(div_float_ls_heap_)
#define div_float_ld_heap_ _n(div_float_ld_heap_)
#define div_float_ll_heap_ _n(div_float_ll_heap_)

int multi_float_fs_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_fd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_fl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_fs_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_fd_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_fl_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_fs_heap_(addr left, addr right, addr *ret);
int multi_float_fd_heap_(addr left, addr right, addr *ret);
int multi_float_fl_heap_(addr left, addr right, addr *ret);
#define multi_float_sf_alloc_(m,a,b,r) multi_float_fs_alloc_((m),(b),(a),(r))
#define multi_float_df_alloc_(m,a,b,r) multi_float_fd_alloc_((m),(b),(a),(r))
#define multi_float_lf_alloc_(m,a,b,r) multi_float_fl_alloc_((m),(b),(a),(r))
#define multi_float_sf_local_(m,a,b,r) multi_float_fs_local_((m),(b),(a),(r))
#define multi_float_df_local_(m,a,b,r) multi_float_fd_local_((m),(b),(a),(r))
#define multi_float_lf_local_(m,a,b,r) multi_float_fl_local_((m),(b),(a),(r))
#define multi_float_sf_heap_(a,b,r) multi_float_fs_heap_((b),(a),(r))
#define multi_float_df_heap_(a,b,r) multi_float_fd_heap_((b),(a),(r))
#define multi_float_lf_heap_(a,b,r) multi_float_fl_heap_((b),(a),(r))

int multi_float_bs_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_bd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_bl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_bs_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_bd_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_bl_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_bs_heap_(addr left, addr right, addr *ret);
int multi_float_bd_heap_(addr left, addr right, addr *ret);
int multi_float_bl_heap_(addr left, addr right, addr *ret);
#define multi_float_sb_alloc_(m,a,b,r) multi_float_bs_alloc_((m),(b),(a),(r))
#define multi_float_db_alloc_(m,a,b,r) multi_float_bd_alloc_((m),(b),(a),(r))
#define multi_float_lb_alloc_(m,a,b,r) multi_float_bl_alloc_((m),(b),(a),(r))
#define multi_float_sb_local_(m,a,b,r) multi_float_bs_local_((m),(b),(a),(r))
#define multi_float_db_local_(m,a,b,r) multi_float_bd_local_((m),(b),(a),(r))
#define multi_float_lb_local_(m,a,b,r) multi_float_bl_local_((m),(b),(a),(r))
#define multi_float_sb_heap_(a,b,r) multi_float_bs_heap_((b),(a),(r))
#define multi_float_db_heap_(a,b,r) multi_float_bd_heap_((b),(a),(r))
#define multi_float_lb_heap_(a,b,r) multi_float_bl_heap_((b),(a),(r))

int multi_float_rs_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_rd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_rl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_rs_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_rd_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_rl_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_rs_heap_(addr left, addr right, addr *ret);
int multi_float_rd_heap_(addr left, addr right, addr *ret);
int multi_float_rl_heap_(addr left, addr right, addr *ret);
#define multi_float_sr_alloc_(m,a,b,r) multi_float_rs_alloc_((m),(b),(a),(r))
#define multi_float_dr_alloc_(m,a,b,r) multi_float_rd_alloc_((m),(b),(a),(r))
#define multi_float_lr_alloc_(m,a,b,r) multi_float_rl_alloc_((m),(b),(a),(r))
#define multi_float_sr_local_(m,a,b,r) multi_float_rs_local_((m),(b),(a),(r))
#define multi_float_dr_local_(m,a,b,r) multi_float_rd_local_((m),(b),(a),(r))
#define multi_float_lr_local_(m,a,b,r) multi_float_rl_local_((m),(b),(a),(r))
#define multi_float_sr_heap_(a,b,r) multi_float_rs_heap_((b),(a),(r))
#define multi_float_dr_heap_(a,b,r) multi_float_rd_heap_((b),(a),(r))
#define multi_float_lr_heap_(a,b,r) multi_float_rl_heap_((b),(a),(r))

int multi_float_ss_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_sd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_sl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_ds_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_dd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_dl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_ls_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_ld_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_ll_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_ss_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_sd_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_sl_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_ds_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_dd_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_dl_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_ls_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_ld_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_ll_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_float_ss_heap_(addr left, addr right, addr *ret);
int multi_float_sd_heap_(addr left, addr right, addr *ret);
int multi_float_sl_heap_(addr left, addr right, addr *ret);
int multi_float_ds_heap_(addr left, addr right, addr *ret);
int multi_float_dd_heap_(addr left, addr right, addr *ret);
int multi_float_dl_heap_(addr left, addr right, addr *ret);
int multi_float_ls_heap_(addr left, addr right, addr *ret);
int multi_float_ld_heap_(addr left, addr right, addr *ret);
int multi_float_ll_heap_(addr left, addr right, addr *ret);

int inverse_single_float_alloc_(LocalRoot local, addr pos, addr *ret);
int inverse_double_float_alloc_(LocalRoot local, addr pos, addr *ret);
int inverse_long_float_alloc_(LocalRoot local, addr pos, addr *ret);
int inverse_single_float_local_(LocalRoot local, addr pos, addr *ret);
int inverse_double_float_local_(LocalRoot local, addr pos, addr *ret);
int inverse_long_float_local_(LocalRoot local, addr pos, addr *ret);
int inverse_single_float_heap_(addr pos, addr *ret);
int inverse_double_float_heap_(addr pos, addr *ret);
int inverse_long_float_heap_(addr pos, addr *ret);

int div_float_fs_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_fd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_fl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_fs_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_fd_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_fl_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_fs_heap_(addr left, addr right, addr *ret);
int div_float_fd_heap_(addr left, addr right, addr *ret);
int div_float_fl_heap_(addr left, addr right, addr *ret);

int div_float_sf_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_df_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_lf_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_sf_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_df_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_lf_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_sf_heap_(addr left, addr right, addr *ret);
int div_float_df_heap_(addr left, addr right, addr *ret);
int div_float_lf_heap_(addr left, addr right, addr *ret);

int div_float_bs_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_bd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_bl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_bs_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_bd_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_bl_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_bs_heap_(addr left, addr right, addr *ret);
int div_float_bd_heap_(addr left, addr right, addr *ret);
int div_float_bl_heap_(addr left, addr right, addr *ret);

int div_float_sb_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_db_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_lb_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_sb_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_db_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_lb_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_sb_heap_(addr left, addr right, addr *ret);
int div_float_db_heap_(addr left, addr right, addr *ret);
int div_float_lb_heap_(addr left, addr right, addr *ret);

int div_float_rs_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_rd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_rl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_rs_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_rd_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_rl_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_rs_heap_(addr left, addr right, addr *ret);
int div_float_rd_heap_(addr left, addr right, addr *ret);
int div_float_rl_heap_(addr left, addr right, addr *ret);

int div_float_sr_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_dr_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_lr_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_sr_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_dr_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_lr_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_sr_heap_(addr left, addr right, addr *ret);
int div_float_dr_heap_(addr left, addr right, addr *ret);
int div_float_lr_heap_(addr left, addr right, addr *ret);

int div_float_ss_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_sd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_sl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_ds_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_dd_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_dl_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_ls_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_ld_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_ll_alloc_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_ss_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_sd_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_sl_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_ds_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_dd_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_dl_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_ls_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_ld_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_ll_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_float_ss_heap_(addr left, addr right, addr *ret);
int div_float_sd_heap_(addr left, addr right, addr *ret);
int div_float_sl_heap_(addr left, addr right, addr *ret);
int div_float_ds_heap_(addr left, addr right, addr *ret);
int div_float_dd_heap_(addr left, addr right, addr *ret);
int div_float_dl_heap_(addr left, addr right, addr *ret);
int div_float_ls_heap_(addr left, addr right, addr *ret);
int div_float_ld_heap_(addr left, addr right, addr *ret);
int div_float_ll_heap_(addr left, addr right, addr *ret);

#endif


/************************************************************
 *  format_float.h
 ************************************************************/
/*
 *  Common-Lisp Floating-point fomatter
 *      ~F  Fixed floating-point
 *      ~E  Exponential floating-point
 *      ~G  General floating-point
 */
#ifndef __FMTFLOAT_HEADER__
#define __FMTFLOAT_HEADER__

#define fmtfloat_write_char_ _n(fmtfloat_write_char_)
#define fmtfloat_print_ascii_ _n(fmtfloat_print_ascii_)
#define fmtdecimal_zerop _n(fmtdecimal_zerop)
#define fmtdecimal_round _n(fmtdecimal_round)
#define fmtdecimal_single_float _n(fmtdecimal_single_float)
#define fmtdecimal_double_float _n(fmtdecimal_double_float)
#define fmtdecimal_long_float _n(fmtdecimal_long_float)
#define fmtdecimal_dump _n(fmtdecimal_dump)
#define fmtfloat_fixed_ _n(fmtfloat_fixed_)
#define fmtfloat_exponent_ _n(fmtfloat_exponent_)
#define fmtfloat_general_ _n(fmtfloat_general_)
#define fmtfloat_monetary_ _n(fmtfloat_monetary_)
#define fmtfloat_princ_single_float_ _n(fmtfloat_princ_single_float_)
#define fmtfloat_princ_double_float_ _n(fmtfloat_princ_double_float_)
#define fmtfloat_princ_long_float_ _n(fmtfloat_princ_long_float_)


#define FMTFLOAT_ROUND_PARAMETER -1
/* float (32bit) fraction: 23+1 bit */
#define FMTFLOAT_ROUND_SINGLE   (8 + FMTFLOAT_ROUND_PARAMETER)
/* double (64bit) fraction: 52+1 bit */
#define FMTFLOAT_ROUND_DOUBLE   (16 + FMTFLOAT_ROUND_PARAMETER)
/* long double (Intel 80bit) fraction: 63+0 bit */
#if defined(LISP_FLOAT_LONG_80)
#define FMTFLOAT_ROUND_LONG     (19 + FMTFLOAT_ROUND_PARAMETER)
/* long double (IEEE-754 binary128) fraction: 112+1 bit */
#elif defined(LISP_FLOAT_LONG_128)
#define FMTFLOAT_ROUND_LONG     (35 + FMTFLOAT_ROUND_PARAMETER)
/* long double (Visual C++ 64bit) */
#else
#define FMTFLOAT_ROUND_LONG     FMTFLOAT_ROUND_DOUBLE
#endif


/*****************************************************************************
 *  fmtdecimal
 *****************************************************************************/
/*
 *    32bit: sX.[fraction]es[exponent] 1+1+1+ 8+1+1+2 + null  = 16
 *    64bit: sX.[fraction]es[exponent] 1+1+1+16+1+1+3 + null  = 25
 *   128bit: sX.[fraction]es[exponent] 1+1+1+35+1+1+4 + null  = 45
 *     -> 64byte
 */
#define FMTDECIMAL_FRACTION      64
#define FMTDECIMAL_EXPONENT      8

struct fmtdecimal_struct {
	unsigned sign : 1;    /* minus sign */
	unsigned size;
	fixnum exponent;
	byte fraction[FMTDECIMAL_FRACTION];
};

typedef struct fmtdecimal_struct *fmtdecimal;

int fmtdecimal_zerop(fmtdecimal str);
int fmtdecimal_round(fmtdecimal str, unsigned i);
int fmtdecimal_single_float(fmtdecimal str, single_float value, int round);
int fmtdecimal_double_float(fmtdecimal str, double_float value, int round);
int fmtdecimal_long_float(fmtdecimal str, long_float value, int round);
void fmtdecimal_dump(FILE *file, fmtdecimal str);


/*****************************************************************************
 *  fmtfloat
 *****************************************************************************/
struct fmtfloat_struct {
	unsigned sign : 1;
	unsigned signbit : 1;
	unsigned sign_exponent : 1;
	unsigned wp : 1;
	unsigned dp : 1;
	unsigned ep : 1;
	unsigned np : 1;
	unsigned overflowp : 1;
	unsigned markerp : 1;
	fixnum k, k_bias;
	unicode overflow, pad, marker;
	size_t w, d, e, n;
	union fmtfloat_union {
		single_float value_single;
		double_float value_double;
		long_float value_long;
	} u;
};

typedef struct fmtfloat_struct *fmtfloat;

int fmtfloat_fixed_(addr stream, fmtfloat fmt, fmtdecimal dec);
int fmtfloat_exponent_(addr stream, fmtfloat fmt, fmtdecimal dec);
int fmtfloat_general_(addr stream, fmtfloat fmt, fmtdecimal dec);
int fmtfloat_monetary_(addr stream, fmtfloat fmt, fmtdecimal dec);


/*****************************************************************************
 *  princ / prin1
 *****************************************************************************/
int fmtfloat_princ_single_float_(addr stream,
		single_float value, int markerp, unicode marker, int *ret);
int fmtfloat_princ_double_float_(addr stream,
		double_float value, int markerp, unicode marker, int *ret);
int fmtfloat_princ_long_float_(addr stream,
		long_float value, int markerp, unicode marker, int *ret);

/* debug */
#define fmtfloat_fixed_float_ _n(fmtfloat_fixed_float_)
#define fmtfloat_fixed_double_ _n(fmtfloat_fixed_double_)
#define fmtfloat_exponent_float_ _n(fmtfloat_exponent_float_)
#define fmtfloat_exponent_double_ _n(fmtfloat_exponent_double_)

int fmtfloat_fixed_float_(addr stream, single_float value,
		int sign,
		fixnum w, fixnum d, fixnum k,
		unicode overflow, unicode pad);
int fmtfloat_fixed_double_(addr stream, double_float value,
		int sign,
		fixnum w, fixnum d, fixnum k,
		unicode overflow, unicode pad);
int fmtfloat_exponent_float_(addr stream, single_float value,
		int sign, fixnum w,
		fixnum d, fixnum e, fixnum k,
		unicode overflow, unicode pad, unicode exponent);
int fmtfloat_exponent_double_(addr stream, double_float value,
		int sign, fixnum w,
		fixnum d, fixnum e, fixnum k,
		unicode overflow, unicode pad, unicode exponent);

#endif


/************************************************************
 *  format_typedef.h
 ************************************************************/
#ifndef __FORMAT_TYPEDEF_HEADER__
#define __FORMAT_TYPEDEF_HEADER__


enum FormatType {
	FormatType_Error = 0,
	FormatType_End,
	FormatType_Format,
	FormatType_Output,              /* text */
	FormatType_Aesthetic,           /* A */
	FormatType_Standard,            /* S */
	FormatType_Binary,              /* B */
	FormatType_Octal,               /* O */
	FormatType_Decimal,             /* D */
	FormatType_Hexadecimal,         /* X */
	FormatType_Radix,               /* R */
	FormatType_RadixText,           /* R */
	FormatType_Plural,              /* P */
	FormatType_Character,           /* C */
	FormatType_Fixed,               /* F */
	FormatType_Exponential,         /* E */
	FormatType_General,             /* G */
	FormatType_Monetary,            /* $ */
	FormatType_Newline,             /* % */
	FormatType_FreshLine,           /* & */
	FormatType_Page,                /* | */
	FormatType_Tilde,               /* ~ */
	FormatType_IgnoredNewline,      /* \n */
	FormatType_Tabulate,            /* T */
	FormatType_GoTo,                /* * */
	FormatType_Recursive,           /* ? */
	FormatType_ConditionalNewline,  /* _ */
	FormatType_Write,               /* W */
	FormatType_Indent,              /* I */
	FormatType_Case,                /* () */
	FormatType_Condition,           /* [] */
	FormatType_Iteration,           /* {} */
	FormatType_Justification,       /* <> */
	FormatType_LogicalBlock,        /* <> */
	FormatType_EscapeUpward,        /* ^ */
	FormatType_ClauseSeparator,     /* ; */
	FormatType_CallFunction,        /* / */
	FormatType_size
};

enum fmtargs_type {
	fmtargs_nil,
	fmtargs_integer,
	fmtargs_character,
	fmtargs_argument,
	fmtargs_count,
	fmtargs_index,
	fmtargs_size
};

union format_union {
	unicode character;
	fixnum value;
	size_t index;
};

struct format_argument {
	enum fmtargs_type type;
	size_t position;
	union format_union u;
};

struct format_operator {
	enum FormatType type;
	size_t size;
	unsigned colon : 1;
	unsigned atsign : 1;
	unsigned close_colon : 1;
	unsigned close_atsign : 1;
	unsigned option_check : 1;
	unsigned prefix : 1;
	unsigned suffix : 1;
	size_t args_size;
	size_t position, colon_pos, atsign_pos;
};

#endif


/************************************************************
 *  format_print.h
 ************************************************************/
#ifndef __FORMAT_PRINT_HEADER__
#define __FORMAT_PRINT_HEADER__


#define fmtprint_abort_ _n(fmtprint_abort_)
#define fmtprop_abort_ _n(fmtprop_abort_)
#define fmtprint_operator _n(fmtprint_operator)
#define fmtprint_make _n(fmtprint_make)
#define fmtprint_copy _n(fmtprint_copy)
#define fmtprint_make_string_ _n(fmtprint_make_string_)
#define fmtprint_stream_ _n(fmtprint_stream_)
#define fmtprint_stream_output_ _n(fmtprint_stream_output_)
#define fmtprint_putc_ _n(fmtprint_putc_)
#define fmtprint_putc_times_ _n(fmtprint_putc_times_)
#define fmtprint_string_ _n(fmtprint_string_)
#define fmtprint_pop_ _n(fmtprint_pop_)
#define fmtprint_peek_ _n(fmtprint_peek_)
#define fmtprint_forward_ _n(fmtprint_forward_)
#define fmtprint_absolute_ _n(fmtprint_absolute_)
#define fmtprint_rollback_ _n(fmtprint_rollback_)
#define fmtprint_clear_ _n(fmtprint_clear_)

/*
 *  fmtprint
 */
struct fmtstack {
	addr root;
	addr front;
	size_t index;
};

enum fmtcase {
	fmtcase_normal,
	fmtcase_upcase,
	fmtcase_downcase,
	fmtcase_capitalize_all,
	fmtcase_capitalize_first
};

struct fmtprint_struct {
	unsigned delete_space : 1;
	unsigned loop_colon : 1;
	unsigned loop : 1;
	unsigned word : 1;
	unsigned first : 1;
	unsigned last : 1;
	unsigned escape : 1;
	unsigned pretty : 1;
	unsigned fill : 1;
	unsigned fill_white : 1;
	unsigned fill_ignore : 1;
	enum fmtcase conversion : 4; /* signed */
	Execute ptr;
	LocalRoot local;
	addr stream, format, string;
	struct fmtstack *rest;
	size_t now;
};

typedef struct fmtprint_struct *fmtprint;


/*
 *  function
 */
int fmtprint_abort_(fmtprint print, size_t index, const char *str, ...);
int fmtprop_abort_(fmtprint print,
		struct format_operator *fmt, const char *str, ...);

struct format_operator *fmtprint_operator(fmtprint print);
void fmtprint_make(fmtprint print, Execute ptr, addr stream, addr format);
void fmtprint_copy(fmtprint print, fmtprint src);
int fmtprint_make_string_(fmtprint print, addr *ret, addr *backup);
int fmtprint_stream_(fmtprint print, addr *ret);
int fmtprint_stream_output_(fmtprint print);

int fmtprint_putc_(fmtprint print, unicode u);
int fmtprint_putc_times_(fmtprint print, unicode c, size_t size);
int fmtprint_string_(fmtprint print, addr string);
int fmtprint_pop_(fmtprint print, struct format_operator *str, addr *ret);
int fmtprint_peek_(fmtprint print, struct format_operator *str, addr *ret);
int fmtprint_forward_(fmtprint print, struct format_operator *str, size_t n);
int fmtprint_absolute_(fmtprint print, struct format_operator *str, size_t n);
int fmtprint_rollback_(fmtprint print, struct format_operator *str, size_t n);
int fmtprint_clear_(fmtprint print);

#endif


/************************************************************
 *  format_radix.h
 ************************************************************/
#ifndef __FORMAT_RADIX_HEADER__
#define __FORMAT_RADIX_HEADER__


#define english_integer_ _n(english_integer_)
#define english_unit_heap_ _n(english_unit_heap_)
#define english_unit_local_ _n(english_unit_local_)
#define roma_integer_ _n(roma_integer_)

int english_integer_(LocalRoot local, addr stream, addr pos, int cardinal);
int english_unit_heap_(LocalRoot local, addr *ret, addr pos, int cardinal);
int english_unit_local_(LocalRoot local, addr *ret, addr pos, int cardinal);
int roma_integer_(addr stream, fixnum value, int subp);

#endif


/************************************************************
 *  stream_pretty.h
 ************************************************************/
#ifndef __STREAM_PRETTY_HEADER__
#define __STREAM_PRETTY_HEADER__


#define open_pretty_stream_ _n(open_pretty_stream_)
#define setlistp_pretty_stream _n(setlistp_pretty_stream)
#define listp_pretty_stream _n(listp_pretty_stream)
#define setdiscard_pretty_stream _n(setdiscard_pretty_stream)
#define discard_pretty_stream _n(discard_pretty_stream)
#define length_pretty_stream_ _n(length_pretty_stream_)
#define first_pretty_stream_ _n(first_pretty_stream_)
#define stream_pretty_stream _n(stream_pretty_stream)
#define gensym_pretty_stream_ _n(gensym_pretty_stream_)
#define root_pretty_stream_ _n(root_pretty_stream_)
#define setroot_pretty_stream_ _n(setroot_pretty_stream_)
#define object_pretty_stream_ _n(object_pretty_stream_)
#define prefix_pretty_stream _n(prefix_pretty_stream)
#define perline_pretty_stream _n(perline_pretty_stream)
#define suffix_pretty_stream _n(suffix_pretty_stream)
#define result_pretty_stream _n(result_pretty_stream)
#define sharp_pretty_stream _n(sharp_pretty_stream)
#define setsharp_pretty_stream _n(setsharp_pretty_stream)
#define setdepth_pretty_stream _n(setdepth_pretty_stream)
#define close_pretty_stream_ _n(close_pretty_stream_)
#define close_pretty_stream_unwind_protect_ _n(close_pretty_stream_unwind_protect_)
#define push_pretty_stream_ _n(push_pretty_stream_)
#define pop_pretty_stream_ _n(pop_pretty_stream_)
#define push_pretty_stream_p _n(push_pretty_stream_p)
#define call_pretty_stream _n(call_pretty_stream)
#define init_stream_pretty _n(init_stream_pretty)

/* pretty-stream object */
int open_pretty_stream_(Execute ptr, addr *ret,
		addr stream, addr root, addr prefix, addr perline, addr suffix);
void setlistp_pretty_stream(addr stream, int value);
int listp_pretty_stream(addr stream);
void setdiscard_pretty_stream(addr stream, int value);
int discard_pretty_stream(addr stream);
int length_pretty_stream_(addr stream, size_t *ret);
int first_pretty_stream_(addr stream, int *ret);
void stream_pretty_stream(addr stream, addr *ret);
int gensym_pretty_stream_(addr stream, addr *ret);
int root_pretty_stream_(addr stream, addr *ret);
int setroot_pretty_stream_(addr stream, addr value);
int object_pretty_stream_(addr stream, addr *ret);
void prefix_pretty_stream(addr stream, addr *ret);
void perline_pretty_stream(addr stream, addr *ret);
void suffix_pretty_stream(addr stream, addr *ret);
void result_pretty_stream(addr stream, addr *ret);
void sharp_pretty_stream(addr stream, addr *ret);
void setsharp_pretty_stream(addr stream, addr value);
/* pretty-stream function */
void setdepth_pretty_stream(Execute ptr, addr stream, size_t inc);
int close_pretty_stream_(Execute ptr, addr stream);
int close_pretty_stream_unwind_protect_(Execute ptr, addr stream);
int push_pretty_stream_(addr stream, addr pos);
int pop_pretty_stream_(addr stream, addr *value, int *ret);
int push_pretty_stream_p(addr stream);
int call_pretty_stream(Execute ptr, addr stream, addr call);
/* stream function */
void init_stream_pretty(void);

#endif


/************************************************************
 *  gc_execute.h
 ************************************************************/
#ifndef __GC_EXECUTE_HEADER__
#define __GC_EXECUTE_HEADER__


#define gcexec_full _n(gcexec_full)
#define gcexec_partial _n(gcexec_partial)

void gcexec_full(void);
void gcexec_partial(void);

#endif


/************************************************************
 *  gc_check.h
 ************************************************************/
#ifndef __GC_CHECK_HEADER__
#define __GC_CHECK_HEADER__


#define heap_check _n(heap_check)
void heap_check(void);

#endif


/************************************************************
 *  package_bittype.h
 ************************************************************/
#ifndef __PACKAGE_BITTYPE_HEADER__
#define __PACKAGE_BITTYPE_HEADER__


#define make_bitpackage_symbol _n(make_bitpackage_symbol)
#define internbitpackage _n(internbitpackage)
#define importbitpackage _n(importbitpackage)
#define inheritedbitpackage _n(inheritedbitpackage)
#define shadowintern_bitpackage _n(shadowintern_bitpackage)
#define shadowimport_bitpackage _n(shadowimport_bitpackage)
#define intern_bitpackage_ _n(intern_bitpackage_)
#define find_bitpackage_ _n(find_bitpackage_)
#define find_char_bitpackage_ _n(find_char_bitpackage_)

struct bittype_struct {
	unsigned base : 1;
	unsigned expt : 1;
	unsigned import : 1;
	unsigned inherit : 1;
	unsigned shadow : 1;
	enum PACKAGE_TYPE intern;
};

#define PtrBitTypeBody(x) PtrBodySSa(x, 1)
#define StructBitType(x) ((struct bittype_struct *)PtrBitTypeBody(x))
#define GetBitTypeSymbol(x,y) GetArraySS((x), 0, (y))
#define SetBitTypeSymbol(x,y) SetArraySS((x), 0, (y))

#define GetBitTypeIntern(x,y) (*(y) = StructBitType(x)->intern)
#define GetBitTypeBase(x,y) (*(y) = StructBitType(x)->base)
#define GetBitTypeExport(x,y) (*(y) = StructBitType(x)->expt)
#define GetBitTypeImport(x,y) (*(y) = StructBitType(x)->import)
#define GetBitTypeInherit(x,y) (*(y) = StructBitType(x)->inherit)
#define GetBitTypeShadow(x,y) (*(y) = StructBitType(x)->shadow)

#define SetBitTypeIntern(x,y) (StructBitType(x)->intern = (y))
#define SetBitTypeBase(x,y) (StructBitType(x)->base = (y))
#define SetBitTypeExport(x,y) (StructBitType(x)->expt = (y))
#define SetBitTypeImport(x,y) (StructBitType(x)->import = (y))
#define SetBitTypeInherit(x,y) (StructBitType(x)->inherit = (y))
#define SetBitTypeShadow(x,y) (StructBitType(x)->shadow = (y))

void make_bitpackage_symbol(addr *ret, addr *symbol, addr name, addr package);
void internbitpackage(addr *ret, addr symbol);
void importbitpackage(addr *ret, addr symbol);
void inheritedbitpackage(addr *ret, addr symbol);
void shadowintern_bitpackage(addr bit, addr name, addr package);
void shadowimport_bitpackage(addr bit, addr symbol);
int intern_bitpackage_(addr package, addr name, addr *value, int *ret);
int find_bitpackage_(addr package, addr name, addr *ret);
int find_char_bitpackage_(addr package, const char *name, addr *ret);

#endif


/************************************************************
 *  make_queue.h
 ************************************************************/
#ifndef __MAKE_QUEUE_HEADER__
#define __MAKE_QUEUE_HEADER__


#define code_queue_local _n(code_queue_local)
#define code_queue_mode _n(code_queue_mode)
#define code_queue_setp _n(code_queue_setp)
#define code_queue_pushp _n(code_queue_pushp)
#define code_queue_remp _n(code_queue_remp)
#define code_queue_rollback _n(code_queue_rollback)
#define code_queue_setmode _n(code_queue_setmode)
#define code_queue_pushmode _n(code_queue_pushmode)
#define code_queue_remmode _n(code_queue_remmode)
#define code_queue_add2 _n(code_queue_add2)
#define code_queue_push _n(code_queue_push)
#define code_queue_list _n(code_queue_list)
#define code_queue_single _n(code_queue_single)
#define code_queue_cons _n(code_queue_cons)
#define code_queue_double _n(code_queue_double)
#define code_queue_index _n(code_queue_index)
#define code_queue_ifpush _n(code_queue_ifpush)
#define code_queue_push_code _n(code_queue_push_code)
#define code_queue_pop _n(code_queue_pop)
#define code_make_execute_set_ _n(code_make_execute_set_)
#define code_make_execute_push_ _n(code_make_execute_push_)
#define code_make_execute_rem_ _n(code_make_execute_rem_)
#define code_make_single _n(code_make_single)
#define code_make_object _n(code_make_object)
#define code_queue_make_label _n(code_queue_make_label)
#define code_queue_push_label _n(code_queue_push_label)
#define code_queue_if_unbound _n(code_queue_if_unbound)
#define code_queue_if_nil _n(code_queue_if_nil)
#define code_queue_if_t _n(code_queue_if_t)
#define code_queue_goto _n(code_queue_goto)

#define code_escape_clear _n(code_escape_clear)
#define code_escape_wake _n(code_escape_wake)
#define code_escape_get _n(code_escape_get)
#define code_make_begin _n(code_make_begin)
#define code_make_begin_call _n(code_make_begin_call)
#define code_make_end _n(code_make_end)
#define code_jump_escape _n(code_jump_escape)
#define code_jump_escape_not _n(code_jump_escape_not)
#define code_jump_escape_wake _n(code_jump_escape_wake)
#define code_jump_escape_not_wake _n(code_jump_escape_not_wake)

enum CodeQueue_Mode {
	CodeQueue_ModeSet,
	CodeQueue_ModePush,
	CodeQueue_ModeRemove,
	CodeQueue_ModeSize
};

enum CodeQueue_Index {
	CodeQueue_Code,
	CodeQueue_Stack,
	CodeQueue_Size
};

struct code_queue {
	enum CodeQueue_Mode mode;
	size_t size, label;
};

struct code_queue_switch {
	enum CodeQueue_Mode mode;
};
typedef struct code_queue_switch modeswitch;

#define RefCodeQueue				RefEval
#define GetCodeQueue				GetEval
#define SetCodeQueue				SetEval
#define PtrCodeQueue(p)			PtrEvalBody(p, CodeQueue_Size)
#define StructCodeQueue(p)		((struct code_queue *)PtrCodeQueue(p))
#define CheckTypeCodeQueue(p)	Check(! eval_code_p(p), "type error")

#define ConstantCode(x,y,z) ((x)? CONSTANT_CODE_##y: CONSTANT_CODE_##z)
#define GetConstantCode(x,y,z,w) GetConstant(ConstantCode(x,y,z),(w))

void code_queue_local(LocalRoot local, addr *ret);
enum CodeQueue_Mode code_queue_mode(CodeMake ptr);
int code_queue_setp(CodeMake ptr);
int code_queue_pushp(CodeMake ptr);
int code_queue_remp(CodeMake ptr);

void code_queue_rollback(CodeMake ptr, modeswitch *mode);
void code_queue_setmode(CodeMake ptr, modeswitch *mode);
void code_queue_pushmode(CodeMake ptr, modeswitch *mode);
void code_queue_remmode(CodeMake ptr, modeswitch *mode);
void code_queue_add2(CodeMake ptr, addr x, addr y);
void code_queue_push(CodeMake ptr, addr pos, ...);
void code_queue_list(CodeMake ptr, constindex index, ...);
void code_queue_single(CodeMake ptr, constindex);
void code_queue_cons(CodeMake ptr, constindex x, addr y);
void code_queue_double(CodeMake ptr, constindex x, addr y, addr z);
void code_queue_index(CodeMake ptr, constindex x, size_t y);
#define CodeQueue_single(a,b) code_queue_single(a,CONSTANT_CODE_##b)
#define CodeQueue_cons(a,b,c) code_queue_cons(a,CONSTANT_CODE_##b,c)
#define CodeQueue_double(a,b,c,d) code_queue_double(a,CONSTANT_CODE_##b,c,d)
#define CodeQueue_index(a,b,c) code_queue_index(a,CONSTANT_CODE_##b,c)
void code_queue_ifpush(CodeMake ptr);

void code_queue_push_code(CodeMake ptr);
void code_queue_pop(CodeMake ptr, addr *ret);

int code_make_execute_set_(CodeMake ptr, addr scope);
int code_make_execute_push_(CodeMake ptr, addr scope);
int code_make_execute_rem_(CodeMake ptr, addr scope);
void code_make_single(CodeMake ptr, constindex set, constindex push);
void code_make_object(CodeMake ptr, addr value);

void code_queue_make_label(CodeMake ptr, addr *ret);
void code_queue_push_label(CodeMake ptr, addr label);
void code_queue_if_unbound(CodeMake ptr, addr label);
void code_queue_if_nil(CodeMake ptr, addr label);
void code_queue_if_t(CodeMake ptr, addr label);
void code_queue_goto(CodeMake ptr, addr label);

void code_escape_clear(CodeMake ptr);
void code_escape_wake(CodeMake ptr);
int code_escape_get(CodeMake ptr);
void code_make_begin(CodeMake ptr, fixnum *ret);
void code_make_begin_call(CodeMake ptr, fixnum *ret);
void code_make_end(CodeMake ptr, fixnum value);
void code_jump_escape(CodeMake ptr, addr label);
void code_jump_escape_not(CodeMake ptr, addr label);
void code_jump_escape_wake(CodeMake ptr, addr label);
void code_jump_escape_not_wake(CodeMake ptr, addr label);

#endif


/************************************************************
 *  loop_bind.h
 ************************************************************/
#ifndef __LOOP_BIND_HEADER__
#define __LOOP_BIND_HEADER__


#define loop_bind_initial_list_ _n(loop_bind_initial_list_)
#define loop_bind_common_ _n(loop_bind_common_)

int loop_bind_initial_list_(Execute ptr, addr var, addr type, addr *ret);
int loop_bind_common_(Execute ptr, addr pos, addr type, addr value, addr *ret);

#endif


/************************************************************
 *  loop_main.h
 ************************************************************/
#ifndef __LOOP_MAIN_HEADER__
#define __LOOP_MAIN_HEADER__


#define loop_main_ _n(loop_main_)

int loop_main_(Execute ptr, addr list);

#endif


/************************************************************
 *  loop_parse.h
 ************************************************************/
#ifndef __LOOP_PARSE_HEADER__
#define __LOOP_PARSE_HEADER__


#define loop_parse_common_ _n(loop_parse_common_)

int loop_parse_common_(Execute ptr, addr *named, addr *vars, addr *main, addr *list);

#endif


/************************************************************
 *  loop_special.h
 ************************************************************/
#ifndef __LOOP_SPECIAL_HEADER__
#define __LOOP_SPECIAL_HEADER__


#define loop_push_special _n(loop_push_special)
#define setnamed_loop _n(setnamed_loop)
#define getnamed_loop_ _n(getnamed_loop_)
#define getvars_expand_loop_ _n(getvars_expand_loop_)
#define push_vars_loop_ _n(push_vars_loop_)
#define getform_expand_loop_ _n(getform_expand_loop_)
#define push_form_loop_ _n(push_form_loop_)
#define getinit_expand_loop_ _n(getinit_expand_loop_)
#define push_init_loop_ _n(push_init_loop_)
#define getfinal_expand_loop_ _n(getfinal_expand_loop_)
#define push_final_loop_ _n(push_final_loop_)
#define push_let_loop_ _n(push_let_loop_)
#define getlet_loop_ _n(getlet_loop_)

void loop_push_special(Execute ptr);
void setnamed_loop(Execute ptr, addr value);
int getnamed_loop_(Execute ptr, addr *ret);

int getvars_expand_loop_(Execute ptr, addr *ret);
int push_vars_loop_(Execute ptr, addr value);

int getform_expand_loop_(Execute ptr, addr *ret);
int push_form_loop_(Execute ptr, addr value);

int getinit_expand_loop_(Execute ptr, addr *ret);
int push_init_loop_(Execute ptr, addr value);

int getfinal_expand_loop_(Execute ptr, addr *ret);
int push_final_loop_(Execute ptr, addr value);

int push_let_loop_(Execute ptr, addr value);
int getlet_loop_(Execute ptr, addr *ret);

#endif


/************************************************************
 *  loop_symbol.h
 ************************************************************/
#ifndef __LOOP_SYMBOL_HEADER__
#define __LOOP_SYMBOL_HEADER__


#define loop_symbol_named_p_ _n(loop_symbol_named_p_)
#define loop_symbol_with_p_ _n(loop_symbol_with_p_)
#define loop_symbol_initially_p_ _n(loop_symbol_initially_p_)
#define loop_symbol_finally_p_ _n(loop_symbol_finally_p_)
#define loop_symbol_initial_final_p_ _n(loop_symbol_initial_final_p_)
#define loop_symbol_of_type_p_ _n(loop_symbol_of_type_p_)
#define loop_symbol_for_p_ _n(loop_symbol_for_p_)
#define loop_symbol_as_p_ _n(loop_symbol_as_p_)
#define loop_symbol_for_as_p_ _n(loop_symbol_for_as_p_)
#define loop_symbol_do_p_ _n(loop_symbol_do_p_)
#define loop_symbol_return_p_ _n(loop_symbol_return_p_)
#define loop_symbol_uncondition_p_ _n(loop_symbol_uncondition_p_)
#define loop_symbol_if_p_ _n(loop_symbol_if_p_)
#define loop_symbol_when_p_ _n(loop_symbol_when_p_)
#define loop_symbol_if_when_p_ _n(loop_symbol_if_when_p_)
#define loop_symbol_unless_p_ _n(loop_symbol_unless_p_)
#define loop_symbol_condition_p_ _n(loop_symbol_condition_p_)
#define loop_symbol_collect_p_ _n(loop_symbol_collect_p_)
#define loop_symbol_append_p_ _n(loop_symbol_append_p_)
#define loop_symbol_nconc_p_ _n(loop_symbol_nconc_p_)
#define loop_symbol_count_p_ _n(loop_symbol_count_p_)
#define loop_symbol_sum_p_ _n(loop_symbol_sum_p_)
#define loop_symbol_maximize_p_ _n(loop_symbol_maximize_p_)
#define loop_symbol_minimize_p_ _n(loop_symbol_minimize_p_)
#define loop_symbol_list_accumulation_p_ _n(loop_symbol_list_accumulation_p_)
#define loop_symbol_numeric_accumulation_p_ _n(loop_symbol_numeric_accumulation_p_)
#define loop_symbol_accumulation_p_ _n(loop_symbol_accumulation_p_)
#define loop_symbol_repeat_p_ _n(loop_symbol_repeat_p_)
#define loop_symbol_always_p_ _n(loop_symbol_always_p_)
#define loop_symbol_never_p_ _n(loop_symbol_never_p_)
#define loop_symbol_thereis_p_ _n(loop_symbol_thereis_p_)
#define loop_symbol_while_p_ _n(loop_symbol_while_p_)
#define loop_symbol_until_p_ _n(loop_symbol_until_p_)
#define loop_symbol_termination_p_ _n(loop_symbol_termination_p_)
#define loop_symbol_equal_p_ _n(loop_symbol_equal_p_)
#define loop_symbol_and_p_ _n(loop_symbol_and_p_)
#define loop_symbol_in_p_ _n(loop_symbol_in_p_)
#define loop_symbol_on_p_ _n(loop_symbol_on_p_)
#define loop_symbol_by_p_ _n(loop_symbol_by_p_)
#define loop_symbol_then_p_ _n(loop_symbol_then_p_)
#define loop_symbol_across_p_ _n(loop_symbol_across_p_)
#define loop_symbol_being_p_ _n(loop_symbol_being_p_)
#define loop_symbol_each_p_ _n(loop_symbol_each_p_)
#define loop_symbol_the_p_ _n(loop_symbol_the_p_)
#define loop_symbol_each_the_p_ _n(loop_symbol_each_the_p_)
#define loop_symbol_of_p_ _n(loop_symbol_of_p_)
#define loop_symbol_in_of_p_ _n(loop_symbol_in_of_p_)
#define loop_symbol_hash_key_p_ _n(loop_symbol_hash_key_p_)
#define loop_symbol_hash_keys_p_ _n(loop_symbol_hash_keys_p_)
#define loop_symbol_hash_key2_p_ _n(loop_symbol_hash_key2_p_)
#define loop_symbol_hash_value_p_ _n(loop_symbol_hash_value_p_)
#define loop_symbol_hash_values_p_ _n(loop_symbol_hash_values_p_)
#define loop_symbol_hash_value2_p_ _n(loop_symbol_hash_value2_p_)
#define loop_symbol_using_p_ _n(loop_symbol_using_p_)
#define loop_symbol_symbol_p_ _n(loop_symbol_symbol_p_)
#define loop_symbol_symbols_p_ _n(loop_symbol_symbols_p_)
#define loop_symbol_symbol2_p_ _n(loop_symbol_symbol2_p_)
#define loop_symbol_present_symbol_p_ _n(loop_symbol_present_symbol_p_)
#define loop_symbol_present_symbols_p_ _n(loop_symbol_present_symbols_p_)
#define loop_symbol_present_symbol2_p_ _n(loop_symbol_present_symbol2_p_)
#define loop_symbol_external_symbol_p_ _n(loop_symbol_external_symbol_p_)
#define loop_symbol_external_symbols_p_ _n(loop_symbol_external_symbols_p_)
#define loop_symbol_external_symbol2_p_ _n(loop_symbol_external_symbol2_p_)
#define loop_symbol_from_p_ _n(loop_symbol_from_p_)
#define loop_symbol_upfrom_p_ _n(loop_symbol_upfrom_p_)
#define loop_symbol_downfrom_p_ _n(loop_symbol_downfrom_p_)
#define loop_symbol_to_p_ _n(loop_symbol_to_p_)
#define loop_symbol_upto_p_ _n(loop_symbol_upto_p_)
#define loop_symbol_downto_p_ _n(loop_symbol_downto_p_)
#define loop_symbol_above_p_ _n(loop_symbol_above_p_)
#define loop_symbol_below_p_ _n(loop_symbol_below_p_)
#define loop_symbol_arithmetic1_p_ _n(loop_symbol_arithmetic1_p_)
#define loop_symbol_arithmetic2_p_ _n(loop_symbol_arithmetic2_p_)
#define loop_symbol_arithmetic_p_ _n(loop_symbol_arithmetic_p_)
#define loop_symbol_it_p_ _n(loop_symbol_it_p_)
#define loop_symbol_else_p_ _n(loop_symbol_else_p_)
#define loop_symbol_end_p_ _n(loop_symbol_end_p_)
#define loop_symbol_into_p_ _n(loop_symbol_into_p_)
#define loop_symbol_form_main_p_ _n(loop_symbol_form_main_p_)
#define loop_symbol_form_p_ _n(loop_symbol_form_p_)

int loop_symbol_named_p_(addr pos, int *ret);
int loop_symbol_with_p_(addr pos, int *ret);
int loop_symbol_initially_p_(addr pos, int *ret);
int loop_symbol_finally_p_(addr pos, int *ret);
int loop_symbol_initial_final_p_(addr pos, int *ret);
int loop_symbol_of_type_p_(addr pos, int *ret);
int loop_symbol_for_p_(addr pos, int *ret);
int loop_symbol_as_p_(addr pos, int *ret);
int loop_symbol_for_as_p_(addr pos, int *ret);
int loop_symbol_do_p_(addr pos, int *ret);
int loop_symbol_return_p_(addr pos, int *ret);
int loop_symbol_uncondition_p_(addr pos, int *ret);
int loop_symbol_if_p_(addr pos, int *ret);
int loop_symbol_when_p_(addr pos, int *ret);
int loop_symbol_if_when_p_(addr pos, int *ret);
int loop_symbol_unless_p_(addr pos, int *ret);
int loop_symbol_condition_p_(addr pos, int *ret);
int loop_symbol_collect_p_(addr pos, int *ret);
int loop_symbol_append_p_(addr pos, int *ret);
int loop_symbol_nconc_p_(addr pos, int *ret);
int loop_symbol_count_p_(addr pos, int *ret);
int loop_symbol_sum_p_(addr pos, int *ret);
int loop_symbol_maximize_p_(addr pos, int *ret);
int loop_symbol_minimize_p_(addr pos, int *ret);
int loop_symbol_list_accumulation_p_(addr pos, int *ret);
int loop_symbol_numeric_accumulation_p_(addr pos, int *ret);
int loop_symbol_accumulation_p_(addr pos, int *ret);
int loop_symbol_repeat_p_(addr pos, int *ret);
int loop_symbol_always_p_(addr pos, int *ret);
int loop_symbol_never_p_(addr pos, int *ret);
int loop_symbol_thereis_p_(addr pos, int *ret);
int loop_symbol_while_p_(addr pos, int *ret);
int loop_symbol_until_p_(addr pos, int *ret);
int loop_symbol_termination_p_(addr pos, int *ret);
int loop_symbol_equal_p_(addr pos, int *ret);
int loop_symbol_and_p_(addr pos, int *ret);
int loop_symbol_in_p_(addr pos, int *ret);
int loop_symbol_on_p_(addr pos, int *ret);
int loop_symbol_by_p_(addr pos, int *ret);
int loop_symbol_then_p_(addr pos, int *ret);
int loop_symbol_across_p_(addr pos, int *ret);
int loop_symbol_being_p_(addr pos, int *ret);
int loop_symbol_each_p_(addr pos, int *ret);
int loop_symbol_the_p_(addr pos, int *ret);
int loop_symbol_each_the_p_(addr pos, int *ret);
int loop_symbol_of_p_(addr pos, int *ret);
int loop_symbol_in_of_p_(addr pos, int *ret);
int loop_symbol_hash_key_p_(addr pos, int *ret);
int loop_symbol_hash_keys_p_(addr pos, int *ret);
int loop_symbol_hash_key2_p_(addr pos, int *ret);
int loop_symbol_hash_value_p_(addr pos, int *ret);
int loop_symbol_hash_values_p_(addr pos, int *ret);
int loop_symbol_hash_value2_p_(addr pos, int *ret);
int loop_symbol_using_p_(addr pos, int *ret);
int loop_symbol_symbol_p_(addr pos, int *ret);
int loop_symbol_symbols_p_(addr pos, int *ret);
int loop_symbol_symbol2_p_(addr pos, int *ret);
int loop_symbol_present_symbol_p_(addr pos, int *ret);
int loop_symbol_present_symbols_p_(addr pos, int *ret);
int loop_symbol_present_symbol2_p_(addr pos, int *ret);
int loop_symbol_external_symbol_p_(addr pos, int *ret);
int loop_symbol_external_symbols_p_(addr pos, int *ret);
int loop_symbol_external_symbol2_p_(addr pos, int *ret);
int loop_symbol_from_p_(addr pos, int *ret);
int loop_symbol_upfrom_p_(addr pos, int *ret);
int loop_symbol_downfrom_p_(addr pos, int *ret);
int loop_symbol_to_p_(addr pos, int *ret);
int loop_symbol_upto_p_(addr pos, int *ret);
int loop_symbol_downto_p_(addr pos, int *ret);
int loop_symbol_above_p_(addr pos, int *ret);
int loop_symbol_below_p_(addr pos, int *ret);
int loop_symbol_arithmetic1_p_(addr pos, int *ret);
int loop_symbol_arithmetic2_p_(addr pos, int *ret);
int loop_symbol_arithmetic_p_(addr pos, int *ret);
int loop_symbol_it_p_(addr pos, int *ret);
int loop_symbol_else_p_(addr pos, int *ret);
int loop_symbol_end_p_(addr pos, int *ret);
int loop_symbol_into_p_(addr pos, int *ret);
int loop_symbol_form_main_p_(addr pos, int *ret);
int loop_symbol_form_p_(addr pos, int *ret);

/* eq */
#define loop_symbol_initially_p _n(loop_symbol_initially_p)
#define loop_symbol_finally_p _n(loop_symbol_finally_p)
#define loop_symbol_with_p _n(loop_symbol_with_p)
#define loop_symbol_for_as_p _n(loop_symbol_for_as_p)

#define loop_symbol_do_p _n(loop_symbol_do_p)
#define loop_symbol_return_p _n(loop_symbol_return_p)
#define loop_symbol_collect_p _n(loop_symbol_collect_p)
#define loop_symbol_append_p _n(loop_symbol_append_p)
#define loop_symbol_nconc_p _n(loop_symbol_nconc_p)
#define loop_symbol_count_p _n(loop_symbol_count_p)
#define loop_symbol_sum_p _n(loop_symbol_sum_p)
#define loop_symbol_maximize_p _n(loop_symbol_maximize_p)
#define loop_symbol_minimize_p _n(loop_symbol_minimize_p)
#define loop_symbol_if_p _n(loop_symbol_if_p)
#define loop_symbol_unless_p _n(loop_symbol_unless_p)
#define loop_symbol_while_p _n(loop_symbol_while_p)
#define loop_symbol_until_p _n(loop_symbol_until_p)
#define loop_symbol_always_p _n(loop_symbol_always_p)
#define loop_symbol_never_p _n(loop_symbol_never_p)
#define loop_symbol_thereis_p _n(loop_symbol_thereis_p)
#define loop_symbol_repeat_p _n(loop_symbol_repeat_p)

#define loop_symbol_for_as_arithmetic_up_p _n(loop_symbol_for_as_arithmetic_up_p)
#define loop_symbol_for_as_arithmetic_downto_p _n(loop_symbol_for_as_arithmetic_downto_p)
#define loop_symbol_for_as_arithmetic_downfrom_p _n(loop_symbol_for_as_arithmetic_downfrom_p)
#define loop_symbol_for_as_in_list_p _n(loop_symbol_for_as_in_list_p)
#define loop_symbol_for_as_on_list_p _n(loop_symbol_for_as_on_list_p)
#define loop_symbol_for_as_equals_then_p _n(loop_symbol_for_as_equals_then_p)
#define loop_symbol_for_as_across_p _n(loop_symbol_for_as_across_p)
#define loop_symbol_for_as_hash_p _n(loop_symbol_for_as_hash_p)
#define loop_symbol_for_as_package_symbol_p _n(loop_symbol_for_as_package_symbol_p)
#define loop_symbol_for_as_package_present_p _n(loop_symbol_for_as_package_present_p)
#define loop_symbol_for_as_package_external_p _n(loop_symbol_for_as_package_external_p)

int loop_symbol_initially_p(addr pos);
int loop_symbol_finally_p(addr pos);
int loop_symbol_with_p(addr pos);
int loop_symbol_for_as_p(addr pos);

int loop_symbol_do_p(addr pos);
int loop_symbol_return_p(addr pos);
int loop_symbol_collect_p(addr pos);
int loop_symbol_append_p(addr pos);
int loop_symbol_nconc_p(addr pos);
int loop_symbol_count_p(addr pos);
int loop_symbol_sum_p(addr pos);
int loop_symbol_maximize_p(addr pos);
int loop_symbol_minimize_p(addr pos);
int loop_symbol_if_p(addr pos);
int loop_symbol_unless_p(addr pos);
int loop_symbol_while_p(addr pos);
int loop_symbol_until_p(addr pos);
int loop_symbol_always_p(addr pos);
int loop_symbol_never_p(addr pos);
int loop_symbol_thereis_p(addr pos);
int loop_symbol_repeat_p(addr pos);

int loop_symbol_for_as_arithmetic_up_p(addr pos);
int loop_symbol_for_as_arithmetic_downto_p(addr pos);
int loop_symbol_for_as_arithmetic_downfrom_p(addr pos);
int loop_symbol_for_as_in_list_p(addr pos);
int loop_symbol_for_as_on_list_p(addr pos);
int loop_symbol_for_as_equals_then_p(addr pos);
int loop_symbol_for_as_across_p(addr pos);
int loop_symbol_for_as_hash_p(addr pos);
int loop_symbol_for_as_package_symbol_p(addr pos);
int loop_symbol_for_as_package_present_p(addr pos);
int loop_symbol_for_as_package_external_p(addr pos);

#endif


/************************************************************
 *  loop_variables.h
 ************************************************************/
#ifndef __LOOP_VARIABLES_HEADER__
#define __LOOP_VARIABLES_HEADER__


#define loop_variables_ _n(loop_variables_)

int loop_variables_(Execute ptr, addr list);

#endif


/************************************************************
 *  make_call.h
 ************************************************************/
#ifndef __MAKE_CALL_HEADER__
#define __MAKE_CALL_HEADER__


#define code_make_call_ _n(code_make_call_)

int code_make_call_(CodeMake ptr, addr scope);

#endif


/************************************************************
 *  make_function.h
 ************************************************************/
#ifndef __MAKE_FUNCTION_HEADER__
#define __MAKE_FUNCTION_HEADER__


#define code_allcons_ _n(code_allcons_)
#define code_allcons_set_ _n(code_allcons_set_)
#define code_allcons_rem_ _n(code_allcons_rem_)

#define code_make_function_ _n(code_make_function_)
#define code_make_lambda_ _n(code_make_lambda_)
#define code_make_defun_ _n(code_make_defun_)
#define code_make_macro_lambda_ _n(code_make_macro_lambda_)
#define code_make_defmacro_ _n(code_make_defmacro_)
#define code_make_deftype_ _n(code_make_deftype_)
#define code_make_define_compiler_macro_ _n(code_make_define_compiler_macro_)
#define code_make_destructuring_bind_ _n(code_make_destructuring_bind_)
#define code_make_flet_ _n(code_make_flet_)
#define code_make_labels_ _n(code_make_labels_)

int code_allcons_(CodeMake ptr, addr cons, addr escape);
int code_allcons_set_(CodeMake ptr, addr cons, addr escape);
int code_allcons_rem_(CodeMake ptr, addr cons, addr escape);

int code_make_function_(CodeMake ptr, addr scope);
int code_make_lambda_(CodeMake ptr, addr scope);
int code_make_defun_(CodeMake ptr, addr scope);
int code_make_macro_lambda_(CodeMake ptr, addr scope);
int code_make_defmacro_(CodeMake ptr, addr scope);
int code_make_deftype_(CodeMake ptr, addr scope);
int code_make_define_compiler_macro_(CodeMake ptr, addr scope);
int code_make_destructuring_bind_(CodeMake ptr, addr scope);
int code_make_flet_(CodeMake ptr, addr scope);
int code_make_labels_(CodeMake ptr, addr scope);

#endif


/************************************************************
 *  make_value.h
 ************************************************************/
#ifndef __MAKE_VALUE_HEADER__
#define __MAKE_VALUE_HEADER__


#define code_make_debug_ _n(code_make_debug_)
#define code_make_nil_ _n(code_make_nil_)
#define code_make_t_ _n(code_make_t_)
#define code_make_value_ _n(code_make_value_)
#define code_make_value2_ _n(code_make_value2_)
#define code_make_symbol_ _n(code_make_symbol_)
#define code_make_declaim_ _n(code_make_declaim_)
#define code_make_lexical_ _n(code_make_lexical_)
#define code_make_progn_ _n(code_make_progn_)
#define code_make_let_ _n(code_make_let_)
#define code_make_leta_ _n(code_make_leta_)
#define code_make_setq_ _n(code_make_setq_)
#define code_make_values_ _n(code_make_values_)
#define code_make_the_ _n(code_make_the_)
#define code_make_eval_when_ _n(code_make_eval_when_)
#define code_make_locally_ _n(code_make_locally_)
#define code_make_if_ _n(code_make_if_)
#define code_make_unwind_protect_ _n(code_make_unwind_protect_)
#define code_make_tagbody_ _n(code_make_tagbody_)
#define code_make_go_ _n(code_make_go_)
#define code_make_block_ _n(code_make_block_)
#define code_make_return_from_ _n(code_make_return_from_)
#define code_make_catch_ _n(code_make_catch_)
#define code_make_throw_ _n(code_make_throw_)
#define code_make_multiple_value_bind_ _n(code_make_multiple_value_bind_)
#define code_make_multiple_value_call_ _n(code_make_multiple_value_call_)
#define code_make_multiple_value_prog1_ _n(code_make_multiple_value_prog1_)
#define code_make_nth_value_ _n(code_make_nth_value_)
#define code_make_progv_ _n(code_make_progv_)
#define code_make_load_time_value_ _n(code_make_load_time_value_)
#define code_make_step_ _n(code_make_step_)

#define code_make_free_ _n(code_make_free_)
#define code_make_type_value _n(code_make_type_value)

int code_make_debug_(CodeMake ptr, addr scope, int (*call)(CodeMake, addr));
int code_make_nil_(CodeMake ptr, addr ignore);
int code_make_t_(CodeMake ptr, addr ignore);
int code_make_value_(CodeMake ptr, addr scope);
int code_make_value2_(CodeMake ptr, addr scope);
int code_make_symbol_(CodeMake ptr, addr scope);
int code_make_declaim_(CodeMake ptr, addr scope);
int code_make_lexical_(CodeMake ptr, addr scope);
int code_make_progn_(CodeMake ptr, addr scope);
int code_make_let_(CodeMake ptr, addr scope);
int code_make_leta_(CodeMake ptr, addr scope);
int code_make_setq_(CodeMake ptr, addr scope);
int code_make_values_(CodeMake ptr, addr scope);
int code_make_the_(CodeMake ptr, addr scope);
int code_make_eval_when_(CodeMake ptr, addr scope);
int code_make_locally_(CodeMake ptr, addr scope);
int code_make_if_(CodeMake ptr, addr scope);
int code_make_unwind_protect_(CodeMake ptr, addr scope);
int code_make_tagbody_(CodeMake ptr, addr scope);
int code_make_go_(CodeMake ptr, addr scope);
int code_make_block_(CodeMake ptr, addr scope);
int code_make_return_from_(CodeMake ptr, addr scope);
int code_make_catch_(CodeMake ptr, addr scope);
int code_make_throw_(CodeMake ptr, addr scope);
int code_make_multiple_value_bind_(CodeMake ptr, addr scope);
int code_make_multiple_value_call_(CodeMake ptr, addr scope);
int code_make_multiple_value_prog1_(CodeMake ptr, addr scope);
int code_make_nth_value_(CodeMake ptr, addr scope);
int code_make_progv_(CodeMake ptr, addr scope);
int code_make_load_time_value_(CodeMake ptr, addr scope);
int code_make_step_(CodeMake ptr, addr scope);

int code_make_free_(CodeMake ptr, addr list, addr escape);
void code_make_type_value(CodeMake ptr, addr pos, addr escape);

#endif


/************************************************************
 *  md5encode.h
 ************************************************************/
/*
 *  md5encode.h
 *
 *  [RFC1321] The MD5 Message-Digest Algorithm
 *  https://www.ietf.org/rfc/rfc1321.txt
 *
 *  Usage
 *    1. String
 *      uint8_t result[MD5ENCODE_SIZE];
 *      string_md5encode("Hello md5encode", result);
 *
 *    2. Buffer
 *      uint8_t result[MD5ENCODE_SIZE];
 *      sequence_md5encode("Hello md5encode", 15, result);
 *
 *    3. Buffers
 *      uint8_t result[MD5ENCODE_SIZE];
 *      struct md5encode md5;
 *      clear_md5encode(&md5);
 *      read_md5encode(&md5, "Hello", 5);
 *      read_md5encode(&md5, " ", 1);
 *      read_md5encode(&md5, "md5encode", 9);
 *      calc_md5encode(&md5, result);
 */
#ifndef __MD5ENCODE_HEADER__
#define __MD5ENCODE_HEADER__


#define clear_md5encode _n(clear_md5encode)
#define read_md5encode _n(read_md5encode)
#define calc_md5encode _n(calc_md5encode)
#define sequence_md5encode _n(sequence_md5encode)
#define string_md5encode _n(string_md5encode)

#define MD5ENCODE_SIZE 16

struct md5encode {
	uint32_t a, b, c, d, x[MD5ENCODE_SIZE];
	size_t size;
	int pos;
};

void clear_md5encode(struct md5encode *);
void read_md5encode(struct md5encode *, const void *, size_t);
void calc_md5encode(struct md5encode *, void *);
void sequence_md5encode(const void *, size_t, void *);
void string_md5encode(const char *, void *);

#endif


/************************************************************
 *  mop_reader.h
 ************************************************************/
#ifndef __MOP_READER_HEADER__
#define __MOP_READER_HEADER__


#define init_mop_reader _n(init_mop_reader)
#define build_mop_reader_ _n(build_mop_reader_)

#define defgeneric_class_slots_ _n(defgeneric_class_slots_)
#define defgeneric_class_direct_slots_ _n(defgeneric_class_direct_slots_)
#define defgeneric_class_default_initargs_ _n(defgeneric_class_default_initargs_)
#define defgeneric_class_direct_default_initargs_ _n(defgeneric_class_direct_default_initargs_)
#define defgeneric_class_precedence_list_ _n(defgeneric_class_precedence_list_)
#define defgeneric_class_direct_superclasses_ _n(defgeneric_class_direct_superclasses_)
#define defgeneric_class_direct_subclasses_ _n(defgeneric_class_direct_subclasses_)
#define defgeneric_class_finalized_p_ _n(defgeneric_class_finalized_p_)
#define defgeneric_class_prototype_ _n(defgeneric_class_prototype_)
#define defgeneric_slot_definition_name_ _n(defgeneric_slot_definition_name_)
#define defgeneric_slot_definition_type_ _n(defgeneric_slot_definition_type_)
#define defgeneric_slot_definition_allocation_ _n(defgeneric_slot_definition_allocation_)
#define defgeneric_slot_definition_initargs_ _n(defgeneric_slot_definition_initargs_)
#define defgeneric_slot_definition_initform_ _n(defgeneric_slot_definition_initform_)
#define defgeneric_slot_definition_initfunction_ _n(defgeneric_slot_definition_initfunction_)
#define defgeneric_generic_function_name_ _n(defgeneric_generic_function_name_)
#define defgeneric_setf_generic_function_name_ _n(defgeneric_setf_generic_function_name_)
#define defgeneric_generic_function_methods_ _n(defgeneric_generic_function_methods_)
#define defgeneric_generic_function_lambda_list_ _n(defgeneric_generic_function_lambda_list_)
#define defgeneric_generic_function_argument_precedence_order_ _n(defgeneric_generic_function_argument_precedence_order_)
#define defgeneric_generic_function_declarations_ _n(defgeneric_generic_function_declarations_)
#define defgeneric_generic_function_method_class_ _n(defgeneric_generic_function_method_class_)
#define defgeneric_generic_function_method_combination_ _n(defgeneric_generic_function_method_combination_)
#define defgeneric_method_function_ _n(defgeneric_method_function_)
#define defgeneric_method_generic_function_ _n(defgeneric_method_generic_function_)
#define defgeneric_method_lambda_list_ _n(defgeneric_method_lambda_list_)
#define defgeneric_method_specializers_ _n(defgeneric_method_specializers_)
#define defgeneric_accessor_method_slot_definition_ _n(defgeneric_accessor_method_slot_definition_)

void init_mop_reader(void);
int build_mop_reader_(Execute ptr);

/* class */
int defgeneric_class_slots_(Execute ptr);
int defgeneric_class_direct_slots_(Execute ptr);
int defgeneric_class_default_initargs_(Execute ptr);
int defgeneric_class_direct_default_initargs_(Execute ptr);
int defgeneric_class_precedence_list_(Execute ptr);
int defgeneric_class_direct_superclasses_(Execute ptr);
int defgeneric_class_direct_subclasses_(Execute ptr);
int defgeneric_class_finalized_p_(Execute ptr);
int defgeneric_class_prototype_(Execute ptr);
/* slot-definition */
int defgeneric_slot_definition_name_(Execute ptr);
int defgeneric_slot_definition_type_(Execute ptr);
int defgeneric_slot_definition_allocation_(Execute ptr);
int defgeneric_slot_definition_initargs_(Execute ptr);
int defgeneric_slot_definition_initform_(Execute ptr);
int defgeneric_slot_definition_initfunction_(Execute ptr);
/* generic-functions */
int defgeneric_generic_function_name_(Execute ptr);
int defgeneric_setf_generic_function_name_(Execute ptr);
int defgeneric_generic_function_methods_(Execute ptr);
int defgeneric_generic_function_lambda_list_(Execute ptr);
int defgeneric_generic_function_argument_precedence_order_(Execute ptr);
int defgeneric_generic_function_declarations_(Execute ptr);
int defgeneric_generic_function_method_class_(Execute ptr);
int defgeneric_generic_function_method_combination_(Execute ptr);
/* methods */
int defgeneric_method_function_(Execute ptr);
int defgeneric_method_generic_function_(Execute ptr);
int defgeneric_method_lambda_list_(Execute ptr);
int defgeneric_method_specializers_(Execute ptr);
int defgeneric_accessor_method_slot_definition_(Execute ptr);

#endif


/************************************************************
 *  mop_generic.h
 ************************************************************/
#ifndef __MOP_GENERIC_HEADER__
#define __MOP_GENERIC_HEADER__


#define defgeneric_no_applicable_method_mop_ _n(defgeneric_no_applicable_method_mop_)
#define defgeneric_no_next_method_mop_ _n(defgeneric_no_next_method_mop_)

int defgeneric_no_applicable_method_mop_(Execute ptr);
int defgeneric_no_next_method_mop_(Execute ptr);

#endif


/************************************************************
 *  ratio_plus.h
 ************************************************************/
#ifndef __RATIO_PLUS_HEADER__
#define __RATIO_PLUS_HEADER__


#define sign_reverse_ratio_inplace _n(sign_reverse_ratio_inplace)
#define sign_reverse_ratio_local _n(sign_reverse_ratio_local)
#define sign_reverse_ratio_common _n(sign_reverse_ratio_common)
#define sigrev_fixnum_ratio_local _n(sigrev_fixnum_ratio_local)
#define sigrev_bignum_ratio_local _n(sigrev_bignum_ratio_local)
#define plus_rv_ratio_local _n(plus_rv_ratio_local)
#define plus_rv_real_local _n(plus_rv_real_local)
#define plus_rv_real_common _n(plus_rv_real_common)
#define plus_rf_ratio_local _n(plus_rf_ratio_local)
#define plus_rf_real_local _n(plus_rf_real_local)
#define plus_rf_real_common _n(plus_rf_real_common)
#define minus_rf_ratio_local _n(minus_rf_ratio_local)
#define minus_rf_real_local _n(minus_rf_real_local)
#define minus_rf_real_common _n(minus_rf_real_common)
#define minus_fr_ratio_local _n(minus_fr_ratio_local)
#define minus_fr_real_local _n(minus_fr_real_local)
#define minus_fr_real_common _n(minus_fr_real_common)
#define plus_rb_ratio_local _n(plus_rb_ratio_local)
#define plus_rb_real_local _n(plus_rb_real_local)
#define plus_rb_real_common _n(plus_rb_real_common)
#define minus_rb_ratio_local _n(minus_rb_ratio_local)
#define minus_rb_real_local _n(minus_rb_real_local)
#define minus_rb_real_common _n(minus_rb_real_common)
#define minus_br_ratio_local _n(minus_br_ratio_local)
#define minus_br_real_local _n(minus_br_real_local)
#define minus_br_real_common _n(minus_br_real_common)
#define plus_rr_ratio_local _n(plus_rr_ratio_local)
#define plus_rr_real_local _n(plus_rr_real_local)
#define plus_rr_real_common _n(plus_rr_real_common)
#define minus_rr_ratio_local _n(minus_rr_ratio_local)
#define minus_rr_real_local _n(minus_rr_real_local)
#define minus_rr_real_common _n(minus_rr_real_common)

void sign_reverse_ratio_inplace(addr left);
void sign_reverse_ratio_local(LocalRoot local, addr left, addr *ret);
void sign_reverse_ratio_common(addr left, addr *ret);
void sigrev_fixnum_ratio_local(LocalRoot local, addr pos, addr *ret);
void sigrev_bignum_ratio_local(LocalRoot local, addr pos, addr *ret);

void plus_rv_ratio_local(LocalRoot local, addr left, fixnum right, addr *ret);
void plus_rv_real_local(LocalRoot local, addr left, fixnum right, addr *ret);
void plus_rv_real_common(LocalRoot local, addr left, fixnum right, addr *ret);
void plus_rf_ratio_local(LocalRoot local, addr left, addr right, addr *ret);
void plus_rf_real_local(LocalRoot local, addr left, addr right, addr *ret);
void plus_rf_real_common(LocalRoot local, addr left, addr right, addr *ret);
#define plus_fr_ratio_local(m,a,b,r) plus_rf_ratio_local((m),(b),(a),(r))
#define plus_fr_real_local(m,a,b,r) plus_rf_real_local((m),(b),(a),(r))
#define plus_fr_real_common(m,a,b,r) plus_rf_real_common((m),(b),(a),(r))
void minus_rf_ratio_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_rf_real_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_rf_real_common(LocalRoot local, addr left, addr right, addr *ret);
void minus_fr_ratio_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_fr_real_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_fr_real_common(LocalRoot local, addr left, addr right, addr *ret);
void plus_rb_ratio_local(LocalRoot local, addr left, addr right, addr *ret);
void plus_rb_real_local(LocalRoot local, addr left, addr right, addr *ret);
void plus_rb_real_common(LocalRoot local, addr left, addr right, addr *ret);
#define plus_br_ratio_local(m,a,b,r) plus_rb_ratio_local((m),(b),(a),(r))
#define plus_br_real_local(m,a,b,r) plus_rb_real_local((m),(b),(a),(r))
#define plus_br_real_common(m,a,b,r) plus_rb_real_common((m),(b),(a),(r))
void minus_rb_ratio_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_rb_real_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_rb_real_common(LocalRoot local, addr left, addr right, addr *ret);
void minus_br_ratio_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_br_real_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_br_real_common(LocalRoot local, addr left, addr right, addr *ret);
void plus_rr_ratio_local(LocalRoot local, addr left, addr right, addr *ret);
void plus_rr_real_local(LocalRoot local, addr left, addr right, addr *ret);
void plus_rr_real_common(LocalRoot local, addr left, addr right, addr *ret);
void minus_rr_ratio_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_rr_real_local(LocalRoot local, addr left, addr right, addr *ret);
void minus_rr_real_common(LocalRoot local, addr left, addr right, addr *ret);

#endif


/************************************************************
 *  random_float.h
 ************************************************************/
#ifndef __RANDOM_FLOAT_HEADER__
#define __RANDOM_FLOAT_HEADER__


#define float_random_32bit _n(float_random_32bit)
#define float_random_64bit _n(float_random_64bit)
#define double_random_32bit _n(double_random_32bit)
#define double_random_64bit _n(double_random_64bit)
#define long_random_32bit _n(long_random_32bit)
#define long_random_64bit _n(long_random_64bit)

/* float (0 <= return < 1.0) */
float float_random_32bit(struct random_state *state);
float float_random_64bit(struct random_state *state);
double double_random_32bit(struct random_state *state);
double double_random_64bit(struct random_state *state);
long double long_random_32bit(struct random_state *state);
long double long_random_64bit(struct random_state *state);

#endif


/************************************************************
 *  optimize_call.h
 ************************************************************/
#ifndef __OPTIMIZE_CALL_HEADER__
#define __OPTIMIZE_CALL_HEADER__


#define checkparse_implicit_ _n(checkparse_implicit_)
#define checkparse_progn_ _n(checkparse_progn_)
#define checkparse_let_ _n(checkparse_let_)
#define checkparse_setq_ _n(checkparse_setq_)
#define checkparse_destructuring_bind_ _n(checkparse_destructuring_bind_)
#define checkparse_if_ _n(checkparse_if_)
#define checkparse_unwind_protect_ _n(checkparse_unwind_protect_)
#define checkparse_tagbody_ _n(checkparse_tagbody_)
#define checkparse_block_ _n(checkparse_block_)
#define checkparse_catch_ _n(checkparse_catch_)
#define checkparse_the_ _n(checkparse_the_)
#define checkparse_eval_when_ _n(checkparse_eval_when_)
#define checkparse_locally_ _n(checkparse_locally_)
#define checkparse_call_ _n(checkparse_call_)
#define checkparse_progv_ _n(checkparse_progv_)

#define optparse_implicit_ _n(optparse_implicit_)
#define optparse_progn_ _n(optparse_progn_)
#define optparse_let_ _n(optparse_let_)
#define optparse_setq_ _n(optparse_setq_)
#define optparse_destructuring_bind_ _n(optparse_destructuring_bind_)
#define optparse_if_ _n(optparse_if_)
#define optparse_unwind_protect_ _n(optparse_unwind_protect_)
#define optparse_tagbody_ _n(optparse_tagbody_)
#define optparse_block_ _n(optparse_block_)
#define optparse_catch_ _n(optparse_catch_)
#define optparse_the_ _n(optparse_the_)
#define optparse_eval_when_ _n(optparse_eval_when_)
#define optparse_locally_ _n(optparse_locally_)
#define optparse_call_ _n(optparse_call_)
#define optparse_progv_ _n(optparse_progv_)

int checkparse_implicit_(OptimizeInfo *str, addr pos, int *ret);
int checkparse_progn_(OptimizeInfo *str, int *ret);
int checkparse_let_(OptimizeInfo *str, int *ret);
int checkparse_setq_(OptimizeInfo *str, int *ret);
int checkparse_destructuring_bind_(OptimizeInfo *str, int *ret);
int checkparse_if_(OptimizeInfo *str, int *ret);
int checkparse_unwind_protect_(OptimizeInfo *str, int *ret);
int checkparse_tagbody_(OptimizeInfo *str, int *ret);
int checkparse_block_(OptimizeInfo *str, int *ret);
int checkparse_catch_(OptimizeInfo *str, int *ret);
int checkparse_the_(OptimizeInfo *str, int *ret);
int checkparse_eval_when_(OptimizeInfo *str, int *ret);
int checkparse_locally_(OptimizeInfo *str, int *ret);
int checkparse_call_(OptimizeInfo *str, int *ret);
int checkparse_progv_(OptimizeInfo *str, int *ret);

int optparse_implicit_(OptimizeInfo *str, addr pos, addr *value, int *ret);
int optparse_progn_(OptimizeInfo *str, int *ret);
int optparse_let_(OptimizeInfo *str, int *ret);
int optparse_setq_(OptimizeInfo *str, int *ret);
int optparse_destructuring_bind_(OptimizeInfo *str, int *ret);
int optparse_if_(OptimizeInfo *str, int *ret);
int optparse_unwind_protect_(OptimizeInfo *str, int *ret);
int optparse_tagbody_(OptimizeInfo *str, int *ret);
int optparse_block_(OptimizeInfo *str, int *ret);
int optparse_catch_(OptimizeInfo *str, int *ret);
int optparse_the_(OptimizeInfo *str, int *ret);
int optparse_eval_when_(OptimizeInfo *str, int *ret);
int optparse_locally_(OptimizeInfo *str, int *ret);
int optparse_call_(OptimizeInfo *str, int *ret);
int optparse_progv_(OptimizeInfo *str, int *ret);

#endif


/************************************************************
 *  type_delay.h
 ************************************************************/
#ifndef __TYPE_DELAY_HEADER__
#define __TYPE_DELAY_HEADER__


#define get_delay_type_ _n(get_delay_type_)
#define check_delay_type_ _n(check_delay_type_)
#define execute_delay_type_ _n(execute_delay_type_)
#define init_type_delay _n(init_type_delay)

int get_delay_type_(Execute ptr, addr pos, addr *ret);
int check_delay_type_(Execute ptr, addr pos, int *ret);
int execute_delay_type_(Execute ptr, addr pos);
void init_type_delay(void);

#endif


/************************************************************
 *  optimize_define.h
 ************************************************************/
#ifndef __OPTIMIZE_DEFINE_HEADER__
#define __OPTIMIZE_DEFINE_HEADER__


#define checkparse_lambda_ _n(checkparse_lambda_)
#define checkparse_defun_ _n(checkparse_defun_)
#define checkparse_defmacro_ _n(checkparse_defmacro_)
#define checkparse_deftype_ _n(checkparse_deftype_)
#define checkparse_define_compiler_macro_ _n(checkparse_define_compiler_macro_)
#define checkparse_flet_ _n(checkparse_flet_)

#define optparse_lambda_ _n(optparse_lambda_)
#define optparse_defun_ _n(optparse_defun_)
#define optparse_defmacro_ _n(optparse_defmacro_)
#define optparse_deftype_ _n(optparse_deftype_)
#define optparse_define_compiler_macro_ _n(optparse_define_compiler_macro_)
#define optparse_flet_ _n(optparse_flet_)

int checkparse_lambda_(OptimizeInfo *str, int *ret);
int checkparse_defun_(OptimizeInfo *str, int *ret);
int checkparse_defmacro_(OptimizeInfo *str, int *ret);
int checkparse_deftype_(OptimizeInfo *str, int *ret);
int checkparse_define_compiler_macro_(OptimizeInfo *str, int *ret);
int checkparse_flet_(OptimizeInfo *str, int *ret);

int optparse_lambda_(OptimizeInfo *str, int *ret);
int optparse_defun_(OptimizeInfo *str, int *ret);
int optparse_defmacro_(OptimizeInfo *str, int *ret);
int optparse_deftype_(OptimizeInfo *str, int *ret);
int optparse_define_compiler_macro_(OptimizeInfo *str, int *ret);
int optparse_flet_(OptimizeInfo *str, int *ret);

#endif


/************************************************************
 *  optimize_values.h
 ************************************************************/
#ifndef __OPTIMIZE_VALUES_HEADER__
#define __OPTIMIZE_VALUES_HEADER__


#define checkparse_values_ _n(checkparse_values_)
#define checkparse_multiple_value_bind_ _n(checkparse_multiple_value_bind_)
#define checkparse_multiple_value_call_ _n(checkparse_multiple_value_call_)
#define checkparse_multiple_value_prog1_ _n(checkparse_multiple_value_prog1_)
#define checkparse_nth_value_ _n(checkparse_nth_value_)

#define optparse_values_ _n(optparse_values_)
#define optparse_multiple_value_bind_ _n(optparse_multiple_value_bind_)
#define optparse_multiple_value_call_ _n(optparse_multiple_value_call_)
#define optparse_multiple_value_prog1_ _n(optparse_multiple_value_prog1_)
#define optparse_nth_value_ _n(optparse_nth_value_)

int checkparse_values_(OptimizeInfo *str, int *ret);
int checkparse_multiple_value_bind_(OptimizeInfo *str, int *ret);
int checkparse_multiple_value_call_(OptimizeInfo *str, int *ret);
int checkparse_multiple_value_prog1_(OptimizeInfo *str, int *ret);
int checkparse_nth_value_(OptimizeInfo *str, int *ret);

int optparse_values_(OptimizeInfo *str, int *ret);
int optparse_multiple_value_bind_(OptimizeInfo *str, int *ret);
int optparse_multiple_value_call_(OptimizeInfo *str, int *ret);
int optparse_multiple_value_prog1_(OptimizeInfo *str, int *ret);
int optparse_nth_value_(OptimizeInfo *str, int *ret);

#endif


/************************************************************
 *  package_iterator.h
 ************************************************************/
#ifndef __PACKAGE_ITERATOR_HEADER__
#define __PACKAGE_ITERATOR_HEADER__


#define package_iterator_alloc_ _n(package_iterator_alloc_)
#define package_iterator_local_ _n(package_iterator_local_)
#define package_iterator_heap_ _n(package_iterator_heap_)
#define next_package_iterator_ _n(next_package_iterator_)

struct StructPackageIterator {
	unsigned internal : 1;
	unsigned external : 1;
	unsigned inherited : 1;
	unsigned finish : 1;
};

enum PackageIterator {
	PackageIterator_List,
	PackageIterator_Table,
	PackageIterator_Package,
	PackageIterator_Size
};

#define PtrPackageIterator(x) PtrBodySSa(x, PackageIterator_Size)
#define PtrStructPackageIterator(x) \
	((struct StructPackageIterator *)PtrPackageIterator(x))
#define GetIndexPackageIterator(x) (PtrStructPackagetable(x)->index)
#define RetPackageIterator RetArraySS
#define GetPackageIterator GetArraySS
#define SetPackageIterator SetArraySS

int package_iterator_alloc_(LocalRoot local, addr *ret,
		addr list, int internal, int external, int inherited);
int package_iterator_local_(LocalRoot local, addr *ret,
		addr list, int internal, int external, int inherited);
int package_iterator_heap_(addr *ret,
		addr list, int internal, int external, int inherited);
int next_package_iterator_(addr pos, addr *rets, addr *retp, enum PACKAGE_TYPE *ret);

#endif


/************************************************************
 *  pathname_localp.h
 ************************************************************/
#ifndef __PATHNAME_LOCALP_HEADER__
#define __PATHNAME_LOCALP_HEADER__


#define push_localp _n(push_localp)
#define rollback_localp _n(rollback_localp)
#define localp_alloc _n(localp_alloc)

struct localp_struct {
	unsigned localp : 1;
	LocalRoot local;
};

typedef struct localp_struct *LocalpRoot;

void push_localp(LocalpRoot local, LocalStack *ret);
void rollback_localp(LocalpRoot local, LocalStack stack);
LocalRoot localp_alloc(LocalpRoot local);

#endif


/************************************************************
 *  pathname_table.h
 ************************************************************/
#ifndef __PATHNAME_TABLE_HEADER__
#define __PATHNAME_TABLE_HEADER__


#define init_fileparse _n(init_fileparse)
#define pathname_fileparse_alloc _n(pathname_fileparse_alloc)
#define wild_value_pathname_ _n(wild_value_pathname_)
#define make_parse_logical_pathname_ _n(make_parse_logical_pathname_)
#define pushrange_pathname_ _n(pushrange_pathname_)
#define make_charqueue_fileparse _n(make_charqueue_fileparse)
#define nametype_pathname_ _n(nametype_pathname_)
#define pushdirectory_fileparse_ _n(pushdirectory_fileparse_)
#define pushconstant_fileparse _n(pushconstant_fileparse)
#define check_host_logical_pathname_ _n(check_host_logical_pathname_)
#define check_drive_logical_pathname_ _n(check_drive_logical_pathname_)
#define parser_logical_pathname_ _n(parser_logical_pathname_)
#define parser_unix_pathname_ _n(parser_unix_pathname_)
#define parser_windows_pathname_ _n(parser_windows_pathname_)

struct fileparse {
	unsigned junk : 1;
	unsigned force_host : 1;
	unsigned errorp : 1;
	Execute ptr;
	LocalpRoot local;
	addr thing, path, queue, result;
	addr host, device, directory, name, type, version;
	size_t start, end, endpos;
	struct localp_struct local_buffer;
};

void init_fileparse(struct fileparse *pa, Execute ptr, int localp);
void pathname_fileparse_alloc(struct fileparse *pa, int logical);
int wild_value_pathname_(addr input, addr *ret);
int make_parse_logical_pathname_(struct fileparse *pa);
int pushrange_pathname_(LocalpRoot local,
		addr queue, addr thing, size_t n1, size_t n2);
void make_charqueue_fileparse(struct fileparse *pa, addr queue, addr *ret);
int nametype_pathname_(struct fileparse *pa, size_t index);
int pushdirectory_fileparse_(struct fileparse *pa, addr *list, addr name);
void pushconstant_fileparse(struct fileparse *pa, addr *list, constindex index);

int check_host_logical_pathname_(LocalpRoot local, addr queue, int *ret);
int check_drive_logical_pathname_(LocalpRoot local, int drive, int *ret);

int parser_logical_pathname_(struct fileparse *pa);
int parser_unix_pathname_(struct fileparse *pa);
int parser_windows_pathname_(struct fileparse *pa);

#endif


/************************************************************
 *  print_object.h
 ************************************************************/
#ifndef __PRINT_OBJECT__
#define __PRINT_OBJECT__


#define print_structure_ _n(print_structure_)
#define build_print_object_ _n(build_print_object_)
#define init_print_object _n(init_print_object)

int print_structure_(Execute ptr, addr stream, addr pos);
int build_print_object_(Execute ptr);
void init_print_object(void);

#endif


/************************************************************
 *  stream_pipe.h
 ************************************************************/
#ifndef __STREAM_PIPE_HEADER__
#define __STREAM_PIPE_HEADER__


#define open_pipe_stream _n(open_pipe_stream)
#define get_type_pipe_stream _n(get_type_pipe_stream)
#define set_type_pipe_stream _n(set_type_pipe_stream)
#define get_name_pipe_stream _n(get_name_pipe_stream)
#define set_name_pipe_stream _n(set_name_pipe_stream)
#define init_stream_pipe _n(init_stream_pipe)

enum pipe_stream_name {
	pipe_stream_default,
	pipe_stream_input,
	pipe_stream_output,
	pipe_stream_error
};

void open_pipe_stream(addr *stream, enum StreamPipe type);
enum StreamPipe get_type_pipe_stream(addr stream);
void set_type_pipe_stream(addr stream, enum StreamPipe type);
const char *get_name_pipe_stream(addr stream);
void set_name_pipe_stream(addr stream, enum pipe_stream_name type);
void init_stream_pipe(void);

#endif


/************************************************************
 *  type_name.h
 ************************************************************/
#ifndef __TYPE_NAME_HEADER__
#define __TYPE_NAME_HEADER__


#define type_name_p_ _n(type_name_p_)
#define type_name_ _n(type_name_)
#define init_type_name _n(init_type_name)

/*  function type_name
 *     input: type
 *    output: symbol  [not cons]
 */
int type_name_p_(addr pos, addr *value, int *ret);
int type_name_(addr pos, addr *value);
void init_type_name(void);

#endif


/************************************************************
 *  process.h
 ************************************************************/
#ifndef __PROCESS_HEADER__
#define __PROCESS_HEADER__


#define run_process_ _n(run_process_)
#define dlfile_process_ _n(dlfile_process_)
#define dlcall_process_ _n(dlcall_process_)

int run_process_(Execute ptr, addr var, addr args, addr rest, addr *ret);
int dlfile_process_(Execute ptr, addr type, addr args, addr *ret, addr *retp);
int dlcall_process_(Execute ptr, addr paper, addr args);

#endif


/************************************************************
 *  process_arch.h
 ************************************************************/
#ifndef __PROCESS_ARCH_HEADER__
#define __PROCESS_ARCH_HEADER__


#define run_process_arch_ _n(run_process_arch_)
#define dlfile_check_arch_ _n(dlfile_check_arch_)
#define dlopen_arch_ _n(dlopen_arch_)
#define dlclose_arch_ _n(dlclose_arch_)
#define dlsym_arch_ _n(dlsym_arch_)
#define dlcall_arch_ _n(dlcall_arch_)

int run_process_arch_(Execute ptr, addr instance, addr *ret);
int dlfile_check_arch_(addr pos, addr *ret, int *openp);
int dlopen_arch_(Execute ptr, addr pos, addr *ret);
int dlclose_arch_(Execute ptr, addr pos, addr *ret);
int dlsym_arch_(Execute ptr, addr pos, addr name, enum CallBind_index type, addr *ret);
int dlcall_arch_(Execute ptr, addr pos, addr args);

#endif


/************************************************************
 *  process_calltype.h
 ************************************************************/
#ifndef __PROCESS_CALLTYPE_HEADER__
#define __PROCESS_CALLTYPE_HEADER__


#define process_calltype_ _n(process_calltype_)

int process_calltype_(addr pos, enum CallBind_index *ret);

#endif


/************************************************************
 *  process_ed.h
 ************************************************************/
#ifndef __PROCESS_ED_HEADER__
#define __PROCESS_ED_HEADER__


#if defined(LISP_UNIX)
#define LISP_ED_PROCESS_DEFAULT  "vi"
#elif defined(LISP_WINDOWS)
#define LISP_ED_PROCESS_DEFAULT  "notepad.exe"
#else
#define LISP_ED_PROCESS_DEFAULT  "ed"
#endif

#define ed_process_ _n(ed_process_)
int ed_process_(Execute ptr, addr file);

#endif


/************************************************************
 *  prompt_arch.h
 ************************************************************/
#ifndef __PROMPT_ARCH_HEADER__
#define __PROMPT_ARCH_HEADER__


#define input_prompt_ _n(input_prompt_)
#define clear_prompt_ _n(clear_prompt_)

int input_prompt_(Execute ptr, addr *ret);
int clear_prompt_(void);

#endif


/************************************************************
 *  reader_dispatch.h
 ************************************************************/
#ifndef __READER_DISPATCH_HEADER__
#define __READER_DISPATCH_HEADER__


#define build_reader_dispatch _n(build_reader_dispatch)
#define init_reader_dispatch _n(init_reader_dispatch)

void build_reader_dispatch(void);
void init_reader_dispatch(void);

#endif


/************************************************************
 *  reader_info.h
 ************************************************************/
#ifndef __READER_INFO_HEADER__
#define __READER_INFO_HEADER__


#define get_readinfo _n(get_readinfo)
#define set_readinfo _n(set_readinfo)
#define struct_readinfo _n(struct_readinfo)
#define getreadinfo _n(getreadinfo)
#define getreadinfo_struct _n(getreadinfo_struct)
#define pushreadinfo _n(pushreadinfo)
#define pushreadinfo_recursive_ _n(pushreadinfo_recursive_)
#define getpackage_readinfo _n(getpackage_readinfo)
#define setpackage_readinfo _n(setpackage_readinfo)
#define getqueue_readinfo _n(getqueue_readinfo)
#define getpreserving_readinfo _n(getpreserving_readinfo)
#define getescape_readinfo _n(getescape_readinfo)
#define setescape_readinfo _n(setescape_readinfo)
#define getdot_readinfo _n(getdot_readinfo)
#define getreplace_readinfo _n(getreplace_readinfo)
#define getstate_readinfo _n(getstate_readinfo)
#define setstate_readinfo _n(setstate_readinfo)
#define clear_readinfo _n(clear_readinfo)

enum ReadInfo_Index {
	ReadInfo_Package,
	ReadInfo_Queue,
	ReadInfo_Label,
	ReadInfo_Size
};

enum ReadInfo_State {
	ReadInfo_State_First,
	ReadInfo_State_Colon1,
	ReadInfo_State_Colon2,
	ReadInfo_State_Gensym
};

struct readinfo_struct {
	unsigned preserving : 1;
	unsigned recursive : 1;
	unsigned escape : 1;
	unsigned dot : 1;
	unsigned replace : 1;
	unsigned unexport : 1;
	enum ReadInfo_State state : 4;
	size_t backquote;
};

#define GetReadInfo_Low			GetArraySS
#define SetReadInfo_Low			SetArraySS
#define ReadInfoStruct_Low(x)	\
	((struct readinfo_struct *)PtrBodySSa((x), ReadInfo_Size))

#ifdef LISP_DEBUG
#define GetReadInfo				get_readinfo
#define SetReadInfo				set_readinfo
#define ReadInfoStruct			struct_readinfo
#else
#define GetReadInfo				GetReadInfo_Low
#define SetReadInfo				SetReadInfo_Low
#define ReadInfoStruct			ReadInfoStruct_Low
#endif

void get_readinfo(addr pos, size_t index, addr *ret);
void set_readinfo(addr pos, size_t index, addr value);
struct readinfo_struct *struct_readinfo(addr pos);

void getreadinfo(Execute ptr, addr *ret);
struct readinfo_struct *getreadinfo_struct(Execute ptr);
void pushreadinfo(Execute ptr, addr *ret);
int pushreadinfo_recursive_(Execute ptr, addr *ret);
void getpackage_readinfo(Execute ptr, addr *ret);
void setpackage_readinfo(Execute ptr, addr value);
void getqueue_readinfo(Execute ptr, addr *ret);
unsigned getpreserving_readinfo(Execute ptr);
unsigned getescape_readinfo(Execute ptr);
void setescape_readinfo(Execute ptr, unsigned value);
unsigned getdot_readinfo(Execute ptr);
unsigned getreplace_readinfo(Execute ptr, addr *label);
enum ReadInfo_State getstate_readinfo(Execute ptr);
void setstate_readinfo(Execute ptr, enum ReadInfo_State value);
void clear_readinfo(Execute ptr);

#endif


/************************************************************
 *  reader_token.h
 ************************************************************/
#ifndef __READER_TOKEN_HEADER__
#define __READER_TOKEN_HEADER__


#define init_reader_token _n(init_reader_token)
#define tokentype _n(tokentype)
#define getreadbase_ _n(getreadbase_)
#define read_suppress_p_ _n(read_suppress_p_)
#define maketoken_ _n(maketoken_)

enum TokenType {
	TokenType_symbol = 0,
	TokenType_potential,
	TokenType_integer,
	TokenType_decimal,
	TokenType_float,
	TokenType_ratio,
	TokenType_dot,
	TokenType_empty,
	TokenType_error
};

void init_reader_token(void);
enum TokenType tokentype(unsigned base, addr queue);
int getreadbase_(Execute ptr, unsigned *ret);
int read_suppress_p_(Execute ptr, int *ret);
int maketoken_(Execute ptr, addr *ret);

#endif


/************************************************************
 *  reader_label.h
 ************************************************************/
#ifndef __READER_LABEL_HEADER__
#define __READER_LABEL_HEADER__


#define dotqueue_readlabel _n(dotqueue_readlabel)
#define pushqueue_readlabel _n(pushqueue_readlabel)
#define find_readlabel _n(find_readlabel)
#define pushlabel_readinfo_ _n(pushlabel_readinfo_)
#define closelabel_readlabel_ _n(closelabel_readlabel_)
#define vector_readlabel _n(vector_readlabel)
#define array_readlabel_ _n(array_readlabel_)

void dotqueue_readlabel(Execute ptr, addr queue, addr pos);
void pushqueue_readlabel(Execute ptr, addr queue, addr pos);
int find_readlabel(addr key, addr list, addr *ret);
int pushlabel_readinfo_(Execute ptr, addr value, addr *ret);
int closelabel_readlabel_(Execute ptr, addr label, addr pos);
void vector_readlabel(Execute ptr, addr pos);
int array_readlabel_(Execute ptr, addr pos);

#endif


/************************************************************
 *  real_multi.h
 ************************************************************/
#ifndef __REAL_MULTI_HEADER__
#define __REAL_MULTI_HEADER__


#define multi_fixnum_real_common_ _n(multi_fixnum_real_common_)
#define multi_bignum_real_common_ _n(multi_bignum_real_common_)
#define multi_ratio_real_common_ _n(multi_ratio_real_common_)
#define multi_single_real_common_ _n(multi_single_real_common_)
#define multi_double_real_common_ _n(multi_double_real_common_)
#define multi_long_real_common_ _n(multi_long_real_common_)
#define multi_real_common_ _n(multi_real_common_)
#define multi_fixnum_real_local_ _n(multi_fixnum_real_local_)
#define multi_bignum_real_local_ _n(multi_bignum_real_local_)
#define multi_ratio_real_local_ _n(multi_ratio_real_local_)
#define multi_single_real_local_ _n(multi_single_real_local_)
#define multi_double_real_local_ _n(multi_double_real_local_)
#define multi_long_real_local_ _n(multi_long_real_local_)
#define multi_real_local_ _n(multi_real_local_)
#define div_fixnum_real_common_ _n(div_fixnum_real_common_)
#define div_real_fixnum_common_ _n(div_real_fixnum_common_)
#define div_bignum_real_common_ _n(div_bignum_real_common_)
#define div_real_bignum_common_ _n(div_real_bignum_common_)
#define div_ratio_real_common_ _n(div_ratio_real_common_)
#define div_real_ratio_common_ _n(div_real_ratio_common_)
#define div_single_real_common_ _n(div_single_real_common_)
#define div_real_single_common_ _n(div_real_single_common_)
#define div_double_real_common_ _n(div_double_real_common_)
#define div_real_double_common_ _n(div_real_double_common_)
#define div_long_real_common_ _n(div_long_real_common_)
#define div_real_long_common_ _n(div_real_long_common_)
#define div_real_common_ _n(div_real_common_)
#define div_fixnum_real_local_ _n(div_fixnum_real_local_)
#define div_real_fixnum_local_ _n(div_real_fixnum_local_)
#define div_bignum_real_local_ _n(div_bignum_real_local_)
#define div_real_bignum_local_ _n(div_real_bignum_local_)
#define div_ratio_real_local_ _n(div_ratio_real_local_)
#define div_real_ratio_local_ _n(div_real_ratio_local_)
#define div_single_real_local_ _n(div_single_real_local_)
#define div_real_single_local_ _n(div_real_single_local_)
#define div_double_real_local_ _n(div_double_real_local_)
#define div_real_double_local_ _n(div_real_double_local_)
#define div_long_real_local_ _n(div_long_real_local_)
#define div_real_long_local_ _n(div_real_long_local_)
#define div_real_local_ _n(div_real_local_)

int multi_fixnum_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int multi_bignum_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int multi_ratio_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int multi_single_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int multi_double_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int multi_long_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int multi_real_common_(LocalRoot local, addr left, addr right, addr *ret);

int multi_fixnum_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_bignum_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_ratio_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_single_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_double_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_long_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int multi_real_local_(LocalRoot local, addr left, addr right, addr *ret);

int div_fixnum_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_real_fixnum_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_bignum_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_real_bignum_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_ratio_real_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_real_ratio_common_(LocalRoot local, addr left, addr right, addr *ret);
int div_single_real_common_(addr left, addr right, addr *ret);
int div_real_single_common_(addr left, addr right, addr *ret);
int div_double_real_common_(addr left, addr right, addr *ret);
int div_real_double_common_(addr left, addr right, addr *ret);
int div_long_real_common_(addr left, addr right, addr *ret);
int div_real_long_common_(addr left, addr right, addr *ret);
int div_real_common_(LocalRoot local, addr left, addr right, addr *ret);

int div_fixnum_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_real_fixnum_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_bignum_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_real_bignum_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_ratio_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_real_ratio_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_single_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_real_single_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_double_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_real_double_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_long_real_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_real_long_local_(LocalRoot local, addr left, addr right, addr *ret);
int div_real_local_(LocalRoot local, addr left, addr right, addr *ret);

#endif


/************************************************************
 *  require_clos.h
 ************************************************************/
#ifndef __REQUIRE_CLOS_HEADER__
#define __REQUIRE_CLOS_HEADER__


#define require_clos_ _n(require_clos_)
#define unrequire_clos_ _n(unrequire_clos_)

int require_clos_(Execute ptr, addr var, int forcep, int *ret);
int unrequire_clos_(Execute ptr, addr var, int forcep, int *ret);

#endif


/************************************************************
 *  scope_table.h
 ************************************************************/
#ifndef __SCOPE_TABLE_HEADER__
#define __SCOPE_TABLE_HEADER__


#define scope_progn_ _n(scope_progn_)
#define scope_locally _n(scope_locally)
#define scope_eval_when _n(scope_eval_when)
#define init_scope_function _n(init_scope_function)

int scope_progn_(Execute ptr, addr *ret, addr eval);
int scope_locally(Execute ptr, addr *ret, addr eval);
int scope_eval_when(Execute ptr, addr *ret, addr eval);

void init_scope_function(void);

#endif


/************************************************************
 *  scope_call.h
 ************************************************************/
#ifndef __SCOPE_CALL_HEADER__
#define __SCOPE_CALL_HEADER__


#define scope_symbol_call_ _n(scope_symbol_call_)
#define scope_setq_call _n(scope_setq_call)
#define scope_values_call_ _n(scope_values_call_)
#define scope_the_call_ _n(scope_the_call_)
#define scope_locally_call_ _n(scope_locally_call_)
#define scope_tagbody_call _n(scope_tagbody_call)
#define scope_go_call_ _n(scope_go_call_)
#define scope_block_call _n(scope_block_call)
#define scope_return_from_call _n(scope_return_from_call)
#define scope_init_mvbind _n(scope_init_mvbind)
#define scope_multiple_value_bind_call_ _n(scope_multiple_value_bind_call_)
#define scope_multiple_value_call_call_ _n(scope_multiple_value_call_call_)

int scope_symbol_call_(Execute ptr, addr *ret, addr eval);
int scope_setq_call(Execute ptr, addr cons, addr *ret, addr *type);
int scope_values_call_(Execute ptr, addr args, addr *rargs, addr *rtype);
int scope_the_call_(Execute ptr, addr form, addr type, addr expr, addr *ret);
int scope_locally_call_(Execute ptr, addr form, addr decl, addr cons, addr *ret);
int scope_tagbody_call(Execute ptr, addr tag, addr body, addr *rtag, addr *rbody);
int scope_go_call_(Execute ptr, addr *ret, addr tag);
int scope_block_call(Execute ptr, addr name, addr cons,
		addr *rname, addr *rcons, addr *rtype);
int scope_return_from_call(Execute ptr,
		addr name, addr form, addr *rname, addr *rexpr);
void scope_init_mvbind(struct mvbind_struct *str);
int scope_multiple_value_bind_call_(Execute ptr, struct mvbind_struct *str);
int scope_multiple_value_call_call_(Execute ptr,
		addr form, addr expr, addr cons, addr *ret);

#endif


/************************************************************
 *  scope_check.h
 ************************************************************/
#ifndef __SCOPE_CHECK_HEADER__
#define __SCOPE_CHECK_HEADER__


#define scope_call_call_ _n(scope_call_call_)

int scope_call_call_(Execute ptr, addr form, addr first, addr args, addr *ret);

#endif


/************************************************************
 *  scope_function.h
 ************************************************************/
#ifndef __SCOPE_FUNCTION_HEADER__
#define __SCOPE_FUNCTION_HEADER__


#define make_tablefunction_stack _n(make_tablefunction_stack)
#define update_tablefunction_ _n(update_tablefunction_)
#define push_tablefunction_global_ _n(push_tablefunction_global_)
#define scope_function_call_ _n(scope_function_call_)

int make_tablefunction_stack(Execute ptr, addr *ret, addr stack, addr call);
int update_tablefunction_(Execute ptr, addr stack, addr pos);
int push_tablefunction_global_(Execute ptr, addr stack, addr call, addr *ret);
int scope_function_call_(Execute ptr, addr *ret, addr eval);

#endif


/************************************************************
 *  scope_lambda.h
 ************************************************************/
#ifndef __SCOPE_LAMBDA_HEADER__
#define __SCOPE_LAMBDA_HEADER__


#define scope_init_lambda _n(scope_init_lambda)
#define localhold_lambda_struct _n(localhold_lambda_struct)
#define lambda_lexical_heap _n(lambda_lexical_heap)

#define scope_lambda_object_ _n(scope_lambda_object_)
#define scope_lambda_call_ _n(scope_lambda_call_)

#define scope_macro_lambda_execute_ _n(scope_macro_lambda_execute_)
#define scope_macro_lambda_object_ _n(scope_macro_lambda_object_)
#define scope_macro_lambda_call_ _n(scope_macro_lambda_call_)

void scope_init_lambda(struct lambda_struct *str, EvalParse eval, int globalp);
void localhold_lambda_struct(LocalRoot local, struct lambda_struct *str);
void lambda_lexical_heap(addr stack, addr *ret);

int scope_lambda_object_(Execute ptr, struct lambda_struct *str, addr *ret);
int scope_lambda_call_(Execute ptr, addr *ret, addr eval);

int scope_macro_lambda_execute_(Execute ptr, struct lambda_struct *str, addr *ret);
int scope_macro_lambda_object_(Execute ptr, struct lambda_struct *str, addr *ret);
int scope_macro_lambda_call_(Execute ptr, struct lambda_struct *str, addr *ret);

#endif


/************************************************************
 *  type_function.h
 ************************************************************/
#ifndef __TYPE_FUNCTION_HEADER__
#define __TYPE_FUNCTION_HEADER__


struct ordinary_args {
	addr var, opt, rest, key;
	size_t size, size_var, size_opt, size_key, pos_rest;
};

struct ordinary_type {
	addr type;
	unsigned nil : 1;
	unsigned var : 1;
	unsigned rest : 1;
	unsigned key : 1;
	unsigned value : 1;
};

typedef struct ordinary_args ordargs;
typedef struct ordinary_type ordtype;

#define make_ordargs _n(make_ordargs)
#define gettype_ordargs_ _n(gettype_ordargs_)
#define simple_p_ordargs _n(simple_p_ordargs)
#define merge_ordargs _n(merge_ordargs)

#define size_check_ordcall_ _n(size_check_ordcall_)
#define gettype_ordcall_ _n(gettype_ordcall_)
#define make_ordvalues_heap _n(make_ordvalues_heap)

void make_ordargs(ordargs *ptr, addr pos);
int gettype_ordargs_(const ordargs *ptr, size_t index, ordtype *ret);
int simple_p_ordargs(const ordargs *ptr);
void merge_ordargs(LocalRoot local, addr *ret, const ordargs *ptr, const ordtype *type);

/* function arguments */
int size_check_ordcall_(addr pos, size_t size, int *ret);
int gettype_ordcall_(addr pos, size_t i, addr *ret);
/* function values */
void make_ordvalues_heap(addr pos, addr *ret);

#endif


/************************************************************
 *  scope_defun.h
 ************************************************************/
#ifndef __SCOPE_DEFUN_HEADER__
#define __SCOPE_DEFUN_HEADER__


#define scope_defun_call_ _n(scope_defun_call_)
#define scope_deftype_call_ _n(scope_deftype_call_)
#define scope_define_compiler_macro_call_ _n(scope_define_compiler_macro_call_)
#define scope_bind_call_ _n(scope_bind_call_)
#define scope_flet_call_ _n(scope_flet_call_)
#define scope_labels_call_ _n(scope_labels_call_)

int scope_defun_call_(Execute ptr, struct lambda_struct *str, addr *ret);
int scope_deftype_call_(Execute ptr, struct lambda_struct *str, addr *ret);
int scope_define_compiler_macro_call_(Execute ptr, struct lambda_struct *str, addr *ret);
int scope_bind_call_(Execute ptr, addr *ret, addr form, addr expr, addr args);
int scope_flet_call_(Execute ptr, struct let_struct *str);
int scope_labels_call_(Execute ptr, struct let_struct *str);

#endif


/************************************************************
 *  sequence_write.h
 ************************************************************/
#ifndef __SEQUENCE_WRITE_HEADER__
#define __SEQUENCE_WRITE_HEADER__


#define build_sequence_write_list _n(build_sequence_write_list)
#define build_sequence_write_result _n(build_sequence_write_result)
#define build_sequence_write_ _n(build_sequence_write_)
#define result_sequence_write _n(result_sequence_write)
#define push_sequence_write_ _n(push_sequence_write_)
#define before_sequence_write_ _n(before_sequence_write_)
#define after_sequence_write_ _n(after_sequence_write_)
#define reverse_sequence_write _n(reverse_sequence_write)

struct sequence_write {
	unsigned listp : 1;
	unsigned reverse : 1;
	addr pos;
	size_t index, size, revsize, revbase;
};

void build_sequence_write_list(struct sequence_write *ptr);
void build_sequence_write_result(struct sequence_write *ptr, addr pos);
int build_sequence_write_(struct sequence_write *ptr, addr pos);
addr result_sequence_write(struct sequence_write *ptr);
int push_sequence_write_(struct sequence_write *ptr, addr pos);
int before_sequence_write_(struct sequence_write *ptr, struct sequence_range *range);
int after_sequence_write_(struct sequence_write *ptr, struct sequence_range *range);
void reverse_sequence_write(struct sequence_write *ptr, size_t size);

#endif


/************************************************************
 *  sequence_iterator.h
 ************************************************************/
#ifndef __SEQUENCE_ITERATOR_HEADER__
#define __SEQUENCE_ITERATOR_HEADER__


#define make_sequence_iterator_local_ _n(make_sequence_iterator_local_)
#define end_sequence_iterator _n(end_sequence_iterator)
#define length_sequence_iterator_ _n(length_sequence_iterator_)
#define object_sequence_iterator_ _n(object_sequence_iterator_)
#define set_sequence_iterator_ _n(set_sequence_iterator_)
#define make_sequence_group_local_ _n(make_sequence_group_local_)
#define list_sequence_group_local _n(list_sequence_group_local)
#define set_sequence_group_ _n(set_sequence_group_)
#define clear_sequence_group _n(clear_sequence_group)
#define count_sequence_group_ _n(count_sequence_group_)

struct sequence_iterator {
	unsigned listp : 1;
	addr pos, root;
	size_t size, index;
};

struct sequence_group {
	struct sequence_iterator **data;
	size_t size, callsize;
	addr list;
};


/* sequence-iterator */
int make_sequence_iterator_local_(LocalRoot local,
		addr pos, int fill, struct sequence_iterator **ret);
int end_sequence_iterator(struct sequence_iterator *ptr);
int length_sequence_iterator_(struct sequence_iterator *ptr, size_t *ret);
int object_sequence_iterator_(struct sequence_iterator *iter, addr *value, int *ret);
int set_sequence_iterator_(struct sequence_iterator *iter, addr value, int *ret);


/* sequence-group */
int make_sequence_group_local_(
		LocalRoot local, addr rest, int fill, struct sequence_group **ret);
void list_sequence_group_local(LocalRoot local,
		addr *ret, struct sequence_group *group);
int set_sequence_group_(struct sequence_group *group, addr list, int *ret);
void clear_sequence_group(struct sequence_group *group);
int count_sequence_group_(struct sequence_group *group, size_t *ret);

#endif


/************************************************************
 *  stream_file.h
 ************************************************************/
#ifndef __STREAM_FILE_HEADER__
#define __STREAM_FILE_HEADER__

#define init_stream_binary_input _n(init_stream_binary_input)
#define init_stream_binary_output _n(init_stream_binary_output)
#define init_stream_binary_io _n(init_stream_binary_io)
#define init_stream_character_input _n(init_stream_character_input)
#define init_stream_character_output _n(init_stream_character_output)
#define init_stream_character_io _n(init_stream_character_io)
#define init_stream_binchar_input _n(init_stream_binchar_input)
#define init_stream_binchar_output _n(init_stream_binchar_output)
#define init_stream_binchar_io _n(init_stream_binchar_io)
#define init_stream_probe _n(init_stream_probe)

void init_stream_binary_input(void);
void init_stream_binary_output(void);
void init_stream_binary_io(void);
void init_stream_character_input(void);
void init_stream_character_output(void);
void init_stream_character_io(void);
void init_stream_binchar_input(void);
void init_stream_binchar_output(void);
void init_stream_binchar_io(void);
void init_stream_probe(void);

#endif


/************************************************************
 *  stream_prompt.h
 ************************************************************/
#ifndef __STREAM_PROMPT_HEADER__
#define __STREAM_PROMPT_HEADER__


#define open_prompt_stream _n(open_prompt_stream)
#define init_stream_prompt _n(init_stream_prompt)

void open_prompt_stream(addr *stream);
void init_stream_prompt(void);

#endif


/************************************************************
 *  structure_define.h
 ************************************************************/
#ifndef __STRUCTURE_DEFINE_HEADER__
#define __STRUCTURE_DEFINE_HEADER__


#define ensure_structure_common_ _n(ensure_structure_common_)
#define init_structure_define _n(init_structure_define)

int ensure_structure_common_(Execute ptr, addr name, addr slots, addr rest);
void init_structure_define(void);

#endif


/************************************************************
 *  structure_define1.h
 ************************************************************/
#ifndef __STRUCTURE_DEFINE1_HEADER__
#define __STRUCTURE_DEFINE1_HEADER__


#define structure_instance1_ _n(structure_instance1_)
#define structure_define1_slots_ _n(structure_define1_slots_)
#define structure_define1_call_ _n(structure_define1_call_)
#define structure_define1_copier_ _n(structure_define1_copier_)
#define structure_define1_predicate_ _n(structure_define1_predicate_)
#define structure_define1_constructor_ _n(structure_define1_constructor_)
#define structure_define1_print_ _n(structure_define1_print_)
#define structure_define1_ _n(structure_define1_)
#define init_structure_define1 _n(init_structure_define1)

int structure_instance1_(struct defstruct *str);
int structure_define1_slots_(struct defstruct *str);
int structure_define1_call_(struct defstruct *str);
int structure_define1_copier_(struct defstruct *str);
int structure_define1_predicate_(struct defstruct *str);
int structure_define1_constructor_(struct defstruct *str);
int structure_define1_print_(struct defstruct *str);
int structure_define1_(struct defstruct *str);
void init_structure_define1(void);

#endif


/************************************************************
 *  structure_define2.h
 ************************************************************/
#ifndef __STRUCTURE_DEFINE2_HEADER__
#define __STRUCTURE_DEFINE2_HEADER__


#define structure_instance2 _n(structure_instance2)
#define structure_define2_slots_ _n(structure_define2_slots_)
#define structure_define3_slots_ _n(structure_define3_slots_)
#define structure_define2_call_ _n(structure_define2_call_)
#define structure_define3_call_ _n(structure_define3_call_)
#define structure_define2_constructor_ _n(structure_define2_constructor_)
#define structure_define3_constructor_ _n(structure_define3_constructor_)
#define structure_define2_copier_ _n(structure_define2_copier_)
#define structure_define3_copier_ _n(structure_define3_copier_)
#define structure_define2_predicate_ _n(structure_define2_predicate_)
#define structure_define3_predicate_ _n(structure_define3_predicate_)
#define structure_define2_print_ _n(structure_define2_print_)
#define structure_define3_print_ _n(structure_define3_print_)
#define structure_define2_ _n(structure_define2_)
#define structure_define3_ _n(structure_define3_)
#define init_structure_define2 _n(init_structure_define2)
#define init_structure_define3 _n(init_structure_define3)

void structure_instance2(struct defstruct *str);
int structure_define2_slots_(struct defstruct *str);
int structure_define3_slots_(struct defstruct *str);
int structure_define2_call_(struct defstruct *str);
int structure_define3_call_(struct defstruct *str);
int structure_define2_constructor_(struct defstruct *str);
int structure_define3_constructor_(struct defstruct *str);
int structure_define2_copier_(struct defstruct *str);
int structure_define3_copier_(struct defstruct *str);
int structure_define2_predicate_(struct defstruct *str);
int structure_define3_predicate_(struct defstruct *str);
int structure_define2_print_(struct defstruct *str);
int structure_define3_print_(struct defstruct *str);
int structure_define2_(struct defstruct *str);
int structure_define3_(struct defstruct *str);
void init_structure_define2(void);
void init_structure_define3(void);

#endif


/************************************************************
 *  structure_make.h
 ************************************************************/
#ifndef __STRUCTURE_MAKE_HEADER__
#define __STRUCTURE_MAKE_HEADER__


#define make_structure1_ _n(make_structure1_)
#define make_structure2_ _n(make_structure2_)
#define make_structure3_ _n(make_structure3_)
#define make_structure1_common_ _n(make_structure1_common_)
#define make_structure2_common_ _n(make_structure2_common_)
#define make_structure3_common_ _n(make_structure3_common_)

int make_structure1_(Execute ptr, addr *ret, addr pos, addr args, int initp);
int make_structure2_(Execute ptr, addr *ret, addr pos, addr args, int initp);
int make_structure3_(Execute ptr, addr *ret, addr pos, addr args, int initp);

int make_structure1_common_(Execute ptr, addr *ret,
		addr instance, addr rest, int errorp, int initp);
int make_structure2_common_(Execute ptr, addr *ret,
		addr instance, addr rest, int errorp, int initp);
int make_structure3_common_(Execute ptr, addr *ret,
		addr instance, addr rest, int errorp, int initp);

#endif


/************************************************************
 *  structure_change.h
 ************************************************************/
#ifndef __STRUCTURE_CHANGE_HEADER__
#define __STRUCTURE_CHANGE_HEADER__


#define structure_change1_ _n(structure_change1_)
#define structure_change2_ _n(structure_change2_)
#define structure_change3_ _n(structure_change3_)

int structure_change1_(struct defstruct *str);
int structure_change2_(struct defstruct *str);
int structure_change3_(struct defstruct *str);

#endif


/************************************************************
 *  structure_delete.h
 ************************************************************/
#ifndef __STRUCTURE_DELETE_HEADER__
#define __STRUCTURE_DELETE_HEADER__


#define structure_delete1_call_ _n(structure_delete1_call_)
#define structure_delete2_call_ _n(structure_delete2_call_)
#define structure_delete3_call_ _n(structure_delete3_call_)
#define structure_delete1_copier_ _n(structure_delete1_copier_)
#define structure_delete2_copier_ _n(structure_delete2_copier_)
#define structure_delete3_copier_ _n(structure_delete3_copier_)
#define structure_delete1_predicate_ _n(structure_delete1_predicate_)
#define structure_delete2_predicate_ _n(structure_delete2_predicate_)
#define structure_delete3_predicate_ _n(structure_delete3_predicate_)
#define structure_delete1_constructor_ _n(structure_delete1_constructor_)
#define structure_delete2_constructor_ _n(structure_delete2_constructor_)
#define structure_delete3_constructor_ _n(structure_delete3_constructor_)
#define structure_delete1_print_ _n(structure_delete1_print_)
#define structure_delete_ _n(structure_delete_)

int structure_delete1_call_(addr instance);
int structure_delete2_call_(addr instance);
int structure_delete3_call_(addr instance);
int structure_delete1_copier_(addr instance);
int structure_delete2_copier_(addr instance);
int structure_delete3_copier_(addr instance);
int structure_delete1_predicate_(addr instance);
int structure_delete2_predicate_(addr instance);
int structure_delete3_predicate_(addr instance);
int structure_delete1_constructor_(addr instance);
int structure_delete2_constructor_(addr instance);
int structure_delete3_constructor_(addr instance);
int structure_delete1_print_(Execute ptr, addr instance);
int structure_delete_(Execute ptr, addr name, int *ret);

#endif


/************************************************************
 *  structure_parse.h
 ************************************************************/
#ifndef __STRUCTURE_PARSE_HEADER__
#define __STRUCTURE_PARSE_HEADER__


#define ensure_structure_struct_ _n(ensure_structure_struct_)
#define structure_arguments_ _n(structure_arguments_)

int ensure_structure_struct_(struct defstruct *str,
		Execute ptr, addr name, addr slots, addr args);
int structure_arguments_(struct defstruct *str, LocalHold hold);

#endif


/************************************************************
 *  structure_direct.h
 ************************************************************/
#ifndef __STRUCTURE_DIRECT_HEADER__
#define __STRUCTURE_DIRECT_HEADER__


struct structure_type_struct {
	unsigned named : 1;
	unsigned errorp : 1;
	enum ARRAY_TYPE type1;
	int type2;
	size_t size, size_all, offset, named_index;
};
enum StructureTypeIndex {
	StructureType_instance,
	StructureType_name,
	StructureType_slot,
	StructureType_vector,
	StructureType_size
};

#define PtrStructureType_Low(x)            \
	((struct structure_type_struct *)PtrBodySSa((x), StructureType_size))
#define GetInstanceStructureType_Low(x,y)   GetArraySS((x),StructureType_instance,(y))
#define SetInstanceStructureType_Low(x,y)   SetArraySS((x),StructureType_instance,(y))
#define GetNameStructureType_Low(x,y)       GetArraySS((x),StructureType_name,(y))
#define SetNameStructureType_Low(x,y)       SetArraySS((x),StructureType_name,(y))
#define GetSlotStructureType_Low(x,y)       GetArraySS((x),StructureType_slot,(y))
#define SetSlotStructureType_Low(x,y)       SetArraySS((x),StructureType_slot,(y))
#define GetVectorStructureType_Low(x,y)     GetArraySS((x),StructureType_vector,(y))
#define SetVectorStructureType_Low(x,y)     SetArraySS((x),StructureType_vector,(y))
#define RefNamedStructureType_Low(x)        (PtrStructureType(x)->named != 0)
#define GetNamedStructureType_Low(x,y)      (*(y) = (PtrStructureType(x)->named != 0))
#define SetNamedStructureType_Low(x,y)      (PtrStructureType(x)->named = (y) != 0)
#define RefErrorpStructureType_Low(x)       (PtrStructureType(x)->errorp != 0)
#define GetErrorpStructureType_Low(x,y)     (*(y) = (PtrStructureType(x)->errorp != 0))
#define SetErrorpStructureType_Low(x,y)     (PtrStructureType(x)->errorp = (y) != 0)

#ifdef LISP_DEBUG
#define PtrStructureType           PtrStructureType_Low
#define GetInstanceStructureType   GetInstanceStructureType_Low
#define SetInstanceStructureType   SetInstanceStructureType_Low
#define GetNameStructureType       GetNameStructureType_Low
#define SetNameStructureType       SetNameStructureType_Low
#define GetSlotStructureType       GetSlotStructureType_Low
#define SetSlotStructureType       SetSlotStructureType_Low
#define GetVectorStructureType     GetVectorStructureType_Low
#define SetVectorStructureType     SetVectorStructureType_Low
#define RefNamedStructureType      RefNamedStructureType_Low
#define GetNamedStructureType      GetNamedStructureType_Low
#define SetNamedStructureType      SetNamedStructureType_Low
#define RefErrorpStructureType     RefErrorpStructureType_Low
#define GetErrorpStructureType     GetErrorpStructureType_Low
#define SetErrorpStructureType     SetErrorpStructureType_Low
#else
#define PtrStructureType           ptrstructuretype
#define GetInstanceStructureType   getinstancestructuretype
#define SetInstanceStructureType   setinstancestructuretype
#define GetNameStructureType       getnamestructuretype
#define SetNameStructureType       setnamestructuretype
#define GetSlotStructureType       getslotstructuretype
#define SetSlotStructureType       setslotstructuretype
#define GetVectorStructureType     getvectorstructuretype
#define SetVectorStructureType     setvectorstructuretype
#define RefNamedStructureType      refnamedstructuretype
#define GetNamedStructureType      getnamedstructuretype
#define SetNamedStructureType      setnamedstructuretype
#define RefErrorpStructureType     referrorpstructuretype
#define GetErrorpStructureType     geterrorpstructuretype
#define SetErrorpStructureType     seterrorpstructuretype
#endif

#define ptrstructuretype _n(ptrstructuretype)
#define getinstancestructuretype _n(getinstancestructuretype)
#define setinstancestructuretype _n(setinstancestructuretype)
#define getnamestructuretype _n(getnamestructuretype)
#define setnamestructuretype _n(setnamestructuretype)
#define getslotstructuretype _n(getslotstructuretype)
#define setslotstructuretype _n(setslotstructuretype)
#define getvectorstructuretype _n(getvectorstructuretype)
#define setvectorstructuretype _n(setvectorstructuretype)
#define refnamedstructuretype _n(refnamedstructuretype)
#define getnamedstructuretype _n(getnamedstructuretype)
#define setnamedstructuretype _n(setnamedstructuretype)
#define referrorpstructuretype _n(referrorpstructuretype)
#define geterrorpstructuretype _n(geterrorpstructuretype)
#define seterrorpstructuretype _n(seterrorpstructuretype)

#define structure_getarray_ _n(structure_getarray_)
#define structure_write1_ _n(structure_write1_)
#define structure_write2_ _n(structure_write2_)
#define structure_write3_ _n(structure_write3_)
#define structure_type_heap _n(structure_type_heap)
#define structure_type _n(structure_type)
#define structure_type_list_p _n(structure_type_list_p)
#define structure_type_vector_p _n(structure_type_vector_p)

struct structure_type_struct *ptrstructuretype(addr pos);
void getinstancestructuretype(addr pos, addr *ret);
void setinstancestructuretype(addr pos, addr value);
void getnamestructuretype(addr pos, addr *ret);
void setnamestructuretype(addr pos, addr value);
void getslotstructuretype(addr pos, addr *ret);
void setslotstructuretype(addr pos, addr value);
void getvectorstructuretype(addr pos, addr *ret);
void setvectorstructuretype(addr pos, addr value);
int refnamedstructuretype(addr pos);
void getnamedstructuretype(addr pos, int *ret);
void setnamedstructuretype(addr pos, int value);
int referrorpstructuretype(addr pos);
void geterrorpstructuretype(addr pos, int *ret);
void seterrorpstructuretype(addr pos, int value);

int structure_getarray_(addr vector, addr slot, addr *ret);
int structure_write1_(Execute ptr, addr instance, addr slot, addr value);
int structure_write2_(Execute ptr, addr list, addr slot, addr value);
int structure_write3_(Execute ptr, addr vector, addr slot, addr type1, addr value);
void structure_type_heap(addr *ret);
void structure_type(struct defstruct *str, addr slot, addr *ret);
int structure_type_list_p(addr type, addr var, int *ret);
int structure_type_vector_p(Execute ptr, addr type, addr var, int *ret);

#endif


/************************************************************
 *  subtypep_check.h
 ************************************************************/
#ifndef __SUBTYPEP_CHECK_HEADER__
#define __SUBTYPEP_CHECK_HEADER__


#define subtypep_number_p _n(subtypep_number_p)

int subtypep_number_p(addr pos);

#endif


/************************************************************
 *  subtypep_compound.h
 ************************************************************/
#ifndef __SUBTYPEP_COMPOUND_HEADER__
#define __SUBTYPEP_COMPOUND_HEADER__


#define subtypep_atomic_not_ _n(subtypep_atomic_not_)
#define subtypep_compound_ _n(subtypep_compound_)
#define subtypep_force_number_ _n(subtypep_force_number_)

int subtypep_atomic_not_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_compound_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_force_number_(Execute ptr, addr x, addr y, SubtypepResult *ret);

#endif


/************************************************************
 *  subtypep_table.h
 ************************************************************/
#ifndef __SUBTYPEP_TABLE_HEADER__
#define __SUBTYPEP_TABLE_HEADER__


#define init_subtypep_table _n(init_subtypep_table)
#define subtypep_table_ _n(subtypep_table_)

void init_subtypep_table(void);
int subtypep_table_(Execute ptr, addr left, addr right, SubtypepResult *ret);

#endif


/************************************************************
 *  subtypep_andor.h
 ************************************************************/
#ifndef __SUBTYPEP_ANDOR_HEADER__
#define __SUBTYPEP_ANDOR_HEADER__


#define subtypep_and_and_ _n(subtypep_and_and_)
#define subtypep_and_or_ _n(subtypep_and_or_)
#define subtypep_or_and_ _n(subtypep_or_and_)
#define subtypep_or_or_ _n(subtypep_or_or_)
#define subtypep_and_type_ _n(subtypep_and_type_)
#define subtypep_or_type_ _n(subtypep_or_type_)
#define subtypep_type_and_ _n(subtypep_type_and_)
#define subtypep_type_or_ _n(subtypep_type_or_)

int subtypep_and_and_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_and_or_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_or_and_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_or_or_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_and_type_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_or_type_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_type_and_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_type_or_(Execute ptr, addr x, addr y, SubtypepResult *ret);

#endif


/************************************************************
 *  subtypep_atomic.h
 ************************************************************/
#ifndef __SUBTYPEP_ATOMIC_HEADER__
#define __SUBTYPEP_ATOMIC_HEADER__


#define ReturnReverse _n(ReturnReverse)
#define subtypep_call_invalid_ _n(subtypep_call_invalid_)
#define subtypep_call_clos_ _n(subtypep_call_clos_)
#define subtypep_call_asterisk_ _n(subtypep_call_asterisk_)
#define subtypep_call_nil_ _n(subtypep_call_nil_)
#define subtypep_call_t_ _n(subtypep_call_t_)
#define subtypep_call_null_ _n(subtypep_call_null_)
#define subtypep_call_eqltype_ _n(subtypep_call_eqltype_)
#define subtypep_call_symbol_ _n(subtypep_call_symbol_)
#define subtypep_call_keyword_ _n(subtypep_call_keyword_)
#define subtypep_call_pathname_ _n(subtypep_call_pathname_)
#define subtypep_call_logical_pathname_ _n(subtypep_call_logical_pathname_)
#define subtypep_call_array_ _n(subtypep_call_array_)
#define subtypep_call_simple_array_ _n(subtypep_call_simple_array_)
#define subtypep_call_character_ _n(subtypep_call_character_)
#define subtypep_call_base_char_ _n(subtypep_call_base_char_)
#define subtypep_call_standard_char_ _n(subtypep_call_standard_char_)
#define subtypep_call_integer_ _n(subtypep_call_integer_)
#define subtypep_call_rational_ _n(subtypep_call_rational_)
#define subtypep_call_real_ _n(subtypep_call_real_)
#define subtypep_call_number_ _n(subtypep_call_number_)
#define subtypep_call_float_ _n(subtypep_call_float_)
#define subtypep_call_short_float_ _n(subtypep_call_short_float_)
#define subtypep_call_single_float_ _n(subtypep_call_single_float_)
#define subtypep_call_double_float_ _n(subtypep_call_double_float_)
#define subtypep_call_long_float_ _n(subtypep_call_long_float_)
#define subtypep_call_ratio_ _n(subtypep_call_ratio_)
#define subtypep_call_stream_ _n(subtypep_call_stream_)
#define subtypep_call_stream_type_ _n(subtypep_call_stream_type_)

int ReturnReverse(SubtypepResult *ret, SubtypepResult check);
int subtypep_call_invalid_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_clos_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_asterisk_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_nil_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_t_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_null_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_eqltype_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_symbol_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_keyword_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_pathname_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_logical_pathname_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_array_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_simple_array_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_character_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_base_char_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_standard_char_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_integer_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_rational_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_real_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_number_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_float_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_short_float_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_single_float_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_double_float_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_long_float_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_ratio_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_stream_(Execute ptr, addr x, addr y, SubtypepResult *ret);
int subtypep_call_stream_type_(Execute ptr, addr x, addr y, SubtypepResult *ret);

#endif


/************************************************************
 *  subtypep_range.h
 ************************************************************/
#ifndef __SUBTYPEP_RANGE_HEADER__
#define __SUBTYPEP_RANGE_HEADER__


#define range_asterisk_p _n(range_asterisk_p)
#define range_left_p _n(range_left_p)
#define range_left_any_p _n(range_left_any_p)
#define range_right_p _n(range_right_p)
#define range_any_right_p _n(range_any_right_p)
#define range_between_p _n(range_between_p)
#define range_left_value _n(range_left_value)
#define range_right_value _n(range_right_value)
#define range_left_left_less_ _n(range_left_left_less_)
#define range_left_left_less_equal_ _n(range_left_left_less_equal_)
#define range_left_left_greater_ _n(range_left_left_greater_)
#define range_left_left_greater_equal_ _n(range_left_left_greater_equal_)
#define range_left_right_less_ _n(range_left_right_less_)
#define range_left_right_less_equal_ _n(range_left_right_less_equal_)
#define range_left_right_greater_ _n(range_left_right_greater_)
#define range_left_right_greater_equal_ _n(range_left_right_greater_equal_)
#define range_right_left_less_ _n(range_right_left_less_)
#define range_right_left_less_equal_ _n(range_right_left_less_equal_)
#define range_right_left_greater_ _n(range_right_left_greater_)
#define range_right_left_greater_equal_ _n(range_right_left_greater_equal_)
#define range_right_right_less_ _n(range_right_right_less_)
#define range_right_right_less_equal_ _n(range_right_right_less_equal_)
#define range_right_right_greater_ _n(range_right_right_greater_)
#define range_right_right_greater_equal_ _n(range_right_right_greater_equal_)
#define range_between_left_ _n(range_between_left_)
#define range_left_between_ _n(range_left_between_)
#define range_between_right_ _n(range_between_right_)
#define range_right_between_ _n(range_right_between_)
#define range_between_in_ _n(range_between_in_)
#define range_in_between_ _n(range_in_between_)
#define range_connect_right_left_ _n(range_connect_right_left_)
#define range_connect_between_left_ _n(range_connect_between_left_)
#define range_connect_between_right_ _n(range_connect_between_right_)

int range_asterisk_p(addr type);
int range_left_p(addr type);
int range_left_any_p(addr type);
int range_right_p(addr type);
int range_any_right_p(addr type);
int range_between_p(addr type);

void range_left_value(addr value, addr *left1, addr *left2);
void range_right_value(addr value, addr *right1, addr *right2);

int range_left_left_less_(addr left, addr right, int *ret);
int range_left_left_less_equal_(addr left, addr right, int *ret);
int range_left_left_greater_(addr left, addr right, int *ret);
int range_left_left_greater_equal_(addr left, addr right, int *ret);
int range_left_right_less_(addr left, addr right, int *ret);
int range_left_right_less_equal_(addr left, addr right, int *ret);
int range_left_right_greater_(addr left, addr right, int *ret);
int range_left_right_greater_equal_(addr left, addr right, int *ret);
int range_right_left_less_(addr left, addr right, int *ret);
int range_right_left_less_equal_(addr left, addr right, int *ret);
int range_right_left_greater_(addr left, addr right, int *ret);
int range_right_left_greater_equal_(addr left, addr right, int *ret);
int range_right_right_less_(addr left, addr right, int *ret);
int range_right_right_less_equal_(addr left, addr right, int *ret);
int range_right_right_greater_(addr left, addr right, int *ret);
int range_right_right_greater_equal_(addr left, addr right, int *ret);

int range_between_left_(addr left, addr right, int *ret);
int range_left_between_(addr left, addr right, int *ret);
int range_between_right_(addr left, addr right, int *ret);
int range_right_between_(addr left, addr right, int *ret);
int range_between_in_(addr left, addr right, int *ret);
int range_in_between_(addr left, addr right, int *ret);

int range_connect_right_left_(addr left, addr right, int *ret);
int range_connect_between_left_(addr left, addr right, int *ret);
int range_connect_between_right_(addr left, addr right, int *ret);

#endif


/************************************************************
 *  syscall_common.h
 ************************************************************/
#ifndef __SYSCALL_COMMON_HEADER__
#define __SYSCALL_COMMON_HEADER__


#define init_syscall_common _n(init_syscall_common)
#define build_syscall_common _n(build_syscall_common)

void init_syscall_common(void);
void build_syscall_common(void);

#endif


/************************************************************
 *  syscall_function.h
 ************************************************************/
#ifndef __SYSCALL_FUNCTION_HEADER__
#define __SYSCALL_FUNCTION_HEADER__


#define init_syscall_function _n(init_syscall_function)
#define build_syscall_function _n(build_syscall_function)

void init_syscall_function(void);
void build_syscall_function(void);

#endif


/************************************************************
 *  syscode_common.h
 ************************************************************/
#ifndef __SYSCODE_COMMON_HEADER__
#define __SYSCODE_COMMON_HEADER__


#define defconstant_syscode_ _n(defconstant_syscode_)
#define in_package_syscode_ _n(in_package_syscode_)
#define setplist_syscode _n(setplist_syscode)
#define remplist_syscode_ _n(remplist_syscode_)
#define make_hash_iterator_syscode _n(make_hash_iterator_syscode)
#define next_hash_iterator_syscode _n(next_hash_iterator_syscode)
#define make_package_iterator_syscode_ _n(make_package_iterator_syscode_)
#define next_package_iterator_syscode_ _n(next_package_iterator_syscode_)
#define defpackage_syscode_ _n(defpackage_syscode_)
#define do_symbols_syscode_ _n(do_symbols_syscode_)
#define do_external_symbols_syscode_ _n(do_external_symbols_syscode_)
#define do_all_symbols_syscode_ _n(do_all_symbols_syscode_)
#define getdoc_variable_syscode _n(getdoc_variable_syscode)
#define setdoc_variable_syscode _n(setdoc_variable_syscode)
#define ecase_error_syscode_ _n(ecase_error_syscode_)
#define etypecase_error_syscode_ _n(etypecase_error_syscode_)
#define define_setf_expander_syscode_ _n(define_setf_expander_syscode_)
#define end_input_stream_syscode _n(end_input_stream_syscode)
#define make_extend_output_stream_syscode _n(make_extend_output_stream_syscode)
#define prompt_for_syscode_ _n(prompt_for_syscode_)
#define print_unreadable_call_syscode_ _n(print_unreadable_call_syscode_)
#define write_default_syscode_ _n(write_default_syscode_)
#define symbol_deftype_syscode _n(symbol_deftype_syscode)
#define delete_deftype_syscode _n(delete_deftype_syscode)
#define ensure_structure_syscode_ _n(ensure_structure_syscode_)
#define structure_constructor_syscode_ _n(structure_constructor_syscode_)
#define loop_bind_syscode_ _n(loop_bind_syscode_)
#define make_pprint_stream_syscode_ _n(make_pprint_stream_syscode_)
#define pprint_gensym_syscode_ _n(pprint_gensym_syscode_)
#define pprint_exit_syscode_ _n(pprint_exit_syscode_)
#define pprint_pop_syscode_ _n(pprint_pop_syscode_)
#define pprint_check_syscode_ _n(pprint_check_syscode_)
#define pprint_close_syscode_ _n(pprint_close_syscode_)
#define pprint_pretty_syscode_ _n(pprint_pretty_syscode_)
#define timeinfo_syscode_ _n(timeinfo_syscode_)
#define ed_function_syscode_ _n(ed_function_syscode_)
#define trace_add_syscode_ _n(trace_add_syscode_)
#define trace_del_syscode_ _n(trace_del_syscode_)
#define set_slots_syscode_ _n(set_slots_syscode_)
#define intern_eql_specializer_syscode_ _n(intern_eql_specializer_syscode_)
#define defgeneric_define_syscode_ _n(defgeneric_define_syscode_)
#define defgeneric_method_syscode_ _n(defgeneric_method_syscode_)
#define condition_restarts_push_syscode_ _n(condition_restarts_push_syscode_)
#define condition_restarts_pop_syscode_ _n(condition_restarts_pop_syscode_)
#define condition_restarts_make_syscode_ _n(condition_restarts_make_syscode_)
#define make_restart_syscode_ _n(make_restart_syscode_)

int defconstant_syscode_(addr symbol, addr value, addr doc);
int in_package_syscode_(Execute ptr, addr name, addr *ret);
void setplist_syscode(addr key, addr value, addr list, addr *ret);
int remplist_syscode_(addr key, addr list, addr *ret1, addr *ret2);
void make_hash_iterator_syscode(addr pos, addr *ret);
void next_hash_iterator_syscode(addr pos, addr *ret1, addr *ret2, addr *ret3);
int make_package_iterator_syscode_(addr pos, addr a, addr b, addr c, addr *ret);
int next_package_iterator_syscode_(Execute ptr, addr pos,
		addr *ret1, addr *ret2, addr *ret3, addr *ret4);
int defpackage_syscode_(Execute ptr, addr var, addr rest, addr *ret);
int do_symbols_syscode_(Execute ptr, addr call, addr package);
int do_external_symbols_syscode_(Execute ptr, addr call, addr package);
int do_all_symbols_syscode_(Execute ptr, addr call);
void getdoc_variable_syscode(addr var, addr *ret);
void setdoc_variable_syscode(addr var, addr value);
int ecase_error_syscode_(Execute ptr, addr value, addr list);
int etypecase_error_syscode_(Execute ptr, addr value, addr list);
int define_setf_expander_syscode_(addr symbol, addr call);
void end_input_stream_syscode(addr var, addr *ret);
void make_extend_output_stream_syscode(addr var, addr rest, addr *ret);
int prompt_for_syscode_(Execute ptr, addr type, addr args, addr *ret);
int print_unreadable_call_syscode_(Execute ptr,
		addr stream, addr pos, addr type, addr identity, addr body);
int write_default_syscode_(Execute ptr, addr stream, addr var, addr *ret);
void symbol_deftype_syscode(addr var, addr *ret);
void delete_deftype_syscode(addr var, addr *ret);
int ensure_structure_syscode_(Execute ptr, addr name, addr slots, addr rest);
int structure_constructor_syscode_(Execute ptr, addr symbol, addr rest, addr *ret);
int loop_bind_syscode_(Execute ptr, addr a, addr b, addr c, addr *ret);
int make_pprint_stream_syscode_(Execute ptr, addr *ret,
		addr stream, addr object, addr prefix, addr perline, addr suffix);
int pprint_gensym_syscode_(addr stream, addr *ret);
int pprint_exit_syscode_(Execute ptr, addr stream);
int pprint_pop_syscode_(Execute ptr, addr stream, addr *ret);
int pprint_check_syscode_(Execute ptr, addr stream);
int pprint_close_syscode_(Execute ptr, addr stream);
int pprint_pretty_syscode_(Execute ptr, addr stream, addr call);
int timeinfo_syscode_(LocalRoot local,
		addr *rreal, addr *rrun, addr *rsize, addr *rcount);
int ed_function_syscode_(Execute ptr, addr file);
int trace_add_syscode_(Execute ptr, addr var, addr *ret);
int trace_del_syscode_(Execute ptr, addr var, addr *ret);
int set_slots_syscode_(addr var, addr slots, addr values);
int intern_eql_specializer_syscode_(addr var, addr *ret);
int defgeneric_define_syscode_(Execute ptr, addr name, addr args, addr *ret);
int defgeneric_method_syscode_(addr inst, addr args);
int condition_restarts_push_syscode_(addr condition, addr restarts);
int condition_restarts_pop_syscode_(addr condition, addr restarts);
int condition_restarts_make_syscode_(Execute ptr, addr var, addr list, addr *ret);
int make_restart_syscode_(addr var, addr call, addr rest, addr *ret);

#endif


/************************************************************
 *  syscode_function.h
 ************************************************************/
#ifndef __SYSCODE_FUNCTION_HEADER__
#define __SYSCODE_FUNCTION_HEADER__


#define hello_syscode_ _n(hello_syscode_)
#define infobit_syscode _n(infobit_syscode)
#define infoprint_syscode _n(infoprint_syscode)
#define gc_syscode _n(gc_syscode)
#define savecore_syscode_ _n(savecore_syscode_)
#define loadcore_syscode_ _n(loadcore_syscode_)
#define package_export_list_syscode_ _n(package_export_list_syscode_)
#define specialp_syscode _n(specialp_syscode)
#define array_general_p_syscode _n(array_general_p_syscode)
#define array_specialized_p_syscode _n(array_specialized_p_syscode)
#define simple_sort_syscode_ _n(simple_sort_syscode_)
#define bubble_sort_syscode_ _n(bubble_sort_syscode_)
#define quick_sort_syscode_ _n(quick_sort_syscode_)
#define merge_sort_syscode_ _n(merge_sort_syscode_)
#define exit_syscode_ _n(exit_syscode_)
#define closp_syscode _n(closp_syscode)
#define fixnump_syscode _n(fixnump_syscode)
#define bignump_syscode _n(bignump_syscode)
#define ratiop_syscode _n(ratiop_syscode)
#define short_float_p_syscode _n(short_float_p_syscode)
#define single_float_p_syscode _n(single_float_p_syscode)
#define double_float_p_syscode _n(double_float_p_syscode)
#define long_float_p_syscode _n(long_float_p_syscode)
#define callnamep_syscall _n(callnamep_syscall)
#define large_number_syscode_ _n(large_number_syscode_)
#define make_character_syscode_ _n(make_character_syscode_)
#define make_fixnum_syscode_ _n(make_fixnum_syscode_)
#define make_bignum_syscode_ _n(make_bignum_syscode_)
#define make_ratio_syscode_ _n(make_ratio_syscode_)
#define make_complex_code_ _n(make_complex_code_)
#define equal_random_state_syscode _n(equal_random_state_syscode)
#define subtypep_extend_syscode_ _n(subtypep_extend_syscode_)
#define subtypep_number_syscode_ _n(subtypep_number_syscode_)
#define eastasian_set_syscode_ _n(eastasian_set_syscode_)
#define eastasian_get_syscode_ _n(eastasian_get_syscode_)
#define eastasian_width_syscode_ _n(eastasian_width_syscode_)
#define run_program_syscode_ _n(run_program_syscode_)
#define make_callname_syscode_ _n(make_callname_syscode_)
#define remove_file_syscode_ _n(remove_file_syscode_)
#define remove_directory_syscode_ _n(remove_directory_syscode_)
#define declare_parse_syscode_ _n(declare_parse_syscode_)
#define parse_type_syscode_ _n(parse_type_syscode_)
#define upgraded_open_element_type_syscode_ _n(upgraded_open_element_type_syscode_)
#define make_memory_input_stream_syscode_ _n(make_memory_input_stream_syscode_)
#define make_memory_output_stream_syscode_ _n(make_memory_output_stream_syscode_)
#define make_memory_io_stream_syscode_ _n(make_memory_io_stream_syscode_)
#define with_input_from_memory_syscode_ _n(with_input_from_memory_syscode_)
#define with_output_to_memory_syscode_ _n(with_output_to_memory_syscode_)
#define get_output_stream_memory_syscode_ _n(get_output_stream_memory_syscode_)
#define byte_integer_syscode_ _n(byte_integer_syscode_)
#define memory_stream_p_syscode _n(memory_stream_p_syscode)
#define setf_memory_stream_p_syscode_ _n(setf_memory_stream_p_syscode_)
#define sysctl_syscode_ _n(sysctl_syscode_)
#define terme_syscode_ _n(terme_syscode_)
#define fpclassify_syscode _n(fpclassify_syscode)
#define make_paper_syscode_ _n(make_paper_syscode_)
#define info_paper_syscode_ _n(info_paper_syscode_)
#define array_paper_syscode_ _n(array_paper_syscode_)
#define body_paper_syscode_ _n(body_paper_syscode_)
#define dlfile_syscode_ _n(dlfile_syscode_)
#define dlcall_syscode_ _n(dlcall_syscode_)

int hello_syscode_(Execute ptr);
void infobit_syscode(addr rest, addr *ret);
void infoprint_syscode(addr rest, addr *ret);
void gc_syscode(addr rest);
int savecore_syscode_(Execute ptr, addr output, addr rest);
int loadcore_syscode_(Execute ptr, addr input, addr rest);
int package_export_list_syscode_(addr var, addr *ret);
void specialp_syscode(addr var, addr *ret);
void array_general_p_syscode(addr var, addr *ret);
void array_specialized_p_syscode(addr var, addr *ret);
int simple_sort_syscode_(Execute ptr, addr pos, addr call, addr rest);
int bubble_sort_syscode_(Execute ptr, addr pos, addr call, addr rest);
int quick_sort_syscode_(Execute ptr, addr pos, addr call, addr rest);
int merge_sort_syscode_(Execute ptr, addr pos, addr call, addr rest);
int exit_syscode_(Execute ptr, addr code);
void closp_syscode(addr var, addr *ret);
void fixnump_syscode(addr var, addr *ret);
void bignump_syscode(addr var, addr *ret);
void ratiop_syscode(addr var, addr *ret);
void short_float_p_syscode(addr var, addr *ret);
void single_float_p_syscode(addr var, addr *ret);
void double_float_p_syscode(addr var, addr *ret);
void long_float_p_syscode(addr var, addr *ret);
void callnamep_syscall(addr var, addr *ret);
int large_number_syscode_(LocalRoot local, addr var, addr opt, addr *ret);
int make_character_syscode_(addr var, addr *ret);
int make_fixnum_syscode_(addr var, addr *ret);
int make_bignum_syscode_(addr var, addr *ret);
int make_ratio_syscode_(addr numer, addr denom, addr *ret);
int make_complex_code_(addr real, addr imag, addr *ret);
void equal_random_state_syscode(addr left, addr right, addr *ret);
int subtypep_extend_syscode_(Execute ptr,
		addr x, addr y, addr env, addr check, addr *ret);
int subtypep_number_syscode_(Execute ptr, addr x, addr *ret);
int eastasian_set_syscode_(addr var, addr value, addr errorp, addr *ret);
int eastasian_get_syscode_(addr var, addr *ret1, addr *ret2);
int eastasian_width_syscode_(addr pos, addr *ret1, addr *ret2);
int run_program_syscode_(Execute ptr, addr var, addr args, addr rest, addr *ret);
int make_callname_syscode_(addr var, addr *ret);
int remove_file_syscode_(Execute ptr, addr var, addr opt, addr *ret);
int remove_directory_syscode_(Execute ptr, addr var, addr opt, addr *ret);
int declare_parse_syscode_(addr form, addr *ret);
int parse_type_syscode_(Execute ptr, addr var, addr *ret);
int upgraded_open_element_type_syscode_(addr var, addr *ret);
int make_memory_input_stream_syscode_(addr var, addr rest, addr *ret);
int make_memory_output_stream_syscode_(addr rest, addr *ret);
int make_memory_io_stream_syscode_(addr rest, addr *ret);
int with_input_from_memory_syscode_(Execute ptr, addr form, addr *ret);
int with_output_to_memory_syscode_(Execute ptr, addr form, addr *ret);
int get_output_stream_memory_syscode_(addr var, addr *ret);
int byte_integer_syscode_(addr list, addr *ret);
void memory_stream_p_syscode(addr var, addr *ret);
int setf_memory_stream_p_syscode_(addr var, addr value);
int sysctl_syscode_(Execute ptr, addr var, addr args);
int terme_syscode_(Execute ptr, addr var, addr args);
void fpclassify_syscode(addr var, addr *rtype, addr *rsign);
int make_paper_syscode_(addr array, addr body, addr rest, addr *ret);
int info_paper_syscode_(addr pos, addr symbol, addr second, addr *ret);
int array_paper_syscode_(addr pos, addr index, addr value, addr *ret);
int body_paper_syscode_(addr pos, addr index, addr value, addr *ret);
int dlfile_syscode_(Execute ptr, addr type, addr args, addr *ret, addr *retp);
int dlcall_syscode_(Execute ptr, addr paper, addr args);

#endif


/************************************************************
 *  sysctl.h
 ************************************************************/
#ifndef __SYSCTL_HEADER__
#define __SYSCTL_HEADER__


#define sysctl_values_ _n(sysctl_values_)

int sysctl_values_(Execute ptr, addr pos, addr args);

#endif


/************************************************************
 *  terme_values.h
 ************************************************************/
#ifndef __TERME_VALUES_HEADER__
#define __TERME_VALUES_HEADER__


#define terme_values_ _n(terme_values_)

int terme_values_(Execute ptr, addr var, addr args);

#endif


/************************************************************
 *  terme_arch.h
 ************************************************************/
#ifndef __TERME_ARCH_HEADER__
#define __TERME_ARCH_HEADER__


#define terme_arch_init _n(terme_arch_init)
#define terme_arch_size_update _n(terme_arch_size_update)
#define terme_arch_size_get _n(terme_arch_size_get)
#define terme_arch_signal_p_ _n(terme_arch_signal_p_)
#define terme_arch_begin _n(terme_arch_begin)
#define terme_arch_end _n(terme_arch_end)
#define terme_arch_textmode _n(terme_arch_textmode)
#define terme_arch_rawmode _n(terme_arch_rawmode)
#define terme_arch_build _n(terme_arch_build)
#define terme_arch_select _n(terme_arch_select)
#define terme_arch_wait_integer _n(terme_arch_wait_integer)
#define terme_arch_wait_float _n(terme_arch_wait_float)
#define terme_arch_read _n(terme_arch_read)
#define terme_arch_write _n(terme_arch_write)
#define terme_arch_terminal_stop_ _n(terme_arch_terminal_stop_)
#define terme_arch_terminal_sigint_ _n(terme_arch_terminal_sigint_)
#define terme_arch_enable _n(terme_arch_enable)
#define terme_arch_escape_begin _n(terme_arch_escape_begin)
#define terme_arch_escape_end _n(terme_arch_escape_end)
#define text_color_arch_terme _n(text_color_arch_terme)
#define terme_arch_begin_default_ _n(terme_arch_begin_default_)
#define terme_arch_begin_rawmode_ _n(terme_arch_begin_rawmode_)
#define terme_arch_restore_ _n(terme_arch_restore_)

int terme_arch_init(void);
int terme_arch_size_update(void);
void terme_arch_size_get(unsigned *ret_x, unsigned *ret_y);
int terme_arch_signal_p_(int *ret);
int terme_arch_begin(void);
int terme_arch_end(void);
int terme_arch_textmode(int *ret);
int terme_arch_rawmode(int *ret);
void terme_arch_build(void);

int terme_arch_select(int *ret);
int terme_arch_wait_integer(int *ret, int value);
int terme_arch_wait_float(int *ret, double value);
int terme_arch_read(void *data, size_t size, size_t *ret);
int terme_arch_write(const void *data, size_t size, size_t *ret);
int terme_arch_terminal_stop_(void);
int terme_arch_terminal_sigint_(void);
int terme_arch_enable(void);
int terme_arch_escape_begin(void);
int terme_arch_escape_end(int *ret);

int text_color_arch_terme(Execute ptr, PrintColor value);

int terme_arch_begin_default_(addr *ret);
int terme_arch_begin_rawmode_(addr *ret);
int terme_arch_restore_(addr pos);

#endif


/************************************************************
 *  terme_data.h
 ************************************************************/
#ifndef __TERME_DATA_HEADER__
#define __TERME_DATA_HEADER__


#define terme_data_build _n(terme_data_build)
#define terme_data_clear_ _n(terme_data_clear_)
#define terme_data_insert_ _n(terme_data_insert_)
#define terme_data_next_ _n(terme_data_next_)
#define terme_data_push_ _n(terme_data_push_)
#define terme_data_make_ _n(terme_data_make_)
#define terme_data_copy_ _n(terme_data_copy_)
#define terme_data_size_ _n(terme_data_size_)

#define terme_data_get_value _n(terme_data_get_value)
#define terme_data_get_character_ _n(terme_data_get_character_)

#define terme_data_left_ _n(terme_data_left_)
#define terme_data_right_ _n(terme_data_right_)
#define terme_data_first_ _n(terme_data_first_)
#define terme_data_last_ _n(terme_data_last_)
#define terme_data_delete_ _n(terme_data_delete_)
#define terme_data_backspace_ _n(terme_data_backspace_)
#define terme_data_rmleft_ _n(terme_data_rmleft_)
#define terme_data_rmright_ _n(terme_data_rmright_)

void terme_data_build(addr *ret);
int terme_data_clear_(Execute ptr);
int terme_data_insert_(Execute ptr, unicode c, unsigned *rwidth, int *ret);
int terme_data_next_(Execute ptr);
int terme_data_push_(Execute ptr, unicode c, unsigned *rwidth, int *ret);
int terme_data_make_(Execute ptr, addr *ret, int eol);
int terme_data_copy_(Execute ptr, addr value);
int terme_data_size_(Execute ptr, unsigned *ret);

void terme_data_get_value(addr pos, unsigned *rnow, unsigned *rsize);
int terme_data_get_character_(addr pos, unsigned i, unicode *retc, unsigned *retw);

int terme_data_left_(Execute ptr, unsigned *ret);
int terme_data_right_(Execute ptr, unsigned *ret);
int terme_data_first_(Execute ptr);
int terme_data_last_(Execute ptr);
int terme_data_delete_(Execute ptr, int *ret);
int terme_data_backspace_(Execute ptr, unsigned *ret);
int terme_data_rmleft_(Execute ptr, int *ret);
int terme_data_rmright_(Execute ptr, int *ret);

#endif


/************************************************************
 *  terme_display.h
 ************************************************************/
#ifndef __TERME_DISPLAY_HEADER__
#define __TERME_DISPLAY_HEADER__


#define terme_display_build _n(terme_display_build)
#define terme_display_clear_ _n(terme_display_clear_)

#define terme_display_write_char_ _n(terme_display_write_char_)
#define terme_display_terpri_ _n(terme_display_terpri_)
#define terme_display_delete_line_right_ _n(terme_display_delete_line_right_)
#define terme_display_left_ _n(terme_display_left_)
#define terme_display_right_ _n(terme_display_right_)
#define terme_display_up_ _n(terme_display_up_)
#define terme_display_down_ _n(terme_display_down_)
#define terme_display_first_up_ _n(terme_display_first_up_)
#define terme_display_first_down_ _n(terme_display_first_down_)
#define terme_display_delete_line_ _n(terme_display_delete_line_)
#define terme_display_getwidth_ _n(terme_display_getwidth_)
#define terme_display_previous_ _n(terme_display_previous_)
#define terme_display_getlast_ _n(terme_display_getlast_)
#define terme_display_delete_page_ _n(terme_display_delete_page_)
#define terme_display_restore_ _n(terme_display_restore_)

void terme_display_build(addr *ret);
int terme_display_clear_(Execute ptr);

int terme_display_write_char_(Execute ptr, unicode c, unsigned width, PromptMode mode);
int terme_display_terpri_(Execute ptr);
int terme_display_delete_line_right_(Execute ptr);
int terme_display_left_(Execute ptr, int n);
int terme_display_right_(Execute ptr, int n);
int terme_display_up_(Execute ptr, int n);
int terme_display_down_(Execute ptr, int n);
int terme_display_first_up_(Execute ptr, int n);
int terme_display_first_down_(Execute ptr, int n);
int terme_display_delete_line_(Execute ptr);
int terme_display_getwidth_(Execute ptr, unsigned *ret);
int terme_display_previous_(Execute ptr, int *ret);
int terme_display_getlast_(Execute ptr, unsigned *ret);
int terme_display_delete_page_(Execute ptr);
int terme_display_restore_(Execute ptr, unsigned *rx, unsigned *ry);

#endif


/************************************************************
 *  terme_function.h
 ************************************************************/
#ifndef __TERME_FUNCTION_HEADER__
#define __TERME_FUNCTION_HEADER__


#define terme_call_enable_p _n(terme_call_enable_p)
#define terme_call_input_ _n(terme_call_input_)
#define terme_call_output_ _n(terme_call_output_)
#define terme_call_move_ _n(terme_call_move_)
#define terme_call_clear_ _n(terme_call_clear_)
#define terme_call_delete_ _n(terme_call_delete_)
#define terme_call_font_ _n(terme_call_font_)
#define terme_call_size_ _n(terme_call_size_)
#define terme_call_scroll_ _n(terme_call_scroll_)
#define terme_call_begin_ _n(terme_call_begin_)
#define terme_call_end_ _n(terme_call_end_)
#define terme_call_signal_ _n(terme_call_signal_)

int terme_call_enable_p(void);
int terme_call_input_(addr args, addr *rtype, addr *rvalue);
int terme_call_output_(addr args);
int terme_call_move_(addr args);
int terme_call_clear_(addr args);
int terme_call_delete_(addr args);
int terme_call_font_(Execute ptr, addr args);
int terme_call_size_(addr *rx, addr *ry);
int terme_call_scroll_(addr args);
int terme_call_begin_(addr args, addr *ret);
int terme_call_end_(addr pos);
int terme_call_signal_(addr args);

#endif


/************************************************************
 *  terme_history.h
 ************************************************************/
#ifndef __TERME_HISTORY_HEADER__
#define __TERME_HISTORY_HEADER__


#define terme_history_build _n(terme_history_build)
#define terme_history_clear_ _n(terme_history_clear_)
#define terme_history_return_ _n(terme_history_return_)
#define terme_history_select_ _n(terme_history_select_)

void terme_history_build(addr *ret);
int terme_history_clear_(Execute ptr);
int terme_history_return_(Execute ptr);
int terme_history_select_(Execute ptr, int diff, int *ret);

#endif


/************************************************************
 *  terme_input.h
 ************************************************************/
#ifndef __TERME_INPUT_HEADER__
#define __TERME_INPUT_HEADER__


#define terme_input_init _n(terme_input_init)
#define terme_input_clear _n(terme_input_clear)
#define terme_table_infinite _n(terme_table_infinite)
#define terme_input_infinite _n(terme_input_infinite)
#define terme_input_integer _n(terme_input_integer)
#define terme_input_float _n(terme_input_float)

enum terme_escape {
	terme_escape_error,
	terme_escape_ignore,
	terme_escape_signal,
	terme_escape_hang,
	terme_escape_code,
	terme_escape_up,         /* ^P */
	terme_escape_down,       /* ^N */
	terme_escape_left,       /* ^F */
	terme_escape_right,      /* ^B */
	terme_escape_page_up,    /* [Page Up] */
	terme_escape_page_down,  /* [Page Down] */
	terme_escape_home,       /* [Home] */
	terme_escape_end,        /* [End] */
	terme_escape_insert,     /* [Insert] */
	terme_escape_function,   /* Fx, PFx */
	terme_escape_return,     /* ^J, ^M, Enter */
	terme_escape_backspace,  /* ^H, BS */
	terme_escape_first,      /* ^A */
	terme_escape_last,       /* ^E */
	terme_escape_update,     /* ^L */
	terme_escape_refresh,    /* ^]  (debug) */
	terme_escape_delete,     /* ^D */
	terme_escape_rmleft,     /* ^U */
	terme_escape_rmright,    /* ^K */
	terme_escape_tabular,    /* ^I */
	terme_escape_search,     /* ^R */
	terme_escape_escape,     /* ^[ */
	terme_escape_size
};
typedef enum terme_escape TermeEscape;

struct terme_keyboard {
	TermeEscape type;
	unicode c;
};
typedef struct terme_keyboard TermeKeyboard;

void terme_input_init(void);
int terme_input_clear(void);
void terme_table_infinite(TermeKeyboard *ret);
void terme_input_infinite(addr *rtype, addr *rvalue);
void terme_input_integer(int wait, addr *rtype, addr *rvalue);
void terme_input_float(double wait, addr *rtype, addr *rvalue);

#endif


/************************************************************
 *  terme_object.h
 ************************************************************/
#ifndef __TERME_OBJECT_HEADER__
#define __TERME_OBJECT_HEADER__


#define terme_pointer _n(terme_pointer)
#define terme_get _n(terme_get)
#define terme_set _n(terme_set)
#define terme_get_type _n(terme_get_type)
#define terme_set_type _n(terme_set_type)
#define termep _n(termep)
#define terme_root_p _n(terme_root_p)
#define terme_data_p _n(terme_data_p)
#define terme_string_p _n(terme_string_p)
#define terme_screen_p _n(terme_screen_p)
#define terme_display_p _n(terme_display_p)
#define terme_line_p _n(terme_line_p)
#define terme_history_p _n(terme_history_p)
#define terme_root_build _n(terme_root_build)
#define terme_root_data_ _n(terme_root_data_)
#define terme_root_screen_ _n(terme_root_screen_)
#define terme_root_display_ _n(terme_root_display_)
#define terme_root_history_ _n(terme_root_history_)

#define terme_prompt_set_ _n(terme_prompt_set_)
#define terme_prompt_get_ _n(terme_prompt_get_)

enum terme_root_index {
	terme_root_prompt,
	terme_root_data,
	terme_root_screen,
	terme_root_display,
	terme_root_history,
	terme_root_size
};

enum terme_type {
	terme_type_root,
	terme_type_data,
	terme_type_string,
	terme_type_screen,
	terme_type_display,
	terme_type_line,
	terme_type_history,
	terme_type_size
};

byte *terme_pointer(addr pos);
void terme_get(addr pos, size_t index, addr *ret);
void terme_set(addr pos, size_t index, addr value);
enum terme_type terme_get_type(addr pos);
void terme_set_type(addr pos, enum terme_type type);
int termep(addr pos);
int terme_root_p(addr pos);
int terme_data_p(addr pos);
int terme_string_p(addr pos);
int terme_screen_p(addr pos);
int terme_display_p(addr pos);
int terme_line_p(addr pos);
int terme_history_p(addr pos);
void terme_root_build(addr *ret);
int terme_root_data_(Execute ptr, addr *ret);
int terme_root_screen_(Execute ptr, addr *ret);
int terme_root_display_(Execute ptr, addr *ret);
int terme_root_history_(Execute ptr, addr *ret);

int terme_prompt_set_(Execute ptr, addr value, enum prompt_mode mode);
int terme_prompt_get_(Execute ptr, addr *value, enum prompt_mode *mode);

#endif


/************************************************************
 *  terme_output.h
 ************************************************************/
#ifndef __TERME_OUTPUT_HEADER__
#define __TERME_OUTPUT_HEADER__


#define terme_output_init _n(terme_output_init)
#define terme_finish_output _n(terme_finish_output)
#define terme_clear_output _n(terme_clear_output)
#define terme_write_byte _n(terme_write_byte)
#define terme_write_char _n(terme_write_char)
#define terme_output_char _n(terme_output_char)
#define terme_terpri _n(terme_terpri)
#define terme_fresh_line _n(terme_fresh_line)

void terme_output_init(void);
int terme_finish_output(void);
void terme_clear_output(void);
int terme_write_byte(byte c);
int terme_write_char(unicode c, unsigned width);
int terme_output_char(unicode c);
int terme_terpri(void);
int terme_fresh_line(void);

#endif


/************************************************************
 *  terme_prompt.h
 ************************************************************/
#ifndef __TERME_PROMPT_HEADER__
#define __TERME_PROMPT_HEADER__


#define terme_readline_ _n(terme_readline_)

int terme_readline_(Execute ptr, addr *ret);

#endif


/************************************************************
 *  terme_screen.h
 ************************************************************/
#ifndef __TERME_SCREEN_HEADER__
#define __TERME_SCREEN_HEADER__


#define terme_screen_build _n(terme_screen_build)
#define terme_screen_clear_ _n(terme_screen_clear_)
#define terme_screen_prompt_ _n(terme_screen_prompt_)
#define terme_screen_push_ _n(terme_screen_push_)
#define terme_screen_history_ _n(terme_screen_history_)
#define terme_screen_left_ _n(terme_screen_left_)
#define terme_screen_right_ _n(terme_screen_right_)
#define terme_screen_delete_ _n(terme_screen_delete_)
#define terme_screen_backspace_ _n(terme_screen_backspace_)
#define terme_screen_first_ _n(terme_screen_first_)
#define terme_screen_last_ _n(terme_screen_last_)
#define terme_screen_update_ _n(terme_screen_update_)
#define terme_screen_refresh_ _n(terme_screen_refresh_)
#define terme_screen_rmleft_ _n(terme_screen_rmleft_)
#define terme_screen_rmright_ _n(terme_screen_rmright_)

void terme_screen_build(addr *ret);
int terme_screen_clear_(Execute ptr);
int terme_screen_prompt_(Execute ptr);
int terme_screen_push_(Execute ptr);
int terme_screen_history_(Execute ptr);
int terme_screen_left_(Execute ptr, unsigned width);
int terme_screen_right_(Execute ptr, unsigned width);
int terme_screen_delete_(Execute ptr);
int terme_screen_backspace_(Execute ptr, unsigned width);
int terme_screen_first_(Execute ptr);
int terme_screen_last_(Execute ptr);
int terme_screen_update_(Execute ptr);
int terme_screen_refresh_(Execute ptr);
int terme_screen_rmleft_(Execute ptr);
int terme_screen_rmright_(Execute ptr);

#endif


/************************************************************
 *  terme_escape.h
 ************************************************************/
#ifndef __TERME_ESCAPE_HEADER__
#define __TERME_ESCAPE_HEADER__


#define terme_font _n(terme_font)
#define terme_text_color _n(terme_text_color)
#define terme_back_color _n(terme_back_color)
#define terme_cursor_left _n(terme_cursor_left)
#define terme_cursor_right _n(terme_cursor_right)
#define terme_cursor_up _n(terme_cursor_up)
#define terme_cursor_down _n(terme_cursor_down)
#define terme_cursor_move_x _n(terme_cursor_move_x)
#define terme_cursor_move _n(terme_cursor_move)
#define terme_cursor_first_up _n(terme_cursor_first_up)
#define terme_cursor_first_down _n(terme_cursor_first_down)
#define terme_cursor_delete_line_left _n(terme_cursor_delete_line_left)
#define terme_cursor_delete_line_right _n(terme_cursor_delete_line_right)
#define terme_cursor_delete_line _n(terme_cursor_delete_line)
#define terme_cursor_delete_page_left _n(terme_cursor_delete_page_left)
#define terme_cursor_delete_page_right _n(terme_cursor_delete_page_right)
#define terme_cursor_delete_page _n(terme_cursor_delete_page)
#define terme_cursor_scroll_up _n(terme_cursor_scroll_up)
#define terme_cursor_scroll_down _n(terme_cursor_scroll_down)
#define terme_color_symbol_ _n(terme_color_symbol_)
#define terme_color_not_symbol_ _n(terme_color_not_symbol_)
#define terme_color_dark_ _n(terme_color_dark_)
#define terme_color_bright_ _n(terme_color_bright_)
#define terme_font_parser_ _n(terme_font_parser_)
#define terme_font_update_ _n(terme_font_update_)

int terme_font(Execute ptr, PrintFont value);
int terme_text_color(Execute ptr, PrintColor value);
int terme_back_color(Execute ptr, PrintColor value);
int terme_cursor_left(int n);
int terme_cursor_right(int n);
int terme_cursor_up(int n);
int terme_cursor_down(int n);
int terme_cursor_move_x(int x);
int terme_cursor_move(int x, int y);
int terme_cursor_first_up(int n);
int terme_cursor_first_down(int n);
int terme_cursor_delete_line_left(void);
int terme_cursor_delete_line_right(void);
int terme_cursor_delete_line(void);
int terme_cursor_delete_page_left(void);
int terme_cursor_delete_page_right(void);
int terme_cursor_delete_page(void);
int terme_cursor_scroll_up(int n);
int terme_cursor_scroll_down(int n);
int terme_color_symbol_(Execute ptr, addr pos, int *ret, int *brightp);
int terme_color_not_symbol_(Execute ptr, addr pos, int *ret, int *brightp);
int terme_color_dark_(addr pos, int *ret);
int terme_color_bright_(addr pos, int *ret);
int terme_font_parser_(addr args);
int terme_font_update_(Execute ptr, addr args);

#endif


/************************************************************
 *  terme_error.h
 ************************************************************/
#ifndef __TERME_ERROR_HEADER__
#define __TERME_ERROR_HEADER__


#define terme_fmte_ _n(terme_fmte_)

int terme_fmte_(const char *str, ...);

#endif


/************************************************************
 *  terme_write.h
 ************************************************************/
#ifndef __TERME_WRITE_HEADER__
#define __TERME_WRITE_HEADER__


#define terme_write_flush_ _n(terme_write_flush_)
#define terme_write_char_ _n(terme_write_char_)
#define terme_write_terpri_ _n(terme_write_terpri_)
#define terme_write_delete_line_right_ _n(terme_write_delete_line_right_)
#define terme_write_left_ _n(terme_write_left_)
#define terme_write_right_ _n(terme_write_right_)
#define terme_write_up_ _n(terme_write_up_)
#define terme_write_down_ _n(terme_write_down_)
#define terme_write_first_up_ _n(terme_write_first_up_)
#define terme_write_first_down_ _n(terme_write_first_down_)
#define terme_write_delete_line_ _n(terme_write_delete_line_)
#define terme_write_delete_page_ _n(terme_write_delete_page_)

int terme_write_flush_(void);
int terme_write_char_(Execute ptr, unicode c, unsigned width, PromptMode mode);
int terme_write_terpri_(Execute ptr);
int terme_write_delete_line_right_(Execute ptr);
int terme_write_left_(Execute ptr, int n);
int terme_write_right_(Execute ptr, int n);
int terme_write_up_(Execute ptr, int n);
int terme_write_down_(Execute ptr, int n);
int terme_write_first_up_(Execute ptr, int n);
int terme_write_first_down_(Execute ptr, int n);
int terme_write_delete_line_(Execute ptr);
int terme_write_delete_page_(Execute ptr);

#endif


/************************************************************
 *  type_call.h
 ************************************************************/
#ifndef __TYPE_CALL_HEADER__
#define __TYPE_CALL_HEADER__


#define typep_function_ _n(typep_function_)
#define typep_compiled_function_ _n(typep_compiled_function_)

int typep_function_(Execute ptr, addr value, addr type, int *ret);
int typep_compiled_function_(Execute ptr, addr value, addr type, int *ret);

#endif

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic pop
#endif
